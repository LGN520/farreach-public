#! /usr/bin/python3

# Copyright (c) 2010, 2011, 2012, 2013, 2014, 2015, 2016 Nicira, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at:
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import getopt
import sys
import xml.dom.minidom

import build.nroff

argv0 = sys.argv[0]


def usage():
    print("""\
%(argv0)s: XML to nroff converter
Converts the XML format supplied as input into an nroff-formatted manpage.
usage: %(argv0)s [OPTIONS] INPUT.XML [VAR=VALUE]...
where INPUT.XML is a manpage in an OVS-specific XML format.

Each VAR, when enclosed by "@"s in the input, is replaced by its
corresponding VALUE, with characters &<>"' in VALUE escaped.

The following options are also available:
  -I, --include=DIR           search DIR for include files (default: .)
  --version=VERSION           use VERSION to display on document footer
  -h, --help                  display this help message\
""" % {'argv0': argv0})
    sys.exit(0)


def manpage_to_nroff(xml_file, subst, include_path, version=None):
    with open(xml_file) as f:
        content = f.read()
    for k, v in subst.items():
        content = content.replace(k, v)
    doc = xml.dom.minidom.parseString(content).documentElement

    xi_nodes = doc.getElementsByTagName("xi:include")
    for node in xi_nodes:
        fn = node.getAttribute("href")
        content = None
        for dir in include_path:
            try:
                with open("%s/%s" % (dir, fn)) as xi_f:
                    content = xi_f.read()
            except IOError:
                pass
        if not content:
            sys.stderr.write("%s: could not open include file %s\n"
                             % (argv0, fn))
            sys.exit(1)
        for k, v in subst.items():
            content = content.replace(k, v)
        xi_doc = xml.dom.minidom.parseString(content).documentElement
        doc.replaceChild(xi_doc, node)

    if version is None:
        version = "UNKNOWN"
    program = doc.attributes['program'].nodeValue
    title = doc.attributes['title'].nodeValue
    section = doc.attributes['section'].nodeValue

    # Putting '\" p as the first line tells "man" that the manpage
    # needs to be preprocessed by "pic".
    s = r''''\" p
.\" -*- nroff -*-
.TH "%s" %s "%s" "Open vSwitch %s" "Open vSwitch Manual"
.fp 5 L CR              \\" Make fixed-width font available as \\fL.
.de TQ
.  br
.  ns
.  TP "\\$1"
..
.de ST
.  PP
.  RS -0.15in
.  I "\\$1"
.  RE
..
''' % (build.nroff.text_to_nroff(program), build.nroff.text_to_nroff(section),
       build.nroff.text_to_nroff(title), build.nroff.text_to_nroff(version))

    s += build.nroff.block_xml_to_nroff(doc.childNodes) + "\n"

    return s


if __name__ == "__main__":
    try:
        options, args = getopt.gnu_getopt(sys.argv[1:], 'hVI:',
                                          ['version=', 'help', 'include='])
    except getopt.GetoptError as geo:
        sys.stderr.write("%s: %s\n" % (argv0, geo.msg))
        sys.exit(1)

    er_diagram = None
    title = None
    version = None
    include_path = []
    for key, value in options:
        if key == '--version':
            version = value
        elif key in ['-h', '--help']:
            usage()
        elif key in ['-I', '--include']:
            include_path.append(value)
        else:
            sys.exit(0)
    if not include_path:
        include_path = ['.']

    if len(args) < 1:
        sys.stderr.write("%s: exactly 1 non-option arguments required "
                         "(use --help for help)\n" % argv0)
        sys.exit(1)

    subst = {}
    for s in args[1:]:
        var, value = s.split('=', 1)
        value = value.replace('&', '&amp;')
        value = value.replace('<', '&lt;')
        value = value.replace('>', '&gt;')
        value = value.replace('"', '&quot;')
        value = value.replace("'", '&apos;')
        subst['@%s@' % var] = value

    try:
        s = manpage_to_nroff(args[0], subst, include_path, version)
    except build.nroff.error.Error as e:
        sys.stderr.write("%s: %s\n" % (argv0, e.msg))
        sys.exit(1)
    for line in s.splitlines():
        line = line.strip()
        if line:
            print(line)


# Local variables:
# mode: python
# End:
