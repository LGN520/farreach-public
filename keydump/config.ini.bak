[global]
; workload_name=valuesize-16
; workload_name=synthetic-75
; workload_name=skewness-95
workload_name=workload-load
; workload_mode: 0 - static mode; 1 - dynamic mode
workload_mode=0
; 6*10 seconds
dynamic_periodnum=7
dynamic_periodinterval=10
; dynamicrules/synthetic-hotin.out{1, 2, ..., period_num}
dynamic_ruleprefix=hotin
; max # of bytes in each value
max_vallen=128
; data size of each batch when reading files to load workload
load_batch_size=10000
; # of physical clients (update MAT size correspondingly)
client_physical_num=1
; # of physical servers (update MAT size correspondingly)
server_physical_num=2
; total # of client threads
; client_total_logical_num=128
client_total_logical_num=4
; total # of server threads (all server logical idxes must < server_total_logical_num)
; change MAX_SERVER_NUM in tofino/netbufferv4.p4 if necessary
server_total_logical_num=2
; only used by remote_client for server rotation under static workload
; server_total_logical_num_for_rotation=128
server_total_logical_num_for_rotation=16
; bottleneck server logical idx (bottleneck partition) for server rotation (change test_server_rotation.sh accordingly)
bottleneck_serveridx_for_rotation=2

[client]
; a single port (the first physical client uses the port the receive rotation data from other physical clients)
client_rotationdataserver_port=1025
; [client_sendpktserver_port_start, client_sendpktserver_port_start + client_physical_num - 1]
; NOTE: launch other physical clients first; after they are waiting for can_sendpkt, launch the first physical client (client 0) to tell them that they can send pkt at the same time
client_sendpktserver_port_start=1026
; [client_rulemapserver_port_start, client_rulemapserver_port_start + client_physical_num - 1]
; non-first physical clients wait for commands from the first physical client to switch dynamic rulemap to simulate key popularity change
client_rulemapserver_port_start=1036
; [client_worker_port_start, client_worker_port_start + local client logical num - 1]
client_worker_port_start=8888

[client0]
; client thread num for transaction phase in remote client
; client_logical_num=64
client_logical_num=4
; dl11 -> bf1 (dpdk interface)
client_ip=10.0.1.1
client_mac=00:00:0a:00:01:01
client_fpport=1/0
client_pipeidx=1
client_ip_for_client0=192.168.1.1

[client1]
; client thread num for transaction phase in remote client
; client_logical_num=64
client_logical_num=1
; dl15 -> bf1 (dpdk interface)
client_ip=10.0.1.2
client_mac=00:00:0a:00:01:02
client_fpport=2/0
client_pipeidx=0
client_ip_for_client0=192.168.1.2

; common configuration of all physical servers
[server]
; # of loading threads for per-server db (not used in ycsb benchmark)
server_load_factor=5
; [server_worker_port_start, server_worker_port_start + local server logical num - 1]
; reserve 1152 (0x480) ~ 1279 (0x4FF), which & 0xF80 = 0x480, for logical server simulation per physical server
; NOTE: update p4src/parser accordingly
server_worker_port_start=1152
; [server_evictserver_port_start, server_evictserver_port_start + max global server logical idx]
server_evictserver_port_start=2222
; [server_snapshotserver_port_start, server_snapshotserver_port_start + max global server logical idx]
server_snapshotserver_port_start=3333
; [server_snapshotdataserver_port_start, server_snapshotdataserver_port_start + max global server logical idx]
server_snapshotdataserver_port_start=4444
; a single port
transaction_loadfinishserver_port=8000

[server0]
; # of cores used by server.workers, which must <= server_total_corenum but >= # of server_logical_idxes
; NOTE: if # of server_logical_idxes > server_worker_corenum, we report a warning and bind extra server threads to the limited server_cores circularly
; server_worker_corenum=16
; server_total_corenum=48
server_worker_corenum=8
server_total_corenum=9
; all global server logical idxes must < max_server_thread_num
server_logical_idxes=0
; dl13 -> bf1 (dpdk interface)
server_ip=10.0.1.3
server_mac=00:00:0a:00:01:03
server_fpport=3/0
server_pipeidx=1
; NOTE: not use the NIC corresponding to dpdk interface of server
server_ip_for_controller=10.0.1.3

[server1]
; # of cores used by server.workers, which must <= server_total_corenum but >= # of server_logical_idxes
; NOTE: if # of server_logical_idxes > server_worker_corenum, we report a warning and bind extra server threads to the limited server_cores circularly
; server_worker_corenum=16
; server_total_corenum=72
server_worker_corenum=8
server_total_corenum=9
; all global server logical idxes must < max_server_thread_num
server_logical_idxes=1
; dl16 -> bf1 (dpdk interface)
server_ip=10.0.1.4
server_mac=00:00:0a:00:01:04
server_fpport=4/0
server_pipeidx=1
; NOTE: not use the NIC corresponding to dpdk interface of server
server_ip_for_controller=10.0.1.4

[controller]
controller_ip_for_server=10.0.1.3
controller_ip_for_switchos=10.0.1.3
; [controller_popserver_port_start, controller_popserver_port_start + max serveridx]
controller_popserver_port_start=5555
; a single port
controller_evictserver_port=5002
; unit: ms
controller_snapshot_period=10000
; a single port
controller_warmupfinishserver_port=5010

[switch]
; hash partition range / virtual partition num
; change PARTITION_COUNT in tofino/netbufferv4.p4 accordingly (only for hash partition)
switch_partition_count=32768
; change KV_BUCKET_COUNT in tofino/netbufferv4.p4 accordingly (one stage can hold at most 32700 instead of 32768)
;switch_kv_bucket_num=32700
switch_kv_bucket_num=10000
; max # of pipelines in switch
switch_pipeline_num=2
; max # of bytes supported in switch (8B aligned)
switch_max_vallen=128
switchos_ip=10.0.1.254
switchos_sample_cnt=10
; a single port
switchos_popserver_port=5003
; a single port
switchos_snapshotserver_port=5004
; a single port
switchos_specialcaseserver_port=5005
; a single port
switchos_ptf_popserver_port=5006
; a single port
switchos_ptf_snapshotserver_port=5007

; NOTE: we place reflector at the first physical server
[reflector]
reflector_ip_for_switchos=10.0.1.3
; a single port (NOTE: udpate p4src/parser.p4 accordingly)
reflector_dp2cpserver_port=5008
; a single port (NOTE: udpate p4src/parser.p4 accordingly)
reflector_cp2dpserver_port=5009
