/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "p4_pd_rpc_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace p4_pd_rpc {

int _knetbufferv4_lpf_typeValues[] = {
  netbufferv4_lpf_type::TYPE_RATE,
  netbufferv4_lpf_type::TYPE_SAMPLE
};
const char* _knetbufferv4_lpf_typeNames[] = {
  "TYPE_RATE",
  "TYPE_SAMPLE"
};
const std::map<int, const char*> _netbufferv4_lpf_type_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _knetbufferv4_lpf_typeValues, _knetbufferv4_lpf_typeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _knetbufferv4_idle_time_modeValues[] = {
  netbufferv4_idle_time_mode::POLL_MODE,
  netbufferv4_idle_time_mode::NOTIFY_MODE,
  netbufferv4_idle_time_mode::INVALID_MODE
};
const char* _knetbufferv4_idle_time_modeNames[] = {
  "POLL_MODE",
  "NOTIFY_MODE",
  "INVALID_MODE"
};
const std::map<int, const char*> _netbufferv4_idle_time_mode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _knetbufferv4_idle_time_modeValues, _knetbufferv4_idle_time_modeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _knetbufferv4_idle_time_hit_stateValues[] = {
  netbufferv4_idle_time_hit_state::ENTRY_IDLE,
  netbufferv4_idle_time_hit_state::ENTRY_ACTIVE
};
const char* _knetbufferv4_idle_time_hit_stateNames[] = {
  "ENTRY_IDLE",
  "ENTRY_ACTIVE"
};
const std::map<int, const char*> _netbufferv4_idle_time_hit_state_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _knetbufferv4_idle_time_hit_stateValues, _knetbufferv4_idle_time_hit_stateNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _knetbufferv4_grp_mbr_stateValues[] = {
  netbufferv4_grp_mbr_state::MBR_ACTIVE,
  netbufferv4_grp_mbr_state::MBR_INACTIVE
};
const char* _knetbufferv4_grp_mbr_stateNames[] = {
  "MBR_ACTIVE",
  "MBR_INACTIVE"
};
const std::map<int, const char*> _netbufferv4_grp_mbr_state_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _knetbufferv4_grp_mbr_stateValues, _knetbufferv4_grp_mbr_stateNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _ktbl_property_tValues[] = {
  tbl_property_t::TBL_PROP_TBL_ENTRY_SCOPE,
  tbl_property_t::TBL_PROP_TERN_TABLE_ENTRY_PLACEMENT,
  tbl_property_t::TBL_PROP_DUPLICATE_ENTRY_CHECK,
  tbl_property_t::TBL_PROP_IDLETIME_REPEATED_NOTIFICATION
};
const char* _ktbl_property_tNames[] = {
  "TBL_PROP_TBL_ENTRY_SCOPE",
  "TBL_PROP_TERN_TABLE_ENTRY_PLACEMENT",
  "TBL_PROP_DUPLICATE_ENTRY_CHECK",
  "TBL_PROP_IDLETIME_REPEATED_NOTIFICATION"
};
const std::map<int, const char*> _tbl_property_t_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _ktbl_property_tValues, _ktbl_property_tNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _ktbl_property_value_tValues[] = {
  tbl_property_value_t::ENTRY_SCOPE_ALL_PIPELINES,
  tbl_property_value_t::ENTRY_SCOPE_SINGLE_PIPELINE,
  tbl_property_value_t::ENTRY_SCOPE_USER_DEFINED,
  tbl_property_value_t::TERN_ENTRY_PLACEMENT_DRV_MANAGED,
  tbl_property_value_t::TERN_ENTRY_PLACEMENT_APP_MANAGED,
  tbl_property_value_t::DUPLICATE_ENTRY_CHECK_DISABLE,
  tbl_property_value_t::DUPLICATE_ENTRY_CHECK_ENABLE,
  tbl_property_value_t::IDLETIME_REPEATED_NOTIFICATION_DISABLE,
  tbl_property_value_t::IDLETIME_REPEATED_NOTIFICATION_ENABLE
};
const char* _ktbl_property_value_tNames[] = {
  "ENTRY_SCOPE_ALL_PIPELINES",
  "ENTRY_SCOPE_SINGLE_PIPELINE",
  "ENTRY_SCOPE_USER_DEFINED",
  "TERN_ENTRY_PLACEMENT_DRV_MANAGED",
  "TERN_ENTRY_PLACEMENT_APP_MANAGED",
  "DUPLICATE_ENTRY_CHECK_DISABLE",
  "DUPLICATE_ENTRY_CHECK_ENABLE",
  "IDLETIME_REPEATED_NOTIFICATION_DISABLE",
  "IDLETIME_REPEATED_NOTIFICATION_ENABLE"
};
const std::map<int, const char*> _tbl_property_value_t_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(9, _ktbl_property_value_tValues, _ktbl_property_value_tNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kpvs_gress_tValues[] = {
  pvs_gress_t::PVS_GRESS_INGRESS,
  pvs_gress_t::PVS_GRESS_EGRESS,
  pvs_gress_t::PVS_GRESS_ALL
};
const char* _kpvs_gress_tNames[] = {
  "PVS_GRESS_INGRESS",
  "PVS_GRESS_EGRESS",
  "PVS_GRESS_ALL"
};
const std::map<int, const char*> _pvs_gress_t_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kpvs_gress_tValues, _kpvs_gress_tNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kpvs_property_tValues[] = {
  pvs_property_t::PVS_PROP_NONE,
  pvs_property_t::PVS_GRESS_SCOPE,
  pvs_property_t::PVS_PIPE_SCOPE,
  pvs_property_t::PVS_PARSER_SCOPE
};
const char* _kpvs_property_tNames[] = {
  "PVS_PROP_NONE",
  "PVS_GRESS_SCOPE",
  "PVS_PIPE_SCOPE",
  "PVS_PARSER_SCOPE"
};
const std::map<int, const char*> _pvs_property_t_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kpvs_property_tValues, _kpvs_property_tNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kpvs_property_value_tValues[] = {
  pvs_property_value_t::PVS_SCOPE_ALL_GRESS,
  pvs_property_value_t::PVS_SCOPE_SINGLE_GRESS,
  pvs_property_value_t::PVS_SCOPE_ALL_PIPELINES,
  pvs_property_value_t::PVS_SCOPE_SINGLE_PIPELINE,
  pvs_property_value_t::PVS_SCOPE_ALL_PARSERS,
  pvs_property_value_t::PVS_SCOPE_SINGLE_PARSER
};
const char* _kpvs_property_value_tNames[] = {
  "PVS_SCOPE_ALL_GRESS",
  "PVS_SCOPE_SINGLE_GRESS",
  "PVS_SCOPE_ALL_PIPELINES",
  "PVS_SCOPE_SINGLE_PIPELINE",
  "PVS_SCOPE_ALL_PARSERS",
  "PVS_SCOPE_SINGLE_PARSER"
};
const std::map<int, const char*> _pvs_property_value_t_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kpvs_property_value_tValues, _kpvs_property_value_tNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _ktbl_dbg_counter_type_tValues[] = {
  tbl_dbg_counter_type_t::TBL_DBG_CNTR_DISABLED,
  tbl_dbg_counter_type_t::TBL_DBG_CNTR_LOG_TBL_MISS,
  tbl_dbg_counter_type_t::TBL_DBG_CNTR_LOG_TBL_HIT,
  tbl_dbg_counter_type_t::TBL_DBG_CNTR_GW_TBL_MISS,
  tbl_dbg_counter_type_t::TBL_DBG_CNTR_GW_TBL_HIT,
  tbl_dbg_counter_type_t::TBL_DBG_CNTR_GW_TBL_INHIBIT,
  tbl_dbg_counter_type_t::TBL_DBG_CNTR_MAX
};
const char* _ktbl_dbg_counter_type_tNames[] = {
  "TBL_DBG_CNTR_DISABLED",
  "TBL_DBG_CNTR_LOG_TBL_MISS",
  "TBL_DBG_CNTR_LOG_TBL_HIT",
  "TBL_DBG_CNTR_GW_TBL_MISS",
  "TBL_DBG_CNTR_GW_TBL_HIT",
  "TBL_DBG_CNTR_GW_TBL_INHIBIT",
  "TBL_DBG_CNTR_MAX"
};
const std::map<int, const char*> _tbl_dbg_counter_type_t_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _ktbl_dbg_counter_type_tValues, _ktbl_dbg_counter_type_tNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _knetbufferv4_input_field_attr_type_tValues[] = {
  netbufferv4_input_field_attr_type_t::INPUT_FIELD_ATTR_TYPE_MASK
};
const char* _knetbufferv4_input_field_attr_type_tNames[] = {
  "INPUT_FIELD_ATTR_TYPE_MASK"
};
const std::map<int, const char*> _netbufferv4_input_field_attr_type_t_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _knetbufferv4_input_field_attr_type_tValues, _knetbufferv4_input_field_attr_type_tNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _knetbufferv4_input_field_attr_value_mask_tValues[] = {
  netbufferv4_input_field_attr_value_mask_t::INPUT_FIELD_EXCLUDED,
  netbufferv4_input_field_attr_value_mask_t::INPUT_FIELD_INCLUDED
};
const char* _knetbufferv4_input_field_attr_value_mask_tNames[] = {
  "INPUT_FIELD_EXCLUDED",
  "INPUT_FIELD_INCLUDED"
};
const std::map<int, const char*> _netbufferv4_input_field_attr_value_mask_t_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _knetbufferv4_input_field_attr_value_mask_tValues, _knetbufferv4_input_field_attr_value_mask_tNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


netbufferv4_counter_value_t::~netbufferv4_counter_value_t() throw() {
}


void netbufferv4_counter_value_t::__set_packets(const int64_t val) {
  this->packets = val;
}

void netbufferv4_counter_value_t::__set_bytes(const int64_t val) {
  this->bytes = val;
}

const char* netbufferv4_counter_value_t::ascii_fingerprint = "F33135321253DAEB67B0E79E416CA831";
const uint8_t netbufferv4_counter_value_t::binary_fingerprint[16] = {0xF3,0x31,0x35,0x32,0x12,0x53,0xDA,0xEB,0x67,0xB0,0xE7,0x9E,0x41,0x6C,0xA8,0x31};

uint32_t netbufferv4_counter_value_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_packets = false;
  bool isset_bytes = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->packets);
          isset_packets = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->bytes);
          isset_bytes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_packets)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_bytes)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_counter_value_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_counter_value_t");

  xfer += oprot->writeFieldBegin("packets", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->packets);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bytes", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->bytes);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_counter_value_t &a, netbufferv4_counter_value_t &b) {
  using ::std::swap;
  swap(a.packets, b.packets);
  swap(a.bytes, b.bytes);
}

netbufferv4_counter_value_t::netbufferv4_counter_value_t(const netbufferv4_counter_value_t& other0) {
  packets = other0.packets;
  bytes = other0.bytes;
}
netbufferv4_counter_value_t& netbufferv4_counter_value_t::operator=(const netbufferv4_counter_value_t& other1) {
  packets = other1.packets;
  bytes = other1.bytes;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_counter_value_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_counter_value_t(";
  out << "packets=" << to_string(obj.packets);
  out << ", " << "bytes=" << to_string(obj.bytes);
  out << ")";
  return out;
}


netbufferv4_packets_meter_spec_t::~netbufferv4_packets_meter_spec_t() throw() {
}


void netbufferv4_packets_meter_spec_t::__set_cir_pps(const int64_t val) {
  this->cir_pps = val;
}

void netbufferv4_packets_meter_spec_t::__set_cburst_pkts(const int64_t val) {
  this->cburst_pkts = val;
}

void netbufferv4_packets_meter_spec_t::__set_pir_pps(const int64_t val) {
  this->pir_pps = val;
}

void netbufferv4_packets_meter_spec_t::__set_pburst_pkts(const int64_t val) {
  this->pburst_pkts = val;
}

void netbufferv4_packets_meter_spec_t::__set_color_aware(const bool val) {
  this->color_aware = val;
}

void netbufferv4_packets_meter_spec_t::__set_is_set(const bool val) {
  this->is_set = val;
__isset.is_set = true;
}

const char* netbufferv4_packets_meter_spec_t::ascii_fingerprint = "BBB56A17251091FEA11CE564F9CD9BB9";
const uint8_t netbufferv4_packets_meter_spec_t::binary_fingerprint[16] = {0xBB,0xB5,0x6A,0x17,0x25,0x10,0x91,0xFE,0xA1,0x1C,0xE5,0x64,0xF9,0xCD,0x9B,0xB9};

uint32_t netbufferv4_packets_meter_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_cir_pps = false;
  bool isset_cburst_pkts = false;
  bool isset_pir_pps = false;
  bool isset_pburst_pkts = false;
  bool isset_color_aware = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->cir_pps);
          isset_cir_pps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->cburst_pkts);
          isset_cburst_pkts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->pir_pps);
          isset_pir_pps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->pburst_pkts);
          isset_pburst_pkts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->color_aware);
          isset_color_aware = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->is_set);
          this->__isset.is_set = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_cir_pps)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_cburst_pkts)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_pir_pps)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_pburst_pkts)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_color_aware)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_packets_meter_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_packets_meter_spec_t");

  xfer += oprot->writeFieldBegin("cir_pps", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->cir_pps);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cburst_pkts", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->cburst_pkts);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pir_pps", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->pir_pps);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pburst_pkts", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->pburst_pkts);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("color_aware", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->color_aware);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.is_set) {
    xfer += oprot->writeFieldBegin("is_set", ::apache::thrift::protocol::T_BOOL, 6);
    xfer += oprot->writeBool(this->is_set);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_packets_meter_spec_t &a, netbufferv4_packets_meter_spec_t &b) {
  using ::std::swap;
  swap(a.cir_pps, b.cir_pps);
  swap(a.cburst_pkts, b.cburst_pkts);
  swap(a.pir_pps, b.pir_pps);
  swap(a.pburst_pkts, b.pburst_pkts);
  swap(a.color_aware, b.color_aware);
  swap(a.is_set, b.is_set);
  swap(a.__isset, b.__isset);
}

netbufferv4_packets_meter_spec_t::netbufferv4_packets_meter_spec_t(const netbufferv4_packets_meter_spec_t& other2) {
  cir_pps = other2.cir_pps;
  cburst_pkts = other2.cburst_pkts;
  pir_pps = other2.pir_pps;
  pburst_pkts = other2.pburst_pkts;
  color_aware = other2.color_aware;
  is_set = other2.is_set;
  __isset = other2.__isset;
}
netbufferv4_packets_meter_spec_t& netbufferv4_packets_meter_spec_t::operator=(const netbufferv4_packets_meter_spec_t& other3) {
  cir_pps = other3.cir_pps;
  cburst_pkts = other3.cburst_pkts;
  pir_pps = other3.pir_pps;
  pburst_pkts = other3.pburst_pkts;
  color_aware = other3.color_aware;
  is_set = other3.is_set;
  __isset = other3.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_packets_meter_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_packets_meter_spec_t(";
  out << "cir_pps=" << to_string(obj.cir_pps);
  out << ", " << "cburst_pkts=" << to_string(obj.cburst_pkts);
  out << ", " << "pir_pps=" << to_string(obj.pir_pps);
  out << ", " << "pburst_pkts=" << to_string(obj.pburst_pkts);
  out << ", " << "color_aware=" << to_string(obj.color_aware);
  out << ", " << "is_set="; (obj.__isset.is_set ? (out << to_string(obj.is_set)) : (out << "<null>"));
  out << ")";
  return out;
}


netbufferv4_bytes_meter_spec_t::~netbufferv4_bytes_meter_spec_t() throw() {
}


void netbufferv4_bytes_meter_spec_t::__set_cir_kbps(const int64_t val) {
  this->cir_kbps = val;
}

void netbufferv4_bytes_meter_spec_t::__set_cburst_kbits(const int64_t val) {
  this->cburst_kbits = val;
}

void netbufferv4_bytes_meter_spec_t::__set_pir_kbps(const int64_t val) {
  this->pir_kbps = val;
}

void netbufferv4_bytes_meter_spec_t::__set_pburst_kbits(const int64_t val) {
  this->pburst_kbits = val;
}

void netbufferv4_bytes_meter_spec_t::__set_color_aware(const bool val) {
  this->color_aware = val;
}

void netbufferv4_bytes_meter_spec_t::__set_is_set(const bool val) {
  this->is_set = val;
__isset.is_set = true;
}

const char* netbufferv4_bytes_meter_spec_t::ascii_fingerprint = "BBB56A17251091FEA11CE564F9CD9BB9";
const uint8_t netbufferv4_bytes_meter_spec_t::binary_fingerprint[16] = {0xBB,0xB5,0x6A,0x17,0x25,0x10,0x91,0xFE,0xA1,0x1C,0xE5,0x64,0xF9,0xCD,0x9B,0xB9};

uint32_t netbufferv4_bytes_meter_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_cir_kbps = false;
  bool isset_cburst_kbits = false;
  bool isset_pir_kbps = false;
  bool isset_pburst_kbits = false;
  bool isset_color_aware = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->cir_kbps);
          isset_cir_kbps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->cburst_kbits);
          isset_cburst_kbits = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->pir_kbps);
          isset_pir_kbps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->pburst_kbits);
          isset_pburst_kbits = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->color_aware);
          isset_color_aware = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->is_set);
          this->__isset.is_set = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_cir_kbps)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_cburst_kbits)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_pir_kbps)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_pburst_kbits)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_color_aware)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_bytes_meter_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_bytes_meter_spec_t");

  xfer += oprot->writeFieldBegin("cir_kbps", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->cir_kbps);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cburst_kbits", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->cburst_kbits);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pir_kbps", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->pir_kbps);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pburst_kbits", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->pburst_kbits);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("color_aware", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->color_aware);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.is_set) {
    xfer += oprot->writeFieldBegin("is_set", ::apache::thrift::protocol::T_BOOL, 6);
    xfer += oprot->writeBool(this->is_set);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_bytes_meter_spec_t &a, netbufferv4_bytes_meter_spec_t &b) {
  using ::std::swap;
  swap(a.cir_kbps, b.cir_kbps);
  swap(a.cburst_kbits, b.cburst_kbits);
  swap(a.pir_kbps, b.pir_kbps);
  swap(a.pburst_kbits, b.pburst_kbits);
  swap(a.color_aware, b.color_aware);
  swap(a.is_set, b.is_set);
  swap(a.__isset, b.__isset);
}

netbufferv4_bytes_meter_spec_t::netbufferv4_bytes_meter_spec_t(const netbufferv4_bytes_meter_spec_t& other4) {
  cir_kbps = other4.cir_kbps;
  cburst_kbits = other4.cburst_kbits;
  pir_kbps = other4.pir_kbps;
  pburst_kbits = other4.pburst_kbits;
  color_aware = other4.color_aware;
  is_set = other4.is_set;
  __isset = other4.__isset;
}
netbufferv4_bytes_meter_spec_t& netbufferv4_bytes_meter_spec_t::operator=(const netbufferv4_bytes_meter_spec_t& other5) {
  cir_kbps = other5.cir_kbps;
  cburst_kbits = other5.cburst_kbits;
  pir_kbps = other5.pir_kbps;
  pburst_kbits = other5.pburst_kbits;
  color_aware = other5.color_aware;
  is_set = other5.is_set;
  __isset = other5.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_bytes_meter_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_bytes_meter_spec_t(";
  out << "cir_kbps=" << to_string(obj.cir_kbps);
  out << ", " << "cburst_kbits=" << to_string(obj.cburst_kbits);
  out << ", " << "pir_kbps=" << to_string(obj.pir_kbps);
  out << ", " << "pburst_kbits=" << to_string(obj.pburst_kbits);
  out << ", " << "color_aware=" << to_string(obj.color_aware);
  out << ", " << "is_set="; (obj.__isset.is_set ? (out << to_string(obj.is_set)) : (out << "<null>"));
  out << ")";
  return out;
}


netbufferv4_lpf_spec_t::~netbufferv4_lpf_spec_t() throw() {
}


void netbufferv4_lpf_spec_t::__set_gain_decay_separate_time_constant(const bool val) {
  this->gain_decay_separate_time_constant = val;
}

void netbufferv4_lpf_spec_t::__set_gain_time_constant(const double val) {
  this->gain_time_constant = val;
}

void netbufferv4_lpf_spec_t::__set_decay_time_constant(const double val) {
  this->decay_time_constant = val;
}

void netbufferv4_lpf_spec_t::__set_time_constant(const double val) {
  this->time_constant = val;
}

void netbufferv4_lpf_spec_t::__set_output_scale_down_factor(const int32_t val) {
  this->output_scale_down_factor = val;
}

void netbufferv4_lpf_spec_t::__set_lpf_type(const netbufferv4_lpf_type::type val) {
  this->lpf_type = val;
}

void netbufferv4_lpf_spec_t::__set_is_set(const bool val) {
  this->is_set = val;
__isset.is_set = true;
}

const char* netbufferv4_lpf_spec_t::ascii_fingerprint = "E8AF5BCC17C96A248B9A03E9DB6C9AC9";
const uint8_t netbufferv4_lpf_spec_t::binary_fingerprint[16] = {0xE8,0xAF,0x5B,0xCC,0x17,0xC9,0x6A,0x24,0x8B,0x9A,0x03,0xE9,0xDB,0x6C,0x9A,0xC9};

uint32_t netbufferv4_lpf_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_gain_decay_separate_time_constant = false;
  bool isset_gain_time_constant = false;
  bool isset_decay_time_constant = false;
  bool isset_time_constant = false;
  bool isset_output_scale_down_factor = false;
  bool isset_lpf_type = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->gain_decay_separate_time_constant);
          isset_gain_decay_separate_time_constant = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->gain_time_constant);
          isset_gain_time_constant = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->decay_time_constant);
          isset_decay_time_constant = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->time_constant);
          isset_time_constant = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->output_scale_down_factor);
          isset_output_scale_down_factor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast6;
          xfer += iprot->readI32(ecast6);
          this->lpf_type = (netbufferv4_lpf_type::type)ecast6;
          isset_lpf_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->is_set);
          this->__isset.is_set = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_gain_decay_separate_time_constant)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_gain_time_constant)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_decay_time_constant)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_time_constant)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_output_scale_down_factor)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_lpf_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_lpf_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_lpf_spec_t");

  xfer += oprot->writeFieldBegin("gain_decay_separate_time_constant", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->gain_decay_separate_time_constant);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gain_time_constant", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->gain_time_constant);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("decay_time_constant", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->decay_time_constant);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("time_constant", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->time_constant);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("output_scale_down_factor", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->output_scale_down_factor);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lpf_type", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32((int32_t)this->lpf_type);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.is_set) {
    xfer += oprot->writeFieldBegin("is_set", ::apache::thrift::protocol::T_BOOL, 7);
    xfer += oprot->writeBool(this->is_set);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_lpf_spec_t &a, netbufferv4_lpf_spec_t &b) {
  using ::std::swap;
  swap(a.gain_decay_separate_time_constant, b.gain_decay_separate_time_constant);
  swap(a.gain_time_constant, b.gain_time_constant);
  swap(a.decay_time_constant, b.decay_time_constant);
  swap(a.time_constant, b.time_constant);
  swap(a.output_scale_down_factor, b.output_scale_down_factor);
  swap(a.lpf_type, b.lpf_type);
  swap(a.is_set, b.is_set);
  swap(a.__isset, b.__isset);
}

netbufferv4_lpf_spec_t::netbufferv4_lpf_spec_t(const netbufferv4_lpf_spec_t& other7) {
  gain_decay_separate_time_constant = other7.gain_decay_separate_time_constant;
  gain_time_constant = other7.gain_time_constant;
  decay_time_constant = other7.decay_time_constant;
  time_constant = other7.time_constant;
  output_scale_down_factor = other7.output_scale_down_factor;
  lpf_type = other7.lpf_type;
  is_set = other7.is_set;
  __isset = other7.__isset;
}
netbufferv4_lpf_spec_t& netbufferv4_lpf_spec_t::operator=(const netbufferv4_lpf_spec_t& other8) {
  gain_decay_separate_time_constant = other8.gain_decay_separate_time_constant;
  gain_time_constant = other8.gain_time_constant;
  decay_time_constant = other8.decay_time_constant;
  time_constant = other8.time_constant;
  output_scale_down_factor = other8.output_scale_down_factor;
  lpf_type = other8.lpf_type;
  is_set = other8.is_set;
  __isset = other8.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_lpf_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_lpf_spec_t(";
  out << "gain_decay_separate_time_constant=" << to_string(obj.gain_decay_separate_time_constant);
  out << ", " << "gain_time_constant=" << to_string(obj.gain_time_constant);
  out << ", " << "decay_time_constant=" << to_string(obj.decay_time_constant);
  out << ", " << "time_constant=" << to_string(obj.time_constant);
  out << ", " << "output_scale_down_factor=" << to_string(obj.output_scale_down_factor);
  out << ", " << "lpf_type=" << to_string(obj.lpf_type);
  out << ", " << "is_set="; (obj.__isset.is_set ? (out << to_string(obj.is_set)) : (out << "<null>"));
  out << ")";
  return out;
}


netbufferv4_wred_spec_t::~netbufferv4_wred_spec_t() throw() {
}


void netbufferv4_wred_spec_t::__set_time_constant(const double val) {
  this->time_constant = val;
}

void netbufferv4_wred_spec_t::__set_red_min_threshold(const int32_t val) {
  this->red_min_threshold = val;
}

void netbufferv4_wred_spec_t::__set_red_max_threshold(const int32_t val) {
  this->red_max_threshold = val;
}

void netbufferv4_wred_spec_t::__set_max_probability(const double val) {
  this->max_probability = val;
}

void netbufferv4_wred_spec_t::__set_is_set(const bool val) {
  this->is_set = val;
__isset.is_set = true;
}

const char* netbufferv4_wred_spec_t::ascii_fingerprint = "0C4369BBCA61785A6C72E7611B08D5F2";
const uint8_t netbufferv4_wred_spec_t::binary_fingerprint[16] = {0x0C,0x43,0x69,0xBB,0xCA,0x61,0x78,0x5A,0x6C,0x72,0xE7,0x61,0x1B,0x08,0xD5,0xF2};

uint32_t netbufferv4_wred_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_time_constant = false;
  bool isset_red_min_threshold = false;
  bool isset_red_max_threshold = false;
  bool isset_max_probability = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->time_constant);
          isset_time_constant = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->red_min_threshold);
          isset_red_min_threshold = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->red_max_threshold);
          isset_red_max_threshold = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->max_probability);
          isset_max_probability = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->is_set);
          this->__isset.is_set = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_time_constant)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_red_min_threshold)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_red_max_threshold)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_max_probability)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_wred_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_wred_spec_t");

  xfer += oprot->writeFieldBegin("time_constant", ::apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->time_constant);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("red_min_threshold", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->red_min_threshold);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("red_max_threshold", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->red_max_threshold);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("max_probability", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->max_probability);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.is_set) {
    xfer += oprot->writeFieldBegin("is_set", ::apache::thrift::protocol::T_BOOL, 5);
    xfer += oprot->writeBool(this->is_set);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_wred_spec_t &a, netbufferv4_wred_spec_t &b) {
  using ::std::swap;
  swap(a.time_constant, b.time_constant);
  swap(a.red_min_threshold, b.red_min_threshold);
  swap(a.red_max_threshold, b.red_max_threshold);
  swap(a.max_probability, b.max_probability);
  swap(a.is_set, b.is_set);
  swap(a.__isset, b.__isset);
}

netbufferv4_wred_spec_t::netbufferv4_wred_spec_t(const netbufferv4_wred_spec_t& other9) {
  time_constant = other9.time_constant;
  red_min_threshold = other9.red_min_threshold;
  red_max_threshold = other9.red_max_threshold;
  max_probability = other9.max_probability;
  is_set = other9.is_set;
  __isset = other9.__isset;
}
netbufferv4_wred_spec_t& netbufferv4_wred_spec_t::operator=(const netbufferv4_wred_spec_t& other10) {
  time_constant = other10.time_constant;
  red_min_threshold = other10.red_min_threshold;
  red_max_threshold = other10.red_max_threshold;
  max_probability = other10.max_probability;
  is_set = other10.is_set;
  __isset = other10.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_wred_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_wred_spec_t(";
  out << "time_constant=" << to_string(obj.time_constant);
  out << ", " << "red_min_threshold=" << to_string(obj.red_min_threshold);
  out << ", " << "red_max_threshold=" << to_string(obj.red_max_threshold);
  out << ", " << "max_probability=" << to_string(obj.max_probability);
  out << ", " << "is_set="; (obj.__isset.is_set ? (out << to_string(obj.is_set)) : (out << "<null>"));
  out << ")";
  return out;
}


netbufferv4_idle_time_params_t::~netbufferv4_idle_time_params_t() throw() {
}


void netbufferv4_idle_time_params_t::__set_mode(const netbufferv4_idle_time_mode::type val) {
  this->mode = val;
}

void netbufferv4_idle_time_params_t::__set_ttl_query_interval(const int32_t val) {
  this->ttl_query_interval = val;
__isset.ttl_query_interval = true;
}

void netbufferv4_idle_time_params_t::__set_max_ttl(const int32_t val) {
  this->max_ttl = val;
__isset.max_ttl = true;
}

void netbufferv4_idle_time_params_t::__set_min_ttl(const int32_t val) {
  this->min_ttl = val;
__isset.min_ttl = true;
}

void netbufferv4_idle_time_params_t::__set_cookie(const int32_t val) {
  this->cookie = val;
__isset.cookie = true;
}

const char* netbufferv4_idle_time_params_t::ascii_fingerprint = "14A95739CD626524C62C041C65B9B6B7";
const uint8_t netbufferv4_idle_time_params_t::binary_fingerprint[16] = {0x14,0xA9,0x57,0x39,0xCD,0x62,0x65,0x24,0xC6,0x2C,0x04,0x1C,0x65,0xB9,0xB6,0xB7};

uint32_t netbufferv4_idle_time_params_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_mode = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast11;
          xfer += iprot->readI32(ecast11);
          this->mode = (netbufferv4_idle_time_mode::type)ecast11;
          isset_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ttl_query_interval);
          this->__isset.ttl_query_interval = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->max_ttl);
          this->__isset.max_ttl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->min_ttl);
          this->__isset.min_ttl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->cookie);
          this->__isset.cookie = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_mode)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_idle_time_params_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_idle_time_params_t");

  xfer += oprot->writeFieldBegin("mode", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->mode);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.ttl_query_interval) {
    xfer += oprot->writeFieldBegin("ttl_query_interval", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->ttl_query_interval);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.max_ttl) {
    xfer += oprot->writeFieldBegin("max_ttl", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->max_ttl);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.min_ttl) {
    xfer += oprot->writeFieldBegin("min_ttl", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->min_ttl);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cookie) {
    xfer += oprot->writeFieldBegin("cookie", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->cookie);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_idle_time_params_t &a, netbufferv4_idle_time_params_t &b) {
  using ::std::swap;
  swap(a.mode, b.mode);
  swap(a.ttl_query_interval, b.ttl_query_interval);
  swap(a.max_ttl, b.max_ttl);
  swap(a.min_ttl, b.min_ttl);
  swap(a.cookie, b.cookie);
  swap(a.__isset, b.__isset);
}

netbufferv4_idle_time_params_t::netbufferv4_idle_time_params_t(const netbufferv4_idle_time_params_t& other12) {
  mode = other12.mode;
  ttl_query_interval = other12.ttl_query_interval;
  max_ttl = other12.max_ttl;
  min_ttl = other12.min_ttl;
  cookie = other12.cookie;
  __isset = other12.__isset;
}
netbufferv4_idle_time_params_t& netbufferv4_idle_time_params_t::operator=(const netbufferv4_idle_time_params_t& other13) {
  mode = other13.mode;
  ttl_query_interval = other13.ttl_query_interval;
  max_ttl = other13.max_ttl;
  min_ttl = other13.min_ttl;
  cookie = other13.cookie;
  __isset = other13.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_idle_time_params_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_idle_time_params_t(";
  out << "mode=" << to_string(obj.mode);
  out << ", " << "ttl_query_interval="; (obj.__isset.ttl_query_interval ? (out << to_string(obj.ttl_query_interval)) : (out << "<null>"));
  out << ", " << "max_ttl="; (obj.__isset.max_ttl ? (out << to_string(obj.max_ttl)) : (out << "<null>"));
  out << ", " << "min_ttl="; (obj.__isset.min_ttl ? (out << to_string(obj.min_ttl)) : (out << "<null>"));
  out << ", " << "cookie="; (obj.__isset.cookie ? (out << to_string(obj.cookie)) : (out << "<null>"));
  out << ")";
  return out;
}


netbufferv4_idle_tmo_expired_t::~netbufferv4_idle_tmo_expired_t() throw() {
}


void netbufferv4_idle_tmo_expired_t::__set_dev_id(const int32_t val) {
  this->dev_id = val;
}

void netbufferv4_idle_tmo_expired_t::__set_entry(const EntryHandle_t val) {
  this->entry = val;
}

void netbufferv4_idle_tmo_expired_t::__set_cookie(const int32_t val) {
  this->cookie = val;
}

const char* netbufferv4_idle_tmo_expired_t::ascii_fingerprint = "6435B39C87AB0E30F30BEDEFD7328C0D";
const uint8_t netbufferv4_idle_tmo_expired_t::binary_fingerprint[16] = {0x64,0x35,0xB3,0x9C,0x87,0xAB,0x0E,0x30,0xF3,0x0B,0xED,0xEF,0xD7,0x32,0x8C,0x0D};

uint32_t netbufferv4_idle_tmo_expired_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_dev_id = false;
  bool isset_entry = false;
  bool isset_cookie = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->dev_id);
          isset_dev_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->entry);
          isset_entry = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->cookie);
          isset_cookie = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_dev_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_entry)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_cookie)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_idle_tmo_expired_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_idle_tmo_expired_t");

  xfer += oprot->writeFieldBegin("dev_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->dev_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("entry", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->entry);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cookie", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->cookie);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_idle_tmo_expired_t &a, netbufferv4_idle_tmo_expired_t &b) {
  using ::std::swap;
  swap(a.dev_id, b.dev_id);
  swap(a.entry, b.entry);
  swap(a.cookie, b.cookie);
}

netbufferv4_idle_tmo_expired_t::netbufferv4_idle_tmo_expired_t(const netbufferv4_idle_tmo_expired_t& other14) {
  dev_id = other14.dev_id;
  entry = other14.entry;
  cookie = other14.cookie;
}
netbufferv4_idle_tmo_expired_t& netbufferv4_idle_tmo_expired_t::operator=(const netbufferv4_idle_tmo_expired_t& other15) {
  dev_id = other15.dev_id;
  entry = other15.entry;
  cookie = other15.cookie;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_idle_tmo_expired_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_idle_tmo_expired_t(";
  out << "dev_id=" << to_string(obj.dev_id);
  out << ", " << "entry=" << to_string(obj.entry);
  out << ", " << "cookie=" << to_string(obj.cookie);
  out << ")";
  return out;
}


netbufferv4_sel_update_t::~netbufferv4_sel_update_t() throw() {
}


void netbufferv4_sel_update_t::__set_sess_hdl(const  ::res_pd_rpc::SessionHandle_t val) {
  this->sess_hdl = val;
}

void netbufferv4_sel_update_t::__set_dev_tgt(const  ::res_pd_rpc::DevTarget_t& val) {
  this->dev_tgt = val;
}

void netbufferv4_sel_update_t::__set_cookie(const int32_t val) {
  this->cookie = val;
}

void netbufferv4_sel_update_t::__set_grp_hdl(const int32_t val) {
  this->grp_hdl = val;
}

void netbufferv4_sel_update_t::__set_mbr_hdl(const int32_t val) {
  this->mbr_hdl = val;
}

void netbufferv4_sel_update_t::__set_index(const int32_t val) {
  this->index = val;
}

void netbufferv4_sel_update_t::__set_is_add(const bool val) {
  this->is_add = val;
}

const char* netbufferv4_sel_update_t::ascii_fingerprint = "C476DACBD2ED169BE75C1627D02A5868";
const uint8_t netbufferv4_sel_update_t::binary_fingerprint[16] = {0xC4,0x76,0xDA,0xCB,0xD2,0xED,0x16,0x9B,0xE7,0x5C,0x16,0x27,0xD0,0x2A,0x58,0x68};

uint32_t netbufferv4_sel_update_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_sess_hdl = false;
  bool isset_dev_tgt = false;
  bool isset_cookie = false;
  bool isset_grp_hdl = false;
  bool isset_mbr_hdl = false;
  bool isset_index = false;
  bool isset_is_add = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          isset_sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          isset_dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->cookie);
          isset_cookie = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->grp_hdl);
          isset_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->mbr_hdl);
          isset_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          isset_index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->is_add);
          isset_is_add = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_sess_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dev_tgt)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_cookie)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_index)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_is_add)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_sel_update_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_sel_update_t");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cookie", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->cookie);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("grp_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mbr_hdl", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("is_add", ::apache::thrift::protocol::T_BOOL, 7);
  xfer += oprot->writeBool(this->is_add);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_sel_update_t &a, netbufferv4_sel_update_t &b) {
  using ::std::swap;
  swap(a.sess_hdl, b.sess_hdl);
  swap(a.dev_tgt, b.dev_tgt);
  swap(a.cookie, b.cookie);
  swap(a.grp_hdl, b.grp_hdl);
  swap(a.mbr_hdl, b.mbr_hdl);
  swap(a.index, b.index);
  swap(a.is_add, b.is_add);
}

netbufferv4_sel_update_t::netbufferv4_sel_update_t(const netbufferv4_sel_update_t& other16) {
  sess_hdl = other16.sess_hdl;
  dev_tgt = other16.dev_tgt;
  cookie = other16.cookie;
  grp_hdl = other16.grp_hdl;
  mbr_hdl = other16.mbr_hdl;
  index = other16.index;
  is_add = other16.is_add;
}
netbufferv4_sel_update_t& netbufferv4_sel_update_t::operator=(const netbufferv4_sel_update_t& other17) {
  sess_hdl = other17.sess_hdl;
  dev_tgt = other17.dev_tgt;
  cookie = other17.cookie;
  grp_hdl = other17.grp_hdl;
  mbr_hdl = other17.mbr_hdl;
  index = other17.index;
  is_add = other17.is_add;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_sel_update_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_sel_update_t(";
  out << "sess_hdl=" << to_string(obj.sess_hdl);
  out << ", " << "dev_tgt=" << to_string(obj.dev_tgt);
  out << ", " << "cookie=" << to_string(obj.cookie);
  out << ", " << "grp_hdl=" << to_string(obj.grp_hdl);
  out << ", " << "mbr_hdl=" << to_string(obj.mbr_hdl);
  out << ", " << "index=" << to_string(obj.index);
  out << ", " << "is_add=" << to_string(obj.is_add);
  out << ")";
  return out;
}


tbl_property_value_args_t::~tbl_property_value_args_t() throw() {
}


void tbl_property_value_args_t::__set_value(const tbl_property_value_t::type val) {
  this->value = val;
}

void tbl_property_value_args_t::__set_scope_args(const int32_t val) {
  this->scope_args = val;
}

const char* tbl_property_value_args_t::ascii_fingerprint = "46A703A33337BED2F62F386FC66B2A5F";
const uint8_t tbl_property_value_args_t::binary_fingerprint[16] = {0x46,0xA7,0x03,0xA3,0x33,0x37,0xBE,0xD2,0xF6,0x2F,0x38,0x6F,0xC6,0x6B,0x2A,0x5F};

uint32_t tbl_property_value_args_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_value = false;
  bool isset_scope_args = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast18;
          xfer += iprot->readI32(ecast18);
          this->value = (tbl_property_value_t::type)ecast18;
          isset_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->scope_args);
          isset_scope_args = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_value)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_scope_args)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t tbl_property_value_args_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("tbl_property_value_args_t");

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("scope_args", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->scope_args);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(tbl_property_value_args_t &a, tbl_property_value_args_t &b) {
  using ::std::swap;
  swap(a.value, b.value);
  swap(a.scope_args, b.scope_args);
}

tbl_property_value_args_t::tbl_property_value_args_t(const tbl_property_value_args_t& other19) {
  value = other19.value;
  scope_args = other19.scope_args;
}
tbl_property_value_args_t& tbl_property_value_args_t::operator=(const tbl_property_value_args_t& other20) {
  value = other20.value;
  scope_args = other20.scope_args;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const tbl_property_value_args_t& obj) {
  using apache::thrift::to_string;
  out << "tbl_property_value_args_t(";
  out << "value=" << to_string(obj.value);
  out << ", " << "scope_args=" << to_string(obj.scope_args);
  out << ")";
  return out;
}


PVSSpec_t::~PVSSpec_t() throw() {
}


void PVSSpec_t::__set_parser_value(const int32_t val) {
  this->parser_value = val;
}

void PVSSpec_t::__set_parser_value_mask(const int32_t val) {
  this->parser_value_mask = val;
}

const char* PVSSpec_t::ascii_fingerprint = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
const uint8_t PVSSpec_t::binary_fingerprint[16] = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

uint32_t PVSSpec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_parser_value = false;
  bool isset_parser_value_mask = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->parser_value);
          isset_parser_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->parser_value_mask);
          isset_parser_value_mask = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_parser_value)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_parser_value_mask)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PVSSpec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("PVSSpec_t");

  xfer += oprot->writeFieldBegin("parser_value", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->parser_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("parser_value_mask", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->parser_value_mask);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(PVSSpec_t &a, PVSSpec_t &b) {
  using ::std::swap;
  swap(a.parser_value, b.parser_value);
  swap(a.parser_value_mask, b.parser_value_mask);
}

PVSSpec_t::PVSSpec_t(const PVSSpec_t& other21) {
  parser_value = other21.parser_value;
  parser_value_mask = other21.parser_value_mask;
}
PVSSpec_t& PVSSpec_t::operator=(const PVSSpec_t& other22) {
  parser_value = other22.parser_value;
  parser_value_mask = other22.parser_value_mask;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const PVSSpec_t& obj) {
  using apache::thrift::to_string;
  out << "PVSSpec_t(";
  out << "parser_value=" << to_string(obj.parser_value);
  out << ", " << "parser_value_mask=" << to_string(obj.parser_value_mask);
  out << ")";
  return out;
}


TblCntrInfo_t::~TblCntrInfo_t() throw() {
}


void TblCntrInfo_t::__set_type(const tbl_dbg_counter_type_t::type val) {
  this->type = val;
}

void TblCntrInfo_t::__set_value(const int32_t val) {
  this->value = val;
}

const char* TblCntrInfo_t::ascii_fingerprint = "46A703A33337BED2F62F386FC66B2A5F";
const uint8_t TblCntrInfo_t::binary_fingerprint[16] = {0x46,0xA7,0x03,0xA3,0x33,0x37,0xBE,0xD2,0xF6,0x2F,0x38,0x6F,0xC6,0x6B,0x2A,0x5F};

uint32_t TblCntrInfo_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type = false;
  bool isset_value = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast23;
          xfer += iprot->readI32(ecast23);
          this->type = (tbl_dbg_counter_type_t::type)ecast23;
          isset_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->value);
          isset_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_value)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TblCntrInfo_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("TblCntrInfo_t");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(TblCntrInfo_t &a, TblCntrInfo_t &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.value, b.value);
}

TblCntrInfo_t::TblCntrInfo_t(const TblCntrInfo_t& other24) {
  type = other24.type;
  value = other24.value;
}
TblCntrInfo_t& TblCntrInfo_t::operator=(const TblCntrInfo_t& other25) {
  type = other25.type;
  value = other25.value;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const TblCntrInfo_t& obj) {
  using apache::thrift::to_string;
  out << "TblCntrInfo_t(";
  out << "type=" << to_string(obj.type);
  out << ", " << "value=" << to_string(obj.value);
  out << ")";
  return out;
}


TblDbgStageInfo_t::~TblDbgStageInfo_t() throw() {
}


void TblDbgStageInfo_t::__set_num_counters(const int32_t val) {
  this->num_counters = val;
}

void TblDbgStageInfo_t::__set_tbl_name(const std::vector<std::string> & val) {
  this->tbl_name = val;
}

void TblDbgStageInfo_t::__set_type(const std::vector<tbl_dbg_counter_type_t::type> & val) {
  this->type = val;
}

void TblDbgStageInfo_t::__set_value(const std::vector<int32_t> & val) {
  this->value = val;
}

const char* TblDbgStageInfo_t::ascii_fingerprint = "FF2230B0F5F1063AD487F5E7696D6D0B";
const uint8_t TblDbgStageInfo_t::binary_fingerprint[16] = {0xFF,0x22,0x30,0xB0,0xF5,0xF1,0x06,0x3A,0xD4,0x87,0xF5,0xE7,0x69,0x6D,0x6D,0x0B};

uint32_t TblDbgStageInfo_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_num_counters = false;
  bool isset_tbl_name = false;
  bool isset_type = false;
  bool isset_value = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->num_counters);
          isset_num_counters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->tbl_name.clear();
            uint32_t _size26;
            ::apache::thrift::protocol::TType _etype29;
            xfer += iprot->readListBegin(_etype29, _size26);
            this->tbl_name.resize(_size26);
            uint32_t _i30;
            for (_i30 = 0; _i30 < _size26; ++_i30)
            {
              xfer += iprot->readString(this->tbl_name[_i30]);
            }
            xfer += iprot->readListEnd();
          }
          isset_tbl_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->type.clear();
            uint32_t _size31;
            ::apache::thrift::protocol::TType _etype34;
            xfer += iprot->readListBegin(_etype34, _size31);
            this->type.resize(_size31);
            uint32_t _i35;
            for (_i35 = 0; _i35 < _size31; ++_i35)
            {
              int32_t ecast36;
              xfer += iprot->readI32(ecast36);
              this->type[_i35] = (tbl_dbg_counter_type_t::type)ecast36;
            }
            xfer += iprot->readListEnd();
          }
          isset_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->value.clear();
            uint32_t _size37;
            ::apache::thrift::protocol::TType _etype40;
            xfer += iprot->readListBegin(_etype40, _size37);
            this->value.resize(_size37);
            uint32_t _i41;
            for (_i41 = 0; _i41 < _size37; ++_i41)
            {
              xfer += iprot->readI32(this->value[_i41]);
            }
            xfer += iprot->readListEnd();
          }
          isset_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_num_counters)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tbl_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_value)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TblDbgStageInfo_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("TblDbgStageInfo_t");

  xfer += oprot->writeFieldBegin("num_counters", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->num_counters);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tbl_name", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->tbl_name.size()));
    std::vector<std::string> ::const_iterator _iter42;
    for (_iter42 = this->tbl_name.begin(); _iter42 != this->tbl_name.end(); ++_iter42)
    {
      xfer += oprot->writeString((*_iter42));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->type.size()));
    std::vector<tbl_dbg_counter_type_t::type> ::const_iterator _iter43;
    for (_iter43 = this->type.begin(); _iter43 != this->type.end(); ++_iter43)
    {
      xfer += oprot->writeI32((int32_t)(*_iter43));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->value.size()));
    std::vector<int32_t> ::const_iterator _iter44;
    for (_iter44 = this->value.begin(); _iter44 != this->value.end(); ++_iter44)
    {
      xfer += oprot->writeI32((*_iter44));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(TblDbgStageInfo_t &a, TblDbgStageInfo_t &b) {
  using ::std::swap;
  swap(a.num_counters, b.num_counters);
  swap(a.tbl_name, b.tbl_name);
  swap(a.type, b.type);
  swap(a.value, b.value);
}

TblDbgStageInfo_t::TblDbgStageInfo_t(const TblDbgStageInfo_t& other45) {
  num_counters = other45.num_counters;
  tbl_name = other45.tbl_name;
  type = other45.type;
  value = other45.value;
}
TblDbgStageInfo_t& TblDbgStageInfo_t::operator=(const TblDbgStageInfo_t& other46) {
  num_counters = other46.num_counters;
  tbl_name = other46.tbl_name;
  type = other46.type;
  value = other46.value;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const TblDbgStageInfo_t& obj) {
  using apache::thrift::to_string;
  out << "TblDbgStageInfo_t(";
  out << "num_counters=" << to_string(obj.num_counters);
  out << ", " << "tbl_name=" << to_string(obj.tbl_name);
  out << ", " << "type=" << to_string(obj.type);
  out << ", " << "value=" << to_string(obj.value);
  out << ")";
  return out;
}


netbufferv4_counter_flags_t::~netbufferv4_counter_flags_t() throw() {
}


void netbufferv4_counter_flags_t::__set_read_hw_sync(const bool val) {
  this->read_hw_sync = val;
}

const char* netbufferv4_counter_flags_t::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t netbufferv4_counter_flags_t::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t netbufferv4_counter_flags_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_read_hw_sync = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->read_hw_sync);
          isset_read_hw_sync = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_read_hw_sync)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_counter_flags_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_counter_flags_t");

  xfer += oprot->writeFieldBegin("read_hw_sync", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->read_hw_sync);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_counter_flags_t &a, netbufferv4_counter_flags_t &b) {
  using ::std::swap;
  swap(a.read_hw_sync, b.read_hw_sync);
}

netbufferv4_counter_flags_t::netbufferv4_counter_flags_t(const netbufferv4_counter_flags_t& other47) {
  read_hw_sync = other47.read_hw_sync;
}
netbufferv4_counter_flags_t& netbufferv4_counter_flags_t::operator=(const netbufferv4_counter_flags_t& other48) {
  read_hw_sync = other48.read_hw_sync;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_counter_flags_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_counter_flags_t(";
  out << "read_hw_sync=" << to_string(obj.read_hw_sync);
  out << ")";
  return out;
}


netbufferv4_register_flags_t::~netbufferv4_register_flags_t() throw() {
}


void netbufferv4_register_flags_t::__set_read_hw_sync(const bool val) {
  this->read_hw_sync = val;
}

const char* netbufferv4_register_flags_t::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t netbufferv4_register_flags_t::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t netbufferv4_register_flags_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_read_hw_sync = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->read_hw_sync);
          isset_read_hw_sync = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_read_hw_sync)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_register_flags_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_flags_t");

  xfer += oprot->writeFieldBegin("read_hw_sync", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->read_hw_sync);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_register_flags_t &a, netbufferv4_register_flags_t &b) {
  using ::std::swap;
  swap(a.read_hw_sync, b.read_hw_sync);
}

netbufferv4_register_flags_t::netbufferv4_register_flags_t(const netbufferv4_register_flags_t& other49) {
  read_hw_sync = other49.read_hw_sync;
}
netbufferv4_register_flags_t& netbufferv4_register_flags_t::operator=(const netbufferv4_register_flags_t& other50) {
  read_hw_sync = other50.read_hw_sync;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_register_flags_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_register_flags_t(";
  out << "read_hw_sync=" << to_string(obj.read_hw_sync);
  out << ")";
  return out;
}


netbufferv4_snapshot_trig_spec_t::~netbufferv4_snapshot_trig_spec_t() throw() {
}


void netbufferv4_snapshot_trig_spec_t::__set_field_name(const std::string& val) {
  this->field_name = val;
}

void netbufferv4_snapshot_trig_spec_t::__set_field_value(const int64_t val) {
  this->field_value = val;
}

void netbufferv4_snapshot_trig_spec_t::__set_field_mask(const int64_t val) {
  this->field_mask = val;
}

const char* netbufferv4_snapshot_trig_spec_t::ascii_fingerprint = "A4B0EC7D8E2C91B205150169F789382C";
const uint8_t netbufferv4_snapshot_trig_spec_t::binary_fingerprint[16] = {0xA4,0xB0,0xEC,0x7D,0x8E,0x2C,0x91,0xB2,0x05,0x15,0x01,0x69,0xF7,0x89,0x38,0x2C};

uint32_t netbufferv4_snapshot_trig_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_field_name = false;
  bool isset_field_value = false;
  bool isset_field_mask = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field_name);
          isset_field_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field_value);
          isset_field_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field_mask);
          isset_field_mask = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_field_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_field_value)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_field_mask)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_snapshot_trig_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_snapshot_trig_spec_t");

  xfer += oprot->writeFieldBegin("field_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->field_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("field_value", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->field_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("field_mask", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->field_mask);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_snapshot_trig_spec_t &a, netbufferv4_snapshot_trig_spec_t &b) {
  using ::std::swap;
  swap(a.field_name, b.field_name);
  swap(a.field_value, b.field_value);
  swap(a.field_mask, b.field_mask);
}

netbufferv4_snapshot_trig_spec_t::netbufferv4_snapshot_trig_spec_t(const netbufferv4_snapshot_trig_spec_t& other51) {
  field_name = other51.field_name;
  field_value = other51.field_value;
  field_mask = other51.field_mask;
}
netbufferv4_snapshot_trig_spec_t& netbufferv4_snapshot_trig_spec_t::operator=(const netbufferv4_snapshot_trig_spec_t& other52) {
  field_name = other52.field_name;
  field_value = other52.field_value;
  field_mask = other52.field_mask;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_snapshot_trig_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_snapshot_trig_spec_t(";
  out << "field_name=" << to_string(obj.field_name);
  out << ", " << "field_value=" << to_string(obj.field_value);
  out << ", " << "field_mask=" << to_string(obj.field_mask);
  out << ")";
  return out;
}


netbufferv4_snapshot_tbl_data_t::~netbufferv4_snapshot_tbl_data_t() throw() {
}


void netbufferv4_snapshot_tbl_data_t::__set_hit(const bool val) {
  this->hit = val;
}

void netbufferv4_snapshot_tbl_data_t::__set_inhibited(const bool val) {
  this->inhibited = val;
}

void netbufferv4_snapshot_tbl_data_t::__set_executed(const bool val) {
  this->executed = val;
}

void netbufferv4_snapshot_tbl_data_t::__set_hit_entry_handle(const int32_t val) {
  this->hit_entry_handle = val;
}

const char* netbufferv4_snapshot_tbl_data_t::ascii_fingerprint = "6576DFF3016227B9C3A4776D48DB696E";
const uint8_t netbufferv4_snapshot_tbl_data_t::binary_fingerprint[16] = {0x65,0x76,0xDF,0xF3,0x01,0x62,0x27,0xB9,0xC3,0xA4,0x77,0x6D,0x48,0xDB,0x69,0x6E};

uint32_t netbufferv4_snapshot_tbl_data_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_hit = false;
  bool isset_inhibited = false;
  bool isset_executed = false;
  bool isset_hit_entry_handle = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hit);
          isset_hit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->inhibited);
          isset_inhibited = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->executed);
          isset_executed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->hit_entry_handle);
          isset_hit_entry_handle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_hit)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_inhibited)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_executed)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_hit_entry_handle)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_snapshot_tbl_data_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_snapshot_tbl_data_t");

  xfer += oprot->writeFieldBegin("hit", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->hit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("inhibited", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->inhibited);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("executed", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->executed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hit_entry_handle", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->hit_entry_handle);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_snapshot_tbl_data_t &a, netbufferv4_snapshot_tbl_data_t &b) {
  using ::std::swap;
  swap(a.hit, b.hit);
  swap(a.inhibited, b.inhibited);
  swap(a.executed, b.executed);
  swap(a.hit_entry_handle, b.hit_entry_handle);
}

netbufferv4_snapshot_tbl_data_t::netbufferv4_snapshot_tbl_data_t(const netbufferv4_snapshot_tbl_data_t& other53) {
  hit = other53.hit;
  inhibited = other53.inhibited;
  executed = other53.executed;
  hit_entry_handle = other53.hit_entry_handle;
}
netbufferv4_snapshot_tbl_data_t& netbufferv4_snapshot_tbl_data_t::operator=(const netbufferv4_snapshot_tbl_data_t& other54) {
  hit = other54.hit;
  inhibited = other54.inhibited;
  executed = other54.executed;
  hit_entry_handle = other54.hit_entry_handle;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_snapshot_tbl_data_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_snapshot_tbl_data_t(";
  out << "hit=" << to_string(obj.hit);
  out << ", " << "inhibited=" << to_string(obj.inhibited);
  out << ", " << "executed=" << to_string(obj.executed);
  out << ", " << "hit_entry_handle=" << to_string(obj.hit_entry_handle);
  out << ")";
  return out;
}


netbufferv4_access_cache_frequency_tbl_match_spec_t::~netbufferv4_access_cache_frequency_tbl_match_spec_t() throw() {
}


void netbufferv4_access_cache_frequency_tbl_match_spec_t::__set_op_hdr_optype(const int16_t val) {
  this->op_hdr_optype = val;
}

void netbufferv4_access_cache_frequency_tbl_match_spec_t::__set_inswitch_hdr_is_sampled(const int8_t val) {
  this->inswitch_hdr_is_sampled = val;
}

void netbufferv4_access_cache_frequency_tbl_match_spec_t::__set_inswitch_hdr_is_cached(const int8_t val) {
  this->inswitch_hdr_is_cached = val;
}

const char* netbufferv4_access_cache_frequency_tbl_match_spec_t::ascii_fingerprint = "874362235FCCF77E284413CBBBA335FE";
const uint8_t netbufferv4_access_cache_frequency_tbl_match_spec_t::binary_fingerprint[16] = {0x87,0x43,0x62,0x23,0x5F,0xCC,0xF7,0x7E,0x28,0x44,0x13,0xCB,0xBB,0xA3,0x35,0xFE};

uint32_t netbufferv4_access_cache_frequency_tbl_match_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_op_hdr_optype = false;
  bool isset_inswitch_hdr_is_sampled = false;
  bool isset_inswitch_hdr_is_cached = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->op_hdr_optype);
          isset_op_hdr_optype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->inswitch_hdr_is_sampled);
          isset_inswitch_hdr_is_sampled = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->inswitch_hdr_is_cached);
          isset_inswitch_hdr_is_cached = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_op_hdr_optype)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_inswitch_hdr_is_sampled)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_inswitch_hdr_is_cached)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_access_cache_frequency_tbl_match_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_access_cache_frequency_tbl_match_spec_t");

  xfer += oprot->writeFieldBegin("op_hdr_optype", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->op_hdr_optype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("inswitch_hdr_is_sampled", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->inswitch_hdr_is_sampled);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("inswitch_hdr_is_cached", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->inswitch_hdr_is_cached);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_access_cache_frequency_tbl_match_spec_t &a, netbufferv4_access_cache_frequency_tbl_match_spec_t &b) {
  using ::std::swap;
  swap(a.op_hdr_optype, b.op_hdr_optype);
  swap(a.inswitch_hdr_is_sampled, b.inswitch_hdr_is_sampled);
  swap(a.inswitch_hdr_is_cached, b.inswitch_hdr_is_cached);
}

netbufferv4_access_cache_frequency_tbl_match_spec_t::netbufferv4_access_cache_frequency_tbl_match_spec_t(const netbufferv4_access_cache_frequency_tbl_match_spec_t& other55) {
  op_hdr_optype = other55.op_hdr_optype;
  inswitch_hdr_is_sampled = other55.inswitch_hdr_is_sampled;
  inswitch_hdr_is_cached = other55.inswitch_hdr_is_cached;
}
netbufferv4_access_cache_frequency_tbl_match_spec_t& netbufferv4_access_cache_frequency_tbl_match_spec_t::operator=(const netbufferv4_access_cache_frequency_tbl_match_spec_t& other56) {
  op_hdr_optype = other56.op_hdr_optype;
  inswitch_hdr_is_sampled = other56.inswitch_hdr_is_sampled;
  inswitch_hdr_is_cached = other56.inswitch_hdr_is_cached;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_access_cache_frequency_tbl_match_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_access_cache_frequency_tbl_match_spec_t(";
  out << "op_hdr_optype=" << to_string(obj.op_hdr_optype);
  out << ", " << "inswitch_hdr_is_sampled=" << to_string(obj.inswitch_hdr_is_sampled);
  out << ", " << "inswitch_hdr_is_cached=" << to_string(obj.inswitch_hdr_is_cached);
  out << ")";
  return out;
}


netbufferv4_access_case1_tbl_match_spec_t::~netbufferv4_access_case1_tbl_match_spec_t() throw() {
}


void netbufferv4_access_case1_tbl_match_spec_t::__set_op_hdr_optype(const int16_t val) {
  this->op_hdr_optype = val;
}

void netbufferv4_access_case1_tbl_match_spec_t::__set_inswitch_hdr_is_cached(const int8_t val) {
  this->inswitch_hdr_is_cached = val;
}

void netbufferv4_access_case1_tbl_match_spec_t::__set_validvalue_hdr_validvalue(const int8_t val) {
  this->validvalue_hdr_validvalue = val;
}

void netbufferv4_access_case1_tbl_match_spec_t::__set_meta_is_latest(const int8_t val) {
  this->meta_is_latest = val;
}

void netbufferv4_access_case1_tbl_match_spec_t::__set_inswitch_hdr_snapshot_flag(const int8_t val) {
  this->inswitch_hdr_snapshot_flag = val;
}

const char* netbufferv4_access_case1_tbl_match_spec_t::ascii_fingerprint = "1A64E2C212329F011BFE09BD9335DFDC";
const uint8_t netbufferv4_access_case1_tbl_match_spec_t::binary_fingerprint[16] = {0x1A,0x64,0xE2,0xC2,0x12,0x32,0x9F,0x01,0x1B,0xFE,0x09,0xBD,0x93,0x35,0xDF,0xDC};

uint32_t netbufferv4_access_case1_tbl_match_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_op_hdr_optype = false;
  bool isset_inswitch_hdr_is_cached = false;
  bool isset_validvalue_hdr_validvalue = false;
  bool isset_meta_is_latest = false;
  bool isset_inswitch_hdr_snapshot_flag = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->op_hdr_optype);
          isset_op_hdr_optype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->inswitch_hdr_is_cached);
          isset_inswitch_hdr_is_cached = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->validvalue_hdr_validvalue);
          isset_validvalue_hdr_validvalue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->meta_is_latest);
          isset_meta_is_latest = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->inswitch_hdr_snapshot_flag);
          isset_inswitch_hdr_snapshot_flag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_op_hdr_optype)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_inswitch_hdr_is_cached)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_validvalue_hdr_validvalue)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_meta_is_latest)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_inswitch_hdr_snapshot_flag)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_access_case1_tbl_match_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_access_case1_tbl_match_spec_t");

  xfer += oprot->writeFieldBegin("op_hdr_optype", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->op_hdr_optype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("inswitch_hdr_is_cached", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->inswitch_hdr_is_cached);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("validvalue_hdr_validvalue", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->validvalue_hdr_validvalue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("meta_is_latest", ::apache::thrift::protocol::T_BYTE, 4);
  xfer += oprot->writeByte(this->meta_is_latest);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("inswitch_hdr_snapshot_flag", ::apache::thrift::protocol::T_BYTE, 5);
  xfer += oprot->writeByte(this->inswitch_hdr_snapshot_flag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_access_case1_tbl_match_spec_t &a, netbufferv4_access_case1_tbl_match_spec_t &b) {
  using ::std::swap;
  swap(a.op_hdr_optype, b.op_hdr_optype);
  swap(a.inswitch_hdr_is_cached, b.inswitch_hdr_is_cached);
  swap(a.validvalue_hdr_validvalue, b.validvalue_hdr_validvalue);
  swap(a.meta_is_latest, b.meta_is_latest);
  swap(a.inswitch_hdr_snapshot_flag, b.inswitch_hdr_snapshot_flag);
}

netbufferv4_access_case1_tbl_match_spec_t::netbufferv4_access_case1_tbl_match_spec_t(const netbufferv4_access_case1_tbl_match_spec_t& other57) {
  op_hdr_optype = other57.op_hdr_optype;
  inswitch_hdr_is_cached = other57.inswitch_hdr_is_cached;
  validvalue_hdr_validvalue = other57.validvalue_hdr_validvalue;
  meta_is_latest = other57.meta_is_latest;
  inswitch_hdr_snapshot_flag = other57.inswitch_hdr_snapshot_flag;
}
netbufferv4_access_case1_tbl_match_spec_t& netbufferv4_access_case1_tbl_match_spec_t::operator=(const netbufferv4_access_case1_tbl_match_spec_t& other58) {
  op_hdr_optype = other58.op_hdr_optype;
  inswitch_hdr_is_cached = other58.inswitch_hdr_is_cached;
  validvalue_hdr_validvalue = other58.validvalue_hdr_validvalue;
  meta_is_latest = other58.meta_is_latest;
  inswitch_hdr_snapshot_flag = other58.inswitch_hdr_snapshot_flag;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_access_case1_tbl_match_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_access_case1_tbl_match_spec_t(";
  out << "op_hdr_optype=" << to_string(obj.op_hdr_optype);
  out << ", " << "inswitch_hdr_is_cached=" << to_string(obj.inswitch_hdr_is_cached);
  out << ", " << "validvalue_hdr_validvalue=" << to_string(obj.validvalue_hdr_validvalue);
  out << ", " << "meta_is_latest=" << to_string(obj.meta_is_latest);
  out << ", " << "inswitch_hdr_snapshot_flag=" << to_string(obj.inswitch_hdr_snapshot_flag);
  out << ")";
  return out;
}


netbufferv4_access_cm1_tbl_match_spec_t::~netbufferv4_access_cm1_tbl_match_spec_t() throw() {
}


void netbufferv4_access_cm1_tbl_match_spec_t::__set_op_hdr_optype(const int16_t val) {
  this->op_hdr_optype = val;
}

void netbufferv4_access_cm1_tbl_match_spec_t::__set_inswitch_hdr_is_sampled(const int8_t val) {
  this->inswitch_hdr_is_sampled = val;
}

void netbufferv4_access_cm1_tbl_match_spec_t::__set_inswitch_hdr_is_cached(const int8_t val) {
  this->inswitch_hdr_is_cached = val;
}

const char* netbufferv4_access_cm1_tbl_match_spec_t::ascii_fingerprint = "874362235FCCF77E284413CBBBA335FE";
const uint8_t netbufferv4_access_cm1_tbl_match_spec_t::binary_fingerprint[16] = {0x87,0x43,0x62,0x23,0x5F,0xCC,0xF7,0x7E,0x28,0x44,0x13,0xCB,0xBB,0xA3,0x35,0xFE};

uint32_t netbufferv4_access_cm1_tbl_match_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_op_hdr_optype = false;
  bool isset_inswitch_hdr_is_sampled = false;
  bool isset_inswitch_hdr_is_cached = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->op_hdr_optype);
          isset_op_hdr_optype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->inswitch_hdr_is_sampled);
          isset_inswitch_hdr_is_sampled = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->inswitch_hdr_is_cached);
          isset_inswitch_hdr_is_cached = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_op_hdr_optype)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_inswitch_hdr_is_sampled)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_inswitch_hdr_is_cached)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_access_cm1_tbl_match_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_access_cm1_tbl_match_spec_t");

  xfer += oprot->writeFieldBegin("op_hdr_optype", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->op_hdr_optype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("inswitch_hdr_is_sampled", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->inswitch_hdr_is_sampled);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("inswitch_hdr_is_cached", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->inswitch_hdr_is_cached);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_access_cm1_tbl_match_spec_t &a, netbufferv4_access_cm1_tbl_match_spec_t &b) {
  using ::std::swap;
  swap(a.op_hdr_optype, b.op_hdr_optype);
  swap(a.inswitch_hdr_is_sampled, b.inswitch_hdr_is_sampled);
  swap(a.inswitch_hdr_is_cached, b.inswitch_hdr_is_cached);
}

netbufferv4_access_cm1_tbl_match_spec_t::netbufferv4_access_cm1_tbl_match_spec_t(const netbufferv4_access_cm1_tbl_match_spec_t& other59) {
  op_hdr_optype = other59.op_hdr_optype;
  inswitch_hdr_is_sampled = other59.inswitch_hdr_is_sampled;
  inswitch_hdr_is_cached = other59.inswitch_hdr_is_cached;
}
netbufferv4_access_cm1_tbl_match_spec_t& netbufferv4_access_cm1_tbl_match_spec_t::operator=(const netbufferv4_access_cm1_tbl_match_spec_t& other60) {
  op_hdr_optype = other60.op_hdr_optype;
  inswitch_hdr_is_sampled = other60.inswitch_hdr_is_sampled;
  inswitch_hdr_is_cached = other60.inswitch_hdr_is_cached;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_access_cm1_tbl_match_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_access_cm1_tbl_match_spec_t(";
  out << "op_hdr_optype=" << to_string(obj.op_hdr_optype);
  out << ", " << "inswitch_hdr_is_sampled=" << to_string(obj.inswitch_hdr_is_sampled);
  out << ", " << "inswitch_hdr_is_cached=" << to_string(obj.inswitch_hdr_is_cached);
  out << ")";
  return out;
}


netbufferv4_access_cm2_tbl_match_spec_t::~netbufferv4_access_cm2_tbl_match_spec_t() throw() {
}


void netbufferv4_access_cm2_tbl_match_spec_t::__set_op_hdr_optype(const int16_t val) {
  this->op_hdr_optype = val;
}

void netbufferv4_access_cm2_tbl_match_spec_t::__set_inswitch_hdr_is_sampled(const int8_t val) {
  this->inswitch_hdr_is_sampled = val;
}

void netbufferv4_access_cm2_tbl_match_spec_t::__set_inswitch_hdr_is_cached(const int8_t val) {
  this->inswitch_hdr_is_cached = val;
}

const char* netbufferv4_access_cm2_tbl_match_spec_t::ascii_fingerprint = "874362235FCCF77E284413CBBBA335FE";
const uint8_t netbufferv4_access_cm2_tbl_match_spec_t::binary_fingerprint[16] = {0x87,0x43,0x62,0x23,0x5F,0xCC,0xF7,0x7E,0x28,0x44,0x13,0xCB,0xBB,0xA3,0x35,0xFE};

uint32_t netbufferv4_access_cm2_tbl_match_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_op_hdr_optype = false;
  bool isset_inswitch_hdr_is_sampled = false;
  bool isset_inswitch_hdr_is_cached = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->op_hdr_optype);
          isset_op_hdr_optype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->inswitch_hdr_is_sampled);
          isset_inswitch_hdr_is_sampled = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->inswitch_hdr_is_cached);
          isset_inswitch_hdr_is_cached = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_op_hdr_optype)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_inswitch_hdr_is_sampled)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_inswitch_hdr_is_cached)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_access_cm2_tbl_match_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_access_cm2_tbl_match_spec_t");

  xfer += oprot->writeFieldBegin("op_hdr_optype", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->op_hdr_optype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("inswitch_hdr_is_sampled", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->inswitch_hdr_is_sampled);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("inswitch_hdr_is_cached", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->inswitch_hdr_is_cached);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_access_cm2_tbl_match_spec_t &a, netbufferv4_access_cm2_tbl_match_spec_t &b) {
  using ::std::swap;
  swap(a.op_hdr_optype, b.op_hdr_optype);
  swap(a.inswitch_hdr_is_sampled, b.inswitch_hdr_is_sampled);
  swap(a.inswitch_hdr_is_cached, b.inswitch_hdr_is_cached);
}

netbufferv4_access_cm2_tbl_match_spec_t::netbufferv4_access_cm2_tbl_match_spec_t(const netbufferv4_access_cm2_tbl_match_spec_t& other61) {
  op_hdr_optype = other61.op_hdr_optype;
  inswitch_hdr_is_sampled = other61.inswitch_hdr_is_sampled;
  inswitch_hdr_is_cached = other61.inswitch_hdr_is_cached;
}
netbufferv4_access_cm2_tbl_match_spec_t& netbufferv4_access_cm2_tbl_match_spec_t::operator=(const netbufferv4_access_cm2_tbl_match_spec_t& other62) {
  op_hdr_optype = other62.op_hdr_optype;
  inswitch_hdr_is_sampled = other62.inswitch_hdr_is_sampled;
  inswitch_hdr_is_cached = other62.inswitch_hdr_is_cached;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_access_cm2_tbl_match_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_access_cm2_tbl_match_spec_t(";
  out << "op_hdr_optype=" << to_string(obj.op_hdr_optype);
  out << ", " << "inswitch_hdr_is_sampled=" << to_string(obj.inswitch_hdr_is_sampled);
  out << ", " << "inswitch_hdr_is_cached=" << to_string(obj.inswitch_hdr_is_cached);
  out << ")";
  return out;
}


netbufferv4_access_cm3_tbl_match_spec_t::~netbufferv4_access_cm3_tbl_match_spec_t() throw() {
}


void netbufferv4_access_cm3_tbl_match_spec_t::__set_op_hdr_optype(const int16_t val) {
  this->op_hdr_optype = val;
}

void netbufferv4_access_cm3_tbl_match_spec_t::__set_inswitch_hdr_is_sampled(const int8_t val) {
  this->inswitch_hdr_is_sampled = val;
}

void netbufferv4_access_cm3_tbl_match_spec_t::__set_inswitch_hdr_is_cached(const int8_t val) {
  this->inswitch_hdr_is_cached = val;
}

const char* netbufferv4_access_cm3_tbl_match_spec_t::ascii_fingerprint = "874362235FCCF77E284413CBBBA335FE";
const uint8_t netbufferv4_access_cm3_tbl_match_spec_t::binary_fingerprint[16] = {0x87,0x43,0x62,0x23,0x5F,0xCC,0xF7,0x7E,0x28,0x44,0x13,0xCB,0xBB,0xA3,0x35,0xFE};

uint32_t netbufferv4_access_cm3_tbl_match_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_op_hdr_optype = false;
  bool isset_inswitch_hdr_is_sampled = false;
  bool isset_inswitch_hdr_is_cached = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->op_hdr_optype);
          isset_op_hdr_optype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->inswitch_hdr_is_sampled);
          isset_inswitch_hdr_is_sampled = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->inswitch_hdr_is_cached);
          isset_inswitch_hdr_is_cached = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_op_hdr_optype)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_inswitch_hdr_is_sampled)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_inswitch_hdr_is_cached)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_access_cm3_tbl_match_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_access_cm3_tbl_match_spec_t");

  xfer += oprot->writeFieldBegin("op_hdr_optype", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->op_hdr_optype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("inswitch_hdr_is_sampled", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->inswitch_hdr_is_sampled);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("inswitch_hdr_is_cached", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->inswitch_hdr_is_cached);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_access_cm3_tbl_match_spec_t &a, netbufferv4_access_cm3_tbl_match_spec_t &b) {
  using ::std::swap;
  swap(a.op_hdr_optype, b.op_hdr_optype);
  swap(a.inswitch_hdr_is_sampled, b.inswitch_hdr_is_sampled);
  swap(a.inswitch_hdr_is_cached, b.inswitch_hdr_is_cached);
}

netbufferv4_access_cm3_tbl_match_spec_t::netbufferv4_access_cm3_tbl_match_spec_t(const netbufferv4_access_cm3_tbl_match_spec_t& other63) {
  op_hdr_optype = other63.op_hdr_optype;
  inswitch_hdr_is_sampled = other63.inswitch_hdr_is_sampled;
  inswitch_hdr_is_cached = other63.inswitch_hdr_is_cached;
}
netbufferv4_access_cm3_tbl_match_spec_t& netbufferv4_access_cm3_tbl_match_spec_t::operator=(const netbufferv4_access_cm3_tbl_match_spec_t& other64) {
  op_hdr_optype = other64.op_hdr_optype;
  inswitch_hdr_is_sampled = other64.inswitch_hdr_is_sampled;
  inswitch_hdr_is_cached = other64.inswitch_hdr_is_cached;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_access_cm3_tbl_match_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_access_cm3_tbl_match_spec_t(";
  out << "op_hdr_optype=" << to_string(obj.op_hdr_optype);
  out << ", " << "inswitch_hdr_is_sampled=" << to_string(obj.inswitch_hdr_is_sampled);
  out << ", " << "inswitch_hdr_is_cached=" << to_string(obj.inswitch_hdr_is_cached);
  out << ")";
  return out;
}


netbufferv4_access_cm4_tbl_match_spec_t::~netbufferv4_access_cm4_tbl_match_spec_t() throw() {
}


void netbufferv4_access_cm4_tbl_match_spec_t::__set_op_hdr_optype(const int16_t val) {
  this->op_hdr_optype = val;
}

void netbufferv4_access_cm4_tbl_match_spec_t::__set_inswitch_hdr_is_sampled(const int8_t val) {
  this->inswitch_hdr_is_sampled = val;
}

void netbufferv4_access_cm4_tbl_match_spec_t::__set_inswitch_hdr_is_cached(const int8_t val) {
  this->inswitch_hdr_is_cached = val;
}

const char* netbufferv4_access_cm4_tbl_match_spec_t::ascii_fingerprint = "874362235FCCF77E284413CBBBA335FE";
const uint8_t netbufferv4_access_cm4_tbl_match_spec_t::binary_fingerprint[16] = {0x87,0x43,0x62,0x23,0x5F,0xCC,0xF7,0x7E,0x28,0x44,0x13,0xCB,0xBB,0xA3,0x35,0xFE};

uint32_t netbufferv4_access_cm4_tbl_match_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_op_hdr_optype = false;
  bool isset_inswitch_hdr_is_sampled = false;
  bool isset_inswitch_hdr_is_cached = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->op_hdr_optype);
          isset_op_hdr_optype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->inswitch_hdr_is_sampled);
          isset_inswitch_hdr_is_sampled = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->inswitch_hdr_is_cached);
          isset_inswitch_hdr_is_cached = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_op_hdr_optype)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_inswitch_hdr_is_sampled)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_inswitch_hdr_is_cached)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_access_cm4_tbl_match_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_access_cm4_tbl_match_spec_t");

  xfer += oprot->writeFieldBegin("op_hdr_optype", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->op_hdr_optype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("inswitch_hdr_is_sampled", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->inswitch_hdr_is_sampled);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("inswitch_hdr_is_cached", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->inswitch_hdr_is_cached);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_access_cm4_tbl_match_spec_t &a, netbufferv4_access_cm4_tbl_match_spec_t &b) {
  using ::std::swap;
  swap(a.op_hdr_optype, b.op_hdr_optype);
  swap(a.inswitch_hdr_is_sampled, b.inswitch_hdr_is_sampled);
  swap(a.inswitch_hdr_is_cached, b.inswitch_hdr_is_cached);
}

netbufferv4_access_cm4_tbl_match_spec_t::netbufferv4_access_cm4_tbl_match_spec_t(const netbufferv4_access_cm4_tbl_match_spec_t& other65) {
  op_hdr_optype = other65.op_hdr_optype;
  inswitch_hdr_is_sampled = other65.inswitch_hdr_is_sampled;
  inswitch_hdr_is_cached = other65.inswitch_hdr_is_cached;
}
netbufferv4_access_cm4_tbl_match_spec_t& netbufferv4_access_cm4_tbl_match_spec_t::operator=(const netbufferv4_access_cm4_tbl_match_spec_t& other66) {
  op_hdr_optype = other66.op_hdr_optype;
  inswitch_hdr_is_sampled = other66.inswitch_hdr_is_sampled;
  inswitch_hdr_is_cached = other66.inswitch_hdr_is_cached;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_access_cm4_tbl_match_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_access_cm4_tbl_match_spec_t(";
  out << "op_hdr_optype=" << to_string(obj.op_hdr_optype);
  out << ", " << "inswitch_hdr_is_sampled=" << to_string(obj.inswitch_hdr_is_sampled);
  out << ", " << "inswitch_hdr_is_cached=" << to_string(obj.inswitch_hdr_is_cached);
  out << ")";
  return out;
}


netbufferv4_access_deleted_tbl_match_spec_t::~netbufferv4_access_deleted_tbl_match_spec_t() throw() {
}


void netbufferv4_access_deleted_tbl_match_spec_t::__set_op_hdr_optype(const int16_t val) {
  this->op_hdr_optype = val;
}

void netbufferv4_access_deleted_tbl_match_spec_t::__set_inswitch_hdr_is_cached(const int8_t val) {
  this->inswitch_hdr_is_cached = val;
}

void netbufferv4_access_deleted_tbl_match_spec_t::__set_validvalue_hdr_validvalue(const int8_t val) {
  this->validvalue_hdr_validvalue = val;
}

void netbufferv4_access_deleted_tbl_match_spec_t::__set_meta_is_latest(const int8_t val) {
  this->meta_is_latest = val;
}

const char* netbufferv4_access_deleted_tbl_match_spec_t::ascii_fingerprint = "FA15C7D77CA497D65C649057DED15F08";
const uint8_t netbufferv4_access_deleted_tbl_match_spec_t::binary_fingerprint[16] = {0xFA,0x15,0xC7,0xD7,0x7C,0xA4,0x97,0xD6,0x5C,0x64,0x90,0x57,0xDE,0xD1,0x5F,0x08};

uint32_t netbufferv4_access_deleted_tbl_match_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_op_hdr_optype = false;
  bool isset_inswitch_hdr_is_cached = false;
  bool isset_validvalue_hdr_validvalue = false;
  bool isset_meta_is_latest = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->op_hdr_optype);
          isset_op_hdr_optype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->inswitch_hdr_is_cached);
          isset_inswitch_hdr_is_cached = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->validvalue_hdr_validvalue);
          isset_validvalue_hdr_validvalue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->meta_is_latest);
          isset_meta_is_latest = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_op_hdr_optype)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_inswitch_hdr_is_cached)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_validvalue_hdr_validvalue)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_meta_is_latest)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_access_deleted_tbl_match_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_access_deleted_tbl_match_spec_t");

  xfer += oprot->writeFieldBegin("op_hdr_optype", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->op_hdr_optype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("inswitch_hdr_is_cached", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->inswitch_hdr_is_cached);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("validvalue_hdr_validvalue", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->validvalue_hdr_validvalue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("meta_is_latest", ::apache::thrift::protocol::T_BYTE, 4);
  xfer += oprot->writeByte(this->meta_is_latest);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_access_deleted_tbl_match_spec_t &a, netbufferv4_access_deleted_tbl_match_spec_t &b) {
  using ::std::swap;
  swap(a.op_hdr_optype, b.op_hdr_optype);
  swap(a.inswitch_hdr_is_cached, b.inswitch_hdr_is_cached);
  swap(a.validvalue_hdr_validvalue, b.validvalue_hdr_validvalue);
  swap(a.meta_is_latest, b.meta_is_latest);
}

netbufferv4_access_deleted_tbl_match_spec_t::netbufferv4_access_deleted_tbl_match_spec_t(const netbufferv4_access_deleted_tbl_match_spec_t& other67) {
  op_hdr_optype = other67.op_hdr_optype;
  inswitch_hdr_is_cached = other67.inswitch_hdr_is_cached;
  validvalue_hdr_validvalue = other67.validvalue_hdr_validvalue;
  meta_is_latest = other67.meta_is_latest;
}
netbufferv4_access_deleted_tbl_match_spec_t& netbufferv4_access_deleted_tbl_match_spec_t::operator=(const netbufferv4_access_deleted_tbl_match_spec_t& other68) {
  op_hdr_optype = other68.op_hdr_optype;
  inswitch_hdr_is_cached = other68.inswitch_hdr_is_cached;
  validvalue_hdr_validvalue = other68.validvalue_hdr_validvalue;
  meta_is_latest = other68.meta_is_latest;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_access_deleted_tbl_match_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_access_deleted_tbl_match_spec_t(";
  out << "op_hdr_optype=" << to_string(obj.op_hdr_optype);
  out << ", " << "inswitch_hdr_is_cached=" << to_string(obj.inswitch_hdr_is_cached);
  out << ", " << "validvalue_hdr_validvalue=" << to_string(obj.validvalue_hdr_validvalue);
  out << ", " << "meta_is_latest=" << to_string(obj.meta_is_latest);
  out << ")";
  return out;
}


netbufferv4_access_latest_tbl_match_spec_t::~netbufferv4_access_latest_tbl_match_spec_t() throw() {
}


void netbufferv4_access_latest_tbl_match_spec_t::__set_op_hdr_optype(const int16_t val) {
  this->op_hdr_optype = val;
}

void netbufferv4_access_latest_tbl_match_spec_t::__set_inswitch_hdr_is_cached(const int8_t val) {
  this->inswitch_hdr_is_cached = val;
}

void netbufferv4_access_latest_tbl_match_spec_t::__set_validvalue_hdr_validvalue(const int8_t val) {
  this->validvalue_hdr_validvalue = val;
}

const char* netbufferv4_access_latest_tbl_match_spec_t::ascii_fingerprint = "874362235FCCF77E284413CBBBA335FE";
const uint8_t netbufferv4_access_latest_tbl_match_spec_t::binary_fingerprint[16] = {0x87,0x43,0x62,0x23,0x5F,0xCC,0xF7,0x7E,0x28,0x44,0x13,0xCB,0xBB,0xA3,0x35,0xFE};

uint32_t netbufferv4_access_latest_tbl_match_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_op_hdr_optype = false;
  bool isset_inswitch_hdr_is_cached = false;
  bool isset_validvalue_hdr_validvalue = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->op_hdr_optype);
          isset_op_hdr_optype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->inswitch_hdr_is_cached);
          isset_inswitch_hdr_is_cached = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->validvalue_hdr_validvalue);
          isset_validvalue_hdr_validvalue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_op_hdr_optype)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_inswitch_hdr_is_cached)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_validvalue_hdr_validvalue)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_access_latest_tbl_match_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_access_latest_tbl_match_spec_t");

  xfer += oprot->writeFieldBegin("op_hdr_optype", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->op_hdr_optype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("inswitch_hdr_is_cached", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->inswitch_hdr_is_cached);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("validvalue_hdr_validvalue", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->validvalue_hdr_validvalue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_access_latest_tbl_match_spec_t &a, netbufferv4_access_latest_tbl_match_spec_t &b) {
  using ::std::swap;
  swap(a.op_hdr_optype, b.op_hdr_optype);
  swap(a.inswitch_hdr_is_cached, b.inswitch_hdr_is_cached);
  swap(a.validvalue_hdr_validvalue, b.validvalue_hdr_validvalue);
}

netbufferv4_access_latest_tbl_match_spec_t::netbufferv4_access_latest_tbl_match_spec_t(const netbufferv4_access_latest_tbl_match_spec_t& other69) {
  op_hdr_optype = other69.op_hdr_optype;
  inswitch_hdr_is_cached = other69.inswitch_hdr_is_cached;
  validvalue_hdr_validvalue = other69.validvalue_hdr_validvalue;
}
netbufferv4_access_latest_tbl_match_spec_t& netbufferv4_access_latest_tbl_match_spec_t::operator=(const netbufferv4_access_latest_tbl_match_spec_t& other70) {
  op_hdr_optype = other70.op_hdr_optype;
  inswitch_hdr_is_cached = other70.inswitch_hdr_is_cached;
  validvalue_hdr_validvalue = other70.validvalue_hdr_validvalue;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_access_latest_tbl_match_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_access_latest_tbl_match_spec_t(";
  out << "op_hdr_optype=" << to_string(obj.op_hdr_optype);
  out << ", " << "inswitch_hdr_is_cached=" << to_string(obj.inswitch_hdr_is_cached);
  out << ", " << "validvalue_hdr_validvalue=" << to_string(obj.validvalue_hdr_validvalue);
  out << ")";
  return out;
}


netbufferv4_access_savedseq_tbl_match_spec_t::~netbufferv4_access_savedseq_tbl_match_spec_t() throw() {
}


void netbufferv4_access_savedseq_tbl_match_spec_t::__set_op_hdr_optype(const int16_t val) {
  this->op_hdr_optype = val;
}

void netbufferv4_access_savedseq_tbl_match_spec_t::__set_inswitch_hdr_is_cached(const int8_t val) {
  this->inswitch_hdr_is_cached = val;
}

void netbufferv4_access_savedseq_tbl_match_spec_t::__set_validvalue_hdr_validvalue(const int8_t val) {
  this->validvalue_hdr_validvalue = val;
}

void netbufferv4_access_savedseq_tbl_match_spec_t::__set_meta_is_latest(const int8_t val) {
  this->meta_is_latest = val;
}

const char* netbufferv4_access_savedseq_tbl_match_spec_t::ascii_fingerprint = "FA15C7D77CA497D65C649057DED15F08";
const uint8_t netbufferv4_access_savedseq_tbl_match_spec_t::binary_fingerprint[16] = {0xFA,0x15,0xC7,0xD7,0x7C,0xA4,0x97,0xD6,0x5C,0x64,0x90,0x57,0xDE,0xD1,0x5F,0x08};

uint32_t netbufferv4_access_savedseq_tbl_match_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_op_hdr_optype = false;
  bool isset_inswitch_hdr_is_cached = false;
  bool isset_validvalue_hdr_validvalue = false;
  bool isset_meta_is_latest = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->op_hdr_optype);
          isset_op_hdr_optype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->inswitch_hdr_is_cached);
          isset_inswitch_hdr_is_cached = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->validvalue_hdr_validvalue);
          isset_validvalue_hdr_validvalue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->meta_is_latest);
          isset_meta_is_latest = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_op_hdr_optype)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_inswitch_hdr_is_cached)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_validvalue_hdr_validvalue)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_meta_is_latest)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_access_savedseq_tbl_match_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_access_savedseq_tbl_match_spec_t");

  xfer += oprot->writeFieldBegin("op_hdr_optype", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->op_hdr_optype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("inswitch_hdr_is_cached", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->inswitch_hdr_is_cached);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("validvalue_hdr_validvalue", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->validvalue_hdr_validvalue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("meta_is_latest", ::apache::thrift::protocol::T_BYTE, 4);
  xfer += oprot->writeByte(this->meta_is_latest);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_access_savedseq_tbl_match_spec_t &a, netbufferv4_access_savedseq_tbl_match_spec_t &b) {
  using ::std::swap;
  swap(a.op_hdr_optype, b.op_hdr_optype);
  swap(a.inswitch_hdr_is_cached, b.inswitch_hdr_is_cached);
  swap(a.validvalue_hdr_validvalue, b.validvalue_hdr_validvalue);
  swap(a.meta_is_latest, b.meta_is_latest);
}

netbufferv4_access_savedseq_tbl_match_spec_t::netbufferv4_access_savedseq_tbl_match_spec_t(const netbufferv4_access_savedseq_tbl_match_spec_t& other71) {
  op_hdr_optype = other71.op_hdr_optype;
  inswitch_hdr_is_cached = other71.inswitch_hdr_is_cached;
  validvalue_hdr_validvalue = other71.validvalue_hdr_validvalue;
  meta_is_latest = other71.meta_is_latest;
}
netbufferv4_access_savedseq_tbl_match_spec_t& netbufferv4_access_savedseq_tbl_match_spec_t::operator=(const netbufferv4_access_savedseq_tbl_match_spec_t& other72) {
  op_hdr_optype = other72.op_hdr_optype;
  inswitch_hdr_is_cached = other72.inswitch_hdr_is_cached;
  validvalue_hdr_validvalue = other72.validvalue_hdr_validvalue;
  meta_is_latest = other72.meta_is_latest;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_access_savedseq_tbl_match_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_access_savedseq_tbl_match_spec_t(";
  out << "op_hdr_optype=" << to_string(obj.op_hdr_optype);
  out << ", " << "inswitch_hdr_is_cached=" << to_string(obj.inswitch_hdr_is_cached);
  out << ", " << "validvalue_hdr_validvalue=" << to_string(obj.validvalue_hdr_validvalue);
  out << ", " << "meta_is_latest=" << to_string(obj.meta_is_latest);
  out << ")";
  return out;
}


netbufferv4_access_seq_tbl_match_spec_t::~netbufferv4_access_seq_tbl_match_spec_t() throw() {
}


void netbufferv4_access_seq_tbl_match_spec_t::__set_op_hdr_optype(const int16_t val) {
  this->op_hdr_optype = val;
}

const char* netbufferv4_access_seq_tbl_match_spec_t::ascii_fingerprint = "565787C31CF2D774B532CB755189BF39";
const uint8_t netbufferv4_access_seq_tbl_match_spec_t::binary_fingerprint[16] = {0x56,0x57,0x87,0xC3,0x1C,0xF2,0xD7,0x74,0xB5,0x32,0xCB,0x75,0x51,0x89,0xBF,0x39};

uint32_t netbufferv4_access_seq_tbl_match_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_op_hdr_optype = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->op_hdr_optype);
          isset_op_hdr_optype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_op_hdr_optype)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_access_seq_tbl_match_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_access_seq_tbl_match_spec_t");

  xfer += oprot->writeFieldBegin("op_hdr_optype", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->op_hdr_optype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_access_seq_tbl_match_spec_t &a, netbufferv4_access_seq_tbl_match_spec_t &b) {
  using ::std::swap;
  swap(a.op_hdr_optype, b.op_hdr_optype);
}

netbufferv4_access_seq_tbl_match_spec_t::netbufferv4_access_seq_tbl_match_spec_t(const netbufferv4_access_seq_tbl_match_spec_t& other73) {
  op_hdr_optype = other73.op_hdr_optype;
}
netbufferv4_access_seq_tbl_match_spec_t& netbufferv4_access_seq_tbl_match_spec_t::operator=(const netbufferv4_access_seq_tbl_match_spec_t& other74) {
  op_hdr_optype = other74.op_hdr_optype;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_access_seq_tbl_match_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_access_seq_tbl_match_spec_t(";
  out << "op_hdr_optype=" << to_string(obj.op_hdr_optype);
  out << ")";
  return out;
}


netbufferv4_access_validvalue_tbl_match_spec_t::~netbufferv4_access_validvalue_tbl_match_spec_t() throw() {
}


void netbufferv4_access_validvalue_tbl_match_spec_t::__set_op_hdr_optype(const int16_t val) {
  this->op_hdr_optype = val;
}

void netbufferv4_access_validvalue_tbl_match_spec_t::__set_inswitch_hdr_is_cached(const int8_t val) {
  this->inswitch_hdr_is_cached = val;
}

const char* netbufferv4_access_validvalue_tbl_match_spec_t::ascii_fingerprint = "2F32B8B152B4427223DB9D670291659B";
const uint8_t netbufferv4_access_validvalue_tbl_match_spec_t::binary_fingerprint[16] = {0x2F,0x32,0xB8,0xB1,0x52,0xB4,0x42,0x72,0x23,0xDB,0x9D,0x67,0x02,0x91,0x65,0x9B};

uint32_t netbufferv4_access_validvalue_tbl_match_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_op_hdr_optype = false;
  bool isset_inswitch_hdr_is_cached = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->op_hdr_optype);
          isset_op_hdr_optype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->inswitch_hdr_is_cached);
          isset_inswitch_hdr_is_cached = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_op_hdr_optype)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_inswitch_hdr_is_cached)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_access_validvalue_tbl_match_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_access_validvalue_tbl_match_spec_t");

  xfer += oprot->writeFieldBegin("op_hdr_optype", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->op_hdr_optype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("inswitch_hdr_is_cached", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->inswitch_hdr_is_cached);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_access_validvalue_tbl_match_spec_t &a, netbufferv4_access_validvalue_tbl_match_spec_t &b) {
  using ::std::swap;
  swap(a.op_hdr_optype, b.op_hdr_optype);
  swap(a.inswitch_hdr_is_cached, b.inswitch_hdr_is_cached);
}

netbufferv4_access_validvalue_tbl_match_spec_t::netbufferv4_access_validvalue_tbl_match_spec_t(const netbufferv4_access_validvalue_tbl_match_spec_t& other75) {
  op_hdr_optype = other75.op_hdr_optype;
  inswitch_hdr_is_cached = other75.inswitch_hdr_is_cached;
}
netbufferv4_access_validvalue_tbl_match_spec_t& netbufferv4_access_validvalue_tbl_match_spec_t::operator=(const netbufferv4_access_validvalue_tbl_match_spec_t& other76) {
  op_hdr_optype = other76.op_hdr_optype;
  inswitch_hdr_is_cached = other76.inswitch_hdr_is_cached;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_access_validvalue_tbl_match_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_access_validvalue_tbl_match_spec_t(";
  out << "op_hdr_optype=" << to_string(obj.op_hdr_optype);
  out << ", " << "inswitch_hdr_is_cached=" << to_string(obj.inswitch_hdr_is_cached);
  out << ")";
  return out;
}


netbufferv4_add_and_remove_value_header_tbl_match_spec_t::~netbufferv4_add_and_remove_value_header_tbl_match_spec_t() throw() {
}


void netbufferv4_add_and_remove_value_header_tbl_match_spec_t::__set_op_hdr_optype(const int16_t val) {
  this->op_hdr_optype = val;
}

void netbufferv4_add_and_remove_value_header_tbl_match_spec_t::__set_vallen_hdr_vallen_start(const int16_t val) {
  this->vallen_hdr_vallen_start = val;
}

void netbufferv4_add_and_remove_value_header_tbl_match_spec_t::__set_vallen_hdr_vallen_end(const int16_t val) {
  this->vallen_hdr_vallen_end = val;
}

const char* netbufferv4_add_and_remove_value_header_tbl_match_spec_t::ascii_fingerprint = "EEBEE5F2DAE75B1AB615147C163DCA93";
const uint8_t netbufferv4_add_and_remove_value_header_tbl_match_spec_t::binary_fingerprint[16] = {0xEE,0xBE,0xE5,0xF2,0xDA,0xE7,0x5B,0x1A,0xB6,0x15,0x14,0x7C,0x16,0x3D,0xCA,0x93};

uint32_t netbufferv4_add_and_remove_value_header_tbl_match_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_op_hdr_optype = false;
  bool isset_vallen_hdr_vallen_start = false;
  bool isset_vallen_hdr_vallen_end = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->op_hdr_optype);
          isset_op_hdr_optype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->vallen_hdr_vallen_start);
          isset_vallen_hdr_vallen_start = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->vallen_hdr_vallen_end);
          isset_vallen_hdr_vallen_end = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_op_hdr_optype)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_vallen_hdr_vallen_start)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_vallen_hdr_vallen_end)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_add_and_remove_value_header_tbl_match_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_add_and_remove_value_header_tbl_match_spec_t");

  xfer += oprot->writeFieldBegin("op_hdr_optype", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->op_hdr_optype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vallen_hdr_vallen_start", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->vallen_hdr_vallen_start);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vallen_hdr_vallen_end", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->vallen_hdr_vallen_end);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_add_and_remove_value_header_tbl_match_spec_t &a, netbufferv4_add_and_remove_value_header_tbl_match_spec_t &b) {
  using ::std::swap;
  swap(a.op_hdr_optype, b.op_hdr_optype);
  swap(a.vallen_hdr_vallen_start, b.vallen_hdr_vallen_start);
  swap(a.vallen_hdr_vallen_end, b.vallen_hdr_vallen_end);
}

netbufferv4_add_and_remove_value_header_tbl_match_spec_t::netbufferv4_add_and_remove_value_header_tbl_match_spec_t(const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& other77) {
  op_hdr_optype = other77.op_hdr_optype;
  vallen_hdr_vallen_start = other77.vallen_hdr_vallen_start;
  vallen_hdr_vallen_end = other77.vallen_hdr_vallen_end;
}
netbufferv4_add_and_remove_value_header_tbl_match_spec_t& netbufferv4_add_and_remove_value_header_tbl_match_spec_t::operator=(const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& other78) {
  op_hdr_optype = other78.op_hdr_optype;
  vallen_hdr_vallen_start = other78.vallen_hdr_vallen_start;
  vallen_hdr_vallen_end = other78.vallen_hdr_vallen_end;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_add_and_remove_value_header_tbl_match_spec_t(";
  out << "op_hdr_optype=" << to_string(obj.op_hdr_optype);
  out << ", " << "vallen_hdr_vallen_start=" << to_string(obj.vallen_hdr_vallen_start);
  out << ", " << "vallen_hdr_vallen_end=" << to_string(obj.vallen_hdr_vallen_end);
  out << ")";
  return out;
}


netbufferv4_cache_lookup_tbl_match_spec_t::~netbufferv4_cache_lookup_tbl_match_spec_t() throw() {
}


void netbufferv4_cache_lookup_tbl_match_spec_t::__set_op_hdr_keylolo(const int32_t val) {
  this->op_hdr_keylolo = val;
}

void netbufferv4_cache_lookup_tbl_match_spec_t::__set_op_hdr_keylohi(const int32_t val) {
  this->op_hdr_keylohi = val;
}

void netbufferv4_cache_lookup_tbl_match_spec_t::__set_op_hdr_keyhilo(const int32_t val) {
  this->op_hdr_keyhilo = val;
}

void netbufferv4_cache_lookup_tbl_match_spec_t::__set_op_hdr_keyhihilo(const int16_t val) {
  this->op_hdr_keyhihilo = val;
}

void netbufferv4_cache_lookup_tbl_match_spec_t::__set_op_hdr_keyhihihi(const int16_t val) {
  this->op_hdr_keyhihihi = val;
}

void netbufferv4_cache_lookup_tbl_match_spec_t::__set_meta_need_recirculate(const int8_t val) {
  this->meta_need_recirculate = val;
}

const char* netbufferv4_cache_lookup_tbl_match_spec_t::ascii_fingerprint = "CB7F5B7A6B1A7616850FBCE2FE09CDFE";
const uint8_t netbufferv4_cache_lookup_tbl_match_spec_t::binary_fingerprint[16] = {0xCB,0x7F,0x5B,0x7A,0x6B,0x1A,0x76,0x16,0x85,0x0F,0xBC,0xE2,0xFE,0x09,0xCD,0xFE};

uint32_t netbufferv4_cache_lookup_tbl_match_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_op_hdr_keylolo = false;
  bool isset_op_hdr_keylohi = false;
  bool isset_op_hdr_keyhilo = false;
  bool isset_op_hdr_keyhihilo = false;
  bool isset_op_hdr_keyhihihi = false;
  bool isset_meta_need_recirculate = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->op_hdr_keylolo);
          isset_op_hdr_keylolo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->op_hdr_keylohi);
          isset_op_hdr_keylohi = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->op_hdr_keyhilo);
          isset_op_hdr_keyhilo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->op_hdr_keyhihilo);
          isset_op_hdr_keyhihilo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->op_hdr_keyhihihi);
          isset_op_hdr_keyhihihi = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->meta_need_recirculate);
          isset_meta_need_recirculate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_op_hdr_keylolo)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_op_hdr_keylohi)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_op_hdr_keyhilo)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_op_hdr_keyhihilo)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_op_hdr_keyhihihi)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_meta_need_recirculate)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_cache_lookup_tbl_match_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_cache_lookup_tbl_match_spec_t");

  xfer += oprot->writeFieldBegin("op_hdr_keylolo", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->op_hdr_keylolo);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("op_hdr_keylohi", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->op_hdr_keylohi);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("op_hdr_keyhilo", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->op_hdr_keyhilo);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("op_hdr_keyhihilo", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->op_hdr_keyhihilo);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("op_hdr_keyhihihi", ::apache::thrift::protocol::T_I16, 5);
  xfer += oprot->writeI16(this->op_hdr_keyhihihi);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("meta_need_recirculate", ::apache::thrift::protocol::T_BYTE, 6);
  xfer += oprot->writeByte(this->meta_need_recirculate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_cache_lookup_tbl_match_spec_t &a, netbufferv4_cache_lookup_tbl_match_spec_t &b) {
  using ::std::swap;
  swap(a.op_hdr_keylolo, b.op_hdr_keylolo);
  swap(a.op_hdr_keylohi, b.op_hdr_keylohi);
  swap(a.op_hdr_keyhilo, b.op_hdr_keyhilo);
  swap(a.op_hdr_keyhihilo, b.op_hdr_keyhihilo);
  swap(a.op_hdr_keyhihihi, b.op_hdr_keyhihihi);
  swap(a.meta_need_recirculate, b.meta_need_recirculate);
}

netbufferv4_cache_lookup_tbl_match_spec_t::netbufferv4_cache_lookup_tbl_match_spec_t(const netbufferv4_cache_lookup_tbl_match_spec_t& other79) {
  op_hdr_keylolo = other79.op_hdr_keylolo;
  op_hdr_keylohi = other79.op_hdr_keylohi;
  op_hdr_keyhilo = other79.op_hdr_keyhilo;
  op_hdr_keyhihilo = other79.op_hdr_keyhihilo;
  op_hdr_keyhihihi = other79.op_hdr_keyhihihi;
  meta_need_recirculate = other79.meta_need_recirculate;
}
netbufferv4_cache_lookup_tbl_match_spec_t& netbufferv4_cache_lookup_tbl_match_spec_t::operator=(const netbufferv4_cache_lookup_tbl_match_spec_t& other80) {
  op_hdr_keylolo = other80.op_hdr_keylolo;
  op_hdr_keylohi = other80.op_hdr_keylohi;
  op_hdr_keyhilo = other80.op_hdr_keyhilo;
  op_hdr_keyhihilo = other80.op_hdr_keyhihilo;
  op_hdr_keyhihihi = other80.op_hdr_keyhihihi;
  meta_need_recirculate = other80.meta_need_recirculate;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_cache_lookup_tbl_match_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_cache_lookup_tbl_match_spec_t(";
  out << "op_hdr_keylolo=" << to_string(obj.op_hdr_keylolo);
  out << ", " << "op_hdr_keylohi=" << to_string(obj.op_hdr_keylohi);
  out << ", " << "op_hdr_keyhilo=" << to_string(obj.op_hdr_keyhilo);
  out << ", " << "op_hdr_keyhihilo=" << to_string(obj.op_hdr_keyhihilo);
  out << ", " << "op_hdr_keyhihihi=" << to_string(obj.op_hdr_keyhihihi);
  out << ", " << "meta_need_recirculate=" << to_string(obj.meta_need_recirculate);
  out << ")";
  return out;
}


netbufferv4_drop_tbl_match_spec_t::~netbufferv4_drop_tbl_match_spec_t() throw() {
}


void netbufferv4_drop_tbl_match_spec_t::__set_op_hdr_optype(const int16_t val) {
  this->op_hdr_optype = val;
}

const char* netbufferv4_drop_tbl_match_spec_t::ascii_fingerprint = "565787C31CF2D774B532CB755189BF39";
const uint8_t netbufferv4_drop_tbl_match_spec_t::binary_fingerprint[16] = {0x56,0x57,0x87,0xC3,0x1C,0xF2,0xD7,0x74,0xB5,0x32,0xCB,0x75,0x51,0x89,0xBF,0x39};

uint32_t netbufferv4_drop_tbl_match_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_op_hdr_optype = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->op_hdr_optype);
          isset_op_hdr_optype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_op_hdr_optype)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_drop_tbl_match_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_drop_tbl_match_spec_t");

  xfer += oprot->writeFieldBegin("op_hdr_optype", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->op_hdr_optype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_drop_tbl_match_spec_t &a, netbufferv4_drop_tbl_match_spec_t &b) {
  using ::std::swap;
  swap(a.op_hdr_optype, b.op_hdr_optype);
}

netbufferv4_drop_tbl_match_spec_t::netbufferv4_drop_tbl_match_spec_t(const netbufferv4_drop_tbl_match_spec_t& other81) {
  op_hdr_optype = other81.op_hdr_optype;
}
netbufferv4_drop_tbl_match_spec_t& netbufferv4_drop_tbl_match_spec_t::operator=(const netbufferv4_drop_tbl_match_spec_t& other82) {
  op_hdr_optype = other82.op_hdr_optype;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_drop_tbl_match_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_drop_tbl_match_spec_t(";
  out << "op_hdr_optype=" << to_string(obj.op_hdr_optype);
  out << ")";
  return out;
}


netbufferv4_eg_port_forward_tbl_match_spec_t::~netbufferv4_eg_port_forward_tbl_match_spec_t() throw() {
}


void netbufferv4_eg_port_forward_tbl_match_spec_t::__set_op_hdr_optype(const int16_t val) {
  this->op_hdr_optype = val;
}

void netbufferv4_eg_port_forward_tbl_match_spec_t::__set_inswitch_hdr_is_cached(const int8_t val) {
  this->inswitch_hdr_is_cached = val;
}

void netbufferv4_eg_port_forward_tbl_match_spec_t::__set_meta_is_hot(const int8_t val) {
  this->meta_is_hot = val;
}

void netbufferv4_eg_port_forward_tbl_match_spec_t::__set_validvalue_hdr_validvalue(const int8_t val) {
  this->validvalue_hdr_validvalue = val;
}

void netbufferv4_eg_port_forward_tbl_match_spec_t::__set_meta_is_latest(const int8_t val) {
  this->meta_is_latest = val;
}

void netbufferv4_eg_port_forward_tbl_match_spec_t::__set_meta_is_deleted(const int8_t val) {
  this->meta_is_deleted = val;
}

void netbufferv4_eg_port_forward_tbl_match_spec_t::__set_inswitch_hdr_client_sid(const int16_t val) {
  this->inswitch_hdr_client_sid = val;
}

void netbufferv4_eg_port_forward_tbl_match_spec_t::__set_meta_is_lastclone_for_pktloss(const int8_t val) {
  this->meta_is_lastclone_for_pktloss = val;
}

void netbufferv4_eg_port_forward_tbl_match_spec_t::__set_inswitch_hdr_snapshot_flag(const int8_t val) {
  this->inswitch_hdr_snapshot_flag = val;
}

void netbufferv4_eg_port_forward_tbl_match_spec_t::__set_meta_is_case1(const int8_t val) {
  this->meta_is_case1 = val;
}

void netbufferv4_eg_port_forward_tbl_match_spec_t::__set_meta_is_last_scansplit(const int8_t val) {
  this->meta_is_last_scansplit = val;
}

void netbufferv4_eg_port_forward_tbl_match_spec_t::__set_meta_server_sid(const int16_t val) {
  this->meta_server_sid = val;
}

const char* netbufferv4_eg_port_forward_tbl_match_spec_t::ascii_fingerprint = "5BFF5F648E277DFF5511AE0D5C3CEAA3";
const uint8_t netbufferv4_eg_port_forward_tbl_match_spec_t::binary_fingerprint[16] = {0x5B,0xFF,0x5F,0x64,0x8E,0x27,0x7D,0xFF,0x55,0x11,0xAE,0x0D,0x5C,0x3C,0xEA,0xA3};

uint32_t netbufferv4_eg_port_forward_tbl_match_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_op_hdr_optype = false;
  bool isset_inswitch_hdr_is_cached = false;
  bool isset_meta_is_hot = false;
  bool isset_validvalue_hdr_validvalue = false;
  bool isset_meta_is_latest = false;
  bool isset_meta_is_deleted = false;
  bool isset_inswitch_hdr_client_sid = false;
  bool isset_meta_is_lastclone_for_pktloss = false;
  bool isset_inswitch_hdr_snapshot_flag = false;
  bool isset_meta_is_case1 = false;
  bool isset_meta_is_last_scansplit = false;
  bool isset_meta_server_sid = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->op_hdr_optype);
          isset_op_hdr_optype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->inswitch_hdr_is_cached);
          isset_inswitch_hdr_is_cached = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->meta_is_hot);
          isset_meta_is_hot = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->validvalue_hdr_validvalue);
          isset_validvalue_hdr_validvalue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->meta_is_latest);
          isset_meta_is_latest = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->meta_is_deleted);
          isset_meta_is_deleted = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->inswitch_hdr_client_sid);
          isset_inswitch_hdr_client_sid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->meta_is_lastclone_for_pktloss);
          isset_meta_is_lastclone_for_pktloss = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->inswitch_hdr_snapshot_flag);
          isset_inswitch_hdr_snapshot_flag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->meta_is_case1);
          isset_meta_is_case1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->meta_is_last_scansplit);
          isset_meta_is_last_scansplit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->meta_server_sid);
          isset_meta_server_sid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_op_hdr_optype)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_inswitch_hdr_is_cached)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_meta_is_hot)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_validvalue_hdr_validvalue)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_meta_is_latest)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_meta_is_deleted)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_inswitch_hdr_client_sid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_meta_is_lastclone_for_pktloss)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_inswitch_hdr_snapshot_flag)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_meta_is_case1)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_meta_is_last_scansplit)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_meta_server_sid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_eg_port_forward_tbl_match_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_eg_port_forward_tbl_match_spec_t");

  xfer += oprot->writeFieldBegin("op_hdr_optype", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->op_hdr_optype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("inswitch_hdr_is_cached", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->inswitch_hdr_is_cached);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("meta_is_hot", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->meta_is_hot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("validvalue_hdr_validvalue", ::apache::thrift::protocol::T_BYTE, 4);
  xfer += oprot->writeByte(this->validvalue_hdr_validvalue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("meta_is_latest", ::apache::thrift::protocol::T_BYTE, 5);
  xfer += oprot->writeByte(this->meta_is_latest);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("meta_is_deleted", ::apache::thrift::protocol::T_BYTE, 6);
  xfer += oprot->writeByte(this->meta_is_deleted);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("inswitch_hdr_client_sid", ::apache::thrift::protocol::T_I16, 7);
  xfer += oprot->writeI16(this->inswitch_hdr_client_sid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("meta_is_lastclone_for_pktloss", ::apache::thrift::protocol::T_BYTE, 8);
  xfer += oprot->writeByte(this->meta_is_lastclone_for_pktloss);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("inswitch_hdr_snapshot_flag", ::apache::thrift::protocol::T_BYTE, 9);
  xfer += oprot->writeByte(this->inswitch_hdr_snapshot_flag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("meta_is_case1", ::apache::thrift::protocol::T_BYTE, 10);
  xfer += oprot->writeByte(this->meta_is_case1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("meta_is_last_scansplit", ::apache::thrift::protocol::T_BYTE, 11);
  xfer += oprot->writeByte(this->meta_is_last_scansplit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("meta_server_sid", ::apache::thrift::protocol::T_I16, 12);
  xfer += oprot->writeI16(this->meta_server_sid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_eg_port_forward_tbl_match_spec_t &a, netbufferv4_eg_port_forward_tbl_match_spec_t &b) {
  using ::std::swap;
  swap(a.op_hdr_optype, b.op_hdr_optype);
  swap(a.inswitch_hdr_is_cached, b.inswitch_hdr_is_cached);
  swap(a.meta_is_hot, b.meta_is_hot);
  swap(a.validvalue_hdr_validvalue, b.validvalue_hdr_validvalue);
  swap(a.meta_is_latest, b.meta_is_latest);
  swap(a.meta_is_deleted, b.meta_is_deleted);
  swap(a.inswitch_hdr_client_sid, b.inswitch_hdr_client_sid);
  swap(a.meta_is_lastclone_for_pktloss, b.meta_is_lastclone_for_pktloss);
  swap(a.inswitch_hdr_snapshot_flag, b.inswitch_hdr_snapshot_flag);
  swap(a.meta_is_case1, b.meta_is_case1);
  swap(a.meta_is_last_scansplit, b.meta_is_last_scansplit);
  swap(a.meta_server_sid, b.meta_server_sid);
}

netbufferv4_eg_port_forward_tbl_match_spec_t::netbufferv4_eg_port_forward_tbl_match_spec_t(const netbufferv4_eg_port_forward_tbl_match_spec_t& other83) {
  op_hdr_optype = other83.op_hdr_optype;
  inswitch_hdr_is_cached = other83.inswitch_hdr_is_cached;
  meta_is_hot = other83.meta_is_hot;
  validvalue_hdr_validvalue = other83.validvalue_hdr_validvalue;
  meta_is_latest = other83.meta_is_latest;
  meta_is_deleted = other83.meta_is_deleted;
  inswitch_hdr_client_sid = other83.inswitch_hdr_client_sid;
  meta_is_lastclone_for_pktloss = other83.meta_is_lastclone_for_pktloss;
  inswitch_hdr_snapshot_flag = other83.inswitch_hdr_snapshot_flag;
  meta_is_case1 = other83.meta_is_case1;
  meta_is_last_scansplit = other83.meta_is_last_scansplit;
  meta_server_sid = other83.meta_server_sid;
}
netbufferv4_eg_port_forward_tbl_match_spec_t& netbufferv4_eg_port_forward_tbl_match_spec_t::operator=(const netbufferv4_eg_port_forward_tbl_match_spec_t& other84) {
  op_hdr_optype = other84.op_hdr_optype;
  inswitch_hdr_is_cached = other84.inswitch_hdr_is_cached;
  meta_is_hot = other84.meta_is_hot;
  validvalue_hdr_validvalue = other84.validvalue_hdr_validvalue;
  meta_is_latest = other84.meta_is_latest;
  meta_is_deleted = other84.meta_is_deleted;
  inswitch_hdr_client_sid = other84.inswitch_hdr_client_sid;
  meta_is_lastclone_for_pktloss = other84.meta_is_lastclone_for_pktloss;
  inswitch_hdr_snapshot_flag = other84.inswitch_hdr_snapshot_flag;
  meta_is_case1 = other84.meta_is_case1;
  meta_is_last_scansplit = other84.meta_is_last_scansplit;
  meta_server_sid = other84.meta_server_sid;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_eg_port_forward_tbl_match_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_eg_port_forward_tbl_match_spec_t(";
  out << "op_hdr_optype=" << to_string(obj.op_hdr_optype);
  out << ", " << "inswitch_hdr_is_cached=" << to_string(obj.inswitch_hdr_is_cached);
  out << ", " << "meta_is_hot=" << to_string(obj.meta_is_hot);
  out << ", " << "validvalue_hdr_validvalue=" << to_string(obj.validvalue_hdr_validvalue);
  out << ", " << "meta_is_latest=" << to_string(obj.meta_is_latest);
  out << ", " << "meta_is_deleted=" << to_string(obj.meta_is_deleted);
  out << ", " << "inswitch_hdr_client_sid=" << to_string(obj.inswitch_hdr_client_sid);
  out << ", " << "meta_is_lastclone_for_pktloss=" << to_string(obj.meta_is_lastclone_for_pktloss);
  out << ", " << "inswitch_hdr_snapshot_flag=" << to_string(obj.inswitch_hdr_snapshot_flag);
  out << ", " << "meta_is_case1=" << to_string(obj.meta_is_case1);
  out << ", " << "meta_is_last_scansplit=" << to_string(obj.meta_is_last_scansplit);
  out << ", " << "meta_server_sid=" << to_string(obj.meta_server_sid);
  out << ")";
  return out;
}


netbufferv4_hash_for_cm1_tbl_match_spec_t::~netbufferv4_hash_for_cm1_tbl_match_spec_t() throw() {
}


void netbufferv4_hash_for_cm1_tbl_match_spec_t::__set_op_hdr_optype(const int16_t val) {
  this->op_hdr_optype = val;
}

void netbufferv4_hash_for_cm1_tbl_match_spec_t::__set_meta_need_recirculate(const int8_t val) {
  this->meta_need_recirculate = val;
}

const char* netbufferv4_hash_for_cm1_tbl_match_spec_t::ascii_fingerprint = "2F32B8B152B4427223DB9D670291659B";
const uint8_t netbufferv4_hash_for_cm1_tbl_match_spec_t::binary_fingerprint[16] = {0x2F,0x32,0xB8,0xB1,0x52,0xB4,0x42,0x72,0x23,0xDB,0x9D,0x67,0x02,0x91,0x65,0x9B};

uint32_t netbufferv4_hash_for_cm1_tbl_match_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_op_hdr_optype = false;
  bool isset_meta_need_recirculate = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->op_hdr_optype);
          isset_op_hdr_optype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->meta_need_recirculate);
          isset_meta_need_recirculate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_op_hdr_optype)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_meta_need_recirculate)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_hash_for_cm1_tbl_match_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_hash_for_cm1_tbl_match_spec_t");

  xfer += oprot->writeFieldBegin("op_hdr_optype", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->op_hdr_optype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("meta_need_recirculate", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->meta_need_recirculate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_hash_for_cm1_tbl_match_spec_t &a, netbufferv4_hash_for_cm1_tbl_match_spec_t &b) {
  using ::std::swap;
  swap(a.op_hdr_optype, b.op_hdr_optype);
  swap(a.meta_need_recirculate, b.meta_need_recirculate);
}

netbufferv4_hash_for_cm1_tbl_match_spec_t::netbufferv4_hash_for_cm1_tbl_match_spec_t(const netbufferv4_hash_for_cm1_tbl_match_spec_t& other85) {
  op_hdr_optype = other85.op_hdr_optype;
  meta_need_recirculate = other85.meta_need_recirculate;
}
netbufferv4_hash_for_cm1_tbl_match_spec_t& netbufferv4_hash_for_cm1_tbl_match_spec_t::operator=(const netbufferv4_hash_for_cm1_tbl_match_spec_t& other86) {
  op_hdr_optype = other86.op_hdr_optype;
  meta_need_recirculate = other86.meta_need_recirculate;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_hash_for_cm1_tbl_match_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_hash_for_cm1_tbl_match_spec_t(";
  out << "op_hdr_optype=" << to_string(obj.op_hdr_optype);
  out << ", " << "meta_need_recirculate=" << to_string(obj.meta_need_recirculate);
  out << ")";
  return out;
}


netbufferv4_hash_for_cm2_tbl_match_spec_t::~netbufferv4_hash_for_cm2_tbl_match_spec_t() throw() {
}


void netbufferv4_hash_for_cm2_tbl_match_spec_t::__set_op_hdr_optype(const int16_t val) {
  this->op_hdr_optype = val;
}

void netbufferv4_hash_for_cm2_tbl_match_spec_t::__set_meta_need_recirculate(const int8_t val) {
  this->meta_need_recirculate = val;
}

const char* netbufferv4_hash_for_cm2_tbl_match_spec_t::ascii_fingerprint = "2F32B8B152B4427223DB9D670291659B";
const uint8_t netbufferv4_hash_for_cm2_tbl_match_spec_t::binary_fingerprint[16] = {0x2F,0x32,0xB8,0xB1,0x52,0xB4,0x42,0x72,0x23,0xDB,0x9D,0x67,0x02,0x91,0x65,0x9B};

uint32_t netbufferv4_hash_for_cm2_tbl_match_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_op_hdr_optype = false;
  bool isset_meta_need_recirculate = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->op_hdr_optype);
          isset_op_hdr_optype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->meta_need_recirculate);
          isset_meta_need_recirculate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_op_hdr_optype)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_meta_need_recirculate)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_hash_for_cm2_tbl_match_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_hash_for_cm2_tbl_match_spec_t");

  xfer += oprot->writeFieldBegin("op_hdr_optype", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->op_hdr_optype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("meta_need_recirculate", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->meta_need_recirculate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_hash_for_cm2_tbl_match_spec_t &a, netbufferv4_hash_for_cm2_tbl_match_spec_t &b) {
  using ::std::swap;
  swap(a.op_hdr_optype, b.op_hdr_optype);
  swap(a.meta_need_recirculate, b.meta_need_recirculate);
}

netbufferv4_hash_for_cm2_tbl_match_spec_t::netbufferv4_hash_for_cm2_tbl_match_spec_t(const netbufferv4_hash_for_cm2_tbl_match_spec_t& other87) {
  op_hdr_optype = other87.op_hdr_optype;
  meta_need_recirculate = other87.meta_need_recirculate;
}
netbufferv4_hash_for_cm2_tbl_match_spec_t& netbufferv4_hash_for_cm2_tbl_match_spec_t::operator=(const netbufferv4_hash_for_cm2_tbl_match_spec_t& other88) {
  op_hdr_optype = other88.op_hdr_optype;
  meta_need_recirculate = other88.meta_need_recirculate;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_hash_for_cm2_tbl_match_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_hash_for_cm2_tbl_match_spec_t(";
  out << "op_hdr_optype=" << to_string(obj.op_hdr_optype);
  out << ", " << "meta_need_recirculate=" << to_string(obj.meta_need_recirculate);
  out << ")";
  return out;
}


netbufferv4_hash_for_cm3_tbl_match_spec_t::~netbufferv4_hash_for_cm3_tbl_match_spec_t() throw() {
}


void netbufferv4_hash_for_cm3_tbl_match_spec_t::__set_op_hdr_optype(const int16_t val) {
  this->op_hdr_optype = val;
}

void netbufferv4_hash_for_cm3_tbl_match_spec_t::__set_meta_need_recirculate(const int8_t val) {
  this->meta_need_recirculate = val;
}

const char* netbufferv4_hash_for_cm3_tbl_match_spec_t::ascii_fingerprint = "2F32B8B152B4427223DB9D670291659B";
const uint8_t netbufferv4_hash_for_cm3_tbl_match_spec_t::binary_fingerprint[16] = {0x2F,0x32,0xB8,0xB1,0x52,0xB4,0x42,0x72,0x23,0xDB,0x9D,0x67,0x02,0x91,0x65,0x9B};

uint32_t netbufferv4_hash_for_cm3_tbl_match_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_op_hdr_optype = false;
  bool isset_meta_need_recirculate = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->op_hdr_optype);
          isset_op_hdr_optype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->meta_need_recirculate);
          isset_meta_need_recirculate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_op_hdr_optype)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_meta_need_recirculate)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_hash_for_cm3_tbl_match_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_hash_for_cm3_tbl_match_spec_t");

  xfer += oprot->writeFieldBegin("op_hdr_optype", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->op_hdr_optype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("meta_need_recirculate", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->meta_need_recirculate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_hash_for_cm3_tbl_match_spec_t &a, netbufferv4_hash_for_cm3_tbl_match_spec_t &b) {
  using ::std::swap;
  swap(a.op_hdr_optype, b.op_hdr_optype);
  swap(a.meta_need_recirculate, b.meta_need_recirculate);
}

netbufferv4_hash_for_cm3_tbl_match_spec_t::netbufferv4_hash_for_cm3_tbl_match_spec_t(const netbufferv4_hash_for_cm3_tbl_match_spec_t& other89) {
  op_hdr_optype = other89.op_hdr_optype;
  meta_need_recirculate = other89.meta_need_recirculate;
}
netbufferv4_hash_for_cm3_tbl_match_spec_t& netbufferv4_hash_for_cm3_tbl_match_spec_t::operator=(const netbufferv4_hash_for_cm3_tbl_match_spec_t& other90) {
  op_hdr_optype = other90.op_hdr_optype;
  meta_need_recirculate = other90.meta_need_recirculate;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_hash_for_cm3_tbl_match_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_hash_for_cm3_tbl_match_spec_t(";
  out << "op_hdr_optype=" << to_string(obj.op_hdr_optype);
  out << ", " << "meta_need_recirculate=" << to_string(obj.meta_need_recirculate);
  out << ")";
  return out;
}


netbufferv4_hash_for_cm4_tbl_match_spec_t::~netbufferv4_hash_for_cm4_tbl_match_spec_t() throw() {
}


void netbufferv4_hash_for_cm4_tbl_match_spec_t::__set_op_hdr_optype(const int16_t val) {
  this->op_hdr_optype = val;
}

void netbufferv4_hash_for_cm4_tbl_match_spec_t::__set_meta_need_recirculate(const int8_t val) {
  this->meta_need_recirculate = val;
}

const char* netbufferv4_hash_for_cm4_tbl_match_spec_t::ascii_fingerprint = "2F32B8B152B4427223DB9D670291659B";
const uint8_t netbufferv4_hash_for_cm4_tbl_match_spec_t::binary_fingerprint[16] = {0x2F,0x32,0xB8,0xB1,0x52,0xB4,0x42,0x72,0x23,0xDB,0x9D,0x67,0x02,0x91,0x65,0x9B};

uint32_t netbufferv4_hash_for_cm4_tbl_match_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_op_hdr_optype = false;
  bool isset_meta_need_recirculate = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->op_hdr_optype);
          isset_op_hdr_optype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->meta_need_recirculate);
          isset_meta_need_recirculate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_op_hdr_optype)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_meta_need_recirculate)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_hash_for_cm4_tbl_match_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_hash_for_cm4_tbl_match_spec_t");

  xfer += oprot->writeFieldBegin("op_hdr_optype", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->op_hdr_optype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("meta_need_recirculate", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->meta_need_recirculate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_hash_for_cm4_tbl_match_spec_t &a, netbufferv4_hash_for_cm4_tbl_match_spec_t &b) {
  using ::std::swap;
  swap(a.op_hdr_optype, b.op_hdr_optype);
  swap(a.meta_need_recirculate, b.meta_need_recirculate);
}

netbufferv4_hash_for_cm4_tbl_match_spec_t::netbufferv4_hash_for_cm4_tbl_match_spec_t(const netbufferv4_hash_for_cm4_tbl_match_spec_t& other91) {
  op_hdr_optype = other91.op_hdr_optype;
  meta_need_recirculate = other91.meta_need_recirculate;
}
netbufferv4_hash_for_cm4_tbl_match_spec_t& netbufferv4_hash_for_cm4_tbl_match_spec_t::operator=(const netbufferv4_hash_for_cm4_tbl_match_spec_t& other92) {
  op_hdr_optype = other92.op_hdr_optype;
  meta_need_recirculate = other92.meta_need_recirculate;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_hash_for_cm4_tbl_match_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_hash_for_cm4_tbl_match_spec_t(";
  out << "op_hdr_optype=" << to_string(obj.op_hdr_optype);
  out << ", " << "meta_need_recirculate=" << to_string(obj.meta_need_recirculate);
  out << ")";
  return out;
}


netbufferv4_hash_for_seq_tbl_match_spec_t::~netbufferv4_hash_for_seq_tbl_match_spec_t() throw() {
}


void netbufferv4_hash_for_seq_tbl_match_spec_t::__set_op_hdr_optype(const int16_t val) {
  this->op_hdr_optype = val;
}

void netbufferv4_hash_for_seq_tbl_match_spec_t::__set_meta_need_recirculate(const int8_t val) {
  this->meta_need_recirculate = val;
}

const char* netbufferv4_hash_for_seq_tbl_match_spec_t::ascii_fingerprint = "2F32B8B152B4427223DB9D670291659B";
const uint8_t netbufferv4_hash_for_seq_tbl_match_spec_t::binary_fingerprint[16] = {0x2F,0x32,0xB8,0xB1,0x52,0xB4,0x42,0x72,0x23,0xDB,0x9D,0x67,0x02,0x91,0x65,0x9B};

uint32_t netbufferv4_hash_for_seq_tbl_match_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_op_hdr_optype = false;
  bool isset_meta_need_recirculate = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->op_hdr_optype);
          isset_op_hdr_optype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->meta_need_recirculate);
          isset_meta_need_recirculate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_op_hdr_optype)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_meta_need_recirculate)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_hash_for_seq_tbl_match_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_hash_for_seq_tbl_match_spec_t");

  xfer += oprot->writeFieldBegin("op_hdr_optype", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->op_hdr_optype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("meta_need_recirculate", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->meta_need_recirculate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_hash_for_seq_tbl_match_spec_t &a, netbufferv4_hash_for_seq_tbl_match_spec_t &b) {
  using ::std::swap;
  swap(a.op_hdr_optype, b.op_hdr_optype);
  swap(a.meta_need_recirculate, b.meta_need_recirculate);
}

netbufferv4_hash_for_seq_tbl_match_spec_t::netbufferv4_hash_for_seq_tbl_match_spec_t(const netbufferv4_hash_for_seq_tbl_match_spec_t& other93) {
  op_hdr_optype = other93.op_hdr_optype;
  meta_need_recirculate = other93.meta_need_recirculate;
}
netbufferv4_hash_for_seq_tbl_match_spec_t& netbufferv4_hash_for_seq_tbl_match_spec_t::operator=(const netbufferv4_hash_for_seq_tbl_match_spec_t& other94) {
  op_hdr_optype = other94.op_hdr_optype;
  meta_need_recirculate = other94.meta_need_recirculate;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_hash_for_seq_tbl_match_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_hash_for_seq_tbl_match_spec_t(";
  out << "op_hdr_optype=" << to_string(obj.op_hdr_optype);
  out << ", " << "meta_need_recirculate=" << to_string(obj.meta_need_recirculate);
  out << ")";
  return out;
}


netbufferv4_ig_port_forward_tbl_match_spec_t::~netbufferv4_ig_port_forward_tbl_match_spec_t() throw() {
}


void netbufferv4_ig_port_forward_tbl_match_spec_t::__set_op_hdr_optype(const int16_t val) {
  this->op_hdr_optype = val;
}

void netbufferv4_ig_port_forward_tbl_match_spec_t::__set_meta_need_recirculate(const int8_t val) {
  this->meta_need_recirculate = val;
}

const char* netbufferv4_ig_port_forward_tbl_match_spec_t::ascii_fingerprint = "2F32B8B152B4427223DB9D670291659B";
const uint8_t netbufferv4_ig_port_forward_tbl_match_spec_t::binary_fingerprint[16] = {0x2F,0x32,0xB8,0xB1,0x52,0xB4,0x42,0x72,0x23,0xDB,0x9D,0x67,0x02,0x91,0x65,0x9B};

uint32_t netbufferv4_ig_port_forward_tbl_match_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_op_hdr_optype = false;
  bool isset_meta_need_recirculate = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->op_hdr_optype);
          isset_op_hdr_optype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->meta_need_recirculate);
          isset_meta_need_recirculate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_op_hdr_optype)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_meta_need_recirculate)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_ig_port_forward_tbl_match_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_ig_port_forward_tbl_match_spec_t");

  xfer += oprot->writeFieldBegin("op_hdr_optype", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->op_hdr_optype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("meta_need_recirculate", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->meta_need_recirculate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_ig_port_forward_tbl_match_spec_t &a, netbufferv4_ig_port_forward_tbl_match_spec_t &b) {
  using ::std::swap;
  swap(a.op_hdr_optype, b.op_hdr_optype);
  swap(a.meta_need_recirculate, b.meta_need_recirculate);
}

netbufferv4_ig_port_forward_tbl_match_spec_t::netbufferv4_ig_port_forward_tbl_match_spec_t(const netbufferv4_ig_port_forward_tbl_match_spec_t& other95) {
  op_hdr_optype = other95.op_hdr_optype;
  meta_need_recirculate = other95.meta_need_recirculate;
}
netbufferv4_ig_port_forward_tbl_match_spec_t& netbufferv4_ig_port_forward_tbl_match_spec_t::operator=(const netbufferv4_ig_port_forward_tbl_match_spec_t& other96) {
  op_hdr_optype = other96.op_hdr_optype;
  meta_need_recirculate = other96.meta_need_recirculate;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_ig_port_forward_tbl_match_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_ig_port_forward_tbl_match_spec_t(";
  out << "op_hdr_optype=" << to_string(obj.op_hdr_optype);
  out << ", " << "meta_need_recirculate=" << to_string(obj.meta_need_recirculate);
  out << ")";
  return out;
}


netbufferv4_ipv4_forward_tbl_match_spec_t::~netbufferv4_ipv4_forward_tbl_match_spec_t() throw() {
}


void netbufferv4_ipv4_forward_tbl_match_spec_t::__set_op_hdr_optype(const int16_t val) {
  this->op_hdr_optype = val;
}

void netbufferv4_ipv4_forward_tbl_match_spec_t::__set_ipv4_hdr_dstAddr(const int32_t val) {
  this->ipv4_hdr_dstAddr = val;
}

void netbufferv4_ipv4_forward_tbl_match_spec_t::__set_ipv4_hdr_dstAddr_prefix_length(const int16_t val) {
  this->ipv4_hdr_dstAddr_prefix_length = val;
}

void netbufferv4_ipv4_forward_tbl_match_spec_t::__set_meta_need_recirculate(const int8_t val) {
  this->meta_need_recirculate = val;
}

const char* netbufferv4_ipv4_forward_tbl_match_spec_t::ascii_fingerprint = "E1AFF8138A70C2749C771AC733FAF500";
const uint8_t netbufferv4_ipv4_forward_tbl_match_spec_t::binary_fingerprint[16] = {0xE1,0xAF,0xF8,0x13,0x8A,0x70,0xC2,0x74,0x9C,0x77,0x1A,0xC7,0x33,0xFA,0xF5,0x00};

uint32_t netbufferv4_ipv4_forward_tbl_match_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_op_hdr_optype = false;
  bool isset_ipv4_hdr_dstAddr = false;
  bool isset_ipv4_hdr_dstAddr_prefix_length = false;
  bool isset_meta_need_recirculate = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->op_hdr_optype);
          isset_op_hdr_optype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ipv4_hdr_dstAddr);
          isset_ipv4_hdr_dstAddr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->ipv4_hdr_dstAddr_prefix_length);
          isset_ipv4_hdr_dstAddr_prefix_length = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->meta_need_recirculate);
          isset_meta_need_recirculate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_op_hdr_optype)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_ipv4_hdr_dstAddr)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_ipv4_hdr_dstAddr_prefix_length)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_meta_need_recirculate)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_ipv4_forward_tbl_match_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_ipv4_forward_tbl_match_spec_t");

  xfer += oprot->writeFieldBegin("op_hdr_optype", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->op_hdr_optype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ipv4_hdr_dstAddr", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->ipv4_hdr_dstAddr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ipv4_hdr_dstAddr_prefix_length", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->ipv4_hdr_dstAddr_prefix_length);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("meta_need_recirculate", ::apache::thrift::protocol::T_BYTE, 4);
  xfer += oprot->writeByte(this->meta_need_recirculate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_ipv4_forward_tbl_match_spec_t &a, netbufferv4_ipv4_forward_tbl_match_spec_t &b) {
  using ::std::swap;
  swap(a.op_hdr_optype, b.op_hdr_optype);
  swap(a.ipv4_hdr_dstAddr, b.ipv4_hdr_dstAddr);
  swap(a.ipv4_hdr_dstAddr_prefix_length, b.ipv4_hdr_dstAddr_prefix_length);
  swap(a.meta_need_recirculate, b.meta_need_recirculate);
}

netbufferv4_ipv4_forward_tbl_match_spec_t::netbufferv4_ipv4_forward_tbl_match_spec_t(const netbufferv4_ipv4_forward_tbl_match_spec_t& other97) {
  op_hdr_optype = other97.op_hdr_optype;
  ipv4_hdr_dstAddr = other97.ipv4_hdr_dstAddr;
  ipv4_hdr_dstAddr_prefix_length = other97.ipv4_hdr_dstAddr_prefix_length;
  meta_need_recirculate = other97.meta_need_recirculate;
}
netbufferv4_ipv4_forward_tbl_match_spec_t& netbufferv4_ipv4_forward_tbl_match_spec_t::operator=(const netbufferv4_ipv4_forward_tbl_match_spec_t& other98) {
  op_hdr_optype = other98.op_hdr_optype;
  ipv4_hdr_dstAddr = other98.ipv4_hdr_dstAddr;
  ipv4_hdr_dstAddr_prefix_length = other98.ipv4_hdr_dstAddr_prefix_length;
  meta_need_recirculate = other98.meta_need_recirculate;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_ipv4_forward_tbl_match_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_ipv4_forward_tbl_match_spec_t(";
  out << "op_hdr_optype=" << to_string(obj.op_hdr_optype);
  out << ", " << "ipv4_hdr_dstAddr=" << to_string(obj.ipv4_hdr_dstAddr);
  out << ", " << "ipv4_hdr_dstAddr_prefix_length=" << to_string(obj.ipv4_hdr_dstAddr_prefix_length);
  out << ", " << "meta_need_recirculate=" << to_string(obj.meta_need_recirculate);
  out << ")";
  return out;
}


netbufferv4_is_hot_tbl_match_spec_t::~netbufferv4_is_hot_tbl_match_spec_t() throw() {
}


void netbufferv4_is_hot_tbl_match_spec_t::__set_meta_cm1_predicate(const int8_t val) {
  this->meta_cm1_predicate = val;
}

void netbufferv4_is_hot_tbl_match_spec_t::__set_meta_cm2_predicate(const int8_t val) {
  this->meta_cm2_predicate = val;
}

void netbufferv4_is_hot_tbl_match_spec_t::__set_meta_cm3_predicate(const int8_t val) {
  this->meta_cm3_predicate = val;
}

void netbufferv4_is_hot_tbl_match_spec_t::__set_meta_cm4_predicate(const int8_t val) {
  this->meta_cm4_predicate = val;
}

const char* netbufferv4_is_hot_tbl_match_spec_t::ascii_fingerprint = "FE6EEA0EE646C9880F01CB7CB8D8504D";
const uint8_t netbufferv4_is_hot_tbl_match_spec_t::binary_fingerprint[16] = {0xFE,0x6E,0xEA,0x0E,0xE6,0x46,0xC9,0x88,0x0F,0x01,0xCB,0x7C,0xB8,0xD8,0x50,0x4D};

uint32_t netbufferv4_is_hot_tbl_match_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_meta_cm1_predicate = false;
  bool isset_meta_cm2_predicate = false;
  bool isset_meta_cm3_predicate = false;
  bool isset_meta_cm4_predicate = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->meta_cm1_predicate);
          isset_meta_cm1_predicate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->meta_cm2_predicate);
          isset_meta_cm2_predicate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->meta_cm3_predicate);
          isset_meta_cm3_predicate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->meta_cm4_predicate);
          isset_meta_cm4_predicate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_meta_cm1_predicate)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_meta_cm2_predicate)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_meta_cm3_predicate)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_meta_cm4_predicate)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_is_hot_tbl_match_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_is_hot_tbl_match_spec_t");

  xfer += oprot->writeFieldBegin("meta_cm1_predicate", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->meta_cm1_predicate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("meta_cm2_predicate", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->meta_cm2_predicate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("meta_cm3_predicate", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->meta_cm3_predicate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("meta_cm4_predicate", ::apache::thrift::protocol::T_BYTE, 4);
  xfer += oprot->writeByte(this->meta_cm4_predicate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_is_hot_tbl_match_spec_t &a, netbufferv4_is_hot_tbl_match_spec_t &b) {
  using ::std::swap;
  swap(a.meta_cm1_predicate, b.meta_cm1_predicate);
  swap(a.meta_cm2_predicate, b.meta_cm2_predicate);
  swap(a.meta_cm3_predicate, b.meta_cm3_predicate);
  swap(a.meta_cm4_predicate, b.meta_cm4_predicate);
}

netbufferv4_is_hot_tbl_match_spec_t::netbufferv4_is_hot_tbl_match_spec_t(const netbufferv4_is_hot_tbl_match_spec_t& other99) {
  meta_cm1_predicate = other99.meta_cm1_predicate;
  meta_cm2_predicate = other99.meta_cm2_predicate;
  meta_cm3_predicate = other99.meta_cm3_predicate;
  meta_cm4_predicate = other99.meta_cm4_predicate;
}
netbufferv4_is_hot_tbl_match_spec_t& netbufferv4_is_hot_tbl_match_spec_t::operator=(const netbufferv4_is_hot_tbl_match_spec_t& other100) {
  meta_cm1_predicate = other100.meta_cm1_predicate;
  meta_cm2_predicate = other100.meta_cm2_predicate;
  meta_cm3_predicate = other100.meta_cm3_predicate;
  meta_cm4_predicate = other100.meta_cm4_predicate;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_is_hot_tbl_match_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_is_hot_tbl_match_spec_t(";
  out << "meta_cm1_predicate=" << to_string(obj.meta_cm1_predicate);
  out << ", " << "meta_cm2_predicate=" << to_string(obj.meta_cm2_predicate);
  out << ", " << "meta_cm3_predicate=" << to_string(obj.meta_cm3_predicate);
  out << ", " << "meta_cm4_predicate=" << to_string(obj.meta_cm4_predicate);
  out << ")";
  return out;
}


netbufferv4_lastclone_lastscansplit_tbl_match_spec_t::~netbufferv4_lastclone_lastscansplit_tbl_match_spec_t() throw() {
}


void netbufferv4_lastclone_lastscansplit_tbl_match_spec_t::__set_op_hdr_optype(const int16_t val) {
  this->op_hdr_optype = val;
}

void netbufferv4_lastclone_lastscansplit_tbl_match_spec_t::__set_clone_hdr_clonenum_for_pktloss(const int8_t val) {
  this->clone_hdr_clonenum_for_pktloss = val;
}

void netbufferv4_lastclone_lastscansplit_tbl_match_spec_t::__set_meta_remain_scannum(const int16_t val) {
  this->meta_remain_scannum = val;
}

const char* netbufferv4_lastclone_lastscansplit_tbl_match_spec_t::ascii_fingerprint = "11924ABA156D2815442A82BB9335D12A";
const uint8_t netbufferv4_lastclone_lastscansplit_tbl_match_spec_t::binary_fingerprint[16] = {0x11,0x92,0x4A,0xBA,0x15,0x6D,0x28,0x15,0x44,0x2A,0x82,0xBB,0x93,0x35,0xD1,0x2A};

uint32_t netbufferv4_lastclone_lastscansplit_tbl_match_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_op_hdr_optype = false;
  bool isset_clone_hdr_clonenum_for_pktloss = false;
  bool isset_meta_remain_scannum = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->op_hdr_optype);
          isset_op_hdr_optype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->clone_hdr_clonenum_for_pktloss);
          isset_clone_hdr_clonenum_for_pktloss = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->meta_remain_scannum);
          isset_meta_remain_scannum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_op_hdr_optype)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_clone_hdr_clonenum_for_pktloss)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_meta_remain_scannum)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_lastclone_lastscansplit_tbl_match_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_lastclone_lastscansplit_tbl_match_spec_t");

  xfer += oprot->writeFieldBegin("op_hdr_optype", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->op_hdr_optype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("clone_hdr_clonenum_for_pktloss", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->clone_hdr_clonenum_for_pktloss);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("meta_remain_scannum", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->meta_remain_scannum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_lastclone_lastscansplit_tbl_match_spec_t &a, netbufferv4_lastclone_lastscansplit_tbl_match_spec_t &b) {
  using ::std::swap;
  swap(a.op_hdr_optype, b.op_hdr_optype);
  swap(a.clone_hdr_clonenum_for_pktloss, b.clone_hdr_clonenum_for_pktloss);
  swap(a.meta_remain_scannum, b.meta_remain_scannum);
}

netbufferv4_lastclone_lastscansplit_tbl_match_spec_t::netbufferv4_lastclone_lastscansplit_tbl_match_spec_t(const netbufferv4_lastclone_lastscansplit_tbl_match_spec_t& other101) {
  op_hdr_optype = other101.op_hdr_optype;
  clone_hdr_clonenum_for_pktloss = other101.clone_hdr_clonenum_for_pktloss;
  meta_remain_scannum = other101.meta_remain_scannum;
}
netbufferv4_lastclone_lastscansplit_tbl_match_spec_t& netbufferv4_lastclone_lastscansplit_tbl_match_spec_t::operator=(const netbufferv4_lastclone_lastscansplit_tbl_match_spec_t& other102) {
  op_hdr_optype = other102.op_hdr_optype;
  clone_hdr_clonenum_for_pktloss = other102.clone_hdr_clonenum_for_pktloss;
  meta_remain_scannum = other102.meta_remain_scannum;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_lastclone_lastscansplit_tbl_match_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_lastclone_lastscansplit_tbl_match_spec_t(";
  out << "op_hdr_optype=" << to_string(obj.op_hdr_optype);
  out << ", " << "clone_hdr_clonenum_for_pktloss=" << to_string(obj.clone_hdr_clonenum_for_pktloss);
  out << ", " << "meta_remain_scannum=" << to_string(obj.meta_remain_scannum);
  out << ")";
  return out;
}


netbufferv4_need_recirculate_tbl_match_spec_t::~netbufferv4_need_recirculate_tbl_match_spec_t() throw() {
}


void netbufferv4_need_recirculate_tbl_match_spec_t::__set_op_hdr_optype(const int16_t val) {
  this->op_hdr_optype = val;
}

void netbufferv4_need_recirculate_tbl_match_spec_t::__set_ig_intr_md_ingress_port(const int16_t val) {
  this->ig_intr_md_ingress_port = val;
}

const char* netbufferv4_need_recirculate_tbl_match_spec_t::ascii_fingerprint = "C88FB7958D86460D03E699333A272947";
const uint8_t netbufferv4_need_recirculate_tbl_match_spec_t::binary_fingerprint[16] = {0xC8,0x8F,0xB7,0x95,0x8D,0x86,0x46,0x0D,0x03,0xE6,0x99,0x33,0x3A,0x27,0x29,0x47};

uint32_t netbufferv4_need_recirculate_tbl_match_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_op_hdr_optype = false;
  bool isset_ig_intr_md_ingress_port = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->op_hdr_optype);
          isset_op_hdr_optype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->ig_intr_md_ingress_port);
          isset_ig_intr_md_ingress_port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_op_hdr_optype)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_ig_intr_md_ingress_port)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_need_recirculate_tbl_match_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_need_recirculate_tbl_match_spec_t");

  xfer += oprot->writeFieldBegin("op_hdr_optype", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->op_hdr_optype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ig_intr_md_ingress_port", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->ig_intr_md_ingress_port);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_need_recirculate_tbl_match_spec_t &a, netbufferv4_need_recirculate_tbl_match_spec_t &b) {
  using ::std::swap;
  swap(a.op_hdr_optype, b.op_hdr_optype);
  swap(a.ig_intr_md_ingress_port, b.ig_intr_md_ingress_port);
}

netbufferv4_need_recirculate_tbl_match_spec_t::netbufferv4_need_recirculate_tbl_match_spec_t(const netbufferv4_need_recirculate_tbl_match_spec_t& other103) {
  op_hdr_optype = other103.op_hdr_optype;
  ig_intr_md_ingress_port = other103.ig_intr_md_ingress_port;
}
netbufferv4_need_recirculate_tbl_match_spec_t& netbufferv4_need_recirculate_tbl_match_spec_t::operator=(const netbufferv4_need_recirculate_tbl_match_spec_t& other104) {
  op_hdr_optype = other104.op_hdr_optype;
  ig_intr_md_ingress_port = other104.ig_intr_md_ingress_port;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_need_recirculate_tbl_match_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_need_recirculate_tbl_match_spec_t(";
  out << "op_hdr_optype=" << to_string(obj.op_hdr_optype);
  out << ", " << "ig_intr_md_ingress_port=" << to_string(obj.ig_intr_md_ingress_port);
  out << ")";
  return out;
}


netbufferv4_prepare_for_cachehit_tbl_match_spec_t::~netbufferv4_prepare_for_cachehit_tbl_match_spec_t() throw() {
}


void netbufferv4_prepare_for_cachehit_tbl_match_spec_t::__set_op_hdr_optype(const int16_t val) {
  this->op_hdr_optype = val;
}

void netbufferv4_prepare_for_cachehit_tbl_match_spec_t::__set_ig_intr_md_ingress_port(const int16_t val) {
  this->ig_intr_md_ingress_port = val;
}

void netbufferv4_prepare_for_cachehit_tbl_match_spec_t::__set_meta_need_recirculate(const int8_t val) {
  this->meta_need_recirculate = val;
}

const char* netbufferv4_prepare_for_cachehit_tbl_match_spec_t::ascii_fingerprint = "47122A80B641FECF98DEC5A7D2B1FC3F";
const uint8_t netbufferv4_prepare_for_cachehit_tbl_match_spec_t::binary_fingerprint[16] = {0x47,0x12,0x2A,0x80,0xB6,0x41,0xFE,0xCF,0x98,0xDE,0xC5,0xA7,0xD2,0xB1,0xFC,0x3F};

uint32_t netbufferv4_prepare_for_cachehit_tbl_match_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_op_hdr_optype = false;
  bool isset_ig_intr_md_ingress_port = false;
  bool isset_meta_need_recirculate = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->op_hdr_optype);
          isset_op_hdr_optype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->ig_intr_md_ingress_port);
          isset_ig_intr_md_ingress_port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->meta_need_recirculate);
          isset_meta_need_recirculate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_op_hdr_optype)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_ig_intr_md_ingress_port)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_meta_need_recirculate)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_prepare_for_cachehit_tbl_match_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_prepare_for_cachehit_tbl_match_spec_t");

  xfer += oprot->writeFieldBegin("op_hdr_optype", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->op_hdr_optype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ig_intr_md_ingress_port", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->ig_intr_md_ingress_port);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("meta_need_recirculate", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->meta_need_recirculate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_prepare_for_cachehit_tbl_match_spec_t &a, netbufferv4_prepare_for_cachehit_tbl_match_spec_t &b) {
  using ::std::swap;
  swap(a.op_hdr_optype, b.op_hdr_optype);
  swap(a.ig_intr_md_ingress_port, b.ig_intr_md_ingress_port);
  swap(a.meta_need_recirculate, b.meta_need_recirculate);
}

netbufferv4_prepare_for_cachehit_tbl_match_spec_t::netbufferv4_prepare_for_cachehit_tbl_match_spec_t(const netbufferv4_prepare_for_cachehit_tbl_match_spec_t& other105) {
  op_hdr_optype = other105.op_hdr_optype;
  ig_intr_md_ingress_port = other105.ig_intr_md_ingress_port;
  meta_need_recirculate = other105.meta_need_recirculate;
}
netbufferv4_prepare_for_cachehit_tbl_match_spec_t& netbufferv4_prepare_for_cachehit_tbl_match_spec_t::operator=(const netbufferv4_prepare_for_cachehit_tbl_match_spec_t& other106) {
  op_hdr_optype = other106.op_hdr_optype;
  ig_intr_md_ingress_port = other106.ig_intr_md_ingress_port;
  meta_need_recirculate = other106.meta_need_recirculate;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_prepare_for_cachehit_tbl_match_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_prepare_for_cachehit_tbl_match_spec_t(";
  out << "op_hdr_optype=" << to_string(obj.op_hdr_optype);
  out << ", " << "ig_intr_md_ingress_port=" << to_string(obj.ig_intr_md_ingress_port);
  out << ", " << "meta_need_recirculate=" << to_string(obj.meta_need_recirculate);
  out << ")";
  return out;
}


netbufferv4_process_scanreq_split_tbl_match_spec_t::~netbufferv4_process_scanreq_split_tbl_match_spec_t() throw() {
}


void netbufferv4_process_scanreq_split_tbl_match_spec_t::__set_op_hdr_optype(const int16_t val) {
  this->op_hdr_optype = val;
}

void netbufferv4_process_scanreq_split_tbl_match_spec_t::__set_udp_hdr_dstPort(const int16_t val) {
  this->udp_hdr_dstPort = val;
}

void netbufferv4_process_scanreq_split_tbl_match_spec_t::__set_split_hdr_is_clone(const int8_t val) {
  this->split_hdr_is_clone = val;
}

const char* netbufferv4_process_scanreq_split_tbl_match_spec_t::ascii_fingerprint = "47122A80B641FECF98DEC5A7D2B1FC3F";
const uint8_t netbufferv4_process_scanreq_split_tbl_match_spec_t::binary_fingerprint[16] = {0x47,0x12,0x2A,0x80,0xB6,0x41,0xFE,0xCF,0x98,0xDE,0xC5,0xA7,0xD2,0xB1,0xFC,0x3F};

uint32_t netbufferv4_process_scanreq_split_tbl_match_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_op_hdr_optype = false;
  bool isset_udp_hdr_dstPort = false;
  bool isset_split_hdr_is_clone = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->op_hdr_optype);
          isset_op_hdr_optype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->udp_hdr_dstPort);
          isset_udp_hdr_dstPort = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->split_hdr_is_clone);
          isset_split_hdr_is_clone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_op_hdr_optype)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_udp_hdr_dstPort)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_split_hdr_is_clone)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_process_scanreq_split_tbl_match_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_process_scanreq_split_tbl_match_spec_t");

  xfer += oprot->writeFieldBegin("op_hdr_optype", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->op_hdr_optype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("udp_hdr_dstPort", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->udp_hdr_dstPort);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("split_hdr_is_clone", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->split_hdr_is_clone);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_process_scanreq_split_tbl_match_spec_t &a, netbufferv4_process_scanreq_split_tbl_match_spec_t &b) {
  using ::std::swap;
  swap(a.op_hdr_optype, b.op_hdr_optype);
  swap(a.udp_hdr_dstPort, b.udp_hdr_dstPort);
  swap(a.split_hdr_is_clone, b.split_hdr_is_clone);
}

netbufferv4_process_scanreq_split_tbl_match_spec_t::netbufferv4_process_scanreq_split_tbl_match_spec_t(const netbufferv4_process_scanreq_split_tbl_match_spec_t& other107) {
  op_hdr_optype = other107.op_hdr_optype;
  udp_hdr_dstPort = other107.udp_hdr_dstPort;
  split_hdr_is_clone = other107.split_hdr_is_clone;
}
netbufferv4_process_scanreq_split_tbl_match_spec_t& netbufferv4_process_scanreq_split_tbl_match_spec_t::operator=(const netbufferv4_process_scanreq_split_tbl_match_spec_t& other108) {
  op_hdr_optype = other108.op_hdr_optype;
  udp_hdr_dstPort = other108.udp_hdr_dstPort;
  split_hdr_is_clone = other108.split_hdr_is_clone;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_process_scanreq_split_tbl_match_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_process_scanreq_split_tbl_match_spec_t(";
  out << "op_hdr_optype=" << to_string(obj.op_hdr_optype);
  out << ", " << "udp_hdr_dstPort=" << to_string(obj.udp_hdr_dstPort);
  out << ", " << "split_hdr_is_clone=" << to_string(obj.split_hdr_is_clone);
  out << ")";
  return out;
}


netbufferv4_range_partition_for_scan_endkey_tbl_match_spec_t::~netbufferv4_range_partition_for_scan_endkey_tbl_match_spec_t() throw() {
}


void netbufferv4_range_partition_for_scan_endkey_tbl_match_spec_t::__set_op_hdr_optype(const int16_t val) {
  this->op_hdr_optype = val;
}

void netbufferv4_range_partition_for_scan_endkey_tbl_match_spec_t::__set_scan_hdr_keyhihihi_start(const int16_t val) {
  this->scan_hdr_keyhihihi_start = val;
}

void netbufferv4_range_partition_for_scan_endkey_tbl_match_spec_t::__set_scan_hdr_keyhihihi_end(const int16_t val) {
  this->scan_hdr_keyhihihi_end = val;
}

void netbufferv4_range_partition_for_scan_endkey_tbl_match_spec_t::__set_meta_need_recirculate(const int8_t val) {
  this->meta_need_recirculate = val;
}

const char* netbufferv4_range_partition_for_scan_endkey_tbl_match_spec_t::ascii_fingerprint = "B32F1D5F4172180F8FE2208C2F43FCE1";
const uint8_t netbufferv4_range_partition_for_scan_endkey_tbl_match_spec_t::binary_fingerprint[16] = {0xB3,0x2F,0x1D,0x5F,0x41,0x72,0x18,0x0F,0x8F,0xE2,0x20,0x8C,0x2F,0x43,0xFC,0xE1};

uint32_t netbufferv4_range_partition_for_scan_endkey_tbl_match_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_op_hdr_optype = false;
  bool isset_scan_hdr_keyhihihi_start = false;
  bool isset_scan_hdr_keyhihihi_end = false;
  bool isset_meta_need_recirculate = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->op_hdr_optype);
          isset_op_hdr_optype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->scan_hdr_keyhihihi_start);
          isset_scan_hdr_keyhihihi_start = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->scan_hdr_keyhihihi_end);
          isset_scan_hdr_keyhihihi_end = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->meta_need_recirculate);
          isset_meta_need_recirculate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_op_hdr_optype)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_scan_hdr_keyhihihi_start)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_scan_hdr_keyhihihi_end)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_meta_need_recirculate)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_range_partition_for_scan_endkey_tbl_match_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_range_partition_for_scan_endkey_tbl_match_spec_t");

  xfer += oprot->writeFieldBegin("op_hdr_optype", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->op_hdr_optype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("scan_hdr_keyhihihi_start", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->scan_hdr_keyhihihi_start);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("scan_hdr_keyhihihi_end", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->scan_hdr_keyhihihi_end);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("meta_need_recirculate", ::apache::thrift::protocol::T_BYTE, 4);
  xfer += oprot->writeByte(this->meta_need_recirculate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_range_partition_for_scan_endkey_tbl_match_spec_t &a, netbufferv4_range_partition_for_scan_endkey_tbl_match_spec_t &b) {
  using ::std::swap;
  swap(a.op_hdr_optype, b.op_hdr_optype);
  swap(a.scan_hdr_keyhihihi_start, b.scan_hdr_keyhihihi_start);
  swap(a.scan_hdr_keyhihihi_end, b.scan_hdr_keyhihihi_end);
  swap(a.meta_need_recirculate, b.meta_need_recirculate);
}

netbufferv4_range_partition_for_scan_endkey_tbl_match_spec_t::netbufferv4_range_partition_for_scan_endkey_tbl_match_spec_t(const netbufferv4_range_partition_for_scan_endkey_tbl_match_spec_t& other109) {
  op_hdr_optype = other109.op_hdr_optype;
  scan_hdr_keyhihihi_start = other109.scan_hdr_keyhihihi_start;
  scan_hdr_keyhihihi_end = other109.scan_hdr_keyhihihi_end;
  meta_need_recirculate = other109.meta_need_recirculate;
}
netbufferv4_range_partition_for_scan_endkey_tbl_match_spec_t& netbufferv4_range_partition_for_scan_endkey_tbl_match_spec_t::operator=(const netbufferv4_range_partition_for_scan_endkey_tbl_match_spec_t& other110) {
  op_hdr_optype = other110.op_hdr_optype;
  scan_hdr_keyhihihi_start = other110.scan_hdr_keyhihihi_start;
  scan_hdr_keyhihihi_end = other110.scan_hdr_keyhihihi_end;
  meta_need_recirculate = other110.meta_need_recirculate;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_range_partition_for_scan_endkey_tbl_match_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_range_partition_for_scan_endkey_tbl_match_spec_t(";
  out << "op_hdr_optype=" << to_string(obj.op_hdr_optype);
  out << ", " << "scan_hdr_keyhihihi_start=" << to_string(obj.scan_hdr_keyhihihi_start);
  out << ", " << "scan_hdr_keyhihihi_end=" << to_string(obj.scan_hdr_keyhihihi_end);
  out << ", " << "meta_need_recirculate=" << to_string(obj.meta_need_recirculate);
  out << ")";
  return out;
}


netbufferv4_range_partition_tbl_match_spec_t::~netbufferv4_range_partition_tbl_match_spec_t() throw() {
}


void netbufferv4_range_partition_tbl_match_spec_t::__set_op_hdr_optype(const int16_t val) {
  this->op_hdr_optype = val;
}

void netbufferv4_range_partition_tbl_match_spec_t::__set_op_hdr_keyhihihi_start(const int16_t val) {
  this->op_hdr_keyhihihi_start = val;
}

void netbufferv4_range_partition_tbl_match_spec_t::__set_op_hdr_keyhihihi_end(const int16_t val) {
  this->op_hdr_keyhihihi_end = val;
}

void netbufferv4_range_partition_tbl_match_spec_t::__set_meta_need_recirculate(const int8_t val) {
  this->meta_need_recirculate = val;
}

const char* netbufferv4_range_partition_tbl_match_spec_t::ascii_fingerprint = "B32F1D5F4172180F8FE2208C2F43FCE1";
const uint8_t netbufferv4_range_partition_tbl_match_spec_t::binary_fingerprint[16] = {0xB3,0x2F,0x1D,0x5F,0x41,0x72,0x18,0x0F,0x8F,0xE2,0x20,0x8C,0x2F,0x43,0xFC,0xE1};

uint32_t netbufferv4_range_partition_tbl_match_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_op_hdr_optype = false;
  bool isset_op_hdr_keyhihihi_start = false;
  bool isset_op_hdr_keyhihihi_end = false;
  bool isset_meta_need_recirculate = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->op_hdr_optype);
          isset_op_hdr_optype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->op_hdr_keyhihihi_start);
          isset_op_hdr_keyhihihi_start = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->op_hdr_keyhihihi_end);
          isset_op_hdr_keyhihihi_end = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->meta_need_recirculate);
          isset_meta_need_recirculate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_op_hdr_optype)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_op_hdr_keyhihihi_start)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_op_hdr_keyhihihi_end)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_meta_need_recirculate)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_range_partition_tbl_match_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_range_partition_tbl_match_spec_t");

  xfer += oprot->writeFieldBegin("op_hdr_optype", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->op_hdr_optype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("op_hdr_keyhihihi_start", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->op_hdr_keyhihihi_start);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("op_hdr_keyhihihi_end", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->op_hdr_keyhihihi_end);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("meta_need_recirculate", ::apache::thrift::protocol::T_BYTE, 4);
  xfer += oprot->writeByte(this->meta_need_recirculate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_range_partition_tbl_match_spec_t &a, netbufferv4_range_partition_tbl_match_spec_t &b) {
  using ::std::swap;
  swap(a.op_hdr_optype, b.op_hdr_optype);
  swap(a.op_hdr_keyhihihi_start, b.op_hdr_keyhihihi_start);
  swap(a.op_hdr_keyhihihi_end, b.op_hdr_keyhihihi_end);
  swap(a.meta_need_recirculate, b.meta_need_recirculate);
}

netbufferv4_range_partition_tbl_match_spec_t::netbufferv4_range_partition_tbl_match_spec_t(const netbufferv4_range_partition_tbl_match_spec_t& other111) {
  op_hdr_optype = other111.op_hdr_optype;
  op_hdr_keyhihihi_start = other111.op_hdr_keyhihihi_start;
  op_hdr_keyhihihi_end = other111.op_hdr_keyhihihi_end;
  meta_need_recirculate = other111.meta_need_recirculate;
}
netbufferv4_range_partition_tbl_match_spec_t& netbufferv4_range_partition_tbl_match_spec_t::operator=(const netbufferv4_range_partition_tbl_match_spec_t& other112) {
  op_hdr_optype = other112.op_hdr_optype;
  op_hdr_keyhihihi_start = other112.op_hdr_keyhihihi_start;
  op_hdr_keyhihihi_end = other112.op_hdr_keyhihihi_end;
  meta_need_recirculate = other112.meta_need_recirculate;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_range_partition_tbl_match_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_range_partition_tbl_match_spec_t(";
  out << "op_hdr_optype=" << to_string(obj.op_hdr_optype);
  out << ", " << "op_hdr_keyhihihi_start=" << to_string(obj.op_hdr_keyhihihi_start);
  out << ", " << "op_hdr_keyhihihi_end=" << to_string(obj.op_hdr_keyhihihi_end);
  out << ", " << "meta_need_recirculate=" << to_string(obj.meta_need_recirculate);
  out << ")";
  return out;
}


netbufferv4_recirculate_tbl_match_spec_t::~netbufferv4_recirculate_tbl_match_spec_t() throw() {
}


void netbufferv4_recirculate_tbl_match_spec_t::__set_op_hdr_optype(const int16_t val) {
  this->op_hdr_optype = val;
}

void netbufferv4_recirculate_tbl_match_spec_t::__set_meta_need_recirculate(const int8_t val) {
  this->meta_need_recirculate = val;
}

const char* netbufferv4_recirculate_tbl_match_spec_t::ascii_fingerprint = "2F32B8B152B4427223DB9D670291659B";
const uint8_t netbufferv4_recirculate_tbl_match_spec_t::binary_fingerprint[16] = {0x2F,0x32,0xB8,0xB1,0x52,0xB4,0x42,0x72,0x23,0xDB,0x9D,0x67,0x02,0x91,0x65,0x9B};

uint32_t netbufferv4_recirculate_tbl_match_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_op_hdr_optype = false;
  bool isset_meta_need_recirculate = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->op_hdr_optype);
          isset_op_hdr_optype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->meta_need_recirculate);
          isset_meta_need_recirculate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_op_hdr_optype)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_meta_need_recirculate)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_recirculate_tbl_match_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_recirculate_tbl_match_spec_t");

  xfer += oprot->writeFieldBegin("op_hdr_optype", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->op_hdr_optype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("meta_need_recirculate", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->meta_need_recirculate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_recirculate_tbl_match_spec_t &a, netbufferv4_recirculate_tbl_match_spec_t &b) {
  using ::std::swap;
  swap(a.op_hdr_optype, b.op_hdr_optype);
  swap(a.meta_need_recirculate, b.meta_need_recirculate);
}

netbufferv4_recirculate_tbl_match_spec_t::netbufferv4_recirculate_tbl_match_spec_t(const netbufferv4_recirculate_tbl_match_spec_t& other113) {
  op_hdr_optype = other113.op_hdr_optype;
  meta_need_recirculate = other113.meta_need_recirculate;
}
netbufferv4_recirculate_tbl_match_spec_t& netbufferv4_recirculate_tbl_match_spec_t::operator=(const netbufferv4_recirculate_tbl_match_spec_t& other114) {
  op_hdr_optype = other114.op_hdr_optype;
  meta_need_recirculate = other114.meta_need_recirculate;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_recirculate_tbl_match_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_recirculate_tbl_match_spec_t(";
  out << "op_hdr_optype=" << to_string(obj.op_hdr_optype);
  out << ", " << "meta_need_recirculate=" << to_string(obj.meta_need_recirculate);
  out << ")";
  return out;
}


netbufferv4_sample_tbl_match_spec_t::~netbufferv4_sample_tbl_match_spec_t() throw() {
}


void netbufferv4_sample_tbl_match_spec_t::__set_op_hdr_optype(const int16_t val) {
  this->op_hdr_optype = val;
}

void netbufferv4_sample_tbl_match_spec_t::__set_meta_need_recirculate(const int8_t val) {
  this->meta_need_recirculate = val;
}

const char* netbufferv4_sample_tbl_match_spec_t::ascii_fingerprint = "2F32B8B152B4427223DB9D670291659B";
const uint8_t netbufferv4_sample_tbl_match_spec_t::binary_fingerprint[16] = {0x2F,0x32,0xB8,0xB1,0x52,0xB4,0x42,0x72,0x23,0xDB,0x9D,0x67,0x02,0x91,0x65,0x9B};

uint32_t netbufferv4_sample_tbl_match_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_op_hdr_optype = false;
  bool isset_meta_need_recirculate = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->op_hdr_optype);
          isset_op_hdr_optype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->meta_need_recirculate);
          isset_meta_need_recirculate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_op_hdr_optype)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_meta_need_recirculate)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_sample_tbl_match_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_sample_tbl_match_spec_t");

  xfer += oprot->writeFieldBegin("op_hdr_optype", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->op_hdr_optype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("meta_need_recirculate", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->meta_need_recirculate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_sample_tbl_match_spec_t &a, netbufferv4_sample_tbl_match_spec_t &b) {
  using ::std::swap;
  swap(a.op_hdr_optype, b.op_hdr_optype);
  swap(a.meta_need_recirculate, b.meta_need_recirculate);
}

netbufferv4_sample_tbl_match_spec_t::netbufferv4_sample_tbl_match_spec_t(const netbufferv4_sample_tbl_match_spec_t& other115) {
  op_hdr_optype = other115.op_hdr_optype;
  meta_need_recirculate = other115.meta_need_recirculate;
}
netbufferv4_sample_tbl_match_spec_t& netbufferv4_sample_tbl_match_spec_t::operator=(const netbufferv4_sample_tbl_match_spec_t& other116) {
  op_hdr_optype = other116.op_hdr_optype;
  meta_need_recirculate = other116.meta_need_recirculate;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_sample_tbl_match_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_sample_tbl_match_spec_t(";
  out << "op_hdr_optype=" << to_string(obj.op_hdr_optype);
  out << ", " << "meta_need_recirculate=" << to_string(obj.meta_need_recirculate);
  out << ")";
  return out;
}


netbufferv4_save_client_udpport_tbl_match_spec_t::~netbufferv4_save_client_udpport_tbl_match_spec_t() throw() {
}


void netbufferv4_save_client_udpport_tbl_match_spec_t::__set_op_hdr_optype(const int16_t val) {
  this->op_hdr_optype = val;
}

const char* netbufferv4_save_client_udpport_tbl_match_spec_t::ascii_fingerprint = "565787C31CF2D774B532CB755189BF39";
const uint8_t netbufferv4_save_client_udpport_tbl_match_spec_t::binary_fingerprint[16] = {0x56,0x57,0x87,0xC3,0x1C,0xF2,0xD7,0x74,0xB5,0x32,0xCB,0x75,0x51,0x89,0xBF,0x39};

uint32_t netbufferv4_save_client_udpport_tbl_match_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_op_hdr_optype = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->op_hdr_optype);
          isset_op_hdr_optype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_op_hdr_optype)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_save_client_udpport_tbl_match_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_save_client_udpport_tbl_match_spec_t");

  xfer += oprot->writeFieldBegin("op_hdr_optype", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->op_hdr_optype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_save_client_udpport_tbl_match_spec_t &a, netbufferv4_save_client_udpport_tbl_match_spec_t &b) {
  using ::std::swap;
  swap(a.op_hdr_optype, b.op_hdr_optype);
}

netbufferv4_save_client_udpport_tbl_match_spec_t::netbufferv4_save_client_udpport_tbl_match_spec_t(const netbufferv4_save_client_udpport_tbl_match_spec_t& other117) {
  op_hdr_optype = other117.op_hdr_optype;
}
netbufferv4_save_client_udpport_tbl_match_spec_t& netbufferv4_save_client_udpport_tbl_match_spec_t::operator=(const netbufferv4_save_client_udpport_tbl_match_spec_t& other118) {
  op_hdr_optype = other118.op_hdr_optype;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_save_client_udpport_tbl_match_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_save_client_udpport_tbl_match_spec_t(";
  out << "op_hdr_optype=" << to_string(obj.op_hdr_optype);
  out << ")";
  return out;
}


netbufferv4_snapshot_flag_tbl_match_spec_t::~netbufferv4_snapshot_flag_tbl_match_spec_t() throw() {
}


void netbufferv4_snapshot_flag_tbl_match_spec_t::__set_op_hdr_optype(const int16_t val) {
  this->op_hdr_optype = val;
}

void netbufferv4_snapshot_flag_tbl_match_spec_t::__set_meta_need_recirculate(const int8_t val) {
  this->meta_need_recirculate = val;
}

const char* netbufferv4_snapshot_flag_tbl_match_spec_t::ascii_fingerprint = "2F32B8B152B4427223DB9D670291659B";
const uint8_t netbufferv4_snapshot_flag_tbl_match_spec_t::binary_fingerprint[16] = {0x2F,0x32,0xB8,0xB1,0x52,0xB4,0x42,0x72,0x23,0xDB,0x9D,0x67,0x02,0x91,0x65,0x9B};

uint32_t netbufferv4_snapshot_flag_tbl_match_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_op_hdr_optype = false;
  bool isset_meta_need_recirculate = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->op_hdr_optype);
          isset_op_hdr_optype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->meta_need_recirculate);
          isset_meta_need_recirculate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_op_hdr_optype)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_meta_need_recirculate)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_snapshot_flag_tbl_match_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_snapshot_flag_tbl_match_spec_t");

  xfer += oprot->writeFieldBegin("op_hdr_optype", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->op_hdr_optype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("meta_need_recirculate", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->meta_need_recirculate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_snapshot_flag_tbl_match_spec_t &a, netbufferv4_snapshot_flag_tbl_match_spec_t &b) {
  using ::std::swap;
  swap(a.op_hdr_optype, b.op_hdr_optype);
  swap(a.meta_need_recirculate, b.meta_need_recirculate);
}

netbufferv4_snapshot_flag_tbl_match_spec_t::netbufferv4_snapshot_flag_tbl_match_spec_t(const netbufferv4_snapshot_flag_tbl_match_spec_t& other119) {
  op_hdr_optype = other119.op_hdr_optype;
  meta_need_recirculate = other119.meta_need_recirculate;
}
netbufferv4_snapshot_flag_tbl_match_spec_t& netbufferv4_snapshot_flag_tbl_match_spec_t::operator=(const netbufferv4_snapshot_flag_tbl_match_spec_t& other120) {
  op_hdr_optype = other120.op_hdr_optype;
  meta_need_recirculate = other120.meta_need_recirculate;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_snapshot_flag_tbl_match_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_snapshot_flag_tbl_match_spec_t(";
  out << "op_hdr_optype=" << to_string(obj.op_hdr_optype);
  out << ", " << "meta_need_recirculate=" << to_string(obj.meta_need_recirculate);
  out << ")";
  return out;
}


netbufferv4_update_ipmac_srcport_tbl_match_spec_t::~netbufferv4_update_ipmac_srcport_tbl_match_spec_t() throw() {
}


void netbufferv4_update_ipmac_srcport_tbl_match_spec_t::__set_op_hdr_optype(const int16_t val) {
  this->op_hdr_optype = val;
}

void netbufferv4_update_ipmac_srcport_tbl_match_spec_t::__set_eg_intr_md_egress_port(const int16_t val) {
  this->eg_intr_md_egress_port = val;
}

const char* netbufferv4_update_ipmac_srcport_tbl_match_spec_t::ascii_fingerprint = "C88FB7958D86460D03E699333A272947";
const uint8_t netbufferv4_update_ipmac_srcport_tbl_match_spec_t::binary_fingerprint[16] = {0xC8,0x8F,0xB7,0x95,0x8D,0x86,0x46,0x0D,0x03,0xE6,0x99,0x33,0x3A,0x27,0x29,0x47};

uint32_t netbufferv4_update_ipmac_srcport_tbl_match_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_op_hdr_optype = false;
  bool isset_eg_intr_md_egress_port = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->op_hdr_optype);
          isset_op_hdr_optype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->eg_intr_md_egress_port);
          isset_eg_intr_md_egress_port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_op_hdr_optype)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_eg_intr_md_egress_port)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_ipmac_srcport_tbl_match_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_ipmac_srcport_tbl_match_spec_t");

  xfer += oprot->writeFieldBegin("op_hdr_optype", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->op_hdr_optype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eg_intr_md_egress_port", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->eg_intr_md_egress_port);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_ipmac_srcport_tbl_match_spec_t &a, netbufferv4_update_ipmac_srcport_tbl_match_spec_t &b) {
  using ::std::swap;
  swap(a.op_hdr_optype, b.op_hdr_optype);
  swap(a.eg_intr_md_egress_port, b.eg_intr_md_egress_port);
}

netbufferv4_update_ipmac_srcport_tbl_match_spec_t::netbufferv4_update_ipmac_srcport_tbl_match_spec_t(const netbufferv4_update_ipmac_srcport_tbl_match_spec_t& other121) {
  op_hdr_optype = other121.op_hdr_optype;
  eg_intr_md_egress_port = other121.eg_intr_md_egress_port;
}
netbufferv4_update_ipmac_srcport_tbl_match_spec_t& netbufferv4_update_ipmac_srcport_tbl_match_spec_t::operator=(const netbufferv4_update_ipmac_srcport_tbl_match_spec_t& other122) {
  op_hdr_optype = other122.op_hdr_optype;
  eg_intr_md_egress_port = other122.eg_intr_md_egress_port;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_ipmac_srcport_tbl_match_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_ipmac_srcport_tbl_match_spec_t(";
  out << "op_hdr_optype=" << to_string(obj.op_hdr_optype);
  out << ", " << "eg_intr_md_egress_port=" << to_string(obj.eg_intr_md_egress_port);
  out << ")";
  return out;
}


netbufferv4_update_pktlen_tbl_match_spec_t::~netbufferv4_update_pktlen_tbl_match_spec_t() throw() {
}


void netbufferv4_update_pktlen_tbl_match_spec_t::__set_op_hdr_optype(const int16_t val) {
  this->op_hdr_optype = val;
}

void netbufferv4_update_pktlen_tbl_match_spec_t::__set_vallen_hdr_vallen_start(const int16_t val) {
  this->vallen_hdr_vallen_start = val;
}

void netbufferv4_update_pktlen_tbl_match_spec_t::__set_vallen_hdr_vallen_end(const int16_t val) {
  this->vallen_hdr_vallen_end = val;
}

const char* netbufferv4_update_pktlen_tbl_match_spec_t::ascii_fingerprint = "EEBEE5F2DAE75B1AB615147C163DCA93";
const uint8_t netbufferv4_update_pktlen_tbl_match_spec_t::binary_fingerprint[16] = {0xEE,0xBE,0xE5,0xF2,0xDA,0xE7,0x5B,0x1A,0xB6,0x15,0x14,0x7C,0x16,0x3D,0xCA,0x93};

uint32_t netbufferv4_update_pktlen_tbl_match_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_op_hdr_optype = false;
  bool isset_vallen_hdr_vallen_start = false;
  bool isset_vallen_hdr_vallen_end = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->op_hdr_optype);
          isset_op_hdr_optype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->vallen_hdr_vallen_start);
          isset_vallen_hdr_vallen_start = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->vallen_hdr_vallen_end);
          isset_vallen_hdr_vallen_end = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_op_hdr_optype)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_vallen_hdr_vallen_start)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_vallen_hdr_vallen_end)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_pktlen_tbl_match_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_pktlen_tbl_match_spec_t");

  xfer += oprot->writeFieldBegin("op_hdr_optype", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->op_hdr_optype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vallen_hdr_vallen_start", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->vallen_hdr_vallen_start);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vallen_hdr_vallen_end", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->vallen_hdr_vallen_end);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_pktlen_tbl_match_spec_t &a, netbufferv4_update_pktlen_tbl_match_spec_t &b) {
  using ::std::swap;
  swap(a.op_hdr_optype, b.op_hdr_optype);
  swap(a.vallen_hdr_vallen_start, b.vallen_hdr_vallen_start);
  swap(a.vallen_hdr_vallen_end, b.vallen_hdr_vallen_end);
}

netbufferv4_update_pktlen_tbl_match_spec_t::netbufferv4_update_pktlen_tbl_match_spec_t(const netbufferv4_update_pktlen_tbl_match_spec_t& other123) {
  op_hdr_optype = other123.op_hdr_optype;
  vallen_hdr_vallen_start = other123.vallen_hdr_vallen_start;
  vallen_hdr_vallen_end = other123.vallen_hdr_vallen_end;
}
netbufferv4_update_pktlen_tbl_match_spec_t& netbufferv4_update_pktlen_tbl_match_spec_t::operator=(const netbufferv4_update_pktlen_tbl_match_spec_t& other124) {
  op_hdr_optype = other124.op_hdr_optype;
  vallen_hdr_vallen_start = other124.vallen_hdr_vallen_start;
  vallen_hdr_vallen_end = other124.vallen_hdr_vallen_end;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_pktlen_tbl_match_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_pktlen_tbl_match_spec_t(";
  out << "op_hdr_optype=" << to_string(obj.op_hdr_optype);
  out << ", " << "vallen_hdr_vallen_start=" << to_string(obj.vallen_hdr_vallen_start);
  out << ", " << "vallen_hdr_vallen_end=" << to_string(obj.vallen_hdr_vallen_end);
  out << ")";
  return out;
}


netbufferv4_update_valhi10_tbl_match_spec_t::~netbufferv4_update_valhi10_tbl_match_spec_t() throw() {
}


void netbufferv4_update_valhi10_tbl_match_spec_t::__set_meta_access_val_mode(const int8_t val) {
  this->meta_access_val_mode = val;
}

const char* netbufferv4_update_valhi10_tbl_match_spec_t::ascii_fingerprint = "A7D440367E85134EBDBAA7BCA01056D0";
const uint8_t netbufferv4_update_valhi10_tbl_match_spec_t::binary_fingerprint[16] = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

uint32_t netbufferv4_update_valhi10_tbl_match_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_meta_access_val_mode = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->meta_access_val_mode);
          isset_meta_access_val_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_meta_access_val_mode)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_valhi10_tbl_match_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_valhi10_tbl_match_spec_t");

  xfer += oprot->writeFieldBegin("meta_access_val_mode", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->meta_access_val_mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_valhi10_tbl_match_spec_t &a, netbufferv4_update_valhi10_tbl_match_spec_t &b) {
  using ::std::swap;
  swap(a.meta_access_val_mode, b.meta_access_val_mode);
}

netbufferv4_update_valhi10_tbl_match_spec_t::netbufferv4_update_valhi10_tbl_match_spec_t(const netbufferv4_update_valhi10_tbl_match_spec_t& other125) {
  meta_access_val_mode = other125.meta_access_val_mode;
}
netbufferv4_update_valhi10_tbl_match_spec_t& netbufferv4_update_valhi10_tbl_match_spec_t::operator=(const netbufferv4_update_valhi10_tbl_match_spec_t& other126) {
  meta_access_val_mode = other126.meta_access_val_mode;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_valhi10_tbl_match_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_valhi10_tbl_match_spec_t(";
  out << "meta_access_val_mode=" << to_string(obj.meta_access_val_mode);
  out << ")";
  return out;
}


netbufferv4_update_valhi11_tbl_match_spec_t::~netbufferv4_update_valhi11_tbl_match_spec_t() throw() {
}


void netbufferv4_update_valhi11_tbl_match_spec_t::__set_meta_access_val_mode(const int8_t val) {
  this->meta_access_val_mode = val;
}

const char* netbufferv4_update_valhi11_tbl_match_spec_t::ascii_fingerprint = "A7D440367E85134EBDBAA7BCA01056D0";
const uint8_t netbufferv4_update_valhi11_tbl_match_spec_t::binary_fingerprint[16] = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

uint32_t netbufferv4_update_valhi11_tbl_match_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_meta_access_val_mode = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->meta_access_val_mode);
          isset_meta_access_val_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_meta_access_val_mode)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_valhi11_tbl_match_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_valhi11_tbl_match_spec_t");

  xfer += oprot->writeFieldBegin("meta_access_val_mode", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->meta_access_val_mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_valhi11_tbl_match_spec_t &a, netbufferv4_update_valhi11_tbl_match_spec_t &b) {
  using ::std::swap;
  swap(a.meta_access_val_mode, b.meta_access_val_mode);
}

netbufferv4_update_valhi11_tbl_match_spec_t::netbufferv4_update_valhi11_tbl_match_spec_t(const netbufferv4_update_valhi11_tbl_match_spec_t& other127) {
  meta_access_val_mode = other127.meta_access_val_mode;
}
netbufferv4_update_valhi11_tbl_match_spec_t& netbufferv4_update_valhi11_tbl_match_spec_t::operator=(const netbufferv4_update_valhi11_tbl_match_spec_t& other128) {
  meta_access_val_mode = other128.meta_access_val_mode;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_valhi11_tbl_match_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_valhi11_tbl_match_spec_t(";
  out << "meta_access_val_mode=" << to_string(obj.meta_access_val_mode);
  out << ")";
  return out;
}


netbufferv4_update_valhi12_tbl_match_spec_t::~netbufferv4_update_valhi12_tbl_match_spec_t() throw() {
}


void netbufferv4_update_valhi12_tbl_match_spec_t::__set_meta_access_val_mode(const int8_t val) {
  this->meta_access_val_mode = val;
}

const char* netbufferv4_update_valhi12_tbl_match_spec_t::ascii_fingerprint = "A7D440367E85134EBDBAA7BCA01056D0";
const uint8_t netbufferv4_update_valhi12_tbl_match_spec_t::binary_fingerprint[16] = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

uint32_t netbufferv4_update_valhi12_tbl_match_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_meta_access_val_mode = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->meta_access_val_mode);
          isset_meta_access_val_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_meta_access_val_mode)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_valhi12_tbl_match_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_valhi12_tbl_match_spec_t");

  xfer += oprot->writeFieldBegin("meta_access_val_mode", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->meta_access_val_mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_valhi12_tbl_match_spec_t &a, netbufferv4_update_valhi12_tbl_match_spec_t &b) {
  using ::std::swap;
  swap(a.meta_access_val_mode, b.meta_access_val_mode);
}

netbufferv4_update_valhi12_tbl_match_spec_t::netbufferv4_update_valhi12_tbl_match_spec_t(const netbufferv4_update_valhi12_tbl_match_spec_t& other129) {
  meta_access_val_mode = other129.meta_access_val_mode;
}
netbufferv4_update_valhi12_tbl_match_spec_t& netbufferv4_update_valhi12_tbl_match_spec_t::operator=(const netbufferv4_update_valhi12_tbl_match_spec_t& other130) {
  meta_access_val_mode = other130.meta_access_val_mode;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_valhi12_tbl_match_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_valhi12_tbl_match_spec_t(";
  out << "meta_access_val_mode=" << to_string(obj.meta_access_val_mode);
  out << ")";
  return out;
}


netbufferv4_update_valhi13_tbl_match_spec_t::~netbufferv4_update_valhi13_tbl_match_spec_t() throw() {
}


void netbufferv4_update_valhi13_tbl_match_spec_t::__set_meta_access_val_mode(const int8_t val) {
  this->meta_access_val_mode = val;
}

const char* netbufferv4_update_valhi13_tbl_match_spec_t::ascii_fingerprint = "A7D440367E85134EBDBAA7BCA01056D0";
const uint8_t netbufferv4_update_valhi13_tbl_match_spec_t::binary_fingerprint[16] = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

uint32_t netbufferv4_update_valhi13_tbl_match_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_meta_access_val_mode = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->meta_access_val_mode);
          isset_meta_access_val_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_meta_access_val_mode)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_valhi13_tbl_match_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_valhi13_tbl_match_spec_t");

  xfer += oprot->writeFieldBegin("meta_access_val_mode", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->meta_access_val_mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_valhi13_tbl_match_spec_t &a, netbufferv4_update_valhi13_tbl_match_spec_t &b) {
  using ::std::swap;
  swap(a.meta_access_val_mode, b.meta_access_val_mode);
}

netbufferv4_update_valhi13_tbl_match_spec_t::netbufferv4_update_valhi13_tbl_match_spec_t(const netbufferv4_update_valhi13_tbl_match_spec_t& other131) {
  meta_access_val_mode = other131.meta_access_val_mode;
}
netbufferv4_update_valhi13_tbl_match_spec_t& netbufferv4_update_valhi13_tbl_match_spec_t::operator=(const netbufferv4_update_valhi13_tbl_match_spec_t& other132) {
  meta_access_val_mode = other132.meta_access_val_mode;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_valhi13_tbl_match_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_valhi13_tbl_match_spec_t(";
  out << "meta_access_val_mode=" << to_string(obj.meta_access_val_mode);
  out << ")";
  return out;
}


netbufferv4_update_valhi14_tbl_match_spec_t::~netbufferv4_update_valhi14_tbl_match_spec_t() throw() {
}


void netbufferv4_update_valhi14_tbl_match_spec_t::__set_meta_access_val_mode(const int8_t val) {
  this->meta_access_val_mode = val;
}

const char* netbufferv4_update_valhi14_tbl_match_spec_t::ascii_fingerprint = "A7D440367E85134EBDBAA7BCA01056D0";
const uint8_t netbufferv4_update_valhi14_tbl_match_spec_t::binary_fingerprint[16] = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

uint32_t netbufferv4_update_valhi14_tbl_match_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_meta_access_val_mode = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->meta_access_val_mode);
          isset_meta_access_val_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_meta_access_val_mode)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_valhi14_tbl_match_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_valhi14_tbl_match_spec_t");

  xfer += oprot->writeFieldBegin("meta_access_val_mode", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->meta_access_val_mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_valhi14_tbl_match_spec_t &a, netbufferv4_update_valhi14_tbl_match_spec_t &b) {
  using ::std::swap;
  swap(a.meta_access_val_mode, b.meta_access_val_mode);
}

netbufferv4_update_valhi14_tbl_match_spec_t::netbufferv4_update_valhi14_tbl_match_spec_t(const netbufferv4_update_valhi14_tbl_match_spec_t& other133) {
  meta_access_val_mode = other133.meta_access_val_mode;
}
netbufferv4_update_valhi14_tbl_match_spec_t& netbufferv4_update_valhi14_tbl_match_spec_t::operator=(const netbufferv4_update_valhi14_tbl_match_spec_t& other134) {
  meta_access_val_mode = other134.meta_access_val_mode;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_valhi14_tbl_match_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_valhi14_tbl_match_spec_t(";
  out << "meta_access_val_mode=" << to_string(obj.meta_access_val_mode);
  out << ")";
  return out;
}


netbufferv4_update_valhi15_tbl_match_spec_t::~netbufferv4_update_valhi15_tbl_match_spec_t() throw() {
}


void netbufferv4_update_valhi15_tbl_match_spec_t::__set_meta_access_val_mode(const int8_t val) {
  this->meta_access_val_mode = val;
}

const char* netbufferv4_update_valhi15_tbl_match_spec_t::ascii_fingerprint = "A7D440367E85134EBDBAA7BCA01056D0";
const uint8_t netbufferv4_update_valhi15_tbl_match_spec_t::binary_fingerprint[16] = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

uint32_t netbufferv4_update_valhi15_tbl_match_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_meta_access_val_mode = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->meta_access_val_mode);
          isset_meta_access_val_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_meta_access_val_mode)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_valhi15_tbl_match_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_valhi15_tbl_match_spec_t");

  xfer += oprot->writeFieldBegin("meta_access_val_mode", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->meta_access_val_mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_valhi15_tbl_match_spec_t &a, netbufferv4_update_valhi15_tbl_match_spec_t &b) {
  using ::std::swap;
  swap(a.meta_access_val_mode, b.meta_access_val_mode);
}

netbufferv4_update_valhi15_tbl_match_spec_t::netbufferv4_update_valhi15_tbl_match_spec_t(const netbufferv4_update_valhi15_tbl_match_spec_t& other135) {
  meta_access_val_mode = other135.meta_access_val_mode;
}
netbufferv4_update_valhi15_tbl_match_spec_t& netbufferv4_update_valhi15_tbl_match_spec_t::operator=(const netbufferv4_update_valhi15_tbl_match_spec_t& other136) {
  meta_access_val_mode = other136.meta_access_val_mode;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_valhi15_tbl_match_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_valhi15_tbl_match_spec_t(";
  out << "meta_access_val_mode=" << to_string(obj.meta_access_val_mode);
  out << ")";
  return out;
}


netbufferv4_update_valhi16_tbl_match_spec_t::~netbufferv4_update_valhi16_tbl_match_spec_t() throw() {
}


void netbufferv4_update_valhi16_tbl_match_spec_t::__set_meta_access_val_mode(const int8_t val) {
  this->meta_access_val_mode = val;
}

const char* netbufferv4_update_valhi16_tbl_match_spec_t::ascii_fingerprint = "A7D440367E85134EBDBAA7BCA01056D0";
const uint8_t netbufferv4_update_valhi16_tbl_match_spec_t::binary_fingerprint[16] = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

uint32_t netbufferv4_update_valhi16_tbl_match_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_meta_access_val_mode = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->meta_access_val_mode);
          isset_meta_access_val_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_meta_access_val_mode)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_valhi16_tbl_match_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_valhi16_tbl_match_spec_t");

  xfer += oprot->writeFieldBegin("meta_access_val_mode", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->meta_access_val_mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_valhi16_tbl_match_spec_t &a, netbufferv4_update_valhi16_tbl_match_spec_t &b) {
  using ::std::swap;
  swap(a.meta_access_val_mode, b.meta_access_val_mode);
}

netbufferv4_update_valhi16_tbl_match_spec_t::netbufferv4_update_valhi16_tbl_match_spec_t(const netbufferv4_update_valhi16_tbl_match_spec_t& other137) {
  meta_access_val_mode = other137.meta_access_val_mode;
}
netbufferv4_update_valhi16_tbl_match_spec_t& netbufferv4_update_valhi16_tbl_match_spec_t::operator=(const netbufferv4_update_valhi16_tbl_match_spec_t& other138) {
  meta_access_val_mode = other138.meta_access_val_mode;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_valhi16_tbl_match_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_valhi16_tbl_match_spec_t(";
  out << "meta_access_val_mode=" << to_string(obj.meta_access_val_mode);
  out << ")";
  return out;
}


netbufferv4_update_valhi1_tbl_match_spec_t::~netbufferv4_update_valhi1_tbl_match_spec_t() throw() {
}


void netbufferv4_update_valhi1_tbl_match_spec_t::__set_meta_access_val_mode(const int8_t val) {
  this->meta_access_val_mode = val;
}

const char* netbufferv4_update_valhi1_tbl_match_spec_t::ascii_fingerprint = "A7D440367E85134EBDBAA7BCA01056D0";
const uint8_t netbufferv4_update_valhi1_tbl_match_spec_t::binary_fingerprint[16] = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

uint32_t netbufferv4_update_valhi1_tbl_match_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_meta_access_val_mode = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->meta_access_val_mode);
          isset_meta_access_val_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_meta_access_val_mode)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_valhi1_tbl_match_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_valhi1_tbl_match_spec_t");

  xfer += oprot->writeFieldBegin("meta_access_val_mode", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->meta_access_val_mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_valhi1_tbl_match_spec_t &a, netbufferv4_update_valhi1_tbl_match_spec_t &b) {
  using ::std::swap;
  swap(a.meta_access_val_mode, b.meta_access_val_mode);
}

netbufferv4_update_valhi1_tbl_match_spec_t::netbufferv4_update_valhi1_tbl_match_spec_t(const netbufferv4_update_valhi1_tbl_match_spec_t& other139) {
  meta_access_val_mode = other139.meta_access_val_mode;
}
netbufferv4_update_valhi1_tbl_match_spec_t& netbufferv4_update_valhi1_tbl_match_spec_t::operator=(const netbufferv4_update_valhi1_tbl_match_spec_t& other140) {
  meta_access_val_mode = other140.meta_access_val_mode;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_valhi1_tbl_match_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_valhi1_tbl_match_spec_t(";
  out << "meta_access_val_mode=" << to_string(obj.meta_access_val_mode);
  out << ")";
  return out;
}


netbufferv4_update_valhi2_tbl_match_spec_t::~netbufferv4_update_valhi2_tbl_match_spec_t() throw() {
}


void netbufferv4_update_valhi2_tbl_match_spec_t::__set_meta_access_val_mode(const int8_t val) {
  this->meta_access_val_mode = val;
}

const char* netbufferv4_update_valhi2_tbl_match_spec_t::ascii_fingerprint = "A7D440367E85134EBDBAA7BCA01056D0";
const uint8_t netbufferv4_update_valhi2_tbl_match_spec_t::binary_fingerprint[16] = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

uint32_t netbufferv4_update_valhi2_tbl_match_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_meta_access_val_mode = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->meta_access_val_mode);
          isset_meta_access_val_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_meta_access_val_mode)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_valhi2_tbl_match_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_valhi2_tbl_match_spec_t");

  xfer += oprot->writeFieldBegin("meta_access_val_mode", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->meta_access_val_mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_valhi2_tbl_match_spec_t &a, netbufferv4_update_valhi2_tbl_match_spec_t &b) {
  using ::std::swap;
  swap(a.meta_access_val_mode, b.meta_access_val_mode);
}

netbufferv4_update_valhi2_tbl_match_spec_t::netbufferv4_update_valhi2_tbl_match_spec_t(const netbufferv4_update_valhi2_tbl_match_spec_t& other141) {
  meta_access_val_mode = other141.meta_access_val_mode;
}
netbufferv4_update_valhi2_tbl_match_spec_t& netbufferv4_update_valhi2_tbl_match_spec_t::operator=(const netbufferv4_update_valhi2_tbl_match_spec_t& other142) {
  meta_access_val_mode = other142.meta_access_val_mode;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_valhi2_tbl_match_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_valhi2_tbl_match_spec_t(";
  out << "meta_access_val_mode=" << to_string(obj.meta_access_val_mode);
  out << ")";
  return out;
}


netbufferv4_update_valhi3_tbl_match_spec_t::~netbufferv4_update_valhi3_tbl_match_spec_t() throw() {
}


void netbufferv4_update_valhi3_tbl_match_spec_t::__set_meta_access_val_mode(const int8_t val) {
  this->meta_access_val_mode = val;
}

const char* netbufferv4_update_valhi3_tbl_match_spec_t::ascii_fingerprint = "A7D440367E85134EBDBAA7BCA01056D0";
const uint8_t netbufferv4_update_valhi3_tbl_match_spec_t::binary_fingerprint[16] = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

uint32_t netbufferv4_update_valhi3_tbl_match_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_meta_access_val_mode = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->meta_access_val_mode);
          isset_meta_access_val_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_meta_access_val_mode)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_valhi3_tbl_match_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_valhi3_tbl_match_spec_t");

  xfer += oprot->writeFieldBegin("meta_access_val_mode", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->meta_access_val_mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_valhi3_tbl_match_spec_t &a, netbufferv4_update_valhi3_tbl_match_spec_t &b) {
  using ::std::swap;
  swap(a.meta_access_val_mode, b.meta_access_val_mode);
}

netbufferv4_update_valhi3_tbl_match_spec_t::netbufferv4_update_valhi3_tbl_match_spec_t(const netbufferv4_update_valhi3_tbl_match_spec_t& other143) {
  meta_access_val_mode = other143.meta_access_val_mode;
}
netbufferv4_update_valhi3_tbl_match_spec_t& netbufferv4_update_valhi3_tbl_match_spec_t::operator=(const netbufferv4_update_valhi3_tbl_match_spec_t& other144) {
  meta_access_val_mode = other144.meta_access_val_mode;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_valhi3_tbl_match_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_valhi3_tbl_match_spec_t(";
  out << "meta_access_val_mode=" << to_string(obj.meta_access_val_mode);
  out << ")";
  return out;
}


netbufferv4_update_valhi4_tbl_match_spec_t::~netbufferv4_update_valhi4_tbl_match_spec_t() throw() {
}


void netbufferv4_update_valhi4_tbl_match_spec_t::__set_meta_access_val_mode(const int8_t val) {
  this->meta_access_val_mode = val;
}

const char* netbufferv4_update_valhi4_tbl_match_spec_t::ascii_fingerprint = "A7D440367E85134EBDBAA7BCA01056D0";
const uint8_t netbufferv4_update_valhi4_tbl_match_spec_t::binary_fingerprint[16] = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

uint32_t netbufferv4_update_valhi4_tbl_match_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_meta_access_val_mode = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->meta_access_val_mode);
          isset_meta_access_val_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_meta_access_val_mode)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_valhi4_tbl_match_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_valhi4_tbl_match_spec_t");

  xfer += oprot->writeFieldBegin("meta_access_val_mode", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->meta_access_val_mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_valhi4_tbl_match_spec_t &a, netbufferv4_update_valhi4_tbl_match_spec_t &b) {
  using ::std::swap;
  swap(a.meta_access_val_mode, b.meta_access_val_mode);
}

netbufferv4_update_valhi4_tbl_match_spec_t::netbufferv4_update_valhi4_tbl_match_spec_t(const netbufferv4_update_valhi4_tbl_match_spec_t& other145) {
  meta_access_val_mode = other145.meta_access_val_mode;
}
netbufferv4_update_valhi4_tbl_match_spec_t& netbufferv4_update_valhi4_tbl_match_spec_t::operator=(const netbufferv4_update_valhi4_tbl_match_spec_t& other146) {
  meta_access_val_mode = other146.meta_access_val_mode;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_valhi4_tbl_match_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_valhi4_tbl_match_spec_t(";
  out << "meta_access_val_mode=" << to_string(obj.meta_access_val_mode);
  out << ")";
  return out;
}


netbufferv4_update_valhi5_tbl_match_spec_t::~netbufferv4_update_valhi5_tbl_match_spec_t() throw() {
}


void netbufferv4_update_valhi5_tbl_match_spec_t::__set_meta_access_val_mode(const int8_t val) {
  this->meta_access_val_mode = val;
}

const char* netbufferv4_update_valhi5_tbl_match_spec_t::ascii_fingerprint = "A7D440367E85134EBDBAA7BCA01056D0";
const uint8_t netbufferv4_update_valhi5_tbl_match_spec_t::binary_fingerprint[16] = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

uint32_t netbufferv4_update_valhi5_tbl_match_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_meta_access_val_mode = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->meta_access_val_mode);
          isset_meta_access_val_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_meta_access_val_mode)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_valhi5_tbl_match_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_valhi5_tbl_match_spec_t");

  xfer += oprot->writeFieldBegin("meta_access_val_mode", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->meta_access_val_mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_valhi5_tbl_match_spec_t &a, netbufferv4_update_valhi5_tbl_match_spec_t &b) {
  using ::std::swap;
  swap(a.meta_access_val_mode, b.meta_access_val_mode);
}

netbufferv4_update_valhi5_tbl_match_spec_t::netbufferv4_update_valhi5_tbl_match_spec_t(const netbufferv4_update_valhi5_tbl_match_spec_t& other147) {
  meta_access_val_mode = other147.meta_access_val_mode;
}
netbufferv4_update_valhi5_tbl_match_spec_t& netbufferv4_update_valhi5_tbl_match_spec_t::operator=(const netbufferv4_update_valhi5_tbl_match_spec_t& other148) {
  meta_access_val_mode = other148.meta_access_val_mode;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_valhi5_tbl_match_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_valhi5_tbl_match_spec_t(";
  out << "meta_access_val_mode=" << to_string(obj.meta_access_val_mode);
  out << ")";
  return out;
}


netbufferv4_update_valhi6_tbl_match_spec_t::~netbufferv4_update_valhi6_tbl_match_spec_t() throw() {
}


void netbufferv4_update_valhi6_tbl_match_spec_t::__set_meta_access_val_mode(const int8_t val) {
  this->meta_access_val_mode = val;
}

const char* netbufferv4_update_valhi6_tbl_match_spec_t::ascii_fingerprint = "A7D440367E85134EBDBAA7BCA01056D0";
const uint8_t netbufferv4_update_valhi6_tbl_match_spec_t::binary_fingerprint[16] = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

uint32_t netbufferv4_update_valhi6_tbl_match_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_meta_access_val_mode = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->meta_access_val_mode);
          isset_meta_access_val_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_meta_access_val_mode)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_valhi6_tbl_match_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_valhi6_tbl_match_spec_t");

  xfer += oprot->writeFieldBegin("meta_access_val_mode", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->meta_access_val_mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_valhi6_tbl_match_spec_t &a, netbufferv4_update_valhi6_tbl_match_spec_t &b) {
  using ::std::swap;
  swap(a.meta_access_val_mode, b.meta_access_val_mode);
}

netbufferv4_update_valhi6_tbl_match_spec_t::netbufferv4_update_valhi6_tbl_match_spec_t(const netbufferv4_update_valhi6_tbl_match_spec_t& other149) {
  meta_access_val_mode = other149.meta_access_val_mode;
}
netbufferv4_update_valhi6_tbl_match_spec_t& netbufferv4_update_valhi6_tbl_match_spec_t::operator=(const netbufferv4_update_valhi6_tbl_match_spec_t& other150) {
  meta_access_val_mode = other150.meta_access_val_mode;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_valhi6_tbl_match_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_valhi6_tbl_match_spec_t(";
  out << "meta_access_val_mode=" << to_string(obj.meta_access_val_mode);
  out << ")";
  return out;
}


netbufferv4_update_valhi7_tbl_match_spec_t::~netbufferv4_update_valhi7_tbl_match_spec_t() throw() {
}


void netbufferv4_update_valhi7_tbl_match_spec_t::__set_meta_access_val_mode(const int8_t val) {
  this->meta_access_val_mode = val;
}

const char* netbufferv4_update_valhi7_tbl_match_spec_t::ascii_fingerprint = "A7D440367E85134EBDBAA7BCA01056D0";
const uint8_t netbufferv4_update_valhi7_tbl_match_spec_t::binary_fingerprint[16] = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

uint32_t netbufferv4_update_valhi7_tbl_match_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_meta_access_val_mode = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->meta_access_val_mode);
          isset_meta_access_val_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_meta_access_val_mode)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_valhi7_tbl_match_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_valhi7_tbl_match_spec_t");

  xfer += oprot->writeFieldBegin("meta_access_val_mode", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->meta_access_val_mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_valhi7_tbl_match_spec_t &a, netbufferv4_update_valhi7_tbl_match_spec_t &b) {
  using ::std::swap;
  swap(a.meta_access_val_mode, b.meta_access_val_mode);
}

netbufferv4_update_valhi7_tbl_match_spec_t::netbufferv4_update_valhi7_tbl_match_spec_t(const netbufferv4_update_valhi7_tbl_match_spec_t& other151) {
  meta_access_val_mode = other151.meta_access_val_mode;
}
netbufferv4_update_valhi7_tbl_match_spec_t& netbufferv4_update_valhi7_tbl_match_spec_t::operator=(const netbufferv4_update_valhi7_tbl_match_spec_t& other152) {
  meta_access_val_mode = other152.meta_access_val_mode;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_valhi7_tbl_match_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_valhi7_tbl_match_spec_t(";
  out << "meta_access_val_mode=" << to_string(obj.meta_access_val_mode);
  out << ")";
  return out;
}


netbufferv4_update_valhi8_tbl_match_spec_t::~netbufferv4_update_valhi8_tbl_match_spec_t() throw() {
}


void netbufferv4_update_valhi8_tbl_match_spec_t::__set_meta_access_val_mode(const int8_t val) {
  this->meta_access_val_mode = val;
}

const char* netbufferv4_update_valhi8_tbl_match_spec_t::ascii_fingerprint = "A7D440367E85134EBDBAA7BCA01056D0";
const uint8_t netbufferv4_update_valhi8_tbl_match_spec_t::binary_fingerprint[16] = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

uint32_t netbufferv4_update_valhi8_tbl_match_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_meta_access_val_mode = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->meta_access_val_mode);
          isset_meta_access_val_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_meta_access_val_mode)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_valhi8_tbl_match_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_valhi8_tbl_match_spec_t");

  xfer += oprot->writeFieldBegin("meta_access_val_mode", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->meta_access_val_mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_valhi8_tbl_match_spec_t &a, netbufferv4_update_valhi8_tbl_match_spec_t &b) {
  using ::std::swap;
  swap(a.meta_access_val_mode, b.meta_access_val_mode);
}

netbufferv4_update_valhi8_tbl_match_spec_t::netbufferv4_update_valhi8_tbl_match_spec_t(const netbufferv4_update_valhi8_tbl_match_spec_t& other153) {
  meta_access_val_mode = other153.meta_access_val_mode;
}
netbufferv4_update_valhi8_tbl_match_spec_t& netbufferv4_update_valhi8_tbl_match_spec_t::operator=(const netbufferv4_update_valhi8_tbl_match_spec_t& other154) {
  meta_access_val_mode = other154.meta_access_val_mode;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_valhi8_tbl_match_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_valhi8_tbl_match_spec_t(";
  out << "meta_access_val_mode=" << to_string(obj.meta_access_val_mode);
  out << ")";
  return out;
}


netbufferv4_update_valhi9_tbl_match_spec_t::~netbufferv4_update_valhi9_tbl_match_spec_t() throw() {
}


void netbufferv4_update_valhi9_tbl_match_spec_t::__set_meta_access_val_mode(const int8_t val) {
  this->meta_access_val_mode = val;
}

const char* netbufferv4_update_valhi9_tbl_match_spec_t::ascii_fingerprint = "A7D440367E85134EBDBAA7BCA01056D0";
const uint8_t netbufferv4_update_valhi9_tbl_match_spec_t::binary_fingerprint[16] = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

uint32_t netbufferv4_update_valhi9_tbl_match_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_meta_access_val_mode = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->meta_access_val_mode);
          isset_meta_access_val_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_meta_access_val_mode)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_valhi9_tbl_match_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_valhi9_tbl_match_spec_t");

  xfer += oprot->writeFieldBegin("meta_access_val_mode", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->meta_access_val_mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_valhi9_tbl_match_spec_t &a, netbufferv4_update_valhi9_tbl_match_spec_t &b) {
  using ::std::swap;
  swap(a.meta_access_val_mode, b.meta_access_val_mode);
}

netbufferv4_update_valhi9_tbl_match_spec_t::netbufferv4_update_valhi9_tbl_match_spec_t(const netbufferv4_update_valhi9_tbl_match_spec_t& other155) {
  meta_access_val_mode = other155.meta_access_val_mode;
}
netbufferv4_update_valhi9_tbl_match_spec_t& netbufferv4_update_valhi9_tbl_match_spec_t::operator=(const netbufferv4_update_valhi9_tbl_match_spec_t& other156) {
  meta_access_val_mode = other156.meta_access_val_mode;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_valhi9_tbl_match_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_valhi9_tbl_match_spec_t(";
  out << "meta_access_val_mode=" << to_string(obj.meta_access_val_mode);
  out << ")";
  return out;
}


netbufferv4_update_vallen_tbl_match_spec_t::~netbufferv4_update_vallen_tbl_match_spec_t() throw() {
}


void netbufferv4_update_vallen_tbl_match_spec_t::__set_op_hdr_optype(const int16_t val) {
  this->op_hdr_optype = val;
}

void netbufferv4_update_vallen_tbl_match_spec_t::__set_inswitch_hdr_is_cached(const int8_t val) {
  this->inswitch_hdr_is_cached = val;
}

void netbufferv4_update_vallen_tbl_match_spec_t::__set_validvalue_hdr_validvalue(const int8_t val) {
  this->validvalue_hdr_validvalue = val;
}

void netbufferv4_update_vallen_tbl_match_spec_t::__set_meta_is_latest(const int8_t val) {
  this->meta_is_latest = val;
}

const char* netbufferv4_update_vallen_tbl_match_spec_t::ascii_fingerprint = "FA15C7D77CA497D65C649057DED15F08";
const uint8_t netbufferv4_update_vallen_tbl_match_spec_t::binary_fingerprint[16] = {0xFA,0x15,0xC7,0xD7,0x7C,0xA4,0x97,0xD6,0x5C,0x64,0x90,0x57,0xDE,0xD1,0x5F,0x08};

uint32_t netbufferv4_update_vallen_tbl_match_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_op_hdr_optype = false;
  bool isset_inswitch_hdr_is_cached = false;
  bool isset_validvalue_hdr_validvalue = false;
  bool isset_meta_is_latest = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->op_hdr_optype);
          isset_op_hdr_optype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->inswitch_hdr_is_cached);
          isset_inswitch_hdr_is_cached = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->validvalue_hdr_validvalue);
          isset_validvalue_hdr_validvalue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->meta_is_latest);
          isset_meta_is_latest = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_op_hdr_optype)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_inswitch_hdr_is_cached)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_validvalue_hdr_validvalue)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_meta_is_latest)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_vallen_tbl_match_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_vallen_tbl_match_spec_t");

  xfer += oprot->writeFieldBegin("op_hdr_optype", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->op_hdr_optype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("inswitch_hdr_is_cached", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->inswitch_hdr_is_cached);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("validvalue_hdr_validvalue", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->validvalue_hdr_validvalue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("meta_is_latest", ::apache::thrift::protocol::T_BYTE, 4);
  xfer += oprot->writeByte(this->meta_is_latest);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_vallen_tbl_match_spec_t &a, netbufferv4_update_vallen_tbl_match_spec_t &b) {
  using ::std::swap;
  swap(a.op_hdr_optype, b.op_hdr_optype);
  swap(a.inswitch_hdr_is_cached, b.inswitch_hdr_is_cached);
  swap(a.validvalue_hdr_validvalue, b.validvalue_hdr_validvalue);
  swap(a.meta_is_latest, b.meta_is_latest);
}

netbufferv4_update_vallen_tbl_match_spec_t::netbufferv4_update_vallen_tbl_match_spec_t(const netbufferv4_update_vallen_tbl_match_spec_t& other157) {
  op_hdr_optype = other157.op_hdr_optype;
  inswitch_hdr_is_cached = other157.inswitch_hdr_is_cached;
  validvalue_hdr_validvalue = other157.validvalue_hdr_validvalue;
  meta_is_latest = other157.meta_is_latest;
}
netbufferv4_update_vallen_tbl_match_spec_t& netbufferv4_update_vallen_tbl_match_spec_t::operator=(const netbufferv4_update_vallen_tbl_match_spec_t& other158) {
  op_hdr_optype = other158.op_hdr_optype;
  inswitch_hdr_is_cached = other158.inswitch_hdr_is_cached;
  validvalue_hdr_validvalue = other158.validvalue_hdr_validvalue;
  meta_is_latest = other158.meta_is_latest;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_vallen_tbl_match_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_vallen_tbl_match_spec_t(";
  out << "op_hdr_optype=" << to_string(obj.op_hdr_optype);
  out << ", " << "inswitch_hdr_is_cached=" << to_string(obj.inswitch_hdr_is_cached);
  out << ", " << "validvalue_hdr_validvalue=" << to_string(obj.validvalue_hdr_validvalue);
  out << ", " << "meta_is_latest=" << to_string(obj.meta_is_latest);
  out << ")";
  return out;
}


netbufferv4_update_vallo10_tbl_match_spec_t::~netbufferv4_update_vallo10_tbl_match_spec_t() throw() {
}


void netbufferv4_update_vallo10_tbl_match_spec_t::__set_meta_access_val_mode(const int8_t val) {
  this->meta_access_val_mode = val;
}

const char* netbufferv4_update_vallo10_tbl_match_spec_t::ascii_fingerprint = "A7D440367E85134EBDBAA7BCA01056D0";
const uint8_t netbufferv4_update_vallo10_tbl_match_spec_t::binary_fingerprint[16] = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

uint32_t netbufferv4_update_vallo10_tbl_match_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_meta_access_val_mode = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->meta_access_val_mode);
          isset_meta_access_val_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_meta_access_val_mode)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_vallo10_tbl_match_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_vallo10_tbl_match_spec_t");

  xfer += oprot->writeFieldBegin("meta_access_val_mode", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->meta_access_val_mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_vallo10_tbl_match_spec_t &a, netbufferv4_update_vallo10_tbl_match_spec_t &b) {
  using ::std::swap;
  swap(a.meta_access_val_mode, b.meta_access_val_mode);
}

netbufferv4_update_vallo10_tbl_match_spec_t::netbufferv4_update_vallo10_tbl_match_spec_t(const netbufferv4_update_vallo10_tbl_match_spec_t& other159) {
  meta_access_val_mode = other159.meta_access_val_mode;
}
netbufferv4_update_vallo10_tbl_match_spec_t& netbufferv4_update_vallo10_tbl_match_spec_t::operator=(const netbufferv4_update_vallo10_tbl_match_spec_t& other160) {
  meta_access_val_mode = other160.meta_access_val_mode;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_vallo10_tbl_match_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_vallo10_tbl_match_spec_t(";
  out << "meta_access_val_mode=" << to_string(obj.meta_access_val_mode);
  out << ")";
  return out;
}


netbufferv4_update_vallo11_tbl_match_spec_t::~netbufferv4_update_vallo11_tbl_match_spec_t() throw() {
}


void netbufferv4_update_vallo11_tbl_match_spec_t::__set_meta_access_val_mode(const int8_t val) {
  this->meta_access_val_mode = val;
}

const char* netbufferv4_update_vallo11_tbl_match_spec_t::ascii_fingerprint = "A7D440367E85134EBDBAA7BCA01056D0";
const uint8_t netbufferv4_update_vallo11_tbl_match_spec_t::binary_fingerprint[16] = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

uint32_t netbufferv4_update_vallo11_tbl_match_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_meta_access_val_mode = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->meta_access_val_mode);
          isset_meta_access_val_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_meta_access_val_mode)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_vallo11_tbl_match_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_vallo11_tbl_match_spec_t");

  xfer += oprot->writeFieldBegin("meta_access_val_mode", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->meta_access_val_mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_vallo11_tbl_match_spec_t &a, netbufferv4_update_vallo11_tbl_match_spec_t &b) {
  using ::std::swap;
  swap(a.meta_access_val_mode, b.meta_access_val_mode);
}

netbufferv4_update_vallo11_tbl_match_spec_t::netbufferv4_update_vallo11_tbl_match_spec_t(const netbufferv4_update_vallo11_tbl_match_spec_t& other161) {
  meta_access_val_mode = other161.meta_access_val_mode;
}
netbufferv4_update_vallo11_tbl_match_spec_t& netbufferv4_update_vallo11_tbl_match_spec_t::operator=(const netbufferv4_update_vallo11_tbl_match_spec_t& other162) {
  meta_access_val_mode = other162.meta_access_val_mode;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_vallo11_tbl_match_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_vallo11_tbl_match_spec_t(";
  out << "meta_access_val_mode=" << to_string(obj.meta_access_val_mode);
  out << ")";
  return out;
}


netbufferv4_update_vallo12_tbl_match_spec_t::~netbufferv4_update_vallo12_tbl_match_spec_t() throw() {
}


void netbufferv4_update_vallo12_tbl_match_spec_t::__set_meta_access_val_mode(const int8_t val) {
  this->meta_access_val_mode = val;
}

const char* netbufferv4_update_vallo12_tbl_match_spec_t::ascii_fingerprint = "A7D440367E85134EBDBAA7BCA01056D0";
const uint8_t netbufferv4_update_vallo12_tbl_match_spec_t::binary_fingerprint[16] = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

uint32_t netbufferv4_update_vallo12_tbl_match_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_meta_access_val_mode = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->meta_access_val_mode);
          isset_meta_access_val_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_meta_access_val_mode)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_vallo12_tbl_match_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_vallo12_tbl_match_spec_t");

  xfer += oprot->writeFieldBegin("meta_access_val_mode", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->meta_access_val_mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_vallo12_tbl_match_spec_t &a, netbufferv4_update_vallo12_tbl_match_spec_t &b) {
  using ::std::swap;
  swap(a.meta_access_val_mode, b.meta_access_val_mode);
}

netbufferv4_update_vallo12_tbl_match_spec_t::netbufferv4_update_vallo12_tbl_match_spec_t(const netbufferv4_update_vallo12_tbl_match_spec_t& other163) {
  meta_access_val_mode = other163.meta_access_val_mode;
}
netbufferv4_update_vallo12_tbl_match_spec_t& netbufferv4_update_vallo12_tbl_match_spec_t::operator=(const netbufferv4_update_vallo12_tbl_match_spec_t& other164) {
  meta_access_val_mode = other164.meta_access_val_mode;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_vallo12_tbl_match_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_vallo12_tbl_match_spec_t(";
  out << "meta_access_val_mode=" << to_string(obj.meta_access_val_mode);
  out << ")";
  return out;
}


netbufferv4_update_vallo13_tbl_match_spec_t::~netbufferv4_update_vallo13_tbl_match_spec_t() throw() {
}


void netbufferv4_update_vallo13_tbl_match_spec_t::__set_meta_access_val_mode(const int8_t val) {
  this->meta_access_val_mode = val;
}

const char* netbufferv4_update_vallo13_tbl_match_spec_t::ascii_fingerprint = "A7D440367E85134EBDBAA7BCA01056D0";
const uint8_t netbufferv4_update_vallo13_tbl_match_spec_t::binary_fingerprint[16] = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

uint32_t netbufferv4_update_vallo13_tbl_match_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_meta_access_val_mode = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->meta_access_val_mode);
          isset_meta_access_val_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_meta_access_val_mode)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_vallo13_tbl_match_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_vallo13_tbl_match_spec_t");

  xfer += oprot->writeFieldBegin("meta_access_val_mode", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->meta_access_val_mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_vallo13_tbl_match_spec_t &a, netbufferv4_update_vallo13_tbl_match_spec_t &b) {
  using ::std::swap;
  swap(a.meta_access_val_mode, b.meta_access_val_mode);
}

netbufferv4_update_vallo13_tbl_match_spec_t::netbufferv4_update_vallo13_tbl_match_spec_t(const netbufferv4_update_vallo13_tbl_match_spec_t& other165) {
  meta_access_val_mode = other165.meta_access_val_mode;
}
netbufferv4_update_vallo13_tbl_match_spec_t& netbufferv4_update_vallo13_tbl_match_spec_t::operator=(const netbufferv4_update_vallo13_tbl_match_spec_t& other166) {
  meta_access_val_mode = other166.meta_access_val_mode;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_vallo13_tbl_match_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_vallo13_tbl_match_spec_t(";
  out << "meta_access_val_mode=" << to_string(obj.meta_access_val_mode);
  out << ")";
  return out;
}


netbufferv4_update_vallo14_tbl_match_spec_t::~netbufferv4_update_vallo14_tbl_match_spec_t() throw() {
}


void netbufferv4_update_vallo14_tbl_match_spec_t::__set_meta_access_val_mode(const int8_t val) {
  this->meta_access_val_mode = val;
}

const char* netbufferv4_update_vallo14_tbl_match_spec_t::ascii_fingerprint = "A7D440367E85134EBDBAA7BCA01056D0";
const uint8_t netbufferv4_update_vallo14_tbl_match_spec_t::binary_fingerprint[16] = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

uint32_t netbufferv4_update_vallo14_tbl_match_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_meta_access_val_mode = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->meta_access_val_mode);
          isset_meta_access_val_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_meta_access_val_mode)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_vallo14_tbl_match_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_vallo14_tbl_match_spec_t");

  xfer += oprot->writeFieldBegin("meta_access_val_mode", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->meta_access_val_mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_vallo14_tbl_match_spec_t &a, netbufferv4_update_vallo14_tbl_match_spec_t &b) {
  using ::std::swap;
  swap(a.meta_access_val_mode, b.meta_access_val_mode);
}

netbufferv4_update_vallo14_tbl_match_spec_t::netbufferv4_update_vallo14_tbl_match_spec_t(const netbufferv4_update_vallo14_tbl_match_spec_t& other167) {
  meta_access_val_mode = other167.meta_access_val_mode;
}
netbufferv4_update_vallo14_tbl_match_spec_t& netbufferv4_update_vallo14_tbl_match_spec_t::operator=(const netbufferv4_update_vallo14_tbl_match_spec_t& other168) {
  meta_access_val_mode = other168.meta_access_val_mode;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_vallo14_tbl_match_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_vallo14_tbl_match_spec_t(";
  out << "meta_access_val_mode=" << to_string(obj.meta_access_val_mode);
  out << ")";
  return out;
}


netbufferv4_update_vallo15_tbl_match_spec_t::~netbufferv4_update_vallo15_tbl_match_spec_t() throw() {
}


void netbufferv4_update_vallo15_tbl_match_spec_t::__set_meta_access_val_mode(const int8_t val) {
  this->meta_access_val_mode = val;
}

const char* netbufferv4_update_vallo15_tbl_match_spec_t::ascii_fingerprint = "A7D440367E85134EBDBAA7BCA01056D0";
const uint8_t netbufferv4_update_vallo15_tbl_match_spec_t::binary_fingerprint[16] = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

uint32_t netbufferv4_update_vallo15_tbl_match_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_meta_access_val_mode = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->meta_access_val_mode);
          isset_meta_access_val_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_meta_access_val_mode)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_vallo15_tbl_match_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_vallo15_tbl_match_spec_t");

  xfer += oprot->writeFieldBegin("meta_access_val_mode", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->meta_access_val_mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_vallo15_tbl_match_spec_t &a, netbufferv4_update_vallo15_tbl_match_spec_t &b) {
  using ::std::swap;
  swap(a.meta_access_val_mode, b.meta_access_val_mode);
}

netbufferv4_update_vallo15_tbl_match_spec_t::netbufferv4_update_vallo15_tbl_match_spec_t(const netbufferv4_update_vallo15_tbl_match_spec_t& other169) {
  meta_access_val_mode = other169.meta_access_val_mode;
}
netbufferv4_update_vallo15_tbl_match_spec_t& netbufferv4_update_vallo15_tbl_match_spec_t::operator=(const netbufferv4_update_vallo15_tbl_match_spec_t& other170) {
  meta_access_val_mode = other170.meta_access_val_mode;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_vallo15_tbl_match_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_vallo15_tbl_match_spec_t(";
  out << "meta_access_val_mode=" << to_string(obj.meta_access_val_mode);
  out << ")";
  return out;
}


netbufferv4_update_vallo16_tbl_match_spec_t::~netbufferv4_update_vallo16_tbl_match_spec_t() throw() {
}


void netbufferv4_update_vallo16_tbl_match_spec_t::__set_meta_access_val_mode(const int8_t val) {
  this->meta_access_val_mode = val;
}

const char* netbufferv4_update_vallo16_tbl_match_spec_t::ascii_fingerprint = "A7D440367E85134EBDBAA7BCA01056D0";
const uint8_t netbufferv4_update_vallo16_tbl_match_spec_t::binary_fingerprint[16] = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

uint32_t netbufferv4_update_vallo16_tbl_match_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_meta_access_val_mode = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->meta_access_val_mode);
          isset_meta_access_val_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_meta_access_val_mode)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_vallo16_tbl_match_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_vallo16_tbl_match_spec_t");

  xfer += oprot->writeFieldBegin("meta_access_val_mode", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->meta_access_val_mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_vallo16_tbl_match_spec_t &a, netbufferv4_update_vallo16_tbl_match_spec_t &b) {
  using ::std::swap;
  swap(a.meta_access_val_mode, b.meta_access_val_mode);
}

netbufferv4_update_vallo16_tbl_match_spec_t::netbufferv4_update_vallo16_tbl_match_spec_t(const netbufferv4_update_vallo16_tbl_match_spec_t& other171) {
  meta_access_val_mode = other171.meta_access_val_mode;
}
netbufferv4_update_vallo16_tbl_match_spec_t& netbufferv4_update_vallo16_tbl_match_spec_t::operator=(const netbufferv4_update_vallo16_tbl_match_spec_t& other172) {
  meta_access_val_mode = other172.meta_access_val_mode;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_vallo16_tbl_match_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_vallo16_tbl_match_spec_t(";
  out << "meta_access_val_mode=" << to_string(obj.meta_access_val_mode);
  out << ")";
  return out;
}


netbufferv4_update_vallo1_tbl_match_spec_t::~netbufferv4_update_vallo1_tbl_match_spec_t() throw() {
}


void netbufferv4_update_vallo1_tbl_match_spec_t::__set_meta_access_val_mode(const int8_t val) {
  this->meta_access_val_mode = val;
}

const char* netbufferv4_update_vallo1_tbl_match_spec_t::ascii_fingerprint = "A7D440367E85134EBDBAA7BCA01056D0";
const uint8_t netbufferv4_update_vallo1_tbl_match_spec_t::binary_fingerprint[16] = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

uint32_t netbufferv4_update_vallo1_tbl_match_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_meta_access_val_mode = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->meta_access_val_mode);
          isset_meta_access_val_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_meta_access_val_mode)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_vallo1_tbl_match_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_vallo1_tbl_match_spec_t");

  xfer += oprot->writeFieldBegin("meta_access_val_mode", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->meta_access_val_mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_vallo1_tbl_match_spec_t &a, netbufferv4_update_vallo1_tbl_match_spec_t &b) {
  using ::std::swap;
  swap(a.meta_access_val_mode, b.meta_access_val_mode);
}

netbufferv4_update_vallo1_tbl_match_spec_t::netbufferv4_update_vallo1_tbl_match_spec_t(const netbufferv4_update_vallo1_tbl_match_spec_t& other173) {
  meta_access_val_mode = other173.meta_access_val_mode;
}
netbufferv4_update_vallo1_tbl_match_spec_t& netbufferv4_update_vallo1_tbl_match_spec_t::operator=(const netbufferv4_update_vallo1_tbl_match_spec_t& other174) {
  meta_access_val_mode = other174.meta_access_val_mode;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_vallo1_tbl_match_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_vallo1_tbl_match_spec_t(";
  out << "meta_access_val_mode=" << to_string(obj.meta_access_val_mode);
  out << ")";
  return out;
}


netbufferv4_update_vallo2_tbl_match_spec_t::~netbufferv4_update_vallo2_tbl_match_spec_t() throw() {
}


void netbufferv4_update_vallo2_tbl_match_spec_t::__set_meta_access_val_mode(const int8_t val) {
  this->meta_access_val_mode = val;
}

const char* netbufferv4_update_vallo2_tbl_match_spec_t::ascii_fingerprint = "A7D440367E85134EBDBAA7BCA01056D0";
const uint8_t netbufferv4_update_vallo2_tbl_match_spec_t::binary_fingerprint[16] = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

uint32_t netbufferv4_update_vallo2_tbl_match_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_meta_access_val_mode = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->meta_access_val_mode);
          isset_meta_access_val_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_meta_access_val_mode)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_vallo2_tbl_match_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_vallo2_tbl_match_spec_t");

  xfer += oprot->writeFieldBegin("meta_access_val_mode", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->meta_access_val_mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_vallo2_tbl_match_spec_t &a, netbufferv4_update_vallo2_tbl_match_spec_t &b) {
  using ::std::swap;
  swap(a.meta_access_val_mode, b.meta_access_val_mode);
}

netbufferv4_update_vallo2_tbl_match_spec_t::netbufferv4_update_vallo2_tbl_match_spec_t(const netbufferv4_update_vallo2_tbl_match_spec_t& other175) {
  meta_access_val_mode = other175.meta_access_val_mode;
}
netbufferv4_update_vallo2_tbl_match_spec_t& netbufferv4_update_vallo2_tbl_match_spec_t::operator=(const netbufferv4_update_vallo2_tbl_match_spec_t& other176) {
  meta_access_val_mode = other176.meta_access_val_mode;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_vallo2_tbl_match_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_vallo2_tbl_match_spec_t(";
  out << "meta_access_val_mode=" << to_string(obj.meta_access_val_mode);
  out << ")";
  return out;
}


netbufferv4_update_vallo3_tbl_match_spec_t::~netbufferv4_update_vallo3_tbl_match_spec_t() throw() {
}


void netbufferv4_update_vallo3_tbl_match_spec_t::__set_meta_access_val_mode(const int8_t val) {
  this->meta_access_val_mode = val;
}

const char* netbufferv4_update_vallo3_tbl_match_spec_t::ascii_fingerprint = "A7D440367E85134EBDBAA7BCA01056D0";
const uint8_t netbufferv4_update_vallo3_tbl_match_spec_t::binary_fingerprint[16] = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

uint32_t netbufferv4_update_vallo3_tbl_match_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_meta_access_val_mode = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->meta_access_val_mode);
          isset_meta_access_val_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_meta_access_val_mode)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_vallo3_tbl_match_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_vallo3_tbl_match_spec_t");

  xfer += oprot->writeFieldBegin("meta_access_val_mode", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->meta_access_val_mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_vallo3_tbl_match_spec_t &a, netbufferv4_update_vallo3_tbl_match_spec_t &b) {
  using ::std::swap;
  swap(a.meta_access_val_mode, b.meta_access_val_mode);
}

netbufferv4_update_vallo3_tbl_match_spec_t::netbufferv4_update_vallo3_tbl_match_spec_t(const netbufferv4_update_vallo3_tbl_match_spec_t& other177) {
  meta_access_val_mode = other177.meta_access_val_mode;
}
netbufferv4_update_vallo3_tbl_match_spec_t& netbufferv4_update_vallo3_tbl_match_spec_t::operator=(const netbufferv4_update_vallo3_tbl_match_spec_t& other178) {
  meta_access_val_mode = other178.meta_access_val_mode;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_vallo3_tbl_match_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_vallo3_tbl_match_spec_t(";
  out << "meta_access_val_mode=" << to_string(obj.meta_access_val_mode);
  out << ")";
  return out;
}


netbufferv4_update_vallo4_tbl_match_spec_t::~netbufferv4_update_vallo4_tbl_match_spec_t() throw() {
}


void netbufferv4_update_vallo4_tbl_match_spec_t::__set_meta_access_val_mode(const int8_t val) {
  this->meta_access_val_mode = val;
}

const char* netbufferv4_update_vallo4_tbl_match_spec_t::ascii_fingerprint = "A7D440367E85134EBDBAA7BCA01056D0";
const uint8_t netbufferv4_update_vallo4_tbl_match_spec_t::binary_fingerprint[16] = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

uint32_t netbufferv4_update_vallo4_tbl_match_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_meta_access_val_mode = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->meta_access_val_mode);
          isset_meta_access_val_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_meta_access_val_mode)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_vallo4_tbl_match_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_vallo4_tbl_match_spec_t");

  xfer += oprot->writeFieldBegin("meta_access_val_mode", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->meta_access_val_mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_vallo4_tbl_match_spec_t &a, netbufferv4_update_vallo4_tbl_match_spec_t &b) {
  using ::std::swap;
  swap(a.meta_access_val_mode, b.meta_access_val_mode);
}

netbufferv4_update_vallo4_tbl_match_spec_t::netbufferv4_update_vallo4_tbl_match_spec_t(const netbufferv4_update_vallo4_tbl_match_spec_t& other179) {
  meta_access_val_mode = other179.meta_access_val_mode;
}
netbufferv4_update_vallo4_tbl_match_spec_t& netbufferv4_update_vallo4_tbl_match_spec_t::operator=(const netbufferv4_update_vallo4_tbl_match_spec_t& other180) {
  meta_access_val_mode = other180.meta_access_val_mode;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_vallo4_tbl_match_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_vallo4_tbl_match_spec_t(";
  out << "meta_access_val_mode=" << to_string(obj.meta_access_val_mode);
  out << ")";
  return out;
}


netbufferv4_update_vallo5_tbl_match_spec_t::~netbufferv4_update_vallo5_tbl_match_spec_t() throw() {
}


void netbufferv4_update_vallo5_tbl_match_spec_t::__set_meta_access_val_mode(const int8_t val) {
  this->meta_access_val_mode = val;
}

const char* netbufferv4_update_vallo5_tbl_match_spec_t::ascii_fingerprint = "A7D440367E85134EBDBAA7BCA01056D0";
const uint8_t netbufferv4_update_vallo5_tbl_match_spec_t::binary_fingerprint[16] = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

uint32_t netbufferv4_update_vallo5_tbl_match_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_meta_access_val_mode = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->meta_access_val_mode);
          isset_meta_access_val_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_meta_access_val_mode)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_vallo5_tbl_match_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_vallo5_tbl_match_spec_t");

  xfer += oprot->writeFieldBegin("meta_access_val_mode", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->meta_access_val_mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_vallo5_tbl_match_spec_t &a, netbufferv4_update_vallo5_tbl_match_spec_t &b) {
  using ::std::swap;
  swap(a.meta_access_val_mode, b.meta_access_val_mode);
}

netbufferv4_update_vallo5_tbl_match_spec_t::netbufferv4_update_vallo5_tbl_match_spec_t(const netbufferv4_update_vallo5_tbl_match_spec_t& other181) {
  meta_access_val_mode = other181.meta_access_val_mode;
}
netbufferv4_update_vallo5_tbl_match_spec_t& netbufferv4_update_vallo5_tbl_match_spec_t::operator=(const netbufferv4_update_vallo5_tbl_match_spec_t& other182) {
  meta_access_val_mode = other182.meta_access_val_mode;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_vallo5_tbl_match_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_vallo5_tbl_match_spec_t(";
  out << "meta_access_val_mode=" << to_string(obj.meta_access_val_mode);
  out << ")";
  return out;
}


netbufferv4_update_vallo6_tbl_match_spec_t::~netbufferv4_update_vallo6_tbl_match_spec_t() throw() {
}


void netbufferv4_update_vallo6_tbl_match_spec_t::__set_meta_access_val_mode(const int8_t val) {
  this->meta_access_val_mode = val;
}

const char* netbufferv4_update_vallo6_tbl_match_spec_t::ascii_fingerprint = "A7D440367E85134EBDBAA7BCA01056D0";
const uint8_t netbufferv4_update_vallo6_tbl_match_spec_t::binary_fingerprint[16] = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

uint32_t netbufferv4_update_vallo6_tbl_match_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_meta_access_val_mode = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->meta_access_val_mode);
          isset_meta_access_val_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_meta_access_val_mode)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_vallo6_tbl_match_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_vallo6_tbl_match_spec_t");

  xfer += oprot->writeFieldBegin("meta_access_val_mode", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->meta_access_val_mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_vallo6_tbl_match_spec_t &a, netbufferv4_update_vallo6_tbl_match_spec_t &b) {
  using ::std::swap;
  swap(a.meta_access_val_mode, b.meta_access_val_mode);
}

netbufferv4_update_vallo6_tbl_match_spec_t::netbufferv4_update_vallo6_tbl_match_spec_t(const netbufferv4_update_vallo6_tbl_match_spec_t& other183) {
  meta_access_val_mode = other183.meta_access_val_mode;
}
netbufferv4_update_vallo6_tbl_match_spec_t& netbufferv4_update_vallo6_tbl_match_spec_t::operator=(const netbufferv4_update_vallo6_tbl_match_spec_t& other184) {
  meta_access_val_mode = other184.meta_access_val_mode;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_vallo6_tbl_match_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_vallo6_tbl_match_spec_t(";
  out << "meta_access_val_mode=" << to_string(obj.meta_access_val_mode);
  out << ")";
  return out;
}


netbufferv4_update_vallo7_tbl_match_spec_t::~netbufferv4_update_vallo7_tbl_match_spec_t() throw() {
}


void netbufferv4_update_vallo7_tbl_match_spec_t::__set_meta_access_val_mode(const int8_t val) {
  this->meta_access_val_mode = val;
}

const char* netbufferv4_update_vallo7_tbl_match_spec_t::ascii_fingerprint = "A7D440367E85134EBDBAA7BCA01056D0";
const uint8_t netbufferv4_update_vallo7_tbl_match_spec_t::binary_fingerprint[16] = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

uint32_t netbufferv4_update_vallo7_tbl_match_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_meta_access_val_mode = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->meta_access_val_mode);
          isset_meta_access_val_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_meta_access_val_mode)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_vallo7_tbl_match_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_vallo7_tbl_match_spec_t");

  xfer += oprot->writeFieldBegin("meta_access_val_mode", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->meta_access_val_mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_vallo7_tbl_match_spec_t &a, netbufferv4_update_vallo7_tbl_match_spec_t &b) {
  using ::std::swap;
  swap(a.meta_access_val_mode, b.meta_access_val_mode);
}

netbufferv4_update_vallo7_tbl_match_spec_t::netbufferv4_update_vallo7_tbl_match_spec_t(const netbufferv4_update_vallo7_tbl_match_spec_t& other185) {
  meta_access_val_mode = other185.meta_access_val_mode;
}
netbufferv4_update_vallo7_tbl_match_spec_t& netbufferv4_update_vallo7_tbl_match_spec_t::operator=(const netbufferv4_update_vallo7_tbl_match_spec_t& other186) {
  meta_access_val_mode = other186.meta_access_val_mode;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_vallo7_tbl_match_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_vallo7_tbl_match_spec_t(";
  out << "meta_access_val_mode=" << to_string(obj.meta_access_val_mode);
  out << ")";
  return out;
}


netbufferv4_update_vallo8_tbl_match_spec_t::~netbufferv4_update_vallo8_tbl_match_spec_t() throw() {
}


void netbufferv4_update_vallo8_tbl_match_spec_t::__set_meta_access_val_mode(const int8_t val) {
  this->meta_access_val_mode = val;
}

const char* netbufferv4_update_vallo8_tbl_match_spec_t::ascii_fingerprint = "A7D440367E85134EBDBAA7BCA01056D0";
const uint8_t netbufferv4_update_vallo8_tbl_match_spec_t::binary_fingerprint[16] = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

uint32_t netbufferv4_update_vallo8_tbl_match_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_meta_access_val_mode = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->meta_access_val_mode);
          isset_meta_access_val_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_meta_access_val_mode)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_vallo8_tbl_match_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_vallo8_tbl_match_spec_t");

  xfer += oprot->writeFieldBegin("meta_access_val_mode", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->meta_access_val_mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_vallo8_tbl_match_spec_t &a, netbufferv4_update_vallo8_tbl_match_spec_t &b) {
  using ::std::swap;
  swap(a.meta_access_val_mode, b.meta_access_val_mode);
}

netbufferv4_update_vallo8_tbl_match_spec_t::netbufferv4_update_vallo8_tbl_match_spec_t(const netbufferv4_update_vallo8_tbl_match_spec_t& other187) {
  meta_access_val_mode = other187.meta_access_val_mode;
}
netbufferv4_update_vallo8_tbl_match_spec_t& netbufferv4_update_vallo8_tbl_match_spec_t::operator=(const netbufferv4_update_vallo8_tbl_match_spec_t& other188) {
  meta_access_val_mode = other188.meta_access_val_mode;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_vallo8_tbl_match_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_vallo8_tbl_match_spec_t(";
  out << "meta_access_val_mode=" << to_string(obj.meta_access_val_mode);
  out << ")";
  return out;
}


netbufferv4_update_vallo9_tbl_match_spec_t::~netbufferv4_update_vallo9_tbl_match_spec_t() throw() {
}


void netbufferv4_update_vallo9_tbl_match_spec_t::__set_meta_access_val_mode(const int8_t val) {
  this->meta_access_val_mode = val;
}

const char* netbufferv4_update_vallo9_tbl_match_spec_t::ascii_fingerprint = "A7D440367E85134EBDBAA7BCA01056D0";
const uint8_t netbufferv4_update_vallo9_tbl_match_spec_t::binary_fingerprint[16] = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

uint32_t netbufferv4_update_vallo9_tbl_match_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_meta_access_val_mode = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->meta_access_val_mode);
          isset_meta_access_val_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_meta_access_val_mode)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_vallo9_tbl_match_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_vallo9_tbl_match_spec_t");

  xfer += oprot->writeFieldBegin("meta_access_val_mode", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->meta_access_val_mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_vallo9_tbl_match_spec_t &a, netbufferv4_update_vallo9_tbl_match_spec_t &b) {
  using ::std::swap;
  swap(a.meta_access_val_mode, b.meta_access_val_mode);
}

netbufferv4_update_vallo9_tbl_match_spec_t::netbufferv4_update_vallo9_tbl_match_spec_t(const netbufferv4_update_vallo9_tbl_match_spec_t& other189) {
  meta_access_val_mode = other189.meta_access_val_mode;
}
netbufferv4_update_vallo9_tbl_match_spec_t& netbufferv4_update_vallo9_tbl_match_spec_t::operator=(const netbufferv4_update_vallo9_tbl_match_spec_t& other190) {
  meta_access_val_mode = other190.meta_access_val_mode;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_vallo9_tbl_match_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_vallo9_tbl_match_spec_t(";
  out << "meta_access_val_mode=" << to_string(obj.meta_access_val_mode);
  out << ")";
  return out;
}


netbufferv4_cached_action_action_spec_t::~netbufferv4_cached_action_action_spec_t() throw() {
}


void netbufferv4_cached_action_action_spec_t::__set_action_idx(const int16_t val) {
  this->action_idx = val;
}

const char* netbufferv4_cached_action_action_spec_t::ascii_fingerprint = "565787C31CF2D774B532CB755189BF39";
const uint8_t netbufferv4_cached_action_action_spec_t::binary_fingerprint[16] = {0x56,0x57,0x87,0xC3,0x1C,0xF2,0xD7,0x74,0xB5,0x32,0xCB,0x75,0x51,0x89,0xBF,0x39};

uint32_t netbufferv4_cached_action_action_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_action_idx = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->action_idx);
          isset_action_idx = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_action_idx)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_cached_action_action_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_cached_action_action_spec_t");

  xfer += oprot->writeFieldBegin("action_idx", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->action_idx);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_cached_action_action_spec_t &a, netbufferv4_cached_action_action_spec_t &b) {
  using ::std::swap;
  swap(a.action_idx, b.action_idx);
}

netbufferv4_cached_action_action_spec_t::netbufferv4_cached_action_action_spec_t(const netbufferv4_cached_action_action_spec_t& other191) {
  action_idx = other191.action_idx;
}
netbufferv4_cached_action_action_spec_t& netbufferv4_cached_action_action_spec_t::operator=(const netbufferv4_cached_action_action_spec_t& other192) {
  action_idx = other192.action_idx;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_cached_action_action_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_cached_action_action_spec_t(";
  out << "action_idx=" << to_string(obj.action_idx);
  out << ")";
  return out;
}


netbufferv4_update_getreq_inswitch_to_getres_by_mirroring_action_spec_t::~netbufferv4_update_getreq_inswitch_to_getres_by_mirroring_action_spec_t() throw() {
}


void netbufferv4_update_getreq_inswitch_to_getres_by_mirroring_action_spec_t::__set_action_client_sid(const int32_t val) {
  this->action_client_sid = val;
}

void netbufferv4_update_getreq_inswitch_to_getres_by_mirroring_action_spec_t::__set_action_server_port(const int16_t val) {
  this->action_server_port = val;
}

void netbufferv4_update_getreq_inswitch_to_getres_by_mirroring_action_spec_t::__set_action_stat(const int8_t val) {
  this->action_stat = val;
}

const char* netbufferv4_update_getreq_inswitch_to_getres_by_mirroring_action_spec_t::ascii_fingerprint = "CF61E7A3956E3D6B3BD04841C5A945B2";
const uint8_t netbufferv4_update_getreq_inswitch_to_getres_by_mirroring_action_spec_t::binary_fingerprint[16] = {0xCF,0x61,0xE7,0xA3,0x95,0x6E,0x3D,0x6B,0x3B,0xD0,0x48,0x41,0xC5,0xA9,0x45,0xB2};

uint32_t netbufferv4_update_getreq_inswitch_to_getres_by_mirroring_action_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_action_client_sid = false;
  bool isset_action_server_port = false;
  bool isset_action_stat = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_client_sid);
          isset_action_client_sid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->action_server_port);
          isset_action_server_port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->action_stat);
          isset_action_stat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_action_client_sid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_server_port)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_stat)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_getreq_inswitch_to_getres_by_mirroring_action_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_getreq_inswitch_to_getres_by_mirroring_action_spec_t");

  xfer += oprot->writeFieldBegin("action_client_sid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->action_client_sid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_server_port", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->action_server_port);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_stat", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->action_stat);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_getreq_inswitch_to_getres_by_mirroring_action_spec_t &a, netbufferv4_update_getreq_inswitch_to_getres_by_mirroring_action_spec_t &b) {
  using ::std::swap;
  swap(a.action_client_sid, b.action_client_sid);
  swap(a.action_server_port, b.action_server_port);
  swap(a.action_stat, b.action_stat);
}

netbufferv4_update_getreq_inswitch_to_getres_by_mirroring_action_spec_t::netbufferv4_update_getreq_inswitch_to_getres_by_mirroring_action_spec_t(const netbufferv4_update_getreq_inswitch_to_getres_by_mirroring_action_spec_t& other193) {
  action_client_sid = other193.action_client_sid;
  action_server_port = other193.action_server_port;
  action_stat = other193.action_stat;
}
netbufferv4_update_getreq_inswitch_to_getres_by_mirroring_action_spec_t& netbufferv4_update_getreq_inswitch_to_getres_by_mirroring_action_spec_t::operator=(const netbufferv4_update_getreq_inswitch_to_getres_by_mirroring_action_spec_t& other194) {
  action_client_sid = other194.action_client_sid;
  action_server_port = other194.action_server_port;
  action_stat = other194.action_stat;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_getreq_inswitch_to_getres_by_mirroring_action_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_getreq_inswitch_to_getres_by_mirroring_action_spec_t(";
  out << "action_client_sid=" << to_string(obj.action_client_sid);
  out << ", " << "action_server_port=" << to_string(obj.action_server_port);
  out << ", " << "action_stat=" << to_string(obj.action_stat);
  out << ")";
  return out;
}


netbufferv4_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t::~netbufferv4_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t() throw() {
}


void netbufferv4_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t::__set_action_switchos_sid(const int32_t val) {
  this->action_switchos_sid = val;
}

void netbufferv4_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t::__set_action_stat(const int8_t val) {
  this->action_stat = val;
}

void netbufferv4_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t::__set_action_reflector_port(const int16_t val) {
  this->action_reflector_port = val;
}

const char* netbufferv4_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t::ascii_fingerprint = "D536F5DEB62A50F7527407B12DB84888";
const uint8_t netbufferv4_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t::binary_fingerprint[16] = {0xD5,0x36,0xF5,0xDE,0xB6,0x2A,0x50,0xF7,0x52,0x74,0x07,0xB1,0x2D,0xB8,0x48,0x88};

uint32_t netbufferv4_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_action_switchos_sid = false;
  bool isset_action_stat = false;
  bool isset_action_reflector_port = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_switchos_sid);
          isset_action_switchos_sid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->action_stat);
          isset_action_stat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->action_reflector_port);
          isset_action_reflector_port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_action_switchos_sid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_stat)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_reflector_port)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t");

  xfer += oprot->writeFieldBegin("action_switchos_sid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->action_switchos_sid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_stat", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->action_stat);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_reflector_port", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->action_reflector_port);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t &a, netbufferv4_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t &b) {
  using ::std::swap;
  swap(a.action_switchos_sid, b.action_switchos_sid);
  swap(a.action_stat, b.action_stat);
  swap(a.action_reflector_port, b.action_reflector_port);
}

netbufferv4_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t::netbufferv4_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t(const netbufferv4_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t& other195) {
  action_switchos_sid = other195.action_switchos_sid;
  action_stat = other195.action_stat;
  action_reflector_port = other195.action_reflector_port;
}
netbufferv4_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t& netbufferv4_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t::operator=(const netbufferv4_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t& other196) {
  action_switchos_sid = other196.action_switchos_sid;
  action_stat = other196.action_stat;
  action_reflector_port = other196.action_reflector_port;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t(";
  out << "action_switchos_sid=" << to_string(obj.action_switchos_sid);
  out << ", " << "action_stat=" << to_string(obj.action_stat);
  out << ", " << "action_reflector_port=" << to_string(obj.action_reflector_port);
  out << ")";
  return out;
}


netbufferv4_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t::~netbufferv4_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t() throw() {
}


void netbufferv4_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t::__set_action_switchos_sid(const int32_t val) {
  this->action_switchos_sid = val;
}

const char* netbufferv4_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t::ascii_fingerprint = "E86CACEB22240450EDCBEFC3A83970E4";
const uint8_t netbufferv4_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t::binary_fingerprint[16] = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

uint32_t netbufferv4_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_action_switchos_sid = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_switchos_sid);
          isset_action_switchos_sid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_action_switchos_sid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t");

  xfer += oprot->writeFieldBegin("action_switchos_sid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->action_switchos_sid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t &a, netbufferv4_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t &b) {
  using ::std::swap;
  swap(a.action_switchos_sid, b.action_switchos_sid);
}

netbufferv4_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t::netbufferv4_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t(const netbufferv4_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t& other197) {
  action_switchos_sid = other197.action_switchos_sid;
}
netbufferv4_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t& netbufferv4_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t::operator=(const netbufferv4_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t& other198) {
  action_switchos_sid = other198.action_switchos_sid;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t(";
  out << "action_switchos_sid=" << to_string(obj.action_switchos_sid);
  out << ")";
  return out;
}


netbufferv4_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t::~netbufferv4_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t() throw() {
}


void netbufferv4_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t::__set_action_switchos_sid(const int32_t val) {
  this->action_switchos_sid = val;
}

void netbufferv4_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t::__set_action_stat(const int8_t val) {
  this->action_stat = val;
}

void netbufferv4_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t::__set_action_reflector_port(const int16_t val) {
  this->action_reflector_port = val;
}

const char* netbufferv4_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t::ascii_fingerprint = "D536F5DEB62A50F7527407B12DB84888";
const uint8_t netbufferv4_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t::binary_fingerprint[16] = {0xD5,0x36,0xF5,0xDE,0xB6,0x2A,0x50,0xF7,0x52,0x74,0x07,0xB1,0x2D,0xB8,0x48,0x88};

uint32_t netbufferv4_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_action_switchos_sid = false;
  bool isset_action_stat = false;
  bool isset_action_reflector_port = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_switchos_sid);
          isset_action_switchos_sid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->action_stat);
          isset_action_stat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->action_reflector_port);
          isset_action_reflector_port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_action_switchos_sid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_stat)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_reflector_port)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t");

  xfer += oprot->writeFieldBegin("action_switchos_sid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->action_switchos_sid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_stat", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->action_stat);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_reflector_port", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->action_reflector_port);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t &a, netbufferv4_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t &b) {
  using ::std::swap;
  swap(a.action_switchos_sid, b.action_switchos_sid);
  swap(a.action_stat, b.action_stat);
  swap(a.action_reflector_port, b.action_reflector_port);
}

netbufferv4_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t::netbufferv4_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t(const netbufferv4_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t& other199) {
  action_switchos_sid = other199.action_switchos_sid;
  action_stat = other199.action_stat;
  action_reflector_port = other199.action_reflector_port;
}
netbufferv4_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t& netbufferv4_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t::operator=(const netbufferv4_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t& other200) {
  action_switchos_sid = other200.action_switchos_sid;
  action_stat = other200.action_stat;
  action_reflector_port = other200.action_reflector_port;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t(";
  out << "action_switchos_sid=" << to_string(obj.action_switchos_sid);
  out << ", " << "action_stat=" << to_string(obj.action_stat);
  out << ", " << "action_reflector_port=" << to_string(obj.action_reflector_port);
  out << ")";
  return out;
}


netbufferv4_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t::~netbufferv4_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t() throw() {
}


void netbufferv4_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t::__set_action_switchos_sid(const int32_t val) {
  this->action_switchos_sid = val;
}

const char* netbufferv4_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t::ascii_fingerprint = "E86CACEB22240450EDCBEFC3A83970E4";
const uint8_t netbufferv4_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t::binary_fingerprint[16] = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

uint32_t netbufferv4_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_action_switchos_sid = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_switchos_sid);
          isset_action_switchos_sid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_action_switchos_sid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t");

  xfer += oprot->writeFieldBegin("action_switchos_sid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->action_switchos_sid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t &a, netbufferv4_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t &b) {
  using ::std::swap;
  swap(a.action_switchos_sid, b.action_switchos_sid);
}

netbufferv4_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t::netbufferv4_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t(const netbufferv4_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t& other201) {
  action_switchos_sid = other201.action_switchos_sid;
}
netbufferv4_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t& netbufferv4_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t::operator=(const netbufferv4_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t& other202) {
  action_switchos_sid = other202.action_switchos_sid;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t(";
  out << "action_switchos_sid=" << to_string(obj.action_switchos_sid);
  out << ")";
  return out;
}


netbufferv4_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_action_spec_t::~netbufferv4_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_action_spec_t() throw() {
}


void netbufferv4_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_action_spec_t::__set_action_switchos_sid(const int32_t val) {
  this->action_switchos_sid = val;
}

void netbufferv4_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_action_spec_t::__set_action_reflector_port(const int16_t val) {
  this->action_reflector_port = val;
}

const char* netbufferv4_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_action_spec_t::ascii_fingerprint = "422C35A5D98C69C9CDE50568C7E3028F";
const uint8_t netbufferv4_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_action_spec_t::binary_fingerprint[16] = {0x42,0x2C,0x35,0xA5,0xD9,0x8C,0x69,0xC9,0xCD,0xE5,0x05,0x68,0xC7,0xE3,0x02,0x8F};

uint32_t netbufferv4_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_action_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_action_switchos_sid = false;
  bool isset_action_reflector_port = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_switchos_sid);
          isset_action_switchos_sid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->action_reflector_port);
          isset_action_reflector_port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_action_switchos_sid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_reflector_port)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_action_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_action_spec_t");

  xfer += oprot->writeFieldBegin("action_switchos_sid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->action_switchos_sid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_reflector_port", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->action_reflector_port);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_action_spec_t &a, netbufferv4_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_action_spec_t &b) {
  using ::std::swap;
  swap(a.action_switchos_sid, b.action_switchos_sid);
  swap(a.action_reflector_port, b.action_reflector_port);
}

netbufferv4_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_action_spec_t::netbufferv4_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_action_spec_t(const netbufferv4_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_action_spec_t& other203) {
  action_switchos_sid = other203.action_switchos_sid;
  action_reflector_port = other203.action_reflector_port;
}
netbufferv4_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_action_spec_t& netbufferv4_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_action_spec_t::operator=(const netbufferv4_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_action_spec_t& other204) {
  action_switchos_sid = other204.action_switchos_sid;
  action_reflector_port = other204.action_reflector_port;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_action_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_action_spec_t(";
  out << "action_switchos_sid=" << to_string(obj.action_switchos_sid);
  out << ", " << "action_reflector_port=" << to_string(obj.action_reflector_port);
  out << ")";
  return out;
}


netbufferv4_update_putreq_inswitch_to_putres_by_mirroring_action_spec_t::~netbufferv4_update_putreq_inswitch_to_putres_by_mirroring_action_spec_t() throw() {
}


void netbufferv4_update_putreq_inswitch_to_putres_by_mirroring_action_spec_t::__set_action_client_sid(const int32_t val) {
  this->action_client_sid = val;
}

void netbufferv4_update_putreq_inswitch_to_putres_by_mirroring_action_spec_t::__set_action_server_port(const int16_t val) {
  this->action_server_port = val;
}

const char* netbufferv4_update_putreq_inswitch_to_putres_by_mirroring_action_spec_t::ascii_fingerprint = "422C35A5D98C69C9CDE50568C7E3028F";
const uint8_t netbufferv4_update_putreq_inswitch_to_putres_by_mirroring_action_spec_t::binary_fingerprint[16] = {0x42,0x2C,0x35,0xA5,0xD9,0x8C,0x69,0xC9,0xCD,0xE5,0x05,0x68,0xC7,0xE3,0x02,0x8F};

uint32_t netbufferv4_update_putreq_inswitch_to_putres_by_mirroring_action_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_action_client_sid = false;
  bool isset_action_server_port = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_client_sid);
          isset_action_client_sid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->action_server_port);
          isset_action_server_port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_action_client_sid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_server_port)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_putreq_inswitch_to_putres_by_mirroring_action_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_putreq_inswitch_to_putres_by_mirroring_action_spec_t");

  xfer += oprot->writeFieldBegin("action_client_sid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->action_client_sid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_server_port", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->action_server_port);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_putreq_inswitch_to_putres_by_mirroring_action_spec_t &a, netbufferv4_update_putreq_inswitch_to_putres_by_mirroring_action_spec_t &b) {
  using ::std::swap;
  swap(a.action_client_sid, b.action_client_sid);
  swap(a.action_server_port, b.action_server_port);
}

netbufferv4_update_putreq_inswitch_to_putres_by_mirroring_action_spec_t::netbufferv4_update_putreq_inswitch_to_putres_by_mirroring_action_spec_t(const netbufferv4_update_putreq_inswitch_to_putres_by_mirroring_action_spec_t& other205) {
  action_client_sid = other205.action_client_sid;
  action_server_port = other205.action_server_port;
}
netbufferv4_update_putreq_inswitch_to_putres_by_mirroring_action_spec_t& netbufferv4_update_putreq_inswitch_to_putres_by_mirroring_action_spec_t::operator=(const netbufferv4_update_putreq_inswitch_to_putres_by_mirroring_action_spec_t& other206) {
  action_client_sid = other206.action_client_sid;
  action_server_port = other206.action_server_port;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_putreq_inswitch_to_putres_by_mirroring_action_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_putreq_inswitch_to_putres_by_mirroring_action_spec_t(";
  out << "action_client_sid=" << to_string(obj.action_client_sid);
  out << ", " << "action_server_port=" << to_string(obj.action_server_port);
  out << ")";
  return out;
}


netbufferv4_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t::~netbufferv4_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t() throw() {
}


void netbufferv4_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t::__set_action_switchos_sid(const int32_t val) {
  this->action_switchos_sid = val;
}

void netbufferv4_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t::__set_action_stat(const int8_t val) {
  this->action_stat = val;
}

void netbufferv4_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t::__set_action_reflector_port(const int16_t val) {
  this->action_reflector_port = val;
}

const char* netbufferv4_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t::ascii_fingerprint = "D536F5DEB62A50F7527407B12DB84888";
const uint8_t netbufferv4_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t::binary_fingerprint[16] = {0xD5,0x36,0xF5,0xDE,0xB6,0x2A,0x50,0xF7,0x52,0x74,0x07,0xB1,0x2D,0xB8,0x48,0x88};

uint32_t netbufferv4_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_action_switchos_sid = false;
  bool isset_action_stat = false;
  bool isset_action_reflector_port = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_switchos_sid);
          isset_action_switchos_sid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->action_stat);
          isset_action_stat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->action_reflector_port);
          isset_action_reflector_port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_action_switchos_sid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_stat)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_reflector_port)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t");

  xfer += oprot->writeFieldBegin("action_switchos_sid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->action_switchos_sid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_stat", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->action_stat);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_reflector_port", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->action_reflector_port);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t &a, netbufferv4_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t &b) {
  using ::std::swap;
  swap(a.action_switchos_sid, b.action_switchos_sid);
  swap(a.action_stat, b.action_stat);
  swap(a.action_reflector_port, b.action_reflector_port);
}

netbufferv4_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t::netbufferv4_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t(const netbufferv4_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t& other207) {
  action_switchos_sid = other207.action_switchos_sid;
  action_stat = other207.action_stat;
  action_reflector_port = other207.action_reflector_port;
}
netbufferv4_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t& netbufferv4_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t::operator=(const netbufferv4_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t& other208) {
  action_switchos_sid = other208.action_switchos_sid;
  action_stat = other208.action_stat;
  action_reflector_port = other208.action_reflector_port;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t(";
  out << "action_switchos_sid=" << to_string(obj.action_switchos_sid);
  out << ", " << "action_stat=" << to_string(obj.action_stat);
  out << ", " << "action_reflector_port=" << to_string(obj.action_reflector_port);
  out << ")";
  return out;
}


netbufferv4_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t::~netbufferv4_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t() throw() {
}


void netbufferv4_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t::__set_action_switchos_sid(const int32_t val) {
  this->action_switchos_sid = val;
}

const char* netbufferv4_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t::ascii_fingerprint = "E86CACEB22240450EDCBEFC3A83970E4";
const uint8_t netbufferv4_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t::binary_fingerprint[16] = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

uint32_t netbufferv4_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_action_switchos_sid = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_switchos_sid);
          isset_action_switchos_sid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_action_switchos_sid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t");

  xfer += oprot->writeFieldBegin("action_switchos_sid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->action_switchos_sid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t &a, netbufferv4_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t &b) {
  using ::std::swap;
  swap(a.action_switchos_sid, b.action_switchos_sid);
}

netbufferv4_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t::netbufferv4_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t(const netbufferv4_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t& other209) {
  action_switchos_sid = other209.action_switchos_sid;
}
netbufferv4_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t& netbufferv4_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t::operator=(const netbufferv4_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t& other210) {
  action_switchos_sid = other210.action_switchos_sid;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t(";
  out << "action_switchos_sid=" << to_string(obj.action_switchos_sid);
  out << ")";
  return out;
}


netbufferv4_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_action_spec_t::~netbufferv4_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_action_spec_t() throw() {
}


void netbufferv4_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_action_spec_t::__set_action_client_sid(const int32_t val) {
  this->action_client_sid = val;
}

void netbufferv4_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_action_spec_t::__set_action_server_port(const int16_t val) {
  this->action_server_port = val;
}

const char* netbufferv4_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_action_spec_t::ascii_fingerprint = "422C35A5D98C69C9CDE50568C7E3028F";
const uint8_t netbufferv4_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_action_spec_t::binary_fingerprint[16] = {0x42,0x2C,0x35,0xA5,0xD9,0x8C,0x69,0xC9,0xCD,0xE5,0x05,0x68,0xC7,0xE3,0x02,0x8F};

uint32_t netbufferv4_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_action_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_action_client_sid = false;
  bool isset_action_server_port = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_client_sid);
          isset_action_client_sid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->action_server_port);
          isset_action_server_port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_action_client_sid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_server_port)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_action_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_action_spec_t");

  xfer += oprot->writeFieldBegin("action_client_sid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->action_client_sid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_server_port", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->action_server_port);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_action_spec_t &a, netbufferv4_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_action_spec_t &b) {
  using ::std::swap;
  swap(a.action_client_sid, b.action_client_sid);
  swap(a.action_server_port, b.action_server_port);
}

netbufferv4_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_action_spec_t::netbufferv4_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_action_spec_t(const netbufferv4_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_action_spec_t& other211) {
  action_client_sid = other211.action_client_sid;
  action_server_port = other211.action_server_port;
}
netbufferv4_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_action_spec_t& netbufferv4_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_action_spec_t::operator=(const netbufferv4_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_action_spec_t& other212) {
  action_client_sid = other212.action_client_sid;
  action_server_port = other212.action_server_port;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_action_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_action_spec_t(";
  out << "action_client_sid=" << to_string(obj.action_client_sid);
  out << ", " << "action_server_port=" << to_string(obj.action_server_port);
  out << ")";
  return out;
}


netbufferv4_update_delreq_inswitch_to_delres_by_mirroring_action_spec_t::~netbufferv4_update_delreq_inswitch_to_delres_by_mirroring_action_spec_t() throw() {
}


void netbufferv4_update_delreq_inswitch_to_delres_by_mirroring_action_spec_t::__set_action_client_sid(const int32_t val) {
  this->action_client_sid = val;
}

void netbufferv4_update_delreq_inswitch_to_delres_by_mirroring_action_spec_t::__set_action_server_port(const int16_t val) {
  this->action_server_port = val;
}

const char* netbufferv4_update_delreq_inswitch_to_delres_by_mirroring_action_spec_t::ascii_fingerprint = "422C35A5D98C69C9CDE50568C7E3028F";
const uint8_t netbufferv4_update_delreq_inswitch_to_delres_by_mirroring_action_spec_t::binary_fingerprint[16] = {0x42,0x2C,0x35,0xA5,0xD9,0x8C,0x69,0xC9,0xCD,0xE5,0x05,0x68,0xC7,0xE3,0x02,0x8F};

uint32_t netbufferv4_update_delreq_inswitch_to_delres_by_mirroring_action_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_action_client_sid = false;
  bool isset_action_server_port = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_client_sid);
          isset_action_client_sid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->action_server_port);
          isset_action_server_port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_action_client_sid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_server_port)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_delreq_inswitch_to_delres_by_mirroring_action_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_delreq_inswitch_to_delres_by_mirroring_action_spec_t");

  xfer += oprot->writeFieldBegin("action_client_sid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->action_client_sid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_server_port", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->action_server_port);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_delreq_inswitch_to_delres_by_mirroring_action_spec_t &a, netbufferv4_update_delreq_inswitch_to_delres_by_mirroring_action_spec_t &b) {
  using ::std::swap;
  swap(a.action_client_sid, b.action_client_sid);
  swap(a.action_server_port, b.action_server_port);
}

netbufferv4_update_delreq_inswitch_to_delres_by_mirroring_action_spec_t::netbufferv4_update_delreq_inswitch_to_delres_by_mirroring_action_spec_t(const netbufferv4_update_delreq_inswitch_to_delres_by_mirroring_action_spec_t& other213) {
  action_client_sid = other213.action_client_sid;
  action_server_port = other213.action_server_port;
}
netbufferv4_update_delreq_inswitch_to_delres_by_mirroring_action_spec_t& netbufferv4_update_delreq_inswitch_to_delres_by_mirroring_action_spec_t::operator=(const netbufferv4_update_delreq_inswitch_to_delres_by_mirroring_action_spec_t& other214) {
  action_client_sid = other214.action_client_sid;
  action_server_port = other214.action_server_port;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_delreq_inswitch_to_delres_by_mirroring_action_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_delreq_inswitch_to_delres_by_mirroring_action_spec_t(";
  out << "action_client_sid=" << to_string(obj.action_client_sid);
  out << ", " << "action_server_port=" << to_string(obj.action_server_port);
  out << ")";
  return out;
}


netbufferv4_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t::~netbufferv4_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t() throw() {
}


void netbufferv4_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t::__set_action_switchos_sid(const int32_t val) {
  this->action_switchos_sid = val;
}

void netbufferv4_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t::__set_action_stat(const int8_t val) {
  this->action_stat = val;
}

void netbufferv4_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t::__set_action_reflector_port(const int16_t val) {
  this->action_reflector_port = val;
}

const char* netbufferv4_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t::ascii_fingerprint = "D536F5DEB62A50F7527407B12DB84888";
const uint8_t netbufferv4_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t::binary_fingerprint[16] = {0xD5,0x36,0xF5,0xDE,0xB6,0x2A,0x50,0xF7,0x52,0x74,0x07,0xB1,0x2D,0xB8,0x48,0x88};

uint32_t netbufferv4_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_action_switchos_sid = false;
  bool isset_action_stat = false;
  bool isset_action_reflector_port = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_switchos_sid);
          isset_action_switchos_sid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->action_stat);
          isset_action_stat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->action_reflector_port);
          isset_action_reflector_port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_action_switchos_sid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_stat)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_reflector_port)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t");

  xfer += oprot->writeFieldBegin("action_switchos_sid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->action_switchos_sid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_stat", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->action_stat);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_reflector_port", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->action_reflector_port);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t &a, netbufferv4_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t &b) {
  using ::std::swap;
  swap(a.action_switchos_sid, b.action_switchos_sid);
  swap(a.action_stat, b.action_stat);
  swap(a.action_reflector_port, b.action_reflector_port);
}

netbufferv4_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t::netbufferv4_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t(const netbufferv4_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t& other215) {
  action_switchos_sid = other215.action_switchos_sid;
  action_stat = other215.action_stat;
  action_reflector_port = other215.action_reflector_port;
}
netbufferv4_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t& netbufferv4_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t::operator=(const netbufferv4_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t& other216) {
  action_switchos_sid = other216.action_switchos_sid;
  action_stat = other216.action_stat;
  action_reflector_port = other216.action_reflector_port;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t(";
  out << "action_switchos_sid=" << to_string(obj.action_switchos_sid);
  out << ", " << "action_stat=" << to_string(obj.action_stat);
  out << ", " << "action_reflector_port=" << to_string(obj.action_reflector_port);
  out << ")";
  return out;
}


netbufferv4_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t::~netbufferv4_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t() throw() {
}


void netbufferv4_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t::__set_action_switchos_sid(const int32_t val) {
  this->action_switchos_sid = val;
}

const char* netbufferv4_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t::ascii_fingerprint = "E86CACEB22240450EDCBEFC3A83970E4";
const uint8_t netbufferv4_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t::binary_fingerprint[16] = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

uint32_t netbufferv4_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_action_switchos_sid = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_switchos_sid);
          isset_action_switchos_sid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_action_switchos_sid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t");

  xfer += oprot->writeFieldBegin("action_switchos_sid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->action_switchos_sid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t &a, netbufferv4_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t &b) {
  using ::std::swap;
  swap(a.action_switchos_sid, b.action_switchos_sid);
}

netbufferv4_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t::netbufferv4_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t(const netbufferv4_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t& other217) {
  action_switchos_sid = other217.action_switchos_sid;
}
netbufferv4_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t& netbufferv4_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t::operator=(const netbufferv4_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t& other218) {
  action_switchos_sid = other218.action_switchos_sid;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t(";
  out << "action_switchos_sid=" << to_string(obj.action_switchos_sid);
  out << ")";
  return out;
}


netbufferv4_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_action_spec_t::~netbufferv4_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_action_spec_t() throw() {
}


void netbufferv4_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_action_spec_t::__set_action_client_sid(const int32_t val) {
  this->action_client_sid = val;
}

void netbufferv4_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_action_spec_t::__set_action_server_port(const int16_t val) {
  this->action_server_port = val;
}

const char* netbufferv4_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_action_spec_t::ascii_fingerprint = "422C35A5D98C69C9CDE50568C7E3028F";
const uint8_t netbufferv4_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_action_spec_t::binary_fingerprint[16] = {0x42,0x2C,0x35,0xA5,0xD9,0x8C,0x69,0xC9,0xCD,0xE5,0x05,0x68,0xC7,0xE3,0x02,0x8F};

uint32_t netbufferv4_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_action_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_action_client_sid = false;
  bool isset_action_server_port = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_client_sid);
          isset_action_client_sid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->action_server_port);
          isset_action_server_port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_action_client_sid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_server_port)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_action_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_action_spec_t");

  xfer += oprot->writeFieldBegin("action_client_sid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->action_client_sid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_server_port", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->action_server_port);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_action_spec_t &a, netbufferv4_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_action_spec_t &b) {
  using ::std::swap;
  swap(a.action_client_sid, b.action_client_sid);
  swap(a.action_server_port, b.action_server_port);
}

netbufferv4_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_action_spec_t::netbufferv4_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_action_spec_t(const netbufferv4_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_action_spec_t& other219) {
  action_client_sid = other219.action_client_sid;
  action_server_port = other219.action_server_port;
}
netbufferv4_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_action_spec_t& netbufferv4_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_action_spec_t::operator=(const netbufferv4_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_action_spec_t& other220) {
  action_client_sid = other220.action_client_sid;
  action_server_port = other220.action_server_port;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_action_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_action_spec_t(";
  out << "action_client_sid=" << to_string(obj.action_client_sid);
  out << ", " << "action_server_port=" << to_string(obj.action_server_port);
  out << ")";
  return out;
}


netbufferv4_forward_scanreq_split_and_clone_action_spec_t::~netbufferv4_forward_scanreq_split_and_clone_action_spec_t() throw() {
}


void netbufferv4_forward_scanreq_split_and_clone_action_spec_t::__set_action_server_sid(const int32_t val) {
  this->action_server_sid = val;
}

const char* netbufferv4_forward_scanreq_split_and_clone_action_spec_t::ascii_fingerprint = "E86CACEB22240450EDCBEFC3A83970E4";
const uint8_t netbufferv4_forward_scanreq_split_and_clone_action_spec_t::binary_fingerprint[16] = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

uint32_t netbufferv4_forward_scanreq_split_and_clone_action_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_action_server_sid = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_server_sid);
          isset_action_server_sid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_action_server_sid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_forward_scanreq_split_and_clone_action_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_forward_scanreq_split_and_clone_action_spec_t");

  xfer += oprot->writeFieldBegin("action_server_sid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->action_server_sid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_forward_scanreq_split_and_clone_action_spec_t &a, netbufferv4_forward_scanreq_split_and_clone_action_spec_t &b) {
  using ::std::swap;
  swap(a.action_server_sid, b.action_server_sid);
}

netbufferv4_forward_scanreq_split_and_clone_action_spec_t::netbufferv4_forward_scanreq_split_and_clone_action_spec_t(const netbufferv4_forward_scanreq_split_and_clone_action_spec_t& other221) {
  action_server_sid = other221.action_server_sid;
}
netbufferv4_forward_scanreq_split_and_clone_action_spec_t& netbufferv4_forward_scanreq_split_and_clone_action_spec_t::operator=(const netbufferv4_forward_scanreq_split_and_clone_action_spec_t& other222) {
  action_server_sid = other222.action_server_sid;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_forward_scanreq_split_and_clone_action_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_forward_scanreq_split_and_clone_action_spec_t(";
  out << "action_server_sid=" << to_string(obj.action_server_sid);
  out << ")";
  return out;
}


netbufferv4_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_action_spec_t::~netbufferv4_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_action_spec_t() throw() {
}


void netbufferv4_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_action_spec_t::__set_action_switchos_sid(const int32_t val) {
  this->action_switchos_sid = val;
}

void netbufferv4_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_action_spec_t::__set_action_reflector_port(const int16_t val) {
  this->action_reflector_port = val;
}

const char* netbufferv4_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_action_spec_t::ascii_fingerprint = "422C35A5D98C69C9CDE50568C7E3028F";
const uint8_t netbufferv4_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_action_spec_t::binary_fingerprint[16] = {0x42,0x2C,0x35,0xA5,0xD9,0x8C,0x69,0xC9,0xCD,0xE5,0x05,0x68,0xC7,0xE3,0x02,0x8F};

uint32_t netbufferv4_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_action_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_action_switchos_sid = false;
  bool isset_action_reflector_port = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_switchos_sid);
          isset_action_switchos_sid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->action_reflector_port);
          isset_action_reflector_port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_action_switchos_sid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_reflector_port)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_action_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_action_spec_t");

  xfer += oprot->writeFieldBegin("action_switchos_sid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->action_switchos_sid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_reflector_port", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->action_reflector_port);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_action_spec_t &a, netbufferv4_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_action_spec_t &b) {
  using ::std::swap;
  swap(a.action_switchos_sid, b.action_switchos_sid);
  swap(a.action_reflector_port, b.action_reflector_port);
}

netbufferv4_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_action_spec_t::netbufferv4_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_action_spec_t(const netbufferv4_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_action_spec_t& other223) {
  action_switchos_sid = other223.action_switchos_sid;
  action_reflector_port = other223.action_reflector_port;
}
netbufferv4_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_action_spec_t& netbufferv4_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_action_spec_t::operator=(const netbufferv4_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_action_spec_t& other224) {
  action_switchos_sid = other224.action_switchos_sid;
  action_reflector_port = other224.action_reflector_port;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_action_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_action_spec_t(";
  out << "action_switchos_sid=" << to_string(obj.action_switchos_sid);
  out << ", " << "action_reflector_port=" << to_string(obj.action_reflector_port);
  out << ")";
  return out;
}


netbufferv4_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_action_spec_t::~netbufferv4_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_action_spec_t() throw() {
}


void netbufferv4_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_action_spec_t::__set_action_switchos_sid(const int32_t val) {
  this->action_switchos_sid = val;
}

void netbufferv4_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_action_spec_t::__set_action_reflector_port(const int16_t val) {
  this->action_reflector_port = val;
}

void netbufferv4_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_action_spec_t::__set_action_stat(const int8_t val) {
  this->action_stat = val;
}

const char* netbufferv4_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_action_spec_t::ascii_fingerprint = "CF61E7A3956E3D6B3BD04841C5A945B2";
const uint8_t netbufferv4_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_action_spec_t::binary_fingerprint[16] = {0xCF,0x61,0xE7,0xA3,0x95,0x6E,0x3D,0x6B,0x3B,0xD0,0x48,0x41,0xC5,0xA9,0x45,0xB2};

uint32_t netbufferv4_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_action_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_action_switchos_sid = false;
  bool isset_action_reflector_port = false;
  bool isset_action_stat = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_switchos_sid);
          isset_action_switchos_sid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->action_reflector_port);
          isset_action_reflector_port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->action_stat);
          isset_action_stat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_action_switchos_sid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_reflector_port)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_stat)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_action_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_action_spec_t");

  xfer += oprot->writeFieldBegin("action_switchos_sid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->action_switchos_sid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_reflector_port", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->action_reflector_port);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_stat", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->action_stat);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_action_spec_t &a, netbufferv4_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_action_spec_t &b) {
  using ::std::swap;
  swap(a.action_switchos_sid, b.action_switchos_sid);
  swap(a.action_reflector_port, b.action_reflector_port);
  swap(a.action_stat, b.action_stat);
}

netbufferv4_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_action_spec_t::netbufferv4_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_action_spec_t(const netbufferv4_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_action_spec_t& other225) {
  action_switchos_sid = other225.action_switchos_sid;
  action_reflector_port = other225.action_reflector_port;
  action_stat = other225.action_stat;
}
netbufferv4_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_action_spec_t& netbufferv4_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_action_spec_t::operator=(const netbufferv4_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_action_spec_t& other226) {
  action_switchos_sid = other226.action_switchos_sid;
  action_reflector_port = other226.action_reflector_port;
  action_stat = other226.action_stat;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_action_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_action_spec_t(";
  out << "action_switchos_sid=" << to_string(obj.action_switchos_sid);
  out << ", " << "action_reflector_port=" << to_string(obj.action_reflector_port);
  out << ", " << "action_stat=" << to_string(obj.action_stat);
  out << ")";
  return out;
}


netbufferv4_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_action_spec_t::~netbufferv4_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_action_spec_t() throw() {
}


void netbufferv4_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_action_spec_t::__set_action_switchos_sid(const int32_t val) {
  this->action_switchos_sid = val;
}

void netbufferv4_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_action_spec_t::__set_action_reflector_port(const int16_t val) {
  this->action_reflector_port = val;
}

void netbufferv4_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_action_spec_t::__set_action_stat(const int32_t val) {
  this->action_stat = val;
}

const char* netbufferv4_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_action_spec_t::ascii_fingerprint = "EA248E25891B87F14BDE0F5335C5E434";
const uint8_t netbufferv4_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_action_spec_t::binary_fingerprint[16] = {0xEA,0x24,0x8E,0x25,0x89,0x1B,0x87,0xF1,0x4B,0xDE,0x0F,0x53,0x35,0xC5,0xE4,0x34};

uint32_t netbufferv4_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_action_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_action_switchos_sid = false;
  bool isset_action_reflector_port = false;
  bool isset_action_stat = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_switchos_sid);
          isset_action_switchos_sid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->action_reflector_port);
          isset_action_reflector_port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_stat);
          isset_action_stat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_action_switchos_sid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_reflector_port)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_stat)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_action_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_action_spec_t");

  xfer += oprot->writeFieldBegin("action_switchos_sid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->action_switchos_sid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_reflector_port", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->action_reflector_port);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_stat", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->action_stat);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_action_spec_t &a, netbufferv4_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_action_spec_t &b) {
  using ::std::swap;
  swap(a.action_switchos_sid, b.action_switchos_sid);
  swap(a.action_reflector_port, b.action_reflector_port);
  swap(a.action_stat, b.action_stat);
}

netbufferv4_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_action_spec_t::netbufferv4_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_action_spec_t(const netbufferv4_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_action_spec_t& other227) {
  action_switchos_sid = other227.action_switchos_sid;
  action_reflector_port = other227.action_reflector_port;
  action_stat = other227.action_stat;
}
netbufferv4_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_action_spec_t& netbufferv4_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_action_spec_t::operator=(const netbufferv4_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_action_spec_t& other228) {
  action_switchos_sid = other228.action_switchos_sid;
  action_reflector_port = other228.action_reflector_port;
  action_stat = other228.action_stat;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_action_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_action_spec_t(";
  out << "action_switchos_sid=" << to_string(obj.action_switchos_sid);
  out << ", " << "action_reflector_port=" << to_string(obj.action_reflector_port);
  out << ", " << "action_stat=" << to_string(obj.action_stat);
  out << ")";
  return out;
}


netbufferv4_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_action_spec_t::~netbufferv4_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_action_spec_t() throw() {
}


void netbufferv4_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_action_spec_t::__set_action_switchos_sid(const int32_t val) {
  this->action_switchos_sid = val;
}

void netbufferv4_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_action_spec_t::__set_action_reflector_port(const int16_t val) {
  this->action_reflector_port = val;
}

const char* netbufferv4_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_action_spec_t::ascii_fingerprint = "422C35A5D98C69C9CDE50568C7E3028F";
const uint8_t netbufferv4_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_action_spec_t::binary_fingerprint[16] = {0x42,0x2C,0x35,0xA5,0xD9,0x8C,0x69,0xC9,0xCD,0xE5,0x05,0x68,0xC7,0xE3,0x02,0x8F};

uint32_t netbufferv4_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_action_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_action_switchos_sid = false;
  bool isset_action_reflector_port = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_switchos_sid);
          isset_action_switchos_sid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->action_reflector_port);
          isset_action_reflector_port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_action_switchos_sid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_reflector_port)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_action_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_action_spec_t");

  xfer += oprot->writeFieldBegin("action_switchos_sid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->action_switchos_sid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_reflector_port", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->action_reflector_port);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_action_spec_t &a, netbufferv4_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_action_spec_t &b) {
  using ::std::swap;
  swap(a.action_switchos_sid, b.action_switchos_sid);
  swap(a.action_reflector_port, b.action_reflector_port);
}

netbufferv4_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_action_spec_t::netbufferv4_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_action_spec_t(const netbufferv4_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_action_spec_t& other229) {
  action_switchos_sid = other229.action_switchos_sid;
  action_reflector_port = other229.action_reflector_port;
}
netbufferv4_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_action_spec_t& netbufferv4_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_action_spec_t::operator=(const netbufferv4_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_action_spec_t& other230) {
  action_switchos_sid = other230.action_switchos_sid;
  action_reflector_port = other230.action_reflector_port;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_action_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_action_spec_t(";
  out << "action_switchos_sid=" << to_string(obj.action_switchos_sid);
  out << ", " << "action_reflector_port=" << to_string(obj.action_reflector_port);
  out << ")";
  return out;
}


netbufferv4_forward_normal_response_action_spec_t::~netbufferv4_forward_normal_response_action_spec_t() throw() {
}


void netbufferv4_forward_normal_response_action_spec_t::__set_action_eport(const int16_t val) {
  this->action_eport = val;
}

const char* netbufferv4_forward_normal_response_action_spec_t::ascii_fingerprint = "565787C31CF2D774B532CB755189BF39";
const uint8_t netbufferv4_forward_normal_response_action_spec_t::binary_fingerprint[16] = {0x56,0x57,0x87,0xC3,0x1C,0xF2,0xD7,0x74,0xB5,0x32,0xCB,0x75,0x51,0x89,0xBF,0x39};

uint32_t netbufferv4_forward_normal_response_action_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_action_eport = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->action_eport);
          isset_action_eport = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_action_eport)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_forward_normal_response_action_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_forward_normal_response_action_spec_t");

  xfer += oprot->writeFieldBegin("action_eport", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->action_eport);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_forward_normal_response_action_spec_t &a, netbufferv4_forward_normal_response_action_spec_t &b) {
  using ::std::swap;
  swap(a.action_eport, b.action_eport);
}

netbufferv4_forward_normal_response_action_spec_t::netbufferv4_forward_normal_response_action_spec_t(const netbufferv4_forward_normal_response_action_spec_t& other231) {
  action_eport = other231.action_eport;
}
netbufferv4_forward_normal_response_action_spec_t& netbufferv4_forward_normal_response_action_spec_t::operator=(const netbufferv4_forward_normal_response_action_spec_t& other232) {
  action_eport = other232.action_eport;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_forward_normal_response_action_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_forward_normal_response_action_spec_t(";
  out << "action_eport=" << to_string(obj.action_eport);
  out << ")";
  return out;
}


netbufferv4_forward_special_get_response_action_spec_t::~netbufferv4_forward_special_get_response_action_spec_t() throw() {
}


void netbufferv4_forward_special_get_response_action_spec_t::__set_action_client_sid(const int32_t val) {
  this->action_client_sid = val;
}

const char* netbufferv4_forward_special_get_response_action_spec_t::ascii_fingerprint = "E86CACEB22240450EDCBEFC3A83970E4";
const uint8_t netbufferv4_forward_special_get_response_action_spec_t::binary_fingerprint[16] = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

uint32_t netbufferv4_forward_special_get_response_action_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_action_client_sid = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_client_sid);
          isset_action_client_sid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_action_client_sid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_forward_special_get_response_action_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_forward_special_get_response_action_spec_t");

  xfer += oprot->writeFieldBegin("action_client_sid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->action_client_sid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_forward_special_get_response_action_spec_t &a, netbufferv4_forward_special_get_response_action_spec_t &b) {
  using ::std::swap;
  swap(a.action_client_sid, b.action_client_sid);
}

netbufferv4_forward_special_get_response_action_spec_t::netbufferv4_forward_special_get_response_action_spec_t(const netbufferv4_forward_special_get_response_action_spec_t& other233) {
  action_client_sid = other233.action_client_sid;
}
netbufferv4_forward_special_get_response_action_spec_t& netbufferv4_forward_special_get_response_action_spec_t::operator=(const netbufferv4_forward_special_get_response_action_spec_t& other234) {
  action_client_sid = other234.action_client_sid;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_forward_special_get_response_action_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_forward_special_get_response_action_spec_t(";
  out << "action_client_sid=" << to_string(obj.action_client_sid);
  out << ")";
  return out;
}


netbufferv4_set_client_sid_action_spec_t::~netbufferv4_set_client_sid_action_spec_t() throw() {
}


void netbufferv4_set_client_sid_action_spec_t::__set_action_client_sid(const int16_t val) {
  this->action_client_sid = val;
}

const char* netbufferv4_set_client_sid_action_spec_t::ascii_fingerprint = "565787C31CF2D774B532CB755189BF39";
const uint8_t netbufferv4_set_client_sid_action_spec_t::binary_fingerprint[16] = {0x56,0x57,0x87,0xC3,0x1C,0xF2,0xD7,0x74,0xB5,0x32,0xCB,0x75,0x51,0x89,0xBF,0x39};

uint32_t netbufferv4_set_client_sid_action_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_action_client_sid = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->action_client_sid);
          isset_action_client_sid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_action_client_sid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_set_client_sid_action_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_set_client_sid_action_spec_t");

  xfer += oprot->writeFieldBegin("action_client_sid", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->action_client_sid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_set_client_sid_action_spec_t &a, netbufferv4_set_client_sid_action_spec_t &b) {
  using ::std::swap;
  swap(a.action_client_sid, b.action_client_sid);
}

netbufferv4_set_client_sid_action_spec_t::netbufferv4_set_client_sid_action_spec_t(const netbufferv4_set_client_sid_action_spec_t& other235) {
  action_client_sid = other235.action_client_sid;
}
netbufferv4_set_client_sid_action_spec_t& netbufferv4_set_client_sid_action_spec_t::operator=(const netbufferv4_set_client_sid_action_spec_t& other236) {
  action_client_sid = other236.action_client_sid;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_set_client_sid_action_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_set_client_sid_action_spec_t(";
  out << "action_client_sid=" << to_string(obj.action_client_sid);
  out << ")";
  return out;
}


netbufferv4_process_scanreq_split_action_spec_t::~netbufferv4_process_scanreq_split_action_spec_t() throw() {
}


void netbufferv4_process_scanreq_split_action_spec_t::__set_action_server_sid(const int16_t val) {
  this->action_server_sid = val;
}

const char* netbufferv4_process_scanreq_split_action_spec_t::ascii_fingerprint = "565787C31CF2D774B532CB755189BF39";
const uint8_t netbufferv4_process_scanreq_split_action_spec_t::binary_fingerprint[16] = {0x56,0x57,0x87,0xC3,0x1C,0xF2,0xD7,0x74,0xB5,0x32,0xCB,0x75,0x51,0x89,0xBF,0x39};

uint32_t netbufferv4_process_scanreq_split_action_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_action_server_sid = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->action_server_sid);
          isset_action_server_sid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_action_server_sid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_process_scanreq_split_action_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_process_scanreq_split_action_spec_t");

  xfer += oprot->writeFieldBegin("action_server_sid", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->action_server_sid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_process_scanreq_split_action_spec_t &a, netbufferv4_process_scanreq_split_action_spec_t &b) {
  using ::std::swap;
  swap(a.action_server_sid, b.action_server_sid);
}

netbufferv4_process_scanreq_split_action_spec_t::netbufferv4_process_scanreq_split_action_spec_t(const netbufferv4_process_scanreq_split_action_spec_t& other237) {
  action_server_sid = other237.action_server_sid;
}
netbufferv4_process_scanreq_split_action_spec_t& netbufferv4_process_scanreq_split_action_spec_t::operator=(const netbufferv4_process_scanreq_split_action_spec_t& other238) {
  action_server_sid = other238.action_server_sid;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_process_scanreq_split_action_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_process_scanreq_split_action_spec_t(";
  out << "action_server_sid=" << to_string(obj.action_server_sid);
  out << ")";
  return out;
}


netbufferv4_process_cloned_scanreq_split_action_spec_t::~netbufferv4_process_cloned_scanreq_split_action_spec_t() throw() {
}


void netbufferv4_process_cloned_scanreq_split_action_spec_t::__set_action_server_sid(const int16_t val) {
  this->action_server_sid = val;
}

const char* netbufferv4_process_cloned_scanreq_split_action_spec_t::ascii_fingerprint = "565787C31CF2D774B532CB755189BF39";
const uint8_t netbufferv4_process_cloned_scanreq_split_action_spec_t::binary_fingerprint[16] = {0x56,0x57,0x87,0xC3,0x1C,0xF2,0xD7,0x74,0xB5,0x32,0xCB,0x75,0x51,0x89,0xBF,0x39};

uint32_t netbufferv4_process_cloned_scanreq_split_action_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_action_server_sid = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->action_server_sid);
          isset_action_server_sid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_action_server_sid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_process_cloned_scanreq_split_action_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_process_cloned_scanreq_split_action_spec_t");

  xfer += oprot->writeFieldBegin("action_server_sid", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->action_server_sid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_process_cloned_scanreq_split_action_spec_t &a, netbufferv4_process_cloned_scanreq_split_action_spec_t &b) {
  using ::std::swap;
  swap(a.action_server_sid, b.action_server_sid);
}

netbufferv4_process_cloned_scanreq_split_action_spec_t::netbufferv4_process_cloned_scanreq_split_action_spec_t(const netbufferv4_process_cloned_scanreq_split_action_spec_t& other239) {
  action_server_sid = other239.action_server_sid;
}
netbufferv4_process_cloned_scanreq_split_action_spec_t& netbufferv4_process_cloned_scanreq_split_action_spec_t::operator=(const netbufferv4_process_cloned_scanreq_split_action_spec_t& other240) {
  action_server_sid = other240.action_server_sid;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_process_cloned_scanreq_split_action_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_process_cloned_scanreq_split_action_spec_t(";
  out << "action_server_sid=" << to_string(obj.action_server_sid);
  out << ")";
  return out;
}


netbufferv4_range_partition_for_scan_endkey_action_spec_t::~netbufferv4_range_partition_for_scan_endkey_action_spec_t() throw() {
}


void netbufferv4_range_partition_for_scan_endkey_action_spec_t::__set_action_last_udpport_plus_one(const int16_t val) {
  this->action_last_udpport_plus_one = val;
}

const char* netbufferv4_range_partition_for_scan_endkey_action_spec_t::ascii_fingerprint = "565787C31CF2D774B532CB755189BF39";
const uint8_t netbufferv4_range_partition_for_scan_endkey_action_spec_t::binary_fingerprint[16] = {0x56,0x57,0x87,0xC3,0x1C,0xF2,0xD7,0x74,0xB5,0x32,0xCB,0x75,0x51,0x89,0xBF,0x39};

uint32_t netbufferv4_range_partition_for_scan_endkey_action_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_action_last_udpport_plus_one = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->action_last_udpport_plus_one);
          isset_action_last_udpport_plus_one = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_action_last_udpport_plus_one)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_range_partition_for_scan_endkey_action_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_range_partition_for_scan_endkey_action_spec_t");

  xfer += oprot->writeFieldBegin("action_last_udpport_plus_one", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->action_last_udpport_plus_one);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_range_partition_for_scan_endkey_action_spec_t &a, netbufferv4_range_partition_for_scan_endkey_action_spec_t &b) {
  using ::std::swap;
  swap(a.action_last_udpport_plus_one, b.action_last_udpport_plus_one);
}

netbufferv4_range_partition_for_scan_endkey_action_spec_t::netbufferv4_range_partition_for_scan_endkey_action_spec_t(const netbufferv4_range_partition_for_scan_endkey_action_spec_t& other241) {
  action_last_udpport_plus_one = other241.action_last_udpport_plus_one;
}
netbufferv4_range_partition_for_scan_endkey_action_spec_t& netbufferv4_range_partition_for_scan_endkey_action_spec_t::operator=(const netbufferv4_range_partition_for_scan_endkey_action_spec_t& other242) {
  action_last_udpport_plus_one = other242.action_last_udpport_plus_one;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_range_partition_for_scan_endkey_action_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_range_partition_for_scan_endkey_action_spec_t(";
  out << "action_last_udpport_plus_one=" << to_string(obj.action_last_udpport_plus_one);
  out << ")";
  return out;
}


netbufferv4_range_partition_action_spec_t::~netbufferv4_range_partition_action_spec_t() throw() {
}


void netbufferv4_range_partition_action_spec_t::__set_action_udpport(const int16_t val) {
  this->action_udpport = val;
}

void netbufferv4_range_partition_action_spec_t::__set_action_eport(const int16_t val) {
  this->action_eport = val;
}

const char* netbufferv4_range_partition_action_spec_t::ascii_fingerprint = "C88FB7958D86460D03E699333A272947";
const uint8_t netbufferv4_range_partition_action_spec_t::binary_fingerprint[16] = {0xC8,0x8F,0xB7,0x95,0x8D,0x86,0x46,0x0D,0x03,0xE6,0x99,0x33,0x3A,0x27,0x29,0x47};

uint32_t netbufferv4_range_partition_action_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_action_udpport = false;
  bool isset_action_eport = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->action_udpport);
          isset_action_udpport = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->action_eport);
          isset_action_eport = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_action_udpport)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_eport)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_range_partition_action_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_range_partition_action_spec_t");

  xfer += oprot->writeFieldBegin("action_udpport", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->action_udpport);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_eport", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->action_eport);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_range_partition_action_spec_t &a, netbufferv4_range_partition_action_spec_t &b) {
  using ::std::swap;
  swap(a.action_udpport, b.action_udpport);
  swap(a.action_eport, b.action_eport);
}

netbufferv4_range_partition_action_spec_t::netbufferv4_range_partition_action_spec_t(const netbufferv4_range_partition_action_spec_t& other243) {
  action_udpport = other243.action_udpport;
  action_eport = other243.action_eport;
}
netbufferv4_range_partition_action_spec_t& netbufferv4_range_partition_action_spec_t::operator=(const netbufferv4_range_partition_action_spec_t& other244) {
  action_udpport = other244.action_udpport;
  action_eport = other244.action_eport;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_range_partition_action_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_range_partition_action_spec_t(";
  out << "action_udpport=" << to_string(obj.action_udpport);
  out << ", " << "action_eport=" << to_string(obj.action_eport);
  out << ")";
  return out;
}


netbufferv4_recirculate_pkt_action_spec_t::~netbufferv4_recirculate_pkt_action_spec_t() throw() {
}


void netbufferv4_recirculate_pkt_action_spec_t::__set_action_port(const int8_t val) {
  this->action_port = val;
}

const char* netbufferv4_recirculate_pkt_action_spec_t::ascii_fingerprint = "A7D440367E85134EBDBAA7BCA01056D0";
const uint8_t netbufferv4_recirculate_pkt_action_spec_t::binary_fingerprint[16] = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

uint32_t netbufferv4_recirculate_pkt_action_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_action_port = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->action_port);
          isset_action_port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_action_port)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_recirculate_pkt_action_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_recirculate_pkt_action_spec_t");

  xfer += oprot->writeFieldBegin("action_port", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->action_port);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_recirculate_pkt_action_spec_t &a, netbufferv4_recirculate_pkt_action_spec_t &b) {
  using ::std::swap;
  swap(a.action_port, b.action_port);
}

netbufferv4_recirculate_pkt_action_spec_t::netbufferv4_recirculate_pkt_action_spec_t(const netbufferv4_recirculate_pkt_action_spec_t& other245) {
  action_port = other245.action_port;
}
netbufferv4_recirculate_pkt_action_spec_t& netbufferv4_recirculate_pkt_action_spec_t::operator=(const netbufferv4_recirculate_pkt_action_spec_t& other246) {
  action_port = other246.action_port;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_recirculate_pkt_action_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_recirculate_pkt_action_spec_t(";
  out << "action_port=" << to_string(obj.action_port);
  out << ")";
  return out;
}


netbufferv4_set_hot_threshold_action_spec_t::~netbufferv4_set_hot_threshold_action_spec_t() throw() {
}


void netbufferv4_set_hot_threshold_action_spec_t::__set_action_hot_threshold(const int16_t val) {
  this->action_hot_threshold = val;
}

const char* netbufferv4_set_hot_threshold_action_spec_t::ascii_fingerprint = "565787C31CF2D774B532CB755189BF39";
const uint8_t netbufferv4_set_hot_threshold_action_spec_t::binary_fingerprint[16] = {0x56,0x57,0x87,0xC3,0x1C,0xF2,0xD7,0x74,0xB5,0x32,0xCB,0x75,0x51,0x89,0xBF,0x39};

uint32_t netbufferv4_set_hot_threshold_action_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_action_hot_threshold = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->action_hot_threshold);
          isset_action_hot_threshold = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_action_hot_threshold)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_set_hot_threshold_action_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_set_hot_threshold_action_spec_t");

  xfer += oprot->writeFieldBegin("action_hot_threshold", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->action_hot_threshold);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_set_hot_threshold_action_spec_t &a, netbufferv4_set_hot_threshold_action_spec_t &b) {
  using ::std::swap;
  swap(a.action_hot_threshold, b.action_hot_threshold);
}

netbufferv4_set_hot_threshold_action_spec_t::netbufferv4_set_hot_threshold_action_spec_t(const netbufferv4_set_hot_threshold_action_spec_t& other247) {
  action_hot_threshold = other247.action_hot_threshold;
}
netbufferv4_set_hot_threshold_action_spec_t& netbufferv4_set_hot_threshold_action_spec_t::operator=(const netbufferv4_set_hot_threshold_action_spec_t& other248) {
  action_hot_threshold = other248.action_hot_threshold;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_set_hot_threshold_action_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_set_hot_threshold_action_spec_t(";
  out << "action_hot_threshold=" << to_string(obj.action_hot_threshold);
  out << ")";
  return out;
}


netbufferv4_update_ipmac_srcport_server2client_action_spec_t::~netbufferv4_update_ipmac_srcport_server2client_action_spec_t() throw() {
}


void netbufferv4_update_ipmac_srcport_server2client_action_spec_t::__set_action_client_mac(const MacAddr_t& val) {
  this->action_client_mac = val;
}

void netbufferv4_update_ipmac_srcport_server2client_action_spec_t::__set_action_server_mac(const MacAddr_t& val) {
  this->action_server_mac = val;
}

void netbufferv4_update_ipmac_srcport_server2client_action_spec_t::__set_action_client_ip(const int32_t val) {
  this->action_client_ip = val;
}

void netbufferv4_update_ipmac_srcport_server2client_action_spec_t::__set_action_server_ip(const int32_t val) {
  this->action_server_ip = val;
}

void netbufferv4_update_ipmac_srcport_server2client_action_spec_t::__set_action_server_port(const int16_t val) {
  this->action_server_port = val;
}

const char* netbufferv4_update_ipmac_srcport_server2client_action_spec_t::ascii_fingerprint = "993955C1B8251D6CC4D5D80F1D239651";
const uint8_t netbufferv4_update_ipmac_srcport_server2client_action_spec_t::binary_fingerprint[16] = {0x99,0x39,0x55,0xC1,0xB8,0x25,0x1D,0x6C,0xC4,0xD5,0xD8,0x0F,0x1D,0x23,0x96,0x51};

uint32_t netbufferv4_update_ipmac_srcport_server2client_action_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_action_client_mac = false;
  bool isset_action_server_mac = false;
  bool isset_action_client_ip = false;
  bool isset_action_server_ip = false;
  bool isset_action_server_port = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->action_client_mac);
          isset_action_client_mac = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->action_server_mac);
          isset_action_server_mac = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_client_ip);
          isset_action_client_ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_server_ip);
          isset_action_server_ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->action_server_port);
          isset_action_server_port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_action_client_mac)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_server_mac)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_client_ip)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_server_ip)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_server_port)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_ipmac_srcport_server2client_action_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_ipmac_srcport_server2client_action_spec_t");

  xfer += oprot->writeFieldBegin("action_client_mac", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeBinary(this->action_client_mac);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_server_mac", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary(this->action_server_mac);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_client_ip", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->action_client_ip);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_server_ip", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->action_server_ip);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_server_port", ::apache::thrift::protocol::T_I16, 5);
  xfer += oprot->writeI16(this->action_server_port);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_ipmac_srcport_server2client_action_spec_t &a, netbufferv4_update_ipmac_srcport_server2client_action_spec_t &b) {
  using ::std::swap;
  swap(a.action_client_mac, b.action_client_mac);
  swap(a.action_server_mac, b.action_server_mac);
  swap(a.action_client_ip, b.action_client_ip);
  swap(a.action_server_ip, b.action_server_ip);
  swap(a.action_server_port, b.action_server_port);
}

netbufferv4_update_ipmac_srcport_server2client_action_spec_t::netbufferv4_update_ipmac_srcport_server2client_action_spec_t(const netbufferv4_update_ipmac_srcport_server2client_action_spec_t& other249) {
  action_client_mac = other249.action_client_mac;
  action_server_mac = other249.action_server_mac;
  action_client_ip = other249.action_client_ip;
  action_server_ip = other249.action_server_ip;
  action_server_port = other249.action_server_port;
}
netbufferv4_update_ipmac_srcport_server2client_action_spec_t& netbufferv4_update_ipmac_srcport_server2client_action_spec_t::operator=(const netbufferv4_update_ipmac_srcport_server2client_action_spec_t& other250) {
  action_client_mac = other250.action_client_mac;
  action_server_mac = other250.action_server_mac;
  action_client_ip = other250.action_client_ip;
  action_server_ip = other250.action_server_ip;
  action_server_port = other250.action_server_port;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_ipmac_srcport_server2client_action_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_ipmac_srcport_server2client_action_spec_t(";
  out << "action_client_mac=" << to_string(obj.action_client_mac);
  out << ", " << "action_server_mac=" << to_string(obj.action_server_mac);
  out << ", " << "action_client_ip=" << to_string(obj.action_client_ip);
  out << ", " << "action_server_ip=" << to_string(obj.action_server_ip);
  out << ", " << "action_server_port=" << to_string(obj.action_server_port);
  out << ")";
  return out;
}


netbufferv4_update_ipmac_srcport_switch2switchos_action_spec_t::~netbufferv4_update_ipmac_srcport_switch2switchos_action_spec_t() throw() {
}


void netbufferv4_update_ipmac_srcport_switch2switchos_action_spec_t::__set_action_client_mac(const MacAddr_t& val) {
  this->action_client_mac = val;
}

void netbufferv4_update_ipmac_srcport_switch2switchos_action_spec_t::__set_action_switch_mac(const MacAddr_t& val) {
  this->action_switch_mac = val;
}

void netbufferv4_update_ipmac_srcport_switch2switchos_action_spec_t::__set_action_client_ip(const int32_t val) {
  this->action_client_ip = val;
}

void netbufferv4_update_ipmac_srcport_switch2switchos_action_spec_t::__set_action_switch_ip(const int32_t val) {
  this->action_switch_ip = val;
}

void netbufferv4_update_ipmac_srcport_switch2switchos_action_spec_t::__set_action_client_port(const int16_t val) {
  this->action_client_port = val;
}

const char* netbufferv4_update_ipmac_srcport_switch2switchos_action_spec_t::ascii_fingerprint = "993955C1B8251D6CC4D5D80F1D239651";
const uint8_t netbufferv4_update_ipmac_srcport_switch2switchos_action_spec_t::binary_fingerprint[16] = {0x99,0x39,0x55,0xC1,0xB8,0x25,0x1D,0x6C,0xC4,0xD5,0xD8,0x0F,0x1D,0x23,0x96,0x51};

uint32_t netbufferv4_update_ipmac_srcport_switch2switchos_action_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_action_client_mac = false;
  bool isset_action_switch_mac = false;
  bool isset_action_client_ip = false;
  bool isset_action_switch_ip = false;
  bool isset_action_client_port = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->action_client_mac);
          isset_action_client_mac = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->action_switch_mac);
          isset_action_switch_mac = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_client_ip);
          isset_action_client_ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_switch_ip);
          isset_action_switch_ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->action_client_port);
          isset_action_client_port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_action_client_mac)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_switch_mac)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_client_ip)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_switch_ip)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_client_port)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_ipmac_srcport_switch2switchos_action_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_ipmac_srcport_switch2switchos_action_spec_t");

  xfer += oprot->writeFieldBegin("action_client_mac", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeBinary(this->action_client_mac);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_switch_mac", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary(this->action_switch_mac);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_client_ip", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->action_client_ip);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_switch_ip", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->action_switch_ip);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_client_port", ::apache::thrift::protocol::T_I16, 5);
  xfer += oprot->writeI16(this->action_client_port);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_ipmac_srcport_switch2switchos_action_spec_t &a, netbufferv4_update_ipmac_srcport_switch2switchos_action_spec_t &b) {
  using ::std::swap;
  swap(a.action_client_mac, b.action_client_mac);
  swap(a.action_switch_mac, b.action_switch_mac);
  swap(a.action_client_ip, b.action_client_ip);
  swap(a.action_switch_ip, b.action_switch_ip);
  swap(a.action_client_port, b.action_client_port);
}

netbufferv4_update_ipmac_srcport_switch2switchos_action_spec_t::netbufferv4_update_ipmac_srcport_switch2switchos_action_spec_t(const netbufferv4_update_ipmac_srcport_switch2switchos_action_spec_t& other251) {
  action_client_mac = other251.action_client_mac;
  action_switch_mac = other251.action_switch_mac;
  action_client_ip = other251.action_client_ip;
  action_switch_ip = other251.action_switch_ip;
  action_client_port = other251.action_client_port;
}
netbufferv4_update_ipmac_srcport_switch2switchos_action_spec_t& netbufferv4_update_ipmac_srcport_switch2switchos_action_spec_t::operator=(const netbufferv4_update_ipmac_srcport_switch2switchos_action_spec_t& other252) {
  action_client_mac = other252.action_client_mac;
  action_switch_mac = other252.action_switch_mac;
  action_client_ip = other252.action_client_ip;
  action_switch_ip = other252.action_switch_ip;
  action_client_port = other252.action_client_port;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_ipmac_srcport_switch2switchos_action_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_ipmac_srcport_switch2switchos_action_spec_t(";
  out << "action_client_mac=" << to_string(obj.action_client_mac);
  out << ", " << "action_switch_mac=" << to_string(obj.action_switch_mac);
  out << ", " << "action_client_ip=" << to_string(obj.action_client_ip);
  out << ", " << "action_switch_ip=" << to_string(obj.action_switch_ip);
  out << ", " << "action_client_port=" << to_string(obj.action_client_port);
  out << ")";
  return out;
}


netbufferv4_update_dstipmac_client2server_action_spec_t::~netbufferv4_update_dstipmac_client2server_action_spec_t() throw() {
}


void netbufferv4_update_dstipmac_client2server_action_spec_t::__set_action_server_mac(const MacAddr_t& val) {
  this->action_server_mac = val;
}

void netbufferv4_update_dstipmac_client2server_action_spec_t::__set_action_server_ip(const int32_t val) {
  this->action_server_ip = val;
}

const char* netbufferv4_update_dstipmac_client2server_action_spec_t::ascii_fingerprint = "EEBC915CE44901401D881E6091423036";
const uint8_t netbufferv4_update_dstipmac_client2server_action_spec_t::binary_fingerprint[16] = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

uint32_t netbufferv4_update_dstipmac_client2server_action_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_action_server_mac = false;
  bool isset_action_server_ip = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->action_server_mac);
          isset_action_server_mac = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_server_ip);
          isset_action_server_ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_action_server_mac)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_server_ip)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_dstipmac_client2server_action_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_dstipmac_client2server_action_spec_t");

  xfer += oprot->writeFieldBegin("action_server_mac", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeBinary(this->action_server_mac);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_server_ip", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->action_server_ip);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_dstipmac_client2server_action_spec_t &a, netbufferv4_update_dstipmac_client2server_action_spec_t &b) {
  using ::std::swap;
  swap(a.action_server_mac, b.action_server_mac);
  swap(a.action_server_ip, b.action_server_ip);
}

netbufferv4_update_dstipmac_client2server_action_spec_t::netbufferv4_update_dstipmac_client2server_action_spec_t(const netbufferv4_update_dstipmac_client2server_action_spec_t& other253) {
  action_server_mac = other253.action_server_mac;
  action_server_ip = other253.action_server_ip;
}
netbufferv4_update_dstipmac_client2server_action_spec_t& netbufferv4_update_dstipmac_client2server_action_spec_t::operator=(const netbufferv4_update_dstipmac_client2server_action_spec_t& other254) {
  action_server_mac = other254.action_server_mac;
  action_server_ip = other254.action_server_ip;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_dstipmac_client2server_action_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_dstipmac_client2server_action_spec_t(";
  out << "action_server_mac=" << to_string(obj.action_server_mac);
  out << ", " << "action_server_ip=" << to_string(obj.action_server_ip);
  out << ")";
  return out;
}


netbufferv4_update_pktlen_action_spec_t::~netbufferv4_update_pktlen_action_spec_t() throw() {
}


void netbufferv4_update_pktlen_action_spec_t::__set_action_udplen(const int16_t val) {
  this->action_udplen = val;
}

void netbufferv4_update_pktlen_action_spec_t::__set_action_iplen(const int16_t val) {
  this->action_iplen = val;
}

const char* netbufferv4_update_pktlen_action_spec_t::ascii_fingerprint = "C88FB7958D86460D03E699333A272947";
const uint8_t netbufferv4_update_pktlen_action_spec_t::binary_fingerprint[16] = {0xC8,0x8F,0xB7,0x95,0x8D,0x86,0x46,0x0D,0x03,0xE6,0x99,0x33,0x3A,0x27,0x29,0x47};

uint32_t netbufferv4_update_pktlen_action_spec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_action_udplen = false;
  bool isset_action_iplen = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->action_udplen);
          isset_action_udplen = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->action_iplen);
          isset_action_iplen = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_action_udplen)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_iplen)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_pktlen_action_spec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_pktlen_action_spec_t");

  xfer += oprot->writeFieldBegin("action_udplen", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->action_udplen);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_iplen", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->action_iplen);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_pktlen_action_spec_t &a, netbufferv4_update_pktlen_action_spec_t &b) {
  using ::std::swap;
  swap(a.action_udplen, b.action_udplen);
  swap(a.action_iplen, b.action_iplen);
}

netbufferv4_update_pktlen_action_spec_t::netbufferv4_update_pktlen_action_spec_t(const netbufferv4_update_pktlen_action_spec_t& other255) {
  action_udplen = other255.action_udplen;
  action_iplen = other255.action_iplen;
}
netbufferv4_update_pktlen_action_spec_t& netbufferv4_update_pktlen_action_spec_t::operator=(const netbufferv4_update_pktlen_action_spec_t& other256) {
  action_udplen = other256.action_udplen;
  action_iplen = other256.action_iplen;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_pktlen_action_spec_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_pktlen_action_spec_t(";
  out << "action_udplen=" << to_string(obj.action_udplen);
  out << ", " << "action_iplen=" << to_string(obj.action_iplen);
  out << ")";
  return out;
}


netbufferv4_action_specs_t::~netbufferv4_action_specs_t() throw() {
}


void netbufferv4_action_specs_t::__set_netbufferv4_cached_action(const netbufferv4_cached_action_action_spec_t& val) {
  this->netbufferv4_cached_action = val;
}

void netbufferv4_action_specs_t::__set_netbufferv4_update_getreq_inswitch_to_getres_by_mirroring(const netbufferv4_update_getreq_inswitch_to_getres_by_mirroring_action_spec_t& val) {
  this->netbufferv4_update_getreq_inswitch_to_getres_by_mirroring = val;
}

void netbufferv4_action_specs_t::__set_netbufferv4_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss(const netbufferv4_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t& val) {
  this->netbufferv4_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss = val;
}

void netbufferv4_action_specs_t::__set_netbufferv4_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss(const netbufferv4_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t& val) {
  this->netbufferv4_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss = val;
}

void netbufferv4_action_specs_t::__set_netbufferv4_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss(const netbufferv4_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t& val) {
  this->netbufferv4_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss = val;
}

void netbufferv4_action_specs_t::__set_netbufferv4_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss(const netbufferv4_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t& val) {
  this->netbufferv4_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss = val;
}

void netbufferv4_action_specs_t::__set_netbufferv4_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone(const netbufferv4_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_action_spec_t& val) {
  this->netbufferv4_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone = val;
}

void netbufferv4_action_specs_t::__set_netbufferv4_update_putreq_inswitch_to_putres_by_mirroring(const netbufferv4_update_putreq_inswitch_to_putres_by_mirroring_action_spec_t& val) {
  this->netbufferv4_update_putreq_inswitch_to_putres_by_mirroring = val;
}

void netbufferv4_action_specs_t::__set_netbufferv4_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres(const netbufferv4_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t& val) {
  this->netbufferv4_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres = val;
}

void netbufferv4_action_specs_t::__set_netbufferv4_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres(const netbufferv4_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t& val) {
  this->netbufferv4_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres = val;
}

void netbufferv4_action_specs_t::__set_netbufferv4_update_putreq_seq_inswitch_case1_to_putres_by_mirroring(const netbufferv4_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_action_spec_t& val) {
  this->netbufferv4_update_putreq_seq_inswitch_case1_to_putres_by_mirroring = val;
}

void netbufferv4_action_specs_t::__set_netbufferv4_update_delreq_inswitch_to_delres_by_mirroring(const netbufferv4_update_delreq_inswitch_to_delres_by_mirroring_action_spec_t& val) {
  this->netbufferv4_update_delreq_inswitch_to_delres_by_mirroring = val;
}

void netbufferv4_action_specs_t::__set_netbufferv4_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres(const netbufferv4_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t& val) {
  this->netbufferv4_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres = val;
}

void netbufferv4_action_specs_t::__set_netbufferv4_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres(const netbufferv4_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t& val) {
  this->netbufferv4_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres = val;
}

void netbufferv4_action_specs_t::__set_netbufferv4_update_delreq_seq_inswitch_case1_to_delres_by_mirroring(const netbufferv4_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_action_spec_t& val) {
  this->netbufferv4_update_delreq_seq_inswitch_case1_to_delres_by_mirroring = val;
}

void netbufferv4_action_specs_t::__set_netbufferv4_forward_scanreq_split_and_clone(const netbufferv4_forward_scanreq_split_and_clone_action_spec_t& val) {
  this->netbufferv4_forward_scanreq_split_and_clone = val;
}

void netbufferv4_action_specs_t::__set_netbufferv4_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone(const netbufferv4_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_action_spec_t& val) {
  this->netbufferv4_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone = val;
}

void netbufferv4_action_specs_t::__set_netbufferv4_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone(const netbufferv4_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_action_spec_t& val) {
  this->netbufferv4_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone = val;
}

void netbufferv4_action_specs_t::__set_netbufferv4_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone(const netbufferv4_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_action_spec_t& val) {
  this->netbufferv4_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone = val;
}

void netbufferv4_action_specs_t::__set_netbufferv4_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone(const netbufferv4_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_action_spec_t& val) {
  this->netbufferv4_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone = val;
}

void netbufferv4_action_specs_t::__set_netbufferv4_forward_normal_response(const netbufferv4_forward_normal_response_action_spec_t& val) {
  this->netbufferv4_forward_normal_response = val;
}

void netbufferv4_action_specs_t::__set_netbufferv4_forward_special_get_response(const netbufferv4_forward_special_get_response_action_spec_t& val) {
  this->netbufferv4_forward_special_get_response = val;
}

void netbufferv4_action_specs_t::__set_netbufferv4_set_client_sid(const netbufferv4_set_client_sid_action_spec_t& val) {
  this->netbufferv4_set_client_sid = val;
}

void netbufferv4_action_specs_t::__set_netbufferv4_process_scanreq_split(const netbufferv4_process_scanreq_split_action_spec_t& val) {
  this->netbufferv4_process_scanreq_split = val;
}

void netbufferv4_action_specs_t::__set_netbufferv4_process_cloned_scanreq_split(const netbufferv4_process_cloned_scanreq_split_action_spec_t& val) {
  this->netbufferv4_process_cloned_scanreq_split = val;
}

void netbufferv4_action_specs_t::__set_netbufferv4_range_partition_for_scan_endkey(const netbufferv4_range_partition_for_scan_endkey_action_spec_t& val) {
  this->netbufferv4_range_partition_for_scan_endkey = val;
}

void netbufferv4_action_specs_t::__set_netbufferv4_range_partition(const netbufferv4_range_partition_action_spec_t& val) {
  this->netbufferv4_range_partition = val;
}

void netbufferv4_action_specs_t::__set_netbufferv4_recirculate_pkt(const netbufferv4_recirculate_pkt_action_spec_t& val) {
  this->netbufferv4_recirculate_pkt = val;
}

void netbufferv4_action_specs_t::__set_netbufferv4_set_hot_threshold(const netbufferv4_set_hot_threshold_action_spec_t& val) {
  this->netbufferv4_set_hot_threshold = val;
}

void netbufferv4_action_specs_t::__set_netbufferv4_update_ipmac_srcport_server2client(const netbufferv4_update_ipmac_srcport_server2client_action_spec_t& val) {
  this->netbufferv4_update_ipmac_srcport_server2client = val;
}

void netbufferv4_action_specs_t::__set_netbufferv4_update_ipmac_srcport_switch2switchos(const netbufferv4_update_ipmac_srcport_switch2switchos_action_spec_t& val) {
  this->netbufferv4_update_ipmac_srcport_switch2switchos = val;
}

void netbufferv4_action_specs_t::__set_netbufferv4_update_dstipmac_client2server(const netbufferv4_update_dstipmac_client2server_action_spec_t& val) {
  this->netbufferv4_update_dstipmac_client2server = val;
}

void netbufferv4_action_specs_t::__set_netbufferv4_update_pktlen(const netbufferv4_update_pktlen_action_spec_t& val) {
  this->netbufferv4_update_pktlen = val;
}

const char* netbufferv4_action_specs_t::ascii_fingerprint = "D811650C81F59D7ECEC17BBD72142E38";
const uint8_t netbufferv4_action_specs_t::binary_fingerprint[16] = {0xD8,0x11,0x65,0x0C,0x81,0xF5,0x9D,0x7E,0xCE,0xC1,0x7B,0xBD,0x72,0x14,0x2E,0x38};

uint32_t netbufferv4_action_specs_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->netbufferv4_cached_action.read(iprot);
          this->__isset.netbufferv4_cached_action = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->netbufferv4_update_getreq_inswitch_to_getres_by_mirroring.read(iprot);
          this->__isset.netbufferv4_update_getreq_inswitch_to_getres_by_mirroring = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->netbufferv4_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss.read(iprot);
          this->__isset.netbufferv4_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->netbufferv4_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss.read(iprot);
          this->__isset.netbufferv4_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->netbufferv4_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss.read(iprot);
          this->__isset.netbufferv4_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->netbufferv4_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss.read(iprot);
          this->__isset.netbufferv4_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->netbufferv4_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone.read(iprot);
          this->__isset.netbufferv4_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->netbufferv4_update_putreq_inswitch_to_putres_by_mirroring.read(iprot);
          this->__isset.netbufferv4_update_putreq_inswitch_to_putres_by_mirroring = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->netbufferv4_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres.read(iprot);
          this->__isset.netbufferv4_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->netbufferv4_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres.read(iprot);
          this->__isset.netbufferv4_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->netbufferv4_update_putreq_seq_inswitch_case1_to_putres_by_mirroring.read(iprot);
          this->__isset.netbufferv4_update_putreq_seq_inswitch_case1_to_putres_by_mirroring = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->netbufferv4_update_delreq_inswitch_to_delres_by_mirroring.read(iprot);
          this->__isset.netbufferv4_update_delreq_inswitch_to_delres_by_mirroring = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->netbufferv4_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres.read(iprot);
          this->__isset.netbufferv4_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->netbufferv4_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres.read(iprot);
          this->__isset.netbufferv4_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->netbufferv4_update_delreq_seq_inswitch_case1_to_delres_by_mirroring.read(iprot);
          this->__isset.netbufferv4_update_delreq_seq_inswitch_case1_to_delres_by_mirroring = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->netbufferv4_forward_scanreq_split_and_clone.read(iprot);
          this->__isset.netbufferv4_forward_scanreq_split_and_clone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->netbufferv4_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone.read(iprot);
          this->__isset.netbufferv4_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->netbufferv4_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone.read(iprot);
          this->__isset.netbufferv4_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->netbufferv4_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone.read(iprot);
          this->__isset.netbufferv4_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->netbufferv4_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone.read(iprot);
          this->__isset.netbufferv4_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->netbufferv4_forward_normal_response.read(iprot);
          this->__isset.netbufferv4_forward_normal_response = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->netbufferv4_forward_special_get_response.read(iprot);
          this->__isset.netbufferv4_forward_special_get_response = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->netbufferv4_set_client_sid.read(iprot);
          this->__isset.netbufferv4_set_client_sid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->netbufferv4_process_scanreq_split.read(iprot);
          this->__isset.netbufferv4_process_scanreq_split = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->netbufferv4_process_cloned_scanreq_split.read(iprot);
          this->__isset.netbufferv4_process_cloned_scanreq_split = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->netbufferv4_range_partition_for_scan_endkey.read(iprot);
          this->__isset.netbufferv4_range_partition_for_scan_endkey = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->netbufferv4_range_partition.read(iprot);
          this->__isset.netbufferv4_range_partition = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 28:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->netbufferv4_recirculate_pkt.read(iprot);
          this->__isset.netbufferv4_recirculate_pkt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 29:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->netbufferv4_set_hot_threshold.read(iprot);
          this->__isset.netbufferv4_set_hot_threshold = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->netbufferv4_update_ipmac_srcport_server2client.read(iprot);
          this->__isset.netbufferv4_update_ipmac_srcport_server2client = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->netbufferv4_update_ipmac_srcport_switch2switchos.read(iprot);
          this->__isset.netbufferv4_update_ipmac_srcport_switch2switchos = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->netbufferv4_update_dstipmac_client2server.read(iprot);
          this->__isset.netbufferv4_update_dstipmac_client2server = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 33:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->netbufferv4_update_pktlen.read(iprot);
          this->__isset.netbufferv4_update_pktlen = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_action_specs_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_action_specs_t");

  xfer += oprot->writeFieldBegin("netbufferv4_cached_action", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->netbufferv4_cached_action.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("netbufferv4_update_getreq_inswitch_to_getres_by_mirroring", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->netbufferv4_update_getreq_inswitch_to_getres_by_mirroring.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("netbufferv4_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->netbufferv4_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("netbufferv4_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->netbufferv4_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("netbufferv4_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->netbufferv4_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("netbufferv4_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->netbufferv4_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("netbufferv4_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone", ::apache::thrift::protocol::T_STRUCT, 7);
  xfer += this->netbufferv4_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("netbufferv4_update_putreq_inswitch_to_putres_by_mirroring", ::apache::thrift::protocol::T_STRUCT, 8);
  xfer += this->netbufferv4_update_putreq_inswitch_to_putres_by_mirroring.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("netbufferv4_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres", ::apache::thrift::protocol::T_STRUCT, 9);
  xfer += this->netbufferv4_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("netbufferv4_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres", ::apache::thrift::protocol::T_STRUCT, 10);
  xfer += this->netbufferv4_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("netbufferv4_update_putreq_seq_inswitch_case1_to_putres_by_mirroring", ::apache::thrift::protocol::T_STRUCT, 11);
  xfer += this->netbufferv4_update_putreq_seq_inswitch_case1_to_putres_by_mirroring.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("netbufferv4_update_delreq_inswitch_to_delres_by_mirroring", ::apache::thrift::protocol::T_STRUCT, 12);
  xfer += this->netbufferv4_update_delreq_inswitch_to_delres_by_mirroring.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("netbufferv4_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres", ::apache::thrift::protocol::T_STRUCT, 13);
  xfer += this->netbufferv4_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("netbufferv4_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres", ::apache::thrift::protocol::T_STRUCT, 14);
  xfer += this->netbufferv4_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("netbufferv4_update_delreq_seq_inswitch_case1_to_delres_by_mirroring", ::apache::thrift::protocol::T_STRUCT, 15);
  xfer += this->netbufferv4_update_delreq_seq_inswitch_case1_to_delres_by_mirroring.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("netbufferv4_forward_scanreq_split_and_clone", ::apache::thrift::protocol::T_STRUCT, 16);
  xfer += this->netbufferv4_forward_scanreq_split_and_clone.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("netbufferv4_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone", ::apache::thrift::protocol::T_STRUCT, 17);
  xfer += this->netbufferv4_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("netbufferv4_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone", ::apache::thrift::protocol::T_STRUCT, 18);
  xfer += this->netbufferv4_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("netbufferv4_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone", ::apache::thrift::protocol::T_STRUCT, 19);
  xfer += this->netbufferv4_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("netbufferv4_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone", ::apache::thrift::protocol::T_STRUCT, 20);
  xfer += this->netbufferv4_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("netbufferv4_forward_normal_response", ::apache::thrift::protocol::T_STRUCT, 21);
  xfer += this->netbufferv4_forward_normal_response.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("netbufferv4_forward_special_get_response", ::apache::thrift::protocol::T_STRUCT, 22);
  xfer += this->netbufferv4_forward_special_get_response.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("netbufferv4_set_client_sid", ::apache::thrift::protocol::T_STRUCT, 23);
  xfer += this->netbufferv4_set_client_sid.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("netbufferv4_process_scanreq_split", ::apache::thrift::protocol::T_STRUCT, 24);
  xfer += this->netbufferv4_process_scanreq_split.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("netbufferv4_process_cloned_scanreq_split", ::apache::thrift::protocol::T_STRUCT, 25);
  xfer += this->netbufferv4_process_cloned_scanreq_split.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("netbufferv4_range_partition_for_scan_endkey", ::apache::thrift::protocol::T_STRUCT, 26);
  xfer += this->netbufferv4_range_partition_for_scan_endkey.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("netbufferv4_range_partition", ::apache::thrift::protocol::T_STRUCT, 27);
  xfer += this->netbufferv4_range_partition.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("netbufferv4_recirculate_pkt", ::apache::thrift::protocol::T_STRUCT, 28);
  xfer += this->netbufferv4_recirculate_pkt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("netbufferv4_set_hot_threshold", ::apache::thrift::protocol::T_STRUCT, 29);
  xfer += this->netbufferv4_set_hot_threshold.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("netbufferv4_update_ipmac_srcport_server2client", ::apache::thrift::protocol::T_STRUCT, 30);
  xfer += this->netbufferv4_update_ipmac_srcport_server2client.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("netbufferv4_update_ipmac_srcport_switch2switchos", ::apache::thrift::protocol::T_STRUCT, 31);
  xfer += this->netbufferv4_update_ipmac_srcport_switch2switchos.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("netbufferv4_update_dstipmac_client2server", ::apache::thrift::protocol::T_STRUCT, 32);
  xfer += this->netbufferv4_update_dstipmac_client2server.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("netbufferv4_update_pktlen", ::apache::thrift::protocol::T_STRUCT, 33);
  xfer += this->netbufferv4_update_pktlen.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_action_specs_t &a, netbufferv4_action_specs_t &b) {
  using ::std::swap;
  swap(a.netbufferv4_cached_action, b.netbufferv4_cached_action);
  swap(a.netbufferv4_update_getreq_inswitch_to_getres_by_mirroring, b.netbufferv4_update_getreq_inswitch_to_getres_by_mirroring);
  swap(a.netbufferv4_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss, b.netbufferv4_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss);
  swap(a.netbufferv4_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss, b.netbufferv4_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss);
  swap(a.netbufferv4_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss, b.netbufferv4_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss);
  swap(a.netbufferv4_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss, b.netbufferv4_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss);
  swap(a.netbufferv4_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone, b.netbufferv4_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone);
  swap(a.netbufferv4_update_putreq_inswitch_to_putres_by_mirroring, b.netbufferv4_update_putreq_inswitch_to_putres_by_mirroring);
  swap(a.netbufferv4_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres, b.netbufferv4_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres);
  swap(a.netbufferv4_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres, b.netbufferv4_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres);
  swap(a.netbufferv4_update_putreq_seq_inswitch_case1_to_putres_by_mirroring, b.netbufferv4_update_putreq_seq_inswitch_case1_to_putres_by_mirroring);
  swap(a.netbufferv4_update_delreq_inswitch_to_delres_by_mirroring, b.netbufferv4_update_delreq_inswitch_to_delres_by_mirroring);
  swap(a.netbufferv4_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres, b.netbufferv4_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres);
  swap(a.netbufferv4_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres, b.netbufferv4_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres);
  swap(a.netbufferv4_update_delreq_seq_inswitch_case1_to_delres_by_mirroring, b.netbufferv4_update_delreq_seq_inswitch_case1_to_delres_by_mirroring);
  swap(a.netbufferv4_forward_scanreq_split_and_clone, b.netbufferv4_forward_scanreq_split_and_clone);
  swap(a.netbufferv4_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone, b.netbufferv4_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone);
  swap(a.netbufferv4_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone, b.netbufferv4_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone);
  swap(a.netbufferv4_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone, b.netbufferv4_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone);
  swap(a.netbufferv4_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone, b.netbufferv4_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone);
  swap(a.netbufferv4_forward_normal_response, b.netbufferv4_forward_normal_response);
  swap(a.netbufferv4_forward_special_get_response, b.netbufferv4_forward_special_get_response);
  swap(a.netbufferv4_set_client_sid, b.netbufferv4_set_client_sid);
  swap(a.netbufferv4_process_scanreq_split, b.netbufferv4_process_scanreq_split);
  swap(a.netbufferv4_process_cloned_scanreq_split, b.netbufferv4_process_cloned_scanreq_split);
  swap(a.netbufferv4_range_partition_for_scan_endkey, b.netbufferv4_range_partition_for_scan_endkey);
  swap(a.netbufferv4_range_partition, b.netbufferv4_range_partition);
  swap(a.netbufferv4_recirculate_pkt, b.netbufferv4_recirculate_pkt);
  swap(a.netbufferv4_set_hot_threshold, b.netbufferv4_set_hot_threshold);
  swap(a.netbufferv4_update_ipmac_srcport_server2client, b.netbufferv4_update_ipmac_srcport_server2client);
  swap(a.netbufferv4_update_ipmac_srcport_switch2switchos, b.netbufferv4_update_ipmac_srcport_switch2switchos);
  swap(a.netbufferv4_update_dstipmac_client2server, b.netbufferv4_update_dstipmac_client2server);
  swap(a.netbufferv4_update_pktlen, b.netbufferv4_update_pktlen);
  swap(a.__isset, b.__isset);
}

netbufferv4_action_specs_t::netbufferv4_action_specs_t(const netbufferv4_action_specs_t& other257) {
  netbufferv4_cached_action = other257.netbufferv4_cached_action;
  netbufferv4_update_getreq_inswitch_to_getres_by_mirroring = other257.netbufferv4_update_getreq_inswitch_to_getres_by_mirroring;
  netbufferv4_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss = other257.netbufferv4_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss;
  netbufferv4_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss = other257.netbufferv4_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss;
  netbufferv4_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss = other257.netbufferv4_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss;
  netbufferv4_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss = other257.netbufferv4_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss;
  netbufferv4_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone = other257.netbufferv4_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone;
  netbufferv4_update_putreq_inswitch_to_putres_by_mirroring = other257.netbufferv4_update_putreq_inswitch_to_putres_by_mirroring;
  netbufferv4_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres = other257.netbufferv4_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres;
  netbufferv4_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres = other257.netbufferv4_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres;
  netbufferv4_update_putreq_seq_inswitch_case1_to_putres_by_mirroring = other257.netbufferv4_update_putreq_seq_inswitch_case1_to_putres_by_mirroring;
  netbufferv4_update_delreq_inswitch_to_delres_by_mirroring = other257.netbufferv4_update_delreq_inswitch_to_delres_by_mirroring;
  netbufferv4_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres = other257.netbufferv4_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres;
  netbufferv4_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres = other257.netbufferv4_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres;
  netbufferv4_update_delreq_seq_inswitch_case1_to_delres_by_mirroring = other257.netbufferv4_update_delreq_seq_inswitch_case1_to_delres_by_mirroring;
  netbufferv4_forward_scanreq_split_and_clone = other257.netbufferv4_forward_scanreq_split_and_clone;
  netbufferv4_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone = other257.netbufferv4_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone;
  netbufferv4_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone = other257.netbufferv4_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone;
  netbufferv4_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone = other257.netbufferv4_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone;
  netbufferv4_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone = other257.netbufferv4_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone;
  netbufferv4_forward_normal_response = other257.netbufferv4_forward_normal_response;
  netbufferv4_forward_special_get_response = other257.netbufferv4_forward_special_get_response;
  netbufferv4_set_client_sid = other257.netbufferv4_set_client_sid;
  netbufferv4_process_scanreq_split = other257.netbufferv4_process_scanreq_split;
  netbufferv4_process_cloned_scanreq_split = other257.netbufferv4_process_cloned_scanreq_split;
  netbufferv4_range_partition_for_scan_endkey = other257.netbufferv4_range_partition_for_scan_endkey;
  netbufferv4_range_partition = other257.netbufferv4_range_partition;
  netbufferv4_recirculate_pkt = other257.netbufferv4_recirculate_pkt;
  netbufferv4_set_hot_threshold = other257.netbufferv4_set_hot_threshold;
  netbufferv4_update_ipmac_srcport_server2client = other257.netbufferv4_update_ipmac_srcport_server2client;
  netbufferv4_update_ipmac_srcport_switch2switchos = other257.netbufferv4_update_ipmac_srcport_switch2switchos;
  netbufferv4_update_dstipmac_client2server = other257.netbufferv4_update_dstipmac_client2server;
  netbufferv4_update_pktlen = other257.netbufferv4_update_pktlen;
  __isset = other257.__isset;
}
netbufferv4_action_specs_t& netbufferv4_action_specs_t::operator=(const netbufferv4_action_specs_t& other258) {
  netbufferv4_cached_action = other258.netbufferv4_cached_action;
  netbufferv4_update_getreq_inswitch_to_getres_by_mirroring = other258.netbufferv4_update_getreq_inswitch_to_getres_by_mirroring;
  netbufferv4_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss = other258.netbufferv4_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss;
  netbufferv4_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss = other258.netbufferv4_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss;
  netbufferv4_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss = other258.netbufferv4_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss;
  netbufferv4_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss = other258.netbufferv4_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss;
  netbufferv4_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone = other258.netbufferv4_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone;
  netbufferv4_update_putreq_inswitch_to_putres_by_mirroring = other258.netbufferv4_update_putreq_inswitch_to_putres_by_mirroring;
  netbufferv4_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres = other258.netbufferv4_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres;
  netbufferv4_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres = other258.netbufferv4_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres;
  netbufferv4_update_putreq_seq_inswitch_case1_to_putres_by_mirroring = other258.netbufferv4_update_putreq_seq_inswitch_case1_to_putres_by_mirroring;
  netbufferv4_update_delreq_inswitch_to_delres_by_mirroring = other258.netbufferv4_update_delreq_inswitch_to_delres_by_mirroring;
  netbufferv4_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres = other258.netbufferv4_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres;
  netbufferv4_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres = other258.netbufferv4_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres;
  netbufferv4_update_delreq_seq_inswitch_case1_to_delres_by_mirroring = other258.netbufferv4_update_delreq_seq_inswitch_case1_to_delres_by_mirroring;
  netbufferv4_forward_scanreq_split_and_clone = other258.netbufferv4_forward_scanreq_split_and_clone;
  netbufferv4_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone = other258.netbufferv4_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone;
  netbufferv4_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone = other258.netbufferv4_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone;
  netbufferv4_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone = other258.netbufferv4_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone;
  netbufferv4_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone = other258.netbufferv4_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone;
  netbufferv4_forward_normal_response = other258.netbufferv4_forward_normal_response;
  netbufferv4_forward_special_get_response = other258.netbufferv4_forward_special_get_response;
  netbufferv4_set_client_sid = other258.netbufferv4_set_client_sid;
  netbufferv4_process_scanreq_split = other258.netbufferv4_process_scanreq_split;
  netbufferv4_process_cloned_scanreq_split = other258.netbufferv4_process_cloned_scanreq_split;
  netbufferv4_range_partition_for_scan_endkey = other258.netbufferv4_range_partition_for_scan_endkey;
  netbufferv4_range_partition = other258.netbufferv4_range_partition;
  netbufferv4_recirculate_pkt = other258.netbufferv4_recirculate_pkt;
  netbufferv4_set_hot_threshold = other258.netbufferv4_set_hot_threshold;
  netbufferv4_update_ipmac_srcport_server2client = other258.netbufferv4_update_ipmac_srcport_server2client;
  netbufferv4_update_ipmac_srcport_switch2switchos = other258.netbufferv4_update_ipmac_srcport_switch2switchos;
  netbufferv4_update_dstipmac_client2server = other258.netbufferv4_update_dstipmac_client2server;
  netbufferv4_update_pktlen = other258.netbufferv4_update_pktlen;
  __isset = other258.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_action_specs_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_action_specs_t(";
  out << "netbufferv4_cached_action=" << to_string(obj.netbufferv4_cached_action);
  out << ", " << "netbufferv4_update_getreq_inswitch_to_getres_by_mirroring=" << to_string(obj.netbufferv4_update_getreq_inswitch_to_getres_by_mirroring);
  out << ", " << "netbufferv4_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss=" << to_string(obj.netbufferv4_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss);
  out << ", " << "netbufferv4_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss=" << to_string(obj.netbufferv4_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss);
  out << ", " << "netbufferv4_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss=" << to_string(obj.netbufferv4_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss);
  out << ", " << "netbufferv4_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss=" << to_string(obj.netbufferv4_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss);
  out << ", " << "netbufferv4_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone=" << to_string(obj.netbufferv4_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone);
  out << ", " << "netbufferv4_update_putreq_inswitch_to_putres_by_mirroring=" << to_string(obj.netbufferv4_update_putreq_inswitch_to_putres_by_mirroring);
  out << ", " << "netbufferv4_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres=" << to_string(obj.netbufferv4_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres);
  out << ", " << "netbufferv4_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres=" << to_string(obj.netbufferv4_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres);
  out << ", " << "netbufferv4_update_putreq_seq_inswitch_case1_to_putres_by_mirroring=" << to_string(obj.netbufferv4_update_putreq_seq_inswitch_case1_to_putres_by_mirroring);
  out << ", " << "netbufferv4_update_delreq_inswitch_to_delres_by_mirroring=" << to_string(obj.netbufferv4_update_delreq_inswitch_to_delres_by_mirroring);
  out << ", " << "netbufferv4_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres=" << to_string(obj.netbufferv4_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres);
  out << ", " << "netbufferv4_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres=" << to_string(obj.netbufferv4_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres);
  out << ", " << "netbufferv4_update_delreq_seq_inswitch_case1_to_delres_by_mirroring=" << to_string(obj.netbufferv4_update_delreq_seq_inswitch_case1_to_delres_by_mirroring);
  out << ", " << "netbufferv4_forward_scanreq_split_and_clone=" << to_string(obj.netbufferv4_forward_scanreq_split_and_clone);
  out << ", " << "netbufferv4_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone=" << to_string(obj.netbufferv4_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone);
  out << ", " << "netbufferv4_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone=" << to_string(obj.netbufferv4_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone);
  out << ", " << "netbufferv4_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone=" << to_string(obj.netbufferv4_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone);
  out << ", " << "netbufferv4_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone=" << to_string(obj.netbufferv4_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone);
  out << ", " << "netbufferv4_forward_normal_response=" << to_string(obj.netbufferv4_forward_normal_response);
  out << ", " << "netbufferv4_forward_special_get_response=" << to_string(obj.netbufferv4_forward_special_get_response);
  out << ", " << "netbufferv4_set_client_sid=" << to_string(obj.netbufferv4_set_client_sid);
  out << ", " << "netbufferv4_process_scanreq_split=" << to_string(obj.netbufferv4_process_scanreq_split);
  out << ", " << "netbufferv4_process_cloned_scanreq_split=" << to_string(obj.netbufferv4_process_cloned_scanreq_split);
  out << ", " << "netbufferv4_range_partition_for_scan_endkey=" << to_string(obj.netbufferv4_range_partition_for_scan_endkey);
  out << ", " << "netbufferv4_range_partition=" << to_string(obj.netbufferv4_range_partition);
  out << ", " << "netbufferv4_recirculate_pkt=" << to_string(obj.netbufferv4_recirculate_pkt);
  out << ", " << "netbufferv4_set_hot_threshold=" << to_string(obj.netbufferv4_set_hot_threshold);
  out << ", " << "netbufferv4_update_ipmac_srcport_server2client=" << to_string(obj.netbufferv4_update_ipmac_srcport_server2client);
  out << ", " << "netbufferv4_update_ipmac_srcport_switch2switchos=" << to_string(obj.netbufferv4_update_ipmac_srcport_switch2switchos);
  out << ", " << "netbufferv4_update_dstipmac_client2server=" << to_string(obj.netbufferv4_update_dstipmac_client2server);
  out << ", " << "netbufferv4_update_pktlen=" << to_string(obj.netbufferv4_update_pktlen);
  out << ")";
  return out;
}


netbufferv4_action_desc_t::~netbufferv4_action_desc_t() throw() {
}


void netbufferv4_action_desc_t::__set_name(const std::string& val) {
  this->name = val;
}

void netbufferv4_action_desc_t::__set_data(const netbufferv4_action_specs_t& val) {
  this->data = val;
}

const char* netbufferv4_action_desc_t::ascii_fingerprint = "0BEC1E266239242CE1DD7EDFF4DFFC37";
const uint8_t netbufferv4_action_desc_t::binary_fingerprint[16] = {0x0B,0xEC,0x1E,0x26,0x62,0x39,0x24,0x2C,0xE1,0xDD,0x7E,0xDF,0xF4,0xDF,0xFC,0x37};

uint32_t netbufferv4_action_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_name = false;
  bool isset_data = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          isset_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->data.read(iprot);
          isset_data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_data)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_action_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_action_desc_t");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->data.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_action_desc_t &a, netbufferv4_action_desc_t &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.data, b.data);
}

netbufferv4_action_desc_t::netbufferv4_action_desc_t(const netbufferv4_action_desc_t& other259) {
  name = other259.name;
  data = other259.data;
}
netbufferv4_action_desc_t& netbufferv4_action_desc_t::operator=(const netbufferv4_action_desc_t& other260) {
  name = other260.name;
  data = other260.data;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_action_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_action_desc_t(";
  out << "name=" << to_string(obj.name);
  out << ", " << "data=" << to_string(obj.data);
  out << ")";
  return out;
}


netbufferv4_access_cache_frequency_tbl_entry_desc_t::~netbufferv4_access_cache_frequency_tbl_entry_desc_t() throw() {
}


void netbufferv4_access_cache_frequency_tbl_entry_desc_t::__set_match_spec(const netbufferv4_access_cache_frequency_tbl_match_spec_t& val) {
  this->match_spec = val;
}

void netbufferv4_access_cache_frequency_tbl_entry_desc_t::__set_has_mbr_hdl(const bool val) {
  this->has_mbr_hdl = val;
}

void netbufferv4_access_cache_frequency_tbl_entry_desc_t::__set_has_grp_hdl(const bool val) {
  this->has_grp_hdl = val;
}

void netbufferv4_access_cache_frequency_tbl_entry_desc_t::__set_selector_grp_hdl(const MemberHandle_t val) {
  this->selector_grp_hdl = val;
}

void netbufferv4_access_cache_frequency_tbl_entry_desc_t::__set_action_mbr_hdl(const MemberHandle_t val) {
  this->action_mbr_hdl = val;
}

void netbufferv4_access_cache_frequency_tbl_entry_desc_t::__set_action_desc(const netbufferv4_action_desc_t& val) {
  this->action_desc = val;
}

const char* netbufferv4_access_cache_frequency_tbl_entry_desc_t::ascii_fingerprint = "A4025832D601E3E797B0D6FC1E9961D1";
const uint8_t netbufferv4_access_cache_frequency_tbl_entry_desc_t::binary_fingerprint[16] = {0xA4,0x02,0x58,0x32,0xD6,0x01,0xE3,0xE7,0x97,0xB0,0xD6,0xFC,0x1E,0x99,0x61,0xD1};

uint32_t netbufferv4_access_cache_frequency_tbl_entry_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match_spec = false;
  bool isset_has_mbr_hdl = false;
  bool isset_has_grp_hdl = false;
  bool isset_selector_grp_hdl = false;
  bool isset_action_mbr_hdl = false;
  bool isset_action_desc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->match_spec.read(iprot);
          isset_match_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_mbr_hdl);
          isset_has_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_grp_hdl);
          isset_has_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->selector_grp_hdl);
          isset_selector_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_mbr_hdl);
          isset_action_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_desc.read(iprot);
          isset_action_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selector_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_access_cache_frequency_tbl_entry_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_access_cache_frequency_tbl_entry_desc_t");

  xfer += oprot->writeFieldBegin("match_spec", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->match_spec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_mbr_hdl", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_grp_hdl", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selector_grp_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->selector_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_mbr_hdl", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->action_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_desc", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->action_desc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_access_cache_frequency_tbl_entry_desc_t &a, netbufferv4_access_cache_frequency_tbl_entry_desc_t &b) {
  using ::std::swap;
  swap(a.match_spec, b.match_spec);
  swap(a.has_mbr_hdl, b.has_mbr_hdl);
  swap(a.has_grp_hdl, b.has_grp_hdl);
  swap(a.selector_grp_hdl, b.selector_grp_hdl);
  swap(a.action_mbr_hdl, b.action_mbr_hdl);
  swap(a.action_desc, b.action_desc);
}

netbufferv4_access_cache_frequency_tbl_entry_desc_t::netbufferv4_access_cache_frequency_tbl_entry_desc_t(const netbufferv4_access_cache_frequency_tbl_entry_desc_t& other261) {
  match_spec = other261.match_spec;
  has_mbr_hdl = other261.has_mbr_hdl;
  has_grp_hdl = other261.has_grp_hdl;
  selector_grp_hdl = other261.selector_grp_hdl;
  action_mbr_hdl = other261.action_mbr_hdl;
  action_desc = other261.action_desc;
}
netbufferv4_access_cache_frequency_tbl_entry_desc_t& netbufferv4_access_cache_frequency_tbl_entry_desc_t::operator=(const netbufferv4_access_cache_frequency_tbl_entry_desc_t& other262) {
  match_spec = other262.match_spec;
  has_mbr_hdl = other262.has_mbr_hdl;
  has_grp_hdl = other262.has_grp_hdl;
  selector_grp_hdl = other262.selector_grp_hdl;
  action_mbr_hdl = other262.action_mbr_hdl;
  action_desc = other262.action_desc;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_access_cache_frequency_tbl_entry_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_access_cache_frequency_tbl_entry_desc_t(";
  out << "match_spec=" << to_string(obj.match_spec);
  out << ", " << "has_mbr_hdl=" << to_string(obj.has_mbr_hdl);
  out << ", " << "has_grp_hdl=" << to_string(obj.has_grp_hdl);
  out << ", " << "selector_grp_hdl=" << to_string(obj.selector_grp_hdl);
  out << ", " << "action_mbr_hdl=" << to_string(obj.action_mbr_hdl);
  out << ", " << "action_desc=" << to_string(obj.action_desc);
  out << ")";
  return out;
}


netbufferv4_access_case1_tbl_entry_desc_t::~netbufferv4_access_case1_tbl_entry_desc_t() throw() {
}


void netbufferv4_access_case1_tbl_entry_desc_t::__set_match_spec(const netbufferv4_access_case1_tbl_match_spec_t& val) {
  this->match_spec = val;
}

void netbufferv4_access_case1_tbl_entry_desc_t::__set_has_mbr_hdl(const bool val) {
  this->has_mbr_hdl = val;
}

void netbufferv4_access_case1_tbl_entry_desc_t::__set_has_grp_hdl(const bool val) {
  this->has_grp_hdl = val;
}

void netbufferv4_access_case1_tbl_entry_desc_t::__set_selector_grp_hdl(const MemberHandle_t val) {
  this->selector_grp_hdl = val;
}

void netbufferv4_access_case1_tbl_entry_desc_t::__set_action_mbr_hdl(const MemberHandle_t val) {
  this->action_mbr_hdl = val;
}

void netbufferv4_access_case1_tbl_entry_desc_t::__set_action_desc(const netbufferv4_action_desc_t& val) {
  this->action_desc = val;
}

const char* netbufferv4_access_case1_tbl_entry_desc_t::ascii_fingerprint = "E4E31474EDEE03914EA85A7543A9B8F8";
const uint8_t netbufferv4_access_case1_tbl_entry_desc_t::binary_fingerprint[16] = {0xE4,0xE3,0x14,0x74,0xED,0xEE,0x03,0x91,0x4E,0xA8,0x5A,0x75,0x43,0xA9,0xB8,0xF8};

uint32_t netbufferv4_access_case1_tbl_entry_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match_spec = false;
  bool isset_has_mbr_hdl = false;
  bool isset_has_grp_hdl = false;
  bool isset_selector_grp_hdl = false;
  bool isset_action_mbr_hdl = false;
  bool isset_action_desc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->match_spec.read(iprot);
          isset_match_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_mbr_hdl);
          isset_has_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_grp_hdl);
          isset_has_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->selector_grp_hdl);
          isset_selector_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_mbr_hdl);
          isset_action_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_desc.read(iprot);
          isset_action_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selector_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_access_case1_tbl_entry_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_access_case1_tbl_entry_desc_t");

  xfer += oprot->writeFieldBegin("match_spec", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->match_spec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_mbr_hdl", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_grp_hdl", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selector_grp_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->selector_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_mbr_hdl", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->action_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_desc", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->action_desc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_access_case1_tbl_entry_desc_t &a, netbufferv4_access_case1_tbl_entry_desc_t &b) {
  using ::std::swap;
  swap(a.match_spec, b.match_spec);
  swap(a.has_mbr_hdl, b.has_mbr_hdl);
  swap(a.has_grp_hdl, b.has_grp_hdl);
  swap(a.selector_grp_hdl, b.selector_grp_hdl);
  swap(a.action_mbr_hdl, b.action_mbr_hdl);
  swap(a.action_desc, b.action_desc);
}

netbufferv4_access_case1_tbl_entry_desc_t::netbufferv4_access_case1_tbl_entry_desc_t(const netbufferv4_access_case1_tbl_entry_desc_t& other263) {
  match_spec = other263.match_spec;
  has_mbr_hdl = other263.has_mbr_hdl;
  has_grp_hdl = other263.has_grp_hdl;
  selector_grp_hdl = other263.selector_grp_hdl;
  action_mbr_hdl = other263.action_mbr_hdl;
  action_desc = other263.action_desc;
}
netbufferv4_access_case1_tbl_entry_desc_t& netbufferv4_access_case1_tbl_entry_desc_t::operator=(const netbufferv4_access_case1_tbl_entry_desc_t& other264) {
  match_spec = other264.match_spec;
  has_mbr_hdl = other264.has_mbr_hdl;
  has_grp_hdl = other264.has_grp_hdl;
  selector_grp_hdl = other264.selector_grp_hdl;
  action_mbr_hdl = other264.action_mbr_hdl;
  action_desc = other264.action_desc;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_access_case1_tbl_entry_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_access_case1_tbl_entry_desc_t(";
  out << "match_spec=" << to_string(obj.match_spec);
  out << ", " << "has_mbr_hdl=" << to_string(obj.has_mbr_hdl);
  out << ", " << "has_grp_hdl=" << to_string(obj.has_grp_hdl);
  out << ", " << "selector_grp_hdl=" << to_string(obj.selector_grp_hdl);
  out << ", " << "action_mbr_hdl=" << to_string(obj.action_mbr_hdl);
  out << ", " << "action_desc=" << to_string(obj.action_desc);
  out << ")";
  return out;
}


netbufferv4_access_cm1_tbl_entry_desc_t::~netbufferv4_access_cm1_tbl_entry_desc_t() throw() {
}


void netbufferv4_access_cm1_tbl_entry_desc_t::__set_match_spec(const netbufferv4_access_cm1_tbl_match_spec_t& val) {
  this->match_spec = val;
}

void netbufferv4_access_cm1_tbl_entry_desc_t::__set_has_mbr_hdl(const bool val) {
  this->has_mbr_hdl = val;
}

void netbufferv4_access_cm1_tbl_entry_desc_t::__set_has_grp_hdl(const bool val) {
  this->has_grp_hdl = val;
}

void netbufferv4_access_cm1_tbl_entry_desc_t::__set_selector_grp_hdl(const MemberHandle_t val) {
  this->selector_grp_hdl = val;
}

void netbufferv4_access_cm1_tbl_entry_desc_t::__set_action_mbr_hdl(const MemberHandle_t val) {
  this->action_mbr_hdl = val;
}

void netbufferv4_access_cm1_tbl_entry_desc_t::__set_action_desc(const netbufferv4_action_desc_t& val) {
  this->action_desc = val;
}

const char* netbufferv4_access_cm1_tbl_entry_desc_t::ascii_fingerprint = "A4025832D601E3E797B0D6FC1E9961D1";
const uint8_t netbufferv4_access_cm1_tbl_entry_desc_t::binary_fingerprint[16] = {0xA4,0x02,0x58,0x32,0xD6,0x01,0xE3,0xE7,0x97,0xB0,0xD6,0xFC,0x1E,0x99,0x61,0xD1};

uint32_t netbufferv4_access_cm1_tbl_entry_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match_spec = false;
  bool isset_has_mbr_hdl = false;
  bool isset_has_grp_hdl = false;
  bool isset_selector_grp_hdl = false;
  bool isset_action_mbr_hdl = false;
  bool isset_action_desc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->match_spec.read(iprot);
          isset_match_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_mbr_hdl);
          isset_has_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_grp_hdl);
          isset_has_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->selector_grp_hdl);
          isset_selector_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_mbr_hdl);
          isset_action_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_desc.read(iprot);
          isset_action_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selector_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_access_cm1_tbl_entry_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_access_cm1_tbl_entry_desc_t");

  xfer += oprot->writeFieldBegin("match_spec", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->match_spec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_mbr_hdl", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_grp_hdl", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selector_grp_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->selector_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_mbr_hdl", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->action_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_desc", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->action_desc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_access_cm1_tbl_entry_desc_t &a, netbufferv4_access_cm1_tbl_entry_desc_t &b) {
  using ::std::swap;
  swap(a.match_spec, b.match_spec);
  swap(a.has_mbr_hdl, b.has_mbr_hdl);
  swap(a.has_grp_hdl, b.has_grp_hdl);
  swap(a.selector_grp_hdl, b.selector_grp_hdl);
  swap(a.action_mbr_hdl, b.action_mbr_hdl);
  swap(a.action_desc, b.action_desc);
}

netbufferv4_access_cm1_tbl_entry_desc_t::netbufferv4_access_cm1_tbl_entry_desc_t(const netbufferv4_access_cm1_tbl_entry_desc_t& other265) {
  match_spec = other265.match_spec;
  has_mbr_hdl = other265.has_mbr_hdl;
  has_grp_hdl = other265.has_grp_hdl;
  selector_grp_hdl = other265.selector_grp_hdl;
  action_mbr_hdl = other265.action_mbr_hdl;
  action_desc = other265.action_desc;
}
netbufferv4_access_cm1_tbl_entry_desc_t& netbufferv4_access_cm1_tbl_entry_desc_t::operator=(const netbufferv4_access_cm1_tbl_entry_desc_t& other266) {
  match_spec = other266.match_spec;
  has_mbr_hdl = other266.has_mbr_hdl;
  has_grp_hdl = other266.has_grp_hdl;
  selector_grp_hdl = other266.selector_grp_hdl;
  action_mbr_hdl = other266.action_mbr_hdl;
  action_desc = other266.action_desc;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_access_cm1_tbl_entry_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_access_cm1_tbl_entry_desc_t(";
  out << "match_spec=" << to_string(obj.match_spec);
  out << ", " << "has_mbr_hdl=" << to_string(obj.has_mbr_hdl);
  out << ", " << "has_grp_hdl=" << to_string(obj.has_grp_hdl);
  out << ", " << "selector_grp_hdl=" << to_string(obj.selector_grp_hdl);
  out << ", " << "action_mbr_hdl=" << to_string(obj.action_mbr_hdl);
  out << ", " << "action_desc=" << to_string(obj.action_desc);
  out << ")";
  return out;
}


netbufferv4_access_cm2_tbl_entry_desc_t::~netbufferv4_access_cm2_tbl_entry_desc_t() throw() {
}


void netbufferv4_access_cm2_tbl_entry_desc_t::__set_match_spec(const netbufferv4_access_cm2_tbl_match_spec_t& val) {
  this->match_spec = val;
}

void netbufferv4_access_cm2_tbl_entry_desc_t::__set_has_mbr_hdl(const bool val) {
  this->has_mbr_hdl = val;
}

void netbufferv4_access_cm2_tbl_entry_desc_t::__set_has_grp_hdl(const bool val) {
  this->has_grp_hdl = val;
}

void netbufferv4_access_cm2_tbl_entry_desc_t::__set_selector_grp_hdl(const MemberHandle_t val) {
  this->selector_grp_hdl = val;
}

void netbufferv4_access_cm2_tbl_entry_desc_t::__set_action_mbr_hdl(const MemberHandle_t val) {
  this->action_mbr_hdl = val;
}

void netbufferv4_access_cm2_tbl_entry_desc_t::__set_action_desc(const netbufferv4_action_desc_t& val) {
  this->action_desc = val;
}

const char* netbufferv4_access_cm2_tbl_entry_desc_t::ascii_fingerprint = "A4025832D601E3E797B0D6FC1E9961D1";
const uint8_t netbufferv4_access_cm2_tbl_entry_desc_t::binary_fingerprint[16] = {0xA4,0x02,0x58,0x32,0xD6,0x01,0xE3,0xE7,0x97,0xB0,0xD6,0xFC,0x1E,0x99,0x61,0xD1};

uint32_t netbufferv4_access_cm2_tbl_entry_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match_spec = false;
  bool isset_has_mbr_hdl = false;
  bool isset_has_grp_hdl = false;
  bool isset_selector_grp_hdl = false;
  bool isset_action_mbr_hdl = false;
  bool isset_action_desc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->match_spec.read(iprot);
          isset_match_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_mbr_hdl);
          isset_has_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_grp_hdl);
          isset_has_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->selector_grp_hdl);
          isset_selector_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_mbr_hdl);
          isset_action_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_desc.read(iprot);
          isset_action_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selector_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_access_cm2_tbl_entry_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_access_cm2_tbl_entry_desc_t");

  xfer += oprot->writeFieldBegin("match_spec", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->match_spec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_mbr_hdl", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_grp_hdl", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selector_grp_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->selector_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_mbr_hdl", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->action_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_desc", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->action_desc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_access_cm2_tbl_entry_desc_t &a, netbufferv4_access_cm2_tbl_entry_desc_t &b) {
  using ::std::swap;
  swap(a.match_spec, b.match_spec);
  swap(a.has_mbr_hdl, b.has_mbr_hdl);
  swap(a.has_grp_hdl, b.has_grp_hdl);
  swap(a.selector_grp_hdl, b.selector_grp_hdl);
  swap(a.action_mbr_hdl, b.action_mbr_hdl);
  swap(a.action_desc, b.action_desc);
}

netbufferv4_access_cm2_tbl_entry_desc_t::netbufferv4_access_cm2_tbl_entry_desc_t(const netbufferv4_access_cm2_tbl_entry_desc_t& other267) {
  match_spec = other267.match_spec;
  has_mbr_hdl = other267.has_mbr_hdl;
  has_grp_hdl = other267.has_grp_hdl;
  selector_grp_hdl = other267.selector_grp_hdl;
  action_mbr_hdl = other267.action_mbr_hdl;
  action_desc = other267.action_desc;
}
netbufferv4_access_cm2_tbl_entry_desc_t& netbufferv4_access_cm2_tbl_entry_desc_t::operator=(const netbufferv4_access_cm2_tbl_entry_desc_t& other268) {
  match_spec = other268.match_spec;
  has_mbr_hdl = other268.has_mbr_hdl;
  has_grp_hdl = other268.has_grp_hdl;
  selector_grp_hdl = other268.selector_grp_hdl;
  action_mbr_hdl = other268.action_mbr_hdl;
  action_desc = other268.action_desc;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_access_cm2_tbl_entry_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_access_cm2_tbl_entry_desc_t(";
  out << "match_spec=" << to_string(obj.match_spec);
  out << ", " << "has_mbr_hdl=" << to_string(obj.has_mbr_hdl);
  out << ", " << "has_grp_hdl=" << to_string(obj.has_grp_hdl);
  out << ", " << "selector_grp_hdl=" << to_string(obj.selector_grp_hdl);
  out << ", " << "action_mbr_hdl=" << to_string(obj.action_mbr_hdl);
  out << ", " << "action_desc=" << to_string(obj.action_desc);
  out << ")";
  return out;
}


netbufferv4_access_cm3_tbl_entry_desc_t::~netbufferv4_access_cm3_tbl_entry_desc_t() throw() {
}


void netbufferv4_access_cm3_tbl_entry_desc_t::__set_match_spec(const netbufferv4_access_cm3_tbl_match_spec_t& val) {
  this->match_spec = val;
}

void netbufferv4_access_cm3_tbl_entry_desc_t::__set_has_mbr_hdl(const bool val) {
  this->has_mbr_hdl = val;
}

void netbufferv4_access_cm3_tbl_entry_desc_t::__set_has_grp_hdl(const bool val) {
  this->has_grp_hdl = val;
}

void netbufferv4_access_cm3_tbl_entry_desc_t::__set_selector_grp_hdl(const MemberHandle_t val) {
  this->selector_grp_hdl = val;
}

void netbufferv4_access_cm3_tbl_entry_desc_t::__set_action_mbr_hdl(const MemberHandle_t val) {
  this->action_mbr_hdl = val;
}

void netbufferv4_access_cm3_tbl_entry_desc_t::__set_action_desc(const netbufferv4_action_desc_t& val) {
  this->action_desc = val;
}

const char* netbufferv4_access_cm3_tbl_entry_desc_t::ascii_fingerprint = "A4025832D601E3E797B0D6FC1E9961D1";
const uint8_t netbufferv4_access_cm3_tbl_entry_desc_t::binary_fingerprint[16] = {0xA4,0x02,0x58,0x32,0xD6,0x01,0xE3,0xE7,0x97,0xB0,0xD6,0xFC,0x1E,0x99,0x61,0xD1};

uint32_t netbufferv4_access_cm3_tbl_entry_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match_spec = false;
  bool isset_has_mbr_hdl = false;
  bool isset_has_grp_hdl = false;
  bool isset_selector_grp_hdl = false;
  bool isset_action_mbr_hdl = false;
  bool isset_action_desc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->match_spec.read(iprot);
          isset_match_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_mbr_hdl);
          isset_has_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_grp_hdl);
          isset_has_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->selector_grp_hdl);
          isset_selector_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_mbr_hdl);
          isset_action_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_desc.read(iprot);
          isset_action_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selector_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_access_cm3_tbl_entry_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_access_cm3_tbl_entry_desc_t");

  xfer += oprot->writeFieldBegin("match_spec", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->match_spec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_mbr_hdl", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_grp_hdl", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selector_grp_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->selector_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_mbr_hdl", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->action_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_desc", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->action_desc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_access_cm3_tbl_entry_desc_t &a, netbufferv4_access_cm3_tbl_entry_desc_t &b) {
  using ::std::swap;
  swap(a.match_spec, b.match_spec);
  swap(a.has_mbr_hdl, b.has_mbr_hdl);
  swap(a.has_grp_hdl, b.has_grp_hdl);
  swap(a.selector_grp_hdl, b.selector_grp_hdl);
  swap(a.action_mbr_hdl, b.action_mbr_hdl);
  swap(a.action_desc, b.action_desc);
}

netbufferv4_access_cm3_tbl_entry_desc_t::netbufferv4_access_cm3_tbl_entry_desc_t(const netbufferv4_access_cm3_tbl_entry_desc_t& other269) {
  match_spec = other269.match_spec;
  has_mbr_hdl = other269.has_mbr_hdl;
  has_grp_hdl = other269.has_grp_hdl;
  selector_grp_hdl = other269.selector_grp_hdl;
  action_mbr_hdl = other269.action_mbr_hdl;
  action_desc = other269.action_desc;
}
netbufferv4_access_cm3_tbl_entry_desc_t& netbufferv4_access_cm3_tbl_entry_desc_t::operator=(const netbufferv4_access_cm3_tbl_entry_desc_t& other270) {
  match_spec = other270.match_spec;
  has_mbr_hdl = other270.has_mbr_hdl;
  has_grp_hdl = other270.has_grp_hdl;
  selector_grp_hdl = other270.selector_grp_hdl;
  action_mbr_hdl = other270.action_mbr_hdl;
  action_desc = other270.action_desc;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_access_cm3_tbl_entry_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_access_cm3_tbl_entry_desc_t(";
  out << "match_spec=" << to_string(obj.match_spec);
  out << ", " << "has_mbr_hdl=" << to_string(obj.has_mbr_hdl);
  out << ", " << "has_grp_hdl=" << to_string(obj.has_grp_hdl);
  out << ", " << "selector_grp_hdl=" << to_string(obj.selector_grp_hdl);
  out << ", " << "action_mbr_hdl=" << to_string(obj.action_mbr_hdl);
  out << ", " << "action_desc=" << to_string(obj.action_desc);
  out << ")";
  return out;
}


netbufferv4_access_cm4_tbl_entry_desc_t::~netbufferv4_access_cm4_tbl_entry_desc_t() throw() {
}


void netbufferv4_access_cm4_tbl_entry_desc_t::__set_match_spec(const netbufferv4_access_cm4_tbl_match_spec_t& val) {
  this->match_spec = val;
}

void netbufferv4_access_cm4_tbl_entry_desc_t::__set_has_mbr_hdl(const bool val) {
  this->has_mbr_hdl = val;
}

void netbufferv4_access_cm4_tbl_entry_desc_t::__set_has_grp_hdl(const bool val) {
  this->has_grp_hdl = val;
}

void netbufferv4_access_cm4_tbl_entry_desc_t::__set_selector_grp_hdl(const MemberHandle_t val) {
  this->selector_grp_hdl = val;
}

void netbufferv4_access_cm4_tbl_entry_desc_t::__set_action_mbr_hdl(const MemberHandle_t val) {
  this->action_mbr_hdl = val;
}

void netbufferv4_access_cm4_tbl_entry_desc_t::__set_action_desc(const netbufferv4_action_desc_t& val) {
  this->action_desc = val;
}

const char* netbufferv4_access_cm4_tbl_entry_desc_t::ascii_fingerprint = "A4025832D601E3E797B0D6FC1E9961D1";
const uint8_t netbufferv4_access_cm4_tbl_entry_desc_t::binary_fingerprint[16] = {0xA4,0x02,0x58,0x32,0xD6,0x01,0xE3,0xE7,0x97,0xB0,0xD6,0xFC,0x1E,0x99,0x61,0xD1};

uint32_t netbufferv4_access_cm4_tbl_entry_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match_spec = false;
  bool isset_has_mbr_hdl = false;
  bool isset_has_grp_hdl = false;
  bool isset_selector_grp_hdl = false;
  bool isset_action_mbr_hdl = false;
  bool isset_action_desc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->match_spec.read(iprot);
          isset_match_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_mbr_hdl);
          isset_has_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_grp_hdl);
          isset_has_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->selector_grp_hdl);
          isset_selector_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_mbr_hdl);
          isset_action_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_desc.read(iprot);
          isset_action_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selector_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_access_cm4_tbl_entry_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_access_cm4_tbl_entry_desc_t");

  xfer += oprot->writeFieldBegin("match_spec", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->match_spec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_mbr_hdl", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_grp_hdl", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selector_grp_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->selector_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_mbr_hdl", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->action_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_desc", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->action_desc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_access_cm4_tbl_entry_desc_t &a, netbufferv4_access_cm4_tbl_entry_desc_t &b) {
  using ::std::swap;
  swap(a.match_spec, b.match_spec);
  swap(a.has_mbr_hdl, b.has_mbr_hdl);
  swap(a.has_grp_hdl, b.has_grp_hdl);
  swap(a.selector_grp_hdl, b.selector_grp_hdl);
  swap(a.action_mbr_hdl, b.action_mbr_hdl);
  swap(a.action_desc, b.action_desc);
}

netbufferv4_access_cm4_tbl_entry_desc_t::netbufferv4_access_cm4_tbl_entry_desc_t(const netbufferv4_access_cm4_tbl_entry_desc_t& other271) {
  match_spec = other271.match_spec;
  has_mbr_hdl = other271.has_mbr_hdl;
  has_grp_hdl = other271.has_grp_hdl;
  selector_grp_hdl = other271.selector_grp_hdl;
  action_mbr_hdl = other271.action_mbr_hdl;
  action_desc = other271.action_desc;
}
netbufferv4_access_cm4_tbl_entry_desc_t& netbufferv4_access_cm4_tbl_entry_desc_t::operator=(const netbufferv4_access_cm4_tbl_entry_desc_t& other272) {
  match_spec = other272.match_spec;
  has_mbr_hdl = other272.has_mbr_hdl;
  has_grp_hdl = other272.has_grp_hdl;
  selector_grp_hdl = other272.selector_grp_hdl;
  action_mbr_hdl = other272.action_mbr_hdl;
  action_desc = other272.action_desc;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_access_cm4_tbl_entry_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_access_cm4_tbl_entry_desc_t(";
  out << "match_spec=" << to_string(obj.match_spec);
  out << ", " << "has_mbr_hdl=" << to_string(obj.has_mbr_hdl);
  out << ", " << "has_grp_hdl=" << to_string(obj.has_grp_hdl);
  out << ", " << "selector_grp_hdl=" << to_string(obj.selector_grp_hdl);
  out << ", " << "action_mbr_hdl=" << to_string(obj.action_mbr_hdl);
  out << ", " << "action_desc=" << to_string(obj.action_desc);
  out << ")";
  return out;
}


netbufferv4_access_deleted_tbl_entry_desc_t::~netbufferv4_access_deleted_tbl_entry_desc_t() throw() {
}


void netbufferv4_access_deleted_tbl_entry_desc_t::__set_match_spec(const netbufferv4_access_deleted_tbl_match_spec_t& val) {
  this->match_spec = val;
}

void netbufferv4_access_deleted_tbl_entry_desc_t::__set_has_mbr_hdl(const bool val) {
  this->has_mbr_hdl = val;
}

void netbufferv4_access_deleted_tbl_entry_desc_t::__set_has_grp_hdl(const bool val) {
  this->has_grp_hdl = val;
}

void netbufferv4_access_deleted_tbl_entry_desc_t::__set_selector_grp_hdl(const MemberHandle_t val) {
  this->selector_grp_hdl = val;
}

void netbufferv4_access_deleted_tbl_entry_desc_t::__set_action_mbr_hdl(const MemberHandle_t val) {
  this->action_mbr_hdl = val;
}

void netbufferv4_access_deleted_tbl_entry_desc_t::__set_action_desc(const netbufferv4_action_desc_t& val) {
  this->action_desc = val;
}

const char* netbufferv4_access_deleted_tbl_entry_desc_t::ascii_fingerprint = "75CC33AFCD5426C59CE364FA8987CA99";
const uint8_t netbufferv4_access_deleted_tbl_entry_desc_t::binary_fingerprint[16] = {0x75,0xCC,0x33,0xAF,0xCD,0x54,0x26,0xC5,0x9C,0xE3,0x64,0xFA,0x89,0x87,0xCA,0x99};

uint32_t netbufferv4_access_deleted_tbl_entry_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match_spec = false;
  bool isset_has_mbr_hdl = false;
  bool isset_has_grp_hdl = false;
  bool isset_selector_grp_hdl = false;
  bool isset_action_mbr_hdl = false;
  bool isset_action_desc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->match_spec.read(iprot);
          isset_match_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_mbr_hdl);
          isset_has_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_grp_hdl);
          isset_has_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->selector_grp_hdl);
          isset_selector_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_mbr_hdl);
          isset_action_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_desc.read(iprot);
          isset_action_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selector_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_access_deleted_tbl_entry_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_access_deleted_tbl_entry_desc_t");

  xfer += oprot->writeFieldBegin("match_spec", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->match_spec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_mbr_hdl", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_grp_hdl", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selector_grp_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->selector_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_mbr_hdl", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->action_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_desc", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->action_desc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_access_deleted_tbl_entry_desc_t &a, netbufferv4_access_deleted_tbl_entry_desc_t &b) {
  using ::std::swap;
  swap(a.match_spec, b.match_spec);
  swap(a.has_mbr_hdl, b.has_mbr_hdl);
  swap(a.has_grp_hdl, b.has_grp_hdl);
  swap(a.selector_grp_hdl, b.selector_grp_hdl);
  swap(a.action_mbr_hdl, b.action_mbr_hdl);
  swap(a.action_desc, b.action_desc);
}

netbufferv4_access_deleted_tbl_entry_desc_t::netbufferv4_access_deleted_tbl_entry_desc_t(const netbufferv4_access_deleted_tbl_entry_desc_t& other273) {
  match_spec = other273.match_spec;
  has_mbr_hdl = other273.has_mbr_hdl;
  has_grp_hdl = other273.has_grp_hdl;
  selector_grp_hdl = other273.selector_grp_hdl;
  action_mbr_hdl = other273.action_mbr_hdl;
  action_desc = other273.action_desc;
}
netbufferv4_access_deleted_tbl_entry_desc_t& netbufferv4_access_deleted_tbl_entry_desc_t::operator=(const netbufferv4_access_deleted_tbl_entry_desc_t& other274) {
  match_spec = other274.match_spec;
  has_mbr_hdl = other274.has_mbr_hdl;
  has_grp_hdl = other274.has_grp_hdl;
  selector_grp_hdl = other274.selector_grp_hdl;
  action_mbr_hdl = other274.action_mbr_hdl;
  action_desc = other274.action_desc;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_access_deleted_tbl_entry_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_access_deleted_tbl_entry_desc_t(";
  out << "match_spec=" << to_string(obj.match_spec);
  out << ", " << "has_mbr_hdl=" << to_string(obj.has_mbr_hdl);
  out << ", " << "has_grp_hdl=" << to_string(obj.has_grp_hdl);
  out << ", " << "selector_grp_hdl=" << to_string(obj.selector_grp_hdl);
  out << ", " << "action_mbr_hdl=" << to_string(obj.action_mbr_hdl);
  out << ", " << "action_desc=" << to_string(obj.action_desc);
  out << ")";
  return out;
}


netbufferv4_access_latest_tbl_entry_desc_t::~netbufferv4_access_latest_tbl_entry_desc_t() throw() {
}


void netbufferv4_access_latest_tbl_entry_desc_t::__set_match_spec(const netbufferv4_access_latest_tbl_match_spec_t& val) {
  this->match_spec = val;
}

void netbufferv4_access_latest_tbl_entry_desc_t::__set_has_mbr_hdl(const bool val) {
  this->has_mbr_hdl = val;
}

void netbufferv4_access_latest_tbl_entry_desc_t::__set_has_grp_hdl(const bool val) {
  this->has_grp_hdl = val;
}

void netbufferv4_access_latest_tbl_entry_desc_t::__set_selector_grp_hdl(const MemberHandle_t val) {
  this->selector_grp_hdl = val;
}

void netbufferv4_access_latest_tbl_entry_desc_t::__set_action_mbr_hdl(const MemberHandle_t val) {
  this->action_mbr_hdl = val;
}

void netbufferv4_access_latest_tbl_entry_desc_t::__set_action_desc(const netbufferv4_action_desc_t& val) {
  this->action_desc = val;
}

const char* netbufferv4_access_latest_tbl_entry_desc_t::ascii_fingerprint = "A4025832D601E3E797B0D6FC1E9961D1";
const uint8_t netbufferv4_access_latest_tbl_entry_desc_t::binary_fingerprint[16] = {0xA4,0x02,0x58,0x32,0xD6,0x01,0xE3,0xE7,0x97,0xB0,0xD6,0xFC,0x1E,0x99,0x61,0xD1};

uint32_t netbufferv4_access_latest_tbl_entry_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match_spec = false;
  bool isset_has_mbr_hdl = false;
  bool isset_has_grp_hdl = false;
  bool isset_selector_grp_hdl = false;
  bool isset_action_mbr_hdl = false;
  bool isset_action_desc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->match_spec.read(iprot);
          isset_match_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_mbr_hdl);
          isset_has_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_grp_hdl);
          isset_has_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->selector_grp_hdl);
          isset_selector_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_mbr_hdl);
          isset_action_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_desc.read(iprot);
          isset_action_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selector_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_access_latest_tbl_entry_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_access_latest_tbl_entry_desc_t");

  xfer += oprot->writeFieldBegin("match_spec", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->match_spec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_mbr_hdl", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_grp_hdl", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selector_grp_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->selector_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_mbr_hdl", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->action_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_desc", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->action_desc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_access_latest_tbl_entry_desc_t &a, netbufferv4_access_latest_tbl_entry_desc_t &b) {
  using ::std::swap;
  swap(a.match_spec, b.match_spec);
  swap(a.has_mbr_hdl, b.has_mbr_hdl);
  swap(a.has_grp_hdl, b.has_grp_hdl);
  swap(a.selector_grp_hdl, b.selector_grp_hdl);
  swap(a.action_mbr_hdl, b.action_mbr_hdl);
  swap(a.action_desc, b.action_desc);
}

netbufferv4_access_latest_tbl_entry_desc_t::netbufferv4_access_latest_tbl_entry_desc_t(const netbufferv4_access_latest_tbl_entry_desc_t& other275) {
  match_spec = other275.match_spec;
  has_mbr_hdl = other275.has_mbr_hdl;
  has_grp_hdl = other275.has_grp_hdl;
  selector_grp_hdl = other275.selector_grp_hdl;
  action_mbr_hdl = other275.action_mbr_hdl;
  action_desc = other275.action_desc;
}
netbufferv4_access_latest_tbl_entry_desc_t& netbufferv4_access_latest_tbl_entry_desc_t::operator=(const netbufferv4_access_latest_tbl_entry_desc_t& other276) {
  match_spec = other276.match_spec;
  has_mbr_hdl = other276.has_mbr_hdl;
  has_grp_hdl = other276.has_grp_hdl;
  selector_grp_hdl = other276.selector_grp_hdl;
  action_mbr_hdl = other276.action_mbr_hdl;
  action_desc = other276.action_desc;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_access_latest_tbl_entry_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_access_latest_tbl_entry_desc_t(";
  out << "match_spec=" << to_string(obj.match_spec);
  out << ", " << "has_mbr_hdl=" << to_string(obj.has_mbr_hdl);
  out << ", " << "has_grp_hdl=" << to_string(obj.has_grp_hdl);
  out << ", " << "selector_grp_hdl=" << to_string(obj.selector_grp_hdl);
  out << ", " << "action_mbr_hdl=" << to_string(obj.action_mbr_hdl);
  out << ", " << "action_desc=" << to_string(obj.action_desc);
  out << ")";
  return out;
}


netbufferv4_access_savedseq_tbl_entry_desc_t::~netbufferv4_access_savedseq_tbl_entry_desc_t() throw() {
}


void netbufferv4_access_savedseq_tbl_entry_desc_t::__set_match_spec(const netbufferv4_access_savedseq_tbl_match_spec_t& val) {
  this->match_spec = val;
}

void netbufferv4_access_savedseq_tbl_entry_desc_t::__set_has_mbr_hdl(const bool val) {
  this->has_mbr_hdl = val;
}

void netbufferv4_access_savedseq_tbl_entry_desc_t::__set_has_grp_hdl(const bool val) {
  this->has_grp_hdl = val;
}

void netbufferv4_access_savedseq_tbl_entry_desc_t::__set_selector_grp_hdl(const MemberHandle_t val) {
  this->selector_grp_hdl = val;
}

void netbufferv4_access_savedseq_tbl_entry_desc_t::__set_action_mbr_hdl(const MemberHandle_t val) {
  this->action_mbr_hdl = val;
}

void netbufferv4_access_savedseq_tbl_entry_desc_t::__set_action_desc(const netbufferv4_action_desc_t& val) {
  this->action_desc = val;
}

const char* netbufferv4_access_savedseq_tbl_entry_desc_t::ascii_fingerprint = "75CC33AFCD5426C59CE364FA8987CA99";
const uint8_t netbufferv4_access_savedseq_tbl_entry_desc_t::binary_fingerprint[16] = {0x75,0xCC,0x33,0xAF,0xCD,0x54,0x26,0xC5,0x9C,0xE3,0x64,0xFA,0x89,0x87,0xCA,0x99};

uint32_t netbufferv4_access_savedseq_tbl_entry_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match_spec = false;
  bool isset_has_mbr_hdl = false;
  bool isset_has_grp_hdl = false;
  bool isset_selector_grp_hdl = false;
  bool isset_action_mbr_hdl = false;
  bool isset_action_desc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->match_spec.read(iprot);
          isset_match_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_mbr_hdl);
          isset_has_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_grp_hdl);
          isset_has_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->selector_grp_hdl);
          isset_selector_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_mbr_hdl);
          isset_action_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_desc.read(iprot);
          isset_action_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selector_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_access_savedseq_tbl_entry_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_access_savedseq_tbl_entry_desc_t");

  xfer += oprot->writeFieldBegin("match_spec", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->match_spec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_mbr_hdl", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_grp_hdl", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selector_grp_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->selector_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_mbr_hdl", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->action_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_desc", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->action_desc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_access_savedseq_tbl_entry_desc_t &a, netbufferv4_access_savedseq_tbl_entry_desc_t &b) {
  using ::std::swap;
  swap(a.match_spec, b.match_spec);
  swap(a.has_mbr_hdl, b.has_mbr_hdl);
  swap(a.has_grp_hdl, b.has_grp_hdl);
  swap(a.selector_grp_hdl, b.selector_grp_hdl);
  swap(a.action_mbr_hdl, b.action_mbr_hdl);
  swap(a.action_desc, b.action_desc);
}

netbufferv4_access_savedseq_tbl_entry_desc_t::netbufferv4_access_savedseq_tbl_entry_desc_t(const netbufferv4_access_savedseq_tbl_entry_desc_t& other277) {
  match_spec = other277.match_spec;
  has_mbr_hdl = other277.has_mbr_hdl;
  has_grp_hdl = other277.has_grp_hdl;
  selector_grp_hdl = other277.selector_grp_hdl;
  action_mbr_hdl = other277.action_mbr_hdl;
  action_desc = other277.action_desc;
}
netbufferv4_access_savedseq_tbl_entry_desc_t& netbufferv4_access_savedseq_tbl_entry_desc_t::operator=(const netbufferv4_access_savedseq_tbl_entry_desc_t& other278) {
  match_spec = other278.match_spec;
  has_mbr_hdl = other278.has_mbr_hdl;
  has_grp_hdl = other278.has_grp_hdl;
  selector_grp_hdl = other278.selector_grp_hdl;
  action_mbr_hdl = other278.action_mbr_hdl;
  action_desc = other278.action_desc;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_access_savedseq_tbl_entry_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_access_savedseq_tbl_entry_desc_t(";
  out << "match_spec=" << to_string(obj.match_spec);
  out << ", " << "has_mbr_hdl=" << to_string(obj.has_mbr_hdl);
  out << ", " << "has_grp_hdl=" << to_string(obj.has_grp_hdl);
  out << ", " << "selector_grp_hdl=" << to_string(obj.selector_grp_hdl);
  out << ", " << "action_mbr_hdl=" << to_string(obj.action_mbr_hdl);
  out << ", " << "action_desc=" << to_string(obj.action_desc);
  out << ")";
  return out;
}


netbufferv4_access_seq_tbl_entry_desc_t::~netbufferv4_access_seq_tbl_entry_desc_t() throw() {
}


void netbufferv4_access_seq_tbl_entry_desc_t::__set_match_spec(const netbufferv4_access_seq_tbl_match_spec_t& val) {
  this->match_spec = val;
}

void netbufferv4_access_seq_tbl_entry_desc_t::__set_has_mbr_hdl(const bool val) {
  this->has_mbr_hdl = val;
}

void netbufferv4_access_seq_tbl_entry_desc_t::__set_has_grp_hdl(const bool val) {
  this->has_grp_hdl = val;
}

void netbufferv4_access_seq_tbl_entry_desc_t::__set_selector_grp_hdl(const MemberHandle_t val) {
  this->selector_grp_hdl = val;
}

void netbufferv4_access_seq_tbl_entry_desc_t::__set_action_mbr_hdl(const MemberHandle_t val) {
  this->action_mbr_hdl = val;
}

void netbufferv4_access_seq_tbl_entry_desc_t::__set_action_desc(const netbufferv4_action_desc_t& val) {
  this->action_desc = val;
}

const char* netbufferv4_access_seq_tbl_entry_desc_t::ascii_fingerprint = "10D8F3C7D2E0D97B5ECBCEF50AA9D98F";
const uint8_t netbufferv4_access_seq_tbl_entry_desc_t::binary_fingerprint[16] = {0x10,0xD8,0xF3,0xC7,0xD2,0xE0,0xD9,0x7B,0x5E,0xCB,0xCE,0xF5,0x0A,0xA9,0xD9,0x8F};

uint32_t netbufferv4_access_seq_tbl_entry_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match_spec = false;
  bool isset_has_mbr_hdl = false;
  bool isset_has_grp_hdl = false;
  bool isset_selector_grp_hdl = false;
  bool isset_action_mbr_hdl = false;
  bool isset_action_desc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->match_spec.read(iprot);
          isset_match_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_mbr_hdl);
          isset_has_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_grp_hdl);
          isset_has_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->selector_grp_hdl);
          isset_selector_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_mbr_hdl);
          isset_action_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_desc.read(iprot);
          isset_action_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selector_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_access_seq_tbl_entry_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_access_seq_tbl_entry_desc_t");

  xfer += oprot->writeFieldBegin("match_spec", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->match_spec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_mbr_hdl", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_grp_hdl", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selector_grp_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->selector_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_mbr_hdl", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->action_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_desc", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->action_desc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_access_seq_tbl_entry_desc_t &a, netbufferv4_access_seq_tbl_entry_desc_t &b) {
  using ::std::swap;
  swap(a.match_spec, b.match_spec);
  swap(a.has_mbr_hdl, b.has_mbr_hdl);
  swap(a.has_grp_hdl, b.has_grp_hdl);
  swap(a.selector_grp_hdl, b.selector_grp_hdl);
  swap(a.action_mbr_hdl, b.action_mbr_hdl);
  swap(a.action_desc, b.action_desc);
}

netbufferv4_access_seq_tbl_entry_desc_t::netbufferv4_access_seq_tbl_entry_desc_t(const netbufferv4_access_seq_tbl_entry_desc_t& other279) {
  match_spec = other279.match_spec;
  has_mbr_hdl = other279.has_mbr_hdl;
  has_grp_hdl = other279.has_grp_hdl;
  selector_grp_hdl = other279.selector_grp_hdl;
  action_mbr_hdl = other279.action_mbr_hdl;
  action_desc = other279.action_desc;
}
netbufferv4_access_seq_tbl_entry_desc_t& netbufferv4_access_seq_tbl_entry_desc_t::operator=(const netbufferv4_access_seq_tbl_entry_desc_t& other280) {
  match_spec = other280.match_spec;
  has_mbr_hdl = other280.has_mbr_hdl;
  has_grp_hdl = other280.has_grp_hdl;
  selector_grp_hdl = other280.selector_grp_hdl;
  action_mbr_hdl = other280.action_mbr_hdl;
  action_desc = other280.action_desc;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_access_seq_tbl_entry_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_access_seq_tbl_entry_desc_t(";
  out << "match_spec=" << to_string(obj.match_spec);
  out << ", " << "has_mbr_hdl=" << to_string(obj.has_mbr_hdl);
  out << ", " << "has_grp_hdl=" << to_string(obj.has_grp_hdl);
  out << ", " << "selector_grp_hdl=" << to_string(obj.selector_grp_hdl);
  out << ", " << "action_mbr_hdl=" << to_string(obj.action_mbr_hdl);
  out << ", " << "action_desc=" << to_string(obj.action_desc);
  out << ")";
  return out;
}


netbufferv4_access_validvalue_tbl_entry_desc_t::~netbufferv4_access_validvalue_tbl_entry_desc_t() throw() {
}


void netbufferv4_access_validvalue_tbl_entry_desc_t::__set_match_spec(const netbufferv4_access_validvalue_tbl_match_spec_t& val) {
  this->match_spec = val;
}

void netbufferv4_access_validvalue_tbl_entry_desc_t::__set_has_mbr_hdl(const bool val) {
  this->has_mbr_hdl = val;
}

void netbufferv4_access_validvalue_tbl_entry_desc_t::__set_has_grp_hdl(const bool val) {
  this->has_grp_hdl = val;
}

void netbufferv4_access_validvalue_tbl_entry_desc_t::__set_selector_grp_hdl(const MemberHandle_t val) {
  this->selector_grp_hdl = val;
}

void netbufferv4_access_validvalue_tbl_entry_desc_t::__set_action_mbr_hdl(const MemberHandle_t val) {
  this->action_mbr_hdl = val;
}

void netbufferv4_access_validvalue_tbl_entry_desc_t::__set_action_desc(const netbufferv4_action_desc_t& val) {
  this->action_desc = val;
}

const char* netbufferv4_access_validvalue_tbl_entry_desc_t::ascii_fingerprint = "84FBB469A2D7D4549BE1BB5FAE93BF03";
const uint8_t netbufferv4_access_validvalue_tbl_entry_desc_t::binary_fingerprint[16] = {0x84,0xFB,0xB4,0x69,0xA2,0xD7,0xD4,0x54,0x9B,0xE1,0xBB,0x5F,0xAE,0x93,0xBF,0x03};

uint32_t netbufferv4_access_validvalue_tbl_entry_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match_spec = false;
  bool isset_has_mbr_hdl = false;
  bool isset_has_grp_hdl = false;
  bool isset_selector_grp_hdl = false;
  bool isset_action_mbr_hdl = false;
  bool isset_action_desc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->match_spec.read(iprot);
          isset_match_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_mbr_hdl);
          isset_has_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_grp_hdl);
          isset_has_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->selector_grp_hdl);
          isset_selector_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_mbr_hdl);
          isset_action_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_desc.read(iprot);
          isset_action_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selector_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_access_validvalue_tbl_entry_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_access_validvalue_tbl_entry_desc_t");

  xfer += oprot->writeFieldBegin("match_spec", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->match_spec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_mbr_hdl", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_grp_hdl", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selector_grp_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->selector_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_mbr_hdl", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->action_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_desc", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->action_desc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_access_validvalue_tbl_entry_desc_t &a, netbufferv4_access_validvalue_tbl_entry_desc_t &b) {
  using ::std::swap;
  swap(a.match_spec, b.match_spec);
  swap(a.has_mbr_hdl, b.has_mbr_hdl);
  swap(a.has_grp_hdl, b.has_grp_hdl);
  swap(a.selector_grp_hdl, b.selector_grp_hdl);
  swap(a.action_mbr_hdl, b.action_mbr_hdl);
  swap(a.action_desc, b.action_desc);
}

netbufferv4_access_validvalue_tbl_entry_desc_t::netbufferv4_access_validvalue_tbl_entry_desc_t(const netbufferv4_access_validvalue_tbl_entry_desc_t& other281) {
  match_spec = other281.match_spec;
  has_mbr_hdl = other281.has_mbr_hdl;
  has_grp_hdl = other281.has_grp_hdl;
  selector_grp_hdl = other281.selector_grp_hdl;
  action_mbr_hdl = other281.action_mbr_hdl;
  action_desc = other281.action_desc;
}
netbufferv4_access_validvalue_tbl_entry_desc_t& netbufferv4_access_validvalue_tbl_entry_desc_t::operator=(const netbufferv4_access_validvalue_tbl_entry_desc_t& other282) {
  match_spec = other282.match_spec;
  has_mbr_hdl = other282.has_mbr_hdl;
  has_grp_hdl = other282.has_grp_hdl;
  selector_grp_hdl = other282.selector_grp_hdl;
  action_mbr_hdl = other282.action_mbr_hdl;
  action_desc = other282.action_desc;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_access_validvalue_tbl_entry_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_access_validvalue_tbl_entry_desc_t(";
  out << "match_spec=" << to_string(obj.match_spec);
  out << ", " << "has_mbr_hdl=" << to_string(obj.has_mbr_hdl);
  out << ", " << "has_grp_hdl=" << to_string(obj.has_grp_hdl);
  out << ", " << "selector_grp_hdl=" << to_string(obj.selector_grp_hdl);
  out << ", " << "action_mbr_hdl=" << to_string(obj.action_mbr_hdl);
  out << ", " << "action_desc=" << to_string(obj.action_desc);
  out << ")";
  return out;
}


netbufferv4_add_and_remove_value_header_tbl_entry_desc_t::~netbufferv4_add_and_remove_value_header_tbl_entry_desc_t() throw() {
}


void netbufferv4_add_and_remove_value_header_tbl_entry_desc_t::__set_match_spec(const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& val) {
  this->match_spec = val;
}

void netbufferv4_add_and_remove_value_header_tbl_entry_desc_t::__set_has_mbr_hdl(const bool val) {
  this->has_mbr_hdl = val;
}

void netbufferv4_add_and_remove_value_header_tbl_entry_desc_t::__set_has_grp_hdl(const bool val) {
  this->has_grp_hdl = val;
}

void netbufferv4_add_and_remove_value_header_tbl_entry_desc_t::__set_selector_grp_hdl(const MemberHandle_t val) {
  this->selector_grp_hdl = val;
}

void netbufferv4_add_and_remove_value_header_tbl_entry_desc_t::__set_action_mbr_hdl(const MemberHandle_t val) {
  this->action_mbr_hdl = val;
}

void netbufferv4_add_and_remove_value_header_tbl_entry_desc_t::__set_priority(const int32_t val) {
  this->priority = val;
}

void netbufferv4_add_and_remove_value_header_tbl_entry_desc_t::__set_action_desc(const netbufferv4_action_desc_t& val) {
  this->action_desc = val;
}

const char* netbufferv4_add_and_remove_value_header_tbl_entry_desc_t::ascii_fingerprint = "80E166D05391A70858FD2C7A7C8A9987";
const uint8_t netbufferv4_add_and_remove_value_header_tbl_entry_desc_t::binary_fingerprint[16] = {0x80,0xE1,0x66,0xD0,0x53,0x91,0xA7,0x08,0x58,0xFD,0x2C,0x7A,0x7C,0x8A,0x99,0x87};

uint32_t netbufferv4_add_and_remove_value_header_tbl_entry_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match_spec = false;
  bool isset_has_mbr_hdl = false;
  bool isset_has_grp_hdl = false;
  bool isset_selector_grp_hdl = false;
  bool isset_action_mbr_hdl = false;
  bool isset_priority = false;
  bool isset_action_desc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->match_spec.read(iprot);
          isset_match_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_mbr_hdl);
          isset_has_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_grp_hdl);
          isset_has_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->selector_grp_hdl);
          isset_selector_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_mbr_hdl);
          isset_action_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->priority);
          isset_priority = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_desc.read(iprot);
          isset_action_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selector_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_priority)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_add_and_remove_value_header_tbl_entry_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_add_and_remove_value_header_tbl_entry_desc_t");

  xfer += oprot->writeFieldBegin("match_spec", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->match_spec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_mbr_hdl", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_grp_hdl", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selector_grp_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->selector_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_mbr_hdl", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->action_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("priority", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->priority);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_desc", ::apache::thrift::protocol::T_STRUCT, 7);
  xfer += this->action_desc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_add_and_remove_value_header_tbl_entry_desc_t &a, netbufferv4_add_and_remove_value_header_tbl_entry_desc_t &b) {
  using ::std::swap;
  swap(a.match_spec, b.match_spec);
  swap(a.has_mbr_hdl, b.has_mbr_hdl);
  swap(a.has_grp_hdl, b.has_grp_hdl);
  swap(a.selector_grp_hdl, b.selector_grp_hdl);
  swap(a.action_mbr_hdl, b.action_mbr_hdl);
  swap(a.priority, b.priority);
  swap(a.action_desc, b.action_desc);
}

netbufferv4_add_and_remove_value_header_tbl_entry_desc_t::netbufferv4_add_and_remove_value_header_tbl_entry_desc_t(const netbufferv4_add_and_remove_value_header_tbl_entry_desc_t& other283) {
  match_spec = other283.match_spec;
  has_mbr_hdl = other283.has_mbr_hdl;
  has_grp_hdl = other283.has_grp_hdl;
  selector_grp_hdl = other283.selector_grp_hdl;
  action_mbr_hdl = other283.action_mbr_hdl;
  priority = other283.priority;
  action_desc = other283.action_desc;
}
netbufferv4_add_and_remove_value_header_tbl_entry_desc_t& netbufferv4_add_and_remove_value_header_tbl_entry_desc_t::operator=(const netbufferv4_add_and_remove_value_header_tbl_entry_desc_t& other284) {
  match_spec = other284.match_spec;
  has_mbr_hdl = other284.has_mbr_hdl;
  has_grp_hdl = other284.has_grp_hdl;
  selector_grp_hdl = other284.selector_grp_hdl;
  action_mbr_hdl = other284.action_mbr_hdl;
  priority = other284.priority;
  action_desc = other284.action_desc;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_add_and_remove_value_header_tbl_entry_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_add_and_remove_value_header_tbl_entry_desc_t(";
  out << "match_spec=" << to_string(obj.match_spec);
  out << ", " << "has_mbr_hdl=" << to_string(obj.has_mbr_hdl);
  out << ", " << "has_grp_hdl=" << to_string(obj.has_grp_hdl);
  out << ", " << "selector_grp_hdl=" << to_string(obj.selector_grp_hdl);
  out << ", " << "action_mbr_hdl=" << to_string(obj.action_mbr_hdl);
  out << ", " << "priority=" << to_string(obj.priority);
  out << ", " << "action_desc=" << to_string(obj.action_desc);
  out << ")";
  return out;
}


netbufferv4_cache_lookup_tbl_entry_desc_t::~netbufferv4_cache_lookup_tbl_entry_desc_t() throw() {
}


void netbufferv4_cache_lookup_tbl_entry_desc_t::__set_match_spec(const netbufferv4_cache_lookup_tbl_match_spec_t& val) {
  this->match_spec = val;
}

void netbufferv4_cache_lookup_tbl_entry_desc_t::__set_has_mbr_hdl(const bool val) {
  this->has_mbr_hdl = val;
}

void netbufferv4_cache_lookup_tbl_entry_desc_t::__set_has_grp_hdl(const bool val) {
  this->has_grp_hdl = val;
}

void netbufferv4_cache_lookup_tbl_entry_desc_t::__set_selector_grp_hdl(const MemberHandle_t val) {
  this->selector_grp_hdl = val;
}

void netbufferv4_cache_lookup_tbl_entry_desc_t::__set_action_mbr_hdl(const MemberHandle_t val) {
  this->action_mbr_hdl = val;
}

void netbufferv4_cache_lookup_tbl_entry_desc_t::__set_action_desc(const netbufferv4_action_desc_t& val) {
  this->action_desc = val;
}

const char* netbufferv4_cache_lookup_tbl_entry_desc_t::ascii_fingerprint = "C878A5F9DEA57CE2120CC99F35F6BF3A";
const uint8_t netbufferv4_cache_lookup_tbl_entry_desc_t::binary_fingerprint[16] = {0xC8,0x78,0xA5,0xF9,0xDE,0xA5,0x7C,0xE2,0x12,0x0C,0xC9,0x9F,0x35,0xF6,0xBF,0x3A};

uint32_t netbufferv4_cache_lookup_tbl_entry_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match_spec = false;
  bool isset_has_mbr_hdl = false;
  bool isset_has_grp_hdl = false;
  bool isset_selector_grp_hdl = false;
  bool isset_action_mbr_hdl = false;
  bool isset_action_desc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->match_spec.read(iprot);
          isset_match_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_mbr_hdl);
          isset_has_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_grp_hdl);
          isset_has_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->selector_grp_hdl);
          isset_selector_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_mbr_hdl);
          isset_action_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_desc.read(iprot);
          isset_action_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selector_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_cache_lookup_tbl_entry_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_cache_lookup_tbl_entry_desc_t");

  xfer += oprot->writeFieldBegin("match_spec", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->match_spec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_mbr_hdl", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_grp_hdl", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selector_grp_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->selector_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_mbr_hdl", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->action_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_desc", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->action_desc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_cache_lookup_tbl_entry_desc_t &a, netbufferv4_cache_lookup_tbl_entry_desc_t &b) {
  using ::std::swap;
  swap(a.match_spec, b.match_spec);
  swap(a.has_mbr_hdl, b.has_mbr_hdl);
  swap(a.has_grp_hdl, b.has_grp_hdl);
  swap(a.selector_grp_hdl, b.selector_grp_hdl);
  swap(a.action_mbr_hdl, b.action_mbr_hdl);
  swap(a.action_desc, b.action_desc);
}

netbufferv4_cache_lookup_tbl_entry_desc_t::netbufferv4_cache_lookup_tbl_entry_desc_t(const netbufferv4_cache_lookup_tbl_entry_desc_t& other285) {
  match_spec = other285.match_spec;
  has_mbr_hdl = other285.has_mbr_hdl;
  has_grp_hdl = other285.has_grp_hdl;
  selector_grp_hdl = other285.selector_grp_hdl;
  action_mbr_hdl = other285.action_mbr_hdl;
  action_desc = other285.action_desc;
}
netbufferv4_cache_lookup_tbl_entry_desc_t& netbufferv4_cache_lookup_tbl_entry_desc_t::operator=(const netbufferv4_cache_lookup_tbl_entry_desc_t& other286) {
  match_spec = other286.match_spec;
  has_mbr_hdl = other286.has_mbr_hdl;
  has_grp_hdl = other286.has_grp_hdl;
  selector_grp_hdl = other286.selector_grp_hdl;
  action_mbr_hdl = other286.action_mbr_hdl;
  action_desc = other286.action_desc;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_cache_lookup_tbl_entry_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_cache_lookup_tbl_entry_desc_t(";
  out << "match_spec=" << to_string(obj.match_spec);
  out << ", " << "has_mbr_hdl=" << to_string(obj.has_mbr_hdl);
  out << ", " << "has_grp_hdl=" << to_string(obj.has_grp_hdl);
  out << ", " << "selector_grp_hdl=" << to_string(obj.selector_grp_hdl);
  out << ", " << "action_mbr_hdl=" << to_string(obj.action_mbr_hdl);
  out << ", " << "action_desc=" << to_string(obj.action_desc);
  out << ")";
  return out;
}


netbufferv4_drop_tbl_entry_desc_t::~netbufferv4_drop_tbl_entry_desc_t() throw() {
}


void netbufferv4_drop_tbl_entry_desc_t::__set_match_spec(const netbufferv4_drop_tbl_match_spec_t& val) {
  this->match_spec = val;
}

void netbufferv4_drop_tbl_entry_desc_t::__set_has_mbr_hdl(const bool val) {
  this->has_mbr_hdl = val;
}

void netbufferv4_drop_tbl_entry_desc_t::__set_has_grp_hdl(const bool val) {
  this->has_grp_hdl = val;
}

void netbufferv4_drop_tbl_entry_desc_t::__set_selector_grp_hdl(const MemberHandle_t val) {
  this->selector_grp_hdl = val;
}

void netbufferv4_drop_tbl_entry_desc_t::__set_action_mbr_hdl(const MemberHandle_t val) {
  this->action_mbr_hdl = val;
}

void netbufferv4_drop_tbl_entry_desc_t::__set_action_desc(const netbufferv4_action_desc_t& val) {
  this->action_desc = val;
}

const char* netbufferv4_drop_tbl_entry_desc_t::ascii_fingerprint = "10D8F3C7D2E0D97B5ECBCEF50AA9D98F";
const uint8_t netbufferv4_drop_tbl_entry_desc_t::binary_fingerprint[16] = {0x10,0xD8,0xF3,0xC7,0xD2,0xE0,0xD9,0x7B,0x5E,0xCB,0xCE,0xF5,0x0A,0xA9,0xD9,0x8F};

uint32_t netbufferv4_drop_tbl_entry_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match_spec = false;
  bool isset_has_mbr_hdl = false;
  bool isset_has_grp_hdl = false;
  bool isset_selector_grp_hdl = false;
  bool isset_action_mbr_hdl = false;
  bool isset_action_desc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->match_spec.read(iprot);
          isset_match_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_mbr_hdl);
          isset_has_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_grp_hdl);
          isset_has_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->selector_grp_hdl);
          isset_selector_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_mbr_hdl);
          isset_action_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_desc.read(iprot);
          isset_action_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selector_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_drop_tbl_entry_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_drop_tbl_entry_desc_t");

  xfer += oprot->writeFieldBegin("match_spec", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->match_spec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_mbr_hdl", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_grp_hdl", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selector_grp_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->selector_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_mbr_hdl", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->action_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_desc", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->action_desc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_drop_tbl_entry_desc_t &a, netbufferv4_drop_tbl_entry_desc_t &b) {
  using ::std::swap;
  swap(a.match_spec, b.match_spec);
  swap(a.has_mbr_hdl, b.has_mbr_hdl);
  swap(a.has_grp_hdl, b.has_grp_hdl);
  swap(a.selector_grp_hdl, b.selector_grp_hdl);
  swap(a.action_mbr_hdl, b.action_mbr_hdl);
  swap(a.action_desc, b.action_desc);
}

netbufferv4_drop_tbl_entry_desc_t::netbufferv4_drop_tbl_entry_desc_t(const netbufferv4_drop_tbl_entry_desc_t& other287) {
  match_spec = other287.match_spec;
  has_mbr_hdl = other287.has_mbr_hdl;
  has_grp_hdl = other287.has_grp_hdl;
  selector_grp_hdl = other287.selector_grp_hdl;
  action_mbr_hdl = other287.action_mbr_hdl;
  action_desc = other287.action_desc;
}
netbufferv4_drop_tbl_entry_desc_t& netbufferv4_drop_tbl_entry_desc_t::operator=(const netbufferv4_drop_tbl_entry_desc_t& other288) {
  match_spec = other288.match_spec;
  has_mbr_hdl = other288.has_mbr_hdl;
  has_grp_hdl = other288.has_grp_hdl;
  selector_grp_hdl = other288.selector_grp_hdl;
  action_mbr_hdl = other288.action_mbr_hdl;
  action_desc = other288.action_desc;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_drop_tbl_entry_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_drop_tbl_entry_desc_t(";
  out << "match_spec=" << to_string(obj.match_spec);
  out << ", " << "has_mbr_hdl=" << to_string(obj.has_mbr_hdl);
  out << ", " << "has_grp_hdl=" << to_string(obj.has_grp_hdl);
  out << ", " << "selector_grp_hdl=" << to_string(obj.selector_grp_hdl);
  out << ", " << "action_mbr_hdl=" << to_string(obj.action_mbr_hdl);
  out << ", " << "action_desc=" << to_string(obj.action_desc);
  out << ")";
  return out;
}


netbufferv4_eg_port_forward_tbl_entry_desc_t::~netbufferv4_eg_port_forward_tbl_entry_desc_t() throw() {
}


void netbufferv4_eg_port_forward_tbl_entry_desc_t::__set_match_spec(const netbufferv4_eg_port_forward_tbl_match_spec_t& val) {
  this->match_spec = val;
}

void netbufferv4_eg_port_forward_tbl_entry_desc_t::__set_has_mbr_hdl(const bool val) {
  this->has_mbr_hdl = val;
}

void netbufferv4_eg_port_forward_tbl_entry_desc_t::__set_has_grp_hdl(const bool val) {
  this->has_grp_hdl = val;
}

void netbufferv4_eg_port_forward_tbl_entry_desc_t::__set_selector_grp_hdl(const MemberHandle_t val) {
  this->selector_grp_hdl = val;
}

void netbufferv4_eg_port_forward_tbl_entry_desc_t::__set_action_mbr_hdl(const MemberHandle_t val) {
  this->action_mbr_hdl = val;
}

void netbufferv4_eg_port_forward_tbl_entry_desc_t::__set_action_desc(const netbufferv4_action_desc_t& val) {
  this->action_desc = val;
}

const char* netbufferv4_eg_port_forward_tbl_entry_desc_t::ascii_fingerprint = "2EE5EF4182788A1695E1DBFEBB4137AB";
const uint8_t netbufferv4_eg_port_forward_tbl_entry_desc_t::binary_fingerprint[16] = {0x2E,0xE5,0xEF,0x41,0x82,0x78,0x8A,0x16,0x95,0xE1,0xDB,0xFE,0xBB,0x41,0x37,0xAB};

uint32_t netbufferv4_eg_port_forward_tbl_entry_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match_spec = false;
  bool isset_has_mbr_hdl = false;
  bool isset_has_grp_hdl = false;
  bool isset_selector_grp_hdl = false;
  bool isset_action_mbr_hdl = false;
  bool isset_action_desc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->match_spec.read(iprot);
          isset_match_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_mbr_hdl);
          isset_has_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_grp_hdl);
          isset_has_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->selector_grp_hdl);
          isset_selector_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_mbr_hdl);
          isset_action_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_desc.read(iprot);
          isset_action_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selector_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_eg_port_forward_tbl_entry_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_eg_port_forward_tbl_entry_desc_t");

  xfer += oprot->writeFieldBegin("match_spec", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->match_spec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_mbr_hdl", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_grp_hdl", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selector_grp_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->selector_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_mbr_hdl", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->action_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_desc", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->action_desc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_eg_port_forward_tbl_entry_desc_t &a, netbufferv4_eg_port_forward_tbl_entry_desc_t &b) {
  using ::std::swap;
  swap(a.match_spec, b.match_spec);
  swap(a.has_mbr_hdl, b.has_mbr_hdl);
  swap(a.has_grp_hdl, b.has_grp_hdl);
  swap(a.selector_grp_hdl, b.selector_grp_hdl);
  swap(a.action_mbr_hdl, b.action_mbr_hdl);
  swap(a.action_desc, b.action_desc);
}

netbufferv4_eg_port_forward_tbl_entry_desc_t::netbufferv4_eg_port_forward_tbl_entry_desc_t(const netbufferv4_eg_port_forward_tbl_entry_desc_t& other289) {
  match_spec = other289.match_spec;
  has_mbr_hdl = other289.has_mbr_hdl;
  has_grp_hdl = other289.has_grp_hdl;
  selector_grp_hdl = other289.selector_grp_hdl;
  action_mbr_hdl = other289.action_mbr_hdl;
  action_desc = other289.action_desc;
}
netbufferv4_eg_port_forward_tbl_entry_desc_t& netbufferv4_eg_port_forward_tbl_entry_desc_t::operator=(const netbufferv4_eg_port_forward_tbl_entry_desc_t& other290) {
  match_spec = other290.match_spec;
  has_mbr_hdl = other290.has_mbr_hdl;
  has_grp_hdl = other290.has_grp_hdl;
  selector_grp_hdl = other290.selector_grp_hdl;
  action_mbr_hdl = other290.action_mbr_hdl;
  action_desc = other290.action_desc;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_eg_port_forward_tbl_entry_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_eg_port_forward_tbl_entry_desc_t(";
  out << "match_spec=" << to_string(obj.match_spec);
  out << ", " << "has_mbr_hdl=" << to_string(obj.has_mbr_hdl);
  out << ", " << "has_grp_hdl=" << to_string(obj.has_grp_hdl);
  out << ", " << "selector_grp_hdl=" << to_string(obj.selector_grp_hdl);
  out << ", " << "action_mbr_hdl=" << to_string(obj.action_mbr_hdl);
  out << ", " << "action_desc=" << to_string(obj.action_desc);
  out << ")";
  return out;
}


netbufferv4_hash_for_cm1_tbl_entry_desc_t::~netbufferv4_hash_for_cm1_tbl_entry_desc_t() throw() {
}


void netbufferv4_hash_for_cm1_tbl_entry_desc_t::__set_match_spec(const netbufferv4_hash_for_cm1_tbl_match_spec_t& val) {
  this->match_spec = val;
}

void netbufferv4_hash_for_cm1_tbl_entry_desc_t::__set_has_mbr_hdl(const bool val) {
  this->has_mbr_hdl = val;
}

void netbufferv4_hash_for_cm1_tbl_entry_desc_t::__set_has_grp_hdl(const bool val) {
  this->has_grp_hdl = val;
}

void netbufferv4_hash_for_cm1_tbl_entry_desc_t::__set_selector_grp_hdl(const MemberHandle_t val) {
  this->selector_grp_hdl = val;
}

void netbufferv4_hash_for_cm1_tbl_entry_desc_t::__set_action_mbr_hdl(const MemberHandle_t val) {
  this->action_mbr_hdl = val;
}

void netbufferv4_hash_for_cm1_tbl_entry_desc_t::__set_action_desc(const netbufferv4_action_desc_t& val) {
  this->action_desc = val;
}

const char* netbufferv4_hash_for_cm1_tbl_entry_desc_t::ascii_fingerprint = "84FBB469A2D7D4549BE1BB5FAE93BF03";
const uint8_t netbufferv4_hash_for_cm1_tbl_entry_desc_t::binary_fingerprint[16] = {0x84,0xFB,0xB4,0x69,0xA2,0xD7,0xD4,0x54,0x9B,0xE1,0xBB,0x5F,0xAE,0x93,0xBF,0x03};

uint32_t netbufferv4_hash_for_cm1_tbl_entry_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match_spec = false;
  bool isset_has_mbr_hdl = false;
  bool isset_has_grp_hdl = false;
  bool isset_selector_grp_hdl = false;
  bool isset_action_mbr_hdl = false;
  bool isset_action_desc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->match_spec.read(iprot);
          isset_match_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_mbr_hdl);
          isset_has_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_grp_hdl);
          isset_has_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->selector_grp_hdl);
          isset_selector_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_mbr_hdl);
          isset_action_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_desc.read(iprot);
          isset_action_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selector_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_hash_for_cm1_tbl_entry_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_hash_for_cm1_tbl_entry_desc_t");

  xfer += oprot->writeFieldBegin("match_spec", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->match_spec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_mbr_hdl", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_grp_hdl", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selector_grp_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->selector_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_mbr_hdl", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->action_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_desc", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->action_desc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_hash_for_cm1_tbl_entry_desc_t &a, netbufferv4_hash_for_cm1_tbl_entry_desc_t &b) {
  using ::std::swap;
  swap(a.match_spec, b.match_spec);
  swap(a.has_mbr_hdl, b.has_mbr_hdl);
  swap(a.has_grp_hdl, b.has_grp_hdl);
  swap(a.selector_grp_hdl, b.selector_grp_hdl);
  swap(a.action_mbr_hdl, b.action_mbr_hdl);
  swap(a.action_desc, b.action_desc);
}

netbufferv4_hash_for_cm1_tbl_entry_desc_t::netbufferv4_hash_for_cm1_tbl_entry_desc_t(const netbufferv4_hash_for_cm1_tbl_entry_desc_t& other291) {
  match_spec = other291.match_spec;
  has_mbr_hdl = other291.has_mbr_hdl;
  has_grp_hdl = other291.has_grp_hdl;
  selector_grp_hdl = other291.selector_grp_hdl;
  action_mbr_hdl = other291.action_mbr_hdl;
  action_desc = other291.action_desc;
}
netbufferv4_hash_for_cm1_tbl_entry_desc_t& netbufferv4_hash_for_cm1_tbl_entry_desc_t::operator=(const netbufferv4_hash_for_cm1_tbl_entry_desc_t& other292) {
  match_spec = other292.match_spec;
  has_mbr_hdl = other292.has_mbr_hdl;
  has_grp_hdl = other292.has_grp_hdl;
  selector_grp_hdl = other292.selector_grp_hdl;
  action_mbr_hdl = other292.action_mbr_hdl;
  action_desc = other292.action_desc;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_hash_for_cm1_tbl_entry_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_hash_for_cm1_tbl_entry_desc_t(";
  out << "match_spec=" << to_string(obj.match_spec);
  out << ", " << "has_mbr_hdl=" << to_string(obj.has_mbr_hdl);
  out << ", " << "has_grp_hdl=" << to_string(obj.has_grp_hdl);
  out << ", " << "selector_grp_hdl=" << to_string(obj.selector_grp_hdl);
  out << ", " << "action_mbr_hdl=" << to_string(obj.action_mbr_hdl);
  out << ", " << "action_desc=" << to_string(obj.action_desc);
  out << ")";
  return out;
}


netbufferv4_hash_for_cm2_tbl_entry_desc_t::~netbufferv4_hash_for_cm2_tbl_entry_desc_t() throw() {
}


void netbufferv4_hash_for_cm2_tbl_entry_desc_t::__set_match_spec(const netbufferv4_hash_for_cm2_tbl_match_spec_t& val) {
  this->match_spec = val;
}

void netbufferv4_hash_for_cm2_tbl_entry_desc_t::__set_has_mbr_hdl(const bool val) {
  this->has_mbr_hdl = val;
}

void netbufferv4_hash_for_cm2_tbl_entry_desc_t::__set_has_grp_hdl(const bool val) {
  this->has_grp_hdl = val;
}

void netbufferv4_hash_for_cm2_tbl_entry_desc_t::__set_selector_grp_hdl(const MemberHandle_t val) {
  this->selector_grp_hdl = val;
}

void netbufferv4_hash_for_cm2_tbl_entry_desc_t::__set_action_mbr_hdl(const MemberHandle_t val) {
  this->action_mbr_hdl = val;
}

void netbufferv4_hash_for_cm2_tbl_entry_desc_t::__set_action_desc(const netbufferv4_action_desc_t& val) {
  this->action_desc = val;
}

const char* netbufferv4_hash_for_cm2_tbl_entry_desc_t::ascii_fingerprint = "84FBB469A2D7D4549BE1BB5FAE93BF03";
const uint8_t netbufferv4_hash_for_cm2_tbl_entry_desc_t::binary_fingerprint[16] = {0x84,0xFB,0xB4,0x69,0xA2,0xD7,0xD4,0x54,0x9B,0xE1,0xBB,0x5F,0xAE,0x93,0xBF,0x03};

uint32_t netbufferv4_hash_for_cm2_tbl_entry_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match_spec = false;
  bool isset_has_mbr_hdl = false;
  bool isset_has_grp_hdl = false;
  bool isset_selector_grp_hdl = false;
  bool isset_action_mbr_hdl = false;
  bool isset_action_desc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->match_spec.read(iprot);
          isset_match_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_mbr_hdl);
          isset_has_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_grp_hdl);
          isset_has_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->selector_grp_hdl);
          isset_selector_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_mbr_hdl);
          isset_action_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_desc.read(iprot);
          isset_action_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selector_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_hash_for_cm2_tbl_entry_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_hash_for_cm2_tbl_entry_desc_t");

  xfer += oprot->writeFieldBegin("match_spec", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->match_spec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_mbr_hdl", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_grp_hdl", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selector_grp_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->selector_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_mbr_hdl", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->action_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_desc", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->action_desc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_hash_for_cm2_tbl_entry_desc_t &a, netbufferv4_hash_for_cm2_tbl_entry_desc_t &b) {
  using ::std::swap;
  swap(a.match_spec, b.match_spec);
  swap(a.has_mbr_hdl, b.has_mbr_hdl);
  swap(a.has_grp_hdl, b.has_grp_hdl);
  swap(a.selector_grp_hdl, b.selector_grp_hdl);
  swap(a.action_mbr_hdl, b.action_mbr_hdl);
  swap(a.action_desc, b.action_desc);
}

netbufferv4_hash_for_cm2_tbl_entry_desc_t::netbufferv4_hash_for_cm2_tbl_entry_desc_t(const netbufferv4_hash_for_cm2_tbl_entry_desc_t& other293) {
  match_spec = other293.match_spec;
  has_mbr_hdl = other293.has_mbr_hdl;
  has_grp_hdl = other293.has_grp_hdl;
  selector_grp_hdl = other293.selector_grp_hdl;
  action_mbr_hdl = other293.action_mbr_hdl;
  action_desc = other293.action_desc;
}
netbufferv4_hash_for_cm2_tbl_entry_desc_t& netbufferv4_hash_for_cm2_tbl_entry_desc_t::operator=(const netbufferv4_hash_for_cm2_tbl_entry_desc_t& other294) {
  match_spec = other294.match_spec;
  has_mbr_hdl = other294.has_mbr_hdl;
  has_grp_hdl = other294.has_grp_hdl;
  selector_grp_hdl = other294.selector_grp_hdl;
  action_mbr_hdl = other294.action_mbr_hdl;
  action_desc = other294.action_desc;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_hash_for_cm2_tbl_entry_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_hash_for_cm2_tbl_entry_desc_t(";
  out << "match_spec=" << to_string(obj.match_spec);
  out << ", " << "has_mbr_hdl=" << to_string(obj.has_mbr_hdl);
  out << ", " << "has_grp_hdl=" << to_string(obj.has_grp_hdl);
  out << ", " << "selector_grp_hdl=" << to_string(obj.selector_grp_hdl);
  out << ", " << "action_mbr_hdl=" << to_string(obj.action_mbr_hdl);
  out << ", " << "action_desc=" << to_string(obj.action_desc);
  out << ")";
  return out;
}


netbufferv4_hash_for_cm3_tbl_entry_desc_t::~netbufferv4_hash_for_cm3_tbl_entry_desc_t() throw() {
}


void netbufferv4_hash_for_cm3_tbl_entry_desc_t::__set_match_spec(const netbufferv4_hash_for_cm3_tbl_match_spec_t& val) {
  this->match_spec = val;
}

void netbufferv4_hash_for_cm3_tbl_entry_desc_t::__set_has_mbr_hdl(const bool val) {
  this->has_mbr_hdl = val;
}

void netbufferv4_hash_for_cm3_tbl_entry_desc_t::__set_has_grp_hdl(const bool val) {
  this->has_grp_hdl = val;
}

void netbufferv4_hash_for_cm3_tbl_entry_desc_t::__set_selector_grp_hdl(const MemberHandle_t val) {
  this->selector_grp_hdl = val;
}

void netbufferv4_hash_for_cm3_tbl_entry_desc_t::__set_action_mbr_hdl(const MemberHandle_t val) {
  this->action_mbr_hdl = val;
}

void netbufferv4_hash_for_cm3_tbl_entry_desc_t::__set_action_desc(const netbufferv4_action_desc_t& val) {
  this->action_desc = val;
}

const char* netbufferv4_hash_for_cm3_tbl_entry_desc_t::ascii_fingerprint = "84FBB469A2D7D4549BE1BB5FAE93BF03";
const uint8_t netbufferv4_hash_for_cm3_tbl_entry_desc_t::binary_fingerprint[16] = {0x84,0xFB,0xB4,0x69,0xA2,0xD7,0xD4,0x54,0x9B,0xE1,0xBB,0x5F,0xAE,0x93,0xBF,0x03};

uint32_t netbufferv4_hash_for_cm3_tbl_entry_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match_spec = false;
  bool isset_has_mbr_hdl = false;
  bool isset_has_grp_hdl = false;
  bool isset_selector_grp_hdl = false;
  bool isset_action_mbr_hdl = false;
  bool isset_action_desc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->match_spec.read(iprot);
          isset_match_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_mbr_hdl);
          isset_has_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_grp_hdl);
          isset_has_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->selector_grp_hdl);
          isset_selector_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_mbr_hdl);
          isset_action_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_desc.read(iprot);
          isset_action_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selector_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_hash_for_cm3_tbl_entry_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_hash_for_cm3_tbl_entry_desc_t");

  xfer += oprot->writeFieldBegin("match_spec", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->match_spec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_mbr_hdl", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_grp_hdl", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selector_grp_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->selector_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_mbr_hdl", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->action_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_desc", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->action_desc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_hash_for_cm3_tbl_entry_desc_t &a, netbufferv4_hash_for_cm3_tbl_entry_desc_t &b) {
  using ::std::swap;
  swap(a.match_spec, b.match_spec);
  swap(a.has_mbr_hdl, b.has_mbr_hdl);
  swap(a.has_grp_hdl, b.has_grp_hdl);
  swap(a.selector_grp_hdl, b.selector_grp_hdl);
  swap(a.action_mbr_hdl, b.action_mbr_hdl);
  swap(a.action_desc, b.action_desc);
}

netbufferv4_hash_for_cm3_tbl_entry_desc_t::netbufferv4_hash_for_cm3_tbl_entry_desc_t(const netbufferv4_hash_for_cm3_tbl_entry_desc_t& other295) {
  match_spec = other295.match_spec;
  has_mbr_hdl = other295.has_mbr_hdl;
  has_grp_hdl = other295.has_grp_hdl;
  selector_grp_hdl = other295.selector_grp_hdl;
  action_mbr_hdl = other295.action_mbr_hdl;
  action_desc = other295.action_desc;
}
netbufferv4_hash_for_cm3_tbl_entry_desc_t& netbufferv4_hash_for_cm3_tbl_entry_desc_t::operator=(const netbufferv4_hash_for_cm3_tbl_entry_desc_t& other296) {
  match_spec = other296.match_spec;
  has_mbr_hdl = other296.has_mbr_hdl;
  has_grp_hdl = other296.has_grp_hdl;
  selector_grp_hdl = other296.selector_grp_hdl;
  action_mbr_hdl = other296.action_mbr_hdl;
  action_desc = other296.action_desc;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_hash_for_cm3_tbl_entry_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_hash_for_cm3_tbl_entry_desc_t(";
  out << "match_spec=" << to_string(obj.match_spec);
  out << ", " << "has_mbr_hdl=" << to_string(obj.has_mbr_hdl);
  out << ", " << "has_grp_hdl=" << to_string(obj.has_grp_hdl);
  out << ", " << "selector_grp_hdl=" << to_string(obj.selector_grp_hdl);
  out << ", " << "action_mbr_hdl=" << to_string(obj.action_mbr_hdl);
  out << ", " << "action_desc=" << to_string(obj.action_desc);
  out << ")";
  return out;
}


netbufferv4_hash_for_cm4_tbl_entry_desc_t::~netbufferv4_hash_for_cm4_tbl_entry_desc_t() throw() {
}


void netbufferv4_hash_for_cm4_tbl_entry_desc_t::__set_match_spec(const netbufferv4_hash_for_cm4_tbl_match_spec_t& val) {
  this->match_spec = val;
}

void netbufferv4_hash_for_cm4_tbl_entry_desc_t::__set_has_mbr_hdl(const bool val) {
  this->has_mbr_hdl = val;
}

void netbufferv4_hash_for_cm4_tbl_entry_desc_t::__set_has_grp_hdl(const bool val) {
  this->has_grp_hdl = val;
}

void netbufferv4_hash_for_cm4_tbl_entry_desc_t::__set_selector_grp_hdl(const MemberHandle_t val) {
  this->selector_grp_hdl = val;
}

void netbufferv4_hash_for_cm4_tbl_entry_desc_t::__set_action_mbr_hdl(const MemberHandle_t val) {
  this->action_mbr_hdl = val;
}

void netbufferv4_hash_for_cm4_tbl_entry_desc_t::__set_action_desc(const netbufferv4_action_desc_t& val) {
  this->action_desc = val;
}

const char* netbufferv4_hash_for_cm4_tbl_entry_desc_t::ascii_fingerprint = "84FBB469A2D7D4549BE1BB5FAE93BF03";
const uint8_t netbufferv4_hash_for_cm4_tbl_entry_desc_t::binary_fingerprint[16] = {0x84,0xFB,0xB4,0x69,0xA2,0xD7,0xD4,0x54,0x9B,0xE1,0xBB,0x5F,0xAE,0x93,0xBF,0x03};

uint32_t netbufferv4_hash_for_cm4_tbl_entry_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match_spec = false;
  bool isset_has_mbr_hdl = false;
  bool isset_has_grp_hdl = false;
  bool isset_selector_grp_hdl = false;
  bool isset_action_mbr_hdl = false;
  bool isset_action_desc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->match_spec.read(iprot);
          isset_match_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_mbr_hdl);
          isset_has_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_grp_hdl);
          isset_has_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->selector_grp_hdl);
          isset_selector_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_mbr_hdl);
          isset_action_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_desc.read(iprot);
          isset_action_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selector_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_hash_for_cm4_tbl_entry_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_hash_for_cm4_tbl_entry_desc_t");

  xfer += oprot->writeFieldBegin("match_spec", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->match_spec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_mbr_hdl", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_grp_hdl", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selector_grp_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->selector_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_mbr_hdl", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->action_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_desc", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->action_desc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_hash_for_cm4_tbl_entry_desc_t &a, netbufferv4_hash_for_cm4_tbl_entry_desc_t &b) {
  using ::std::swap;
  swap(a.match_spec, b.match_spec);
  swap(a.has_mbr_hdl, b.has_mbr_hdl);
  swap(a.has_grp_hdl, b.has_grp_hdl);
  swap(a.selector_grp_hdl, b.selector_grp_hdl);
  swap(a.action_mbr_hdl, b.action_mbr_hdl);
  swap(a.action_desc, b.action_desc);
}

netbufferv4_hash_for_cm4_tbl_entry_desc_t::netbufferv4_hash_for_cm4_tbl_entry_desc_t(const netbufferv4_hash_for_cm4_tbl_entry_desc_t& other297) {
  match_spec = other297.match_spec;
  has_mbr_hdl = other297.has_mbr_hdl;
  has_grp_hdl = other297.has_grp_hdl;
  selector_grp_hdl = other297.selector_grp_hdl;
  action_mbr_hdl = other297.action_mbr_hdl;
  action_desc = other297.action_desc;
}
netbufferv4_hash_for_cm4_tbl_entry_desc_t& netbufferv4_hash_for_cm4_tbl_entry_desc_t::operator=(const netbufferv4_hash_for_cm4_tbl_entry_desc_t& other298) {
  match_spec = other298.match_spec;
  has_mbr_hdl = other298.has_mbr_hdl;
  has_grp_hdl = other298.has_grp_hdl;
  selector_grp_hdl = other298.selector_grp_hdl;
  action_mbr_hdl = other298.action_mbr_hdl;
  action_desc = other298.action_desc;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_hash_for_cm4_tbl_entry_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_hash_for_cm4_tbl_entry_desc_t(";
  out << "match_spec=" << to_string(obj.match_spec);
  out << ", " << "has_mbr_hdl=" << to_string(obj.has_mbr_hdl);
  out << ", " << "has_grp_hdl=" << to_string(obj.has_grp_hdl);
  out << ", " << "selector_grp_hdl=" << to_string(obj.selector_grp_hdl);
  out << ", " << "action_mbr_hdl=" << to_string(obj.action_mbr_hdl);
  out << ", " << "action_desc=" << to_string(obj.action_desc);
  out << ")";
  return out;
}


netbufferv4_hash_for_seq_tbl_entry_desc_t::~netbufferv4_hash_for_seq_tbl_entry_desc_t() throw() {
}


void netbufferv4_hash_for_seq_tbl_entry_desc_t::__set_match_spec(const netbufferv4_hash_for_seq_tbl_match_spec_t& val) {
  this->match_spec = val;
}

void netbufferv4_hash_for_seq_tbl_entry_desc_t::__set_has_mbr_hdl(const bool val) {
  this->has_mbr_hdl = val;
}

void netbufferv4_hash_for_seq_tbl_entry_desc_t::__set_has_grp_hdl(const bool val) {
  this->has_grp_hdl = val;
}

void netbufferv4_hash_for_seq_tbl_entry_desc_t::__set_selector_grp_hdl(const MemberHandle_t val) {
  this->selector_grp_hdl = val;
}

void netbufferv4_hash_for_seq_tbl_entry_desc_t::__set_action_mbr_hdl(const MemberHandle_t val) {
  this->action_mbr_hdl = val;
}

void netbufferv4_hash_for_seq_tbl_entry_desc_t::__set_action_desc(const netbufferv4_action_desc_t& val) {
  this->action_desc = val;
}

const char* netbufferv4_hash_for_seq_tbl_entry_desc_t::ascii_fingerprint = "84FBB469A2D7D4549BE1BB5FAE93BF03";
const uint8_t netbufferv4_hash_for_seq_tbl_entry_desc_t::binary_fingerprint[16] = {0x84,0xFB,0xB4,0x69,0xA2,0xD7,0xD4,0x54,0x9B,0xE1,0xBB,0x5F,0xAE,0x93,0xBF,0x03};

uint32_t netbufferv4_hash_for_seq_tbl_entry_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match_spec = false;
  bool isset_has_mbr_hdl = false;
  bool isset_has_grp_hdl = false;
  bool isset_selector_grp_hdl = false;
  bool isset_action_mbr_hdl = false;
  bool isset_action_desc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->match_spec.read(iprot);
          isset_match_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_mbr_hdl);
          isset_has_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_grp_hdl);
          isset_has_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->selector_grp_hdl);
          isset_selector_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_mbr_hdl);
          isset_action_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_desc.read(iprot);
          isset_action_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selector_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_hash_for_seq_tbl_entry_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_hash_for_seq_tbl_entry_desc_t");

  xfer += oprot->writeFieldBegin("match_spec", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->match_spec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_mbr_hdl", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_grp_hdl", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selector_grp_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->selector_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_mbr_hdl", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->action_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_desc", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->action_desc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_hash_for_seq_tbl_entry_desc_t &a, netbufferv4_hash_for_seq_tbl_entry_desc_t &b) {
  using ::std::swap;
  swap(a.match_spec, b.match_spec);
  swap(a.has_mbr_hdl, b.has_mbr_hdl);
  swap(a.has_grp_hdl, b.has_grp_hdl);
  swap(a.selector_grp_hdl, b.selector_grp_hdl);
  swap(a.action_mbr_hdl, b.action_mbr_hdl);
  swap(a.action_desc, b.action_desc);
}

netbufferv4_hash_for_seq_tbl_entry_desc_t::netbufferv4_hash_for_seq_tbl_entry_desc_t(const netbufferv4_hash_for_seq_tbl_entry_desc_t& other299) {
  match_spec = other299.match_spec;
  has_mbr_hdl = other299.has_mbr_hdl;
  has_grp_hdl = other299.has_grp_hdl;
  selector_grp_hdl = other299.selector_grp_hdl;
  action_mbr_hdl = other299.action_mbr_hdl;
  action_desc = other299.action_desc;
}
netbufferv4_hash_for_seq_tbl_entry_desc_t& netbufferv4_hash_for_seq_tbl_entry_desc_t::operator=(const netbufferv4_hash_for_seq_tbl_entry_desc_t& other300) {
  match_spec = other300.match_spec;
  has_mbr_hdl = other300.has_mbr_hdl;
  has_grp_hdl = other300.has_grp_hdl;
  selector_grp_hdl = other300.selector_grp_hdl;
  action_mbr_hdl = other300.action_mbr_hdl;
  action_desc = other300.action_desc;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_hash_for_seq_tbl_entry_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_hash_for_seq_tbl_entry_desc_t(";
  out << "match_spec=" << to_string(obj.match_spec);
  out << ", " << "has_mbr_hdl=" << to_string(obj.has_mbr_hdl);
  out << ", " << "has_grp_hdl=" << to_string(obj.has_grp_hdl);
  out << ", " << "selector_grp_hdl=" << to_string(obj.selector_grp_hdl);
  out << ", " << "action_mbr_hdl=" << to_string(obj.action_mbr_hdl);
  out << ", " << "action_desc=" << to_string(obj.action_desc);
  out << ")";
  return out;
}


netbufferv4_ig_port_forward_tbl_entry_desc_t::~netbufferv4_ig_port_forward_tbl_entry_desc_t() throw() {
}


void netbufferv4_ig_port_forward_tbl_entry_desc_t::__set_match_spec(const netbufferv4_ig_port_forward_tbl_match_spec_t& val) {
  this->match_spec = val;
}

void netbufferv4_ig_port_forward_tbl_entry_desc_t::__set_has_mbr_hdl(const bool val) {
  this->has_mbr_hdl = val;
}

void netbufferv4_ig_port_forward_tbl_entry_desc_t::__set_has_grp_hdl(const bool val) {
  this->has_grp_hdl = val;
}

void netbufferv4_ig_port_forward_tbl_entry_desc_t::__set_selector_grp_hdl(const MemberHandle_t val) {
  this->selector_grp_hdl = val;
}

void netbufferv4_ig_port_forward_tbl_entry_desc_t::__set_action_mbr_hdl(const MemberHandle_t val) {
  this->action_mbr_hdl = val;
}

void netbufferv4_ig_port_forward_tbl_entry_desc_t::__set_action_desc(const netbufferv4_action_desc_t& val) {
  this->action_desc = val;
}

const char* netbufferv4_ig_port_forward_tbl_entry_desc_t::ascii_fingerprint = "84FBB469A2D7D4549BE1BB5FAE93BF03";
const uint8_t netbufferv4_ig_port_forward_tbl_entry_desc_t::binary_fingerprint[16] = {0x84,0xFB,0xB4,0x69,0xA2,0xD7,0xD4,0x54,0x9B,0xE1,0xBB,0x5F,0xAE,0x93,0xBF,0x03};

uint32_t netbufferv4_ig_port_forward_tbl_entry_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match_spec = false;
  bool isset_has_mbr_hdl = false;
  bool isset_has_grp_hdl = false;
  bool isset_selector_grp_hdl = false;
  bool isset_action_mbr_hdl = false;
  bool isset_action_desc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->match_spec.read(iprot);
          isset_match_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_mbr_hdl);
          isset_has_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_grp_hdl);
          isset_has_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->selector_grp_hdl);
          isset_selector_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_mbr_hdl);
          isset_action_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_desc.read(iprot);
          isset_action_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selector_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_ig_port_forward_tbl_entry_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_ig_port_forward_tbl_entry_desc_t");

  xfer += oprot->writeFieldBegin("match_spec", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->match_spec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_mbr_hdl", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_grp_hdl", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selector_grp_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->selector_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_mbr_hdl", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->action_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_desc", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->action_desc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_ig_port_forward_tbl_entry_desc_t &a, netbufferv4_ig_port_forward_tbl_entry_desc_t &b) {
  using ::std::swap;
  swap(a.match_spec, b.match_spec);
  swap(a.has_mbr_hdl, b.has_mbr_hdl);
  swap(a.has_grp_hdl, b.has_grp_hdl);
  swap(a.selector_grp_hdl, b.selector_grp_hdl);
  swap(a.action_mbr_hdl, b.action_mbr_hdl);
  swap(a.action_desc, b.action_desc);
}

netbufferv4_ig_port_forward_tbl_entry_desc_t::netbufferv4_ig_port_forward_tbl_entry_desc_t(const netbufferv4_ig_port_forward_tbl_entry_desc_t& other301) {
  match_spec = other301.match_spec;
  has_mbr_hdl = other301.has_mbr_hdl;
  has_grp_hdl = other301.has_grp_hdl;
  selector_grp_hdl = other301.selector_grp_hdl;
  action_mbr_hdl = other301.action_mbr_hdl;
  action_desc = other301.action_desc;
}
netbufferv4_ig_port_forward_tbl_entry_desc_t& netbufferv4_ig_port_forward_tbl_entry_desc_t::operator=(const netbufferv4_ig_port_forward_tbl_entry_desc_t& other302) {
  match_spec = other302.match_spec;
  has_mbr_hdl = other302.has_mbr_hdl;
  has_grp_hdl = other302.has_grp_hdl;
  selector_grp_hdl = other302.selector_grp_hdl;
  action_mbr_hdl = other302.action_mbr_hdl;
  action_desc = other302.action_desc;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_ig_port_forward_tbl_entry_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_ig_port_forward_tbl_entry_desc_t(";
  out << "match_spec=" << to_string(obj.match_spec);
  out << ", " << "has_mbr_hdl=" << to_string(obj.has_mbr_hdl);
  out << ", " << "has_grp_hdl=" << to_string(obj.has_grp_hdl);
  out << ", " << "selector_grp_hdl=" << to_string(obj.selector_grp_hdl);
  out << ", " << "action_mbr_hdl=" << to_string(obj.action_mbr_hdl);
  out << ", " << "action_desc=" << to_string(obj.action_desc);
  out << ")";
  return out;
}


netbufferv4_ipv4_forward_tbl_entry_desc_t::~netbufferv4_ipv4_forward_tbl_entry_desc_t() throw() {
}


void netbufferv4_ipv4_forward_tbl_entry_desc_t::__set_match_spec(const netbufferv4_ipv4_forward_tbl_match_spec_t& val) {
  this->match_spec = val;
}

void netbufferv4_ipv4_forward_tbl_entry_desc_t::__set_has_mbr_hdl(const bool val) {
  this->has_mbr_hdl = val;
}

void netbufferv4_ipv4_forward_tbl_entry_desc_t::__set_has_grp_hdl(const bool val) {
  this->has_grp_hdl = val;
}

void netbufferv4_ipv4_forward_tbl_entry_desc_t::__set_selector_grp_hdl(const MemberHandle_t val) {
  this->selector_grp_hdl = val;
}

void netbufferv4_ipv4_forward_tbl_entry_desc_t::__set_action_mbr_hdl(const MemberHandle_t val) {
  this->action_mbr_hdl = val;
}

void netbufferv4_ipv4_forward_tbl_entry_desc_t::__set_action_desc(const netbufferv4_action_desc_t& val) {
  this->action_desc = val;
}

const char* netbufferv4_ipv4_forward_tbl_entry_desc_t::ascii_fingerprint = "C9DA9C87FE7C81E86F9B0A41E4861D76";
const uint8_t netbufferv4_ipv4_forward_tbl_entry_desc_t::binary_fingerprint[16] = {0xC9,0xDA,0x9C,0x87,0xFE,0x7C,0x81,0xE8,0x6F,0x9B,0x0A,0x41,0xE4,0x86,0x1D,0x76};

uint32_t netbufferv4_ipv4_forward_tbl_entry_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match_spec = false;
  bool isset_has_mbr_hdl = false;
  bool isset_has_grp_hdl = false;
  bool isset_selector_grp_hdl = false;
  bool isset_action_mbr_hdl = false;
  bool isset_action_desc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->match_spec.read(iprot);
          isset_match_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_mbr_hdl);
          isset_has_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_grp_hdl);
          isset_has_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->selector_grp_hdl);
          isset_selector_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_mbr_hdl);
          isset_action_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_desc.read(iprot);
          isset_action_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selector_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_ipv4_forward_tbl_entry_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_ipv4_forward_tbl_entry_desc_t");

  xfer += oprot->writeFieldBegin("match_spec", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->match_spec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_mbr_hdl", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_grp_hdl", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selector_grp_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->selector_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_mbr_hdl", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->action_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_desc", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->action_desc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_ipv4_forward_tbl_entry_desc_t &a, netbufferv4_ipv4_forward_tbl_entry_desc_t &b) {
  using ::std::swap;
  swap(a.match_spec, b.match_spec);
  swap(a.has_mbr_hdl, b.has_mbr_hdl);
  swap(a.has_grp_hdl, b.has_grp_hdl);
  swap(a.selector_grp_hdl, b.selector_grp_hdl);
  swap(a.action_mbr_hdl, b.action_mbr_hdl);
  swap(a.action_desc, b.action_desc);
}

netbufferv4_ipv4_forward_tbl_entry_desc_t::netbufferv4_ipv4_forward_tbl_entry_desc_t(const netbufferv4_ipv4_forward_tbl_entry_desc_t& other303) {
  match_spec = other303.match_spec;
  has_mbr_hdl = other303.has_mbr_hdl;
  has_grp_hdl = other303.has_grp_hdl;
  selector_grp_hdl = other303.selector_grp_hdl;
  action_mbr_hdl = other303.action_mbr_hdl;
  action_desc = other303.action_desc;
}
netbufferv4_ipv4_forward_tbl_entry_desc_t& netbufferv4_ipv4_forward_tbl_entry_desc_t::operator=(const netbufferv4_ipv4_forward_tbl_entry_desc_t& other304) {
  match_spec = other304.match_spec;
  has_mbr_hdl = other304.has_mbr_hdl;
  has_grp_hdl = other304.has_grp_hdl;
  selector_grp_hdl = other304.selector_grp_hdl;
  action_mbr_hdl = other304.action_mbr_hdl;
  action_desc = other304.action_desc;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_ipv4_forward_tbl_entry_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_ipv4_forward_tbl_entry_desc_t(";
  out << "match_spec=" << to_string(obj.match_spec);
  out << ", " << "has_mbr_hdl=" << to_string(obj.has_mbr_hdl);
  out << ", " << "has_grp_hdl=" << to_string(obj.has_grp_hdl);
  out << ", " << "selector_grp_hdl=" << to_string(obj.selector_grp_hdl);
  out << ", " << "action_mbr_hdl=" << to_string(obj.action_mbr_hdl);
  out << ", " << "action_desc=" << to_string(obj.action_desc);
  out << ")";
  return out;
}


netbufferv4_is_hot_tbl_entry_desc_t::~netbufferv4_is_hot_tbl_entry_desc_t() throw() {
}


void netbufferv4_is_hot_tbl_entry_desc_t::__set_match_spec(const netbufferv4_is_hot_tbl_match_spec_t& val) {
  this->match_spec = val;
}

void netbufferv4_is_hot_tbl_entry_desc_t::__set_has_mbr_hdl(const bool val) {
  this->has_mbr_hdl = val;
}

void netbufferv4_is_hot_tbl_entry_desc_t::__set_has_grp_hdl(const bool val) {
  this->has_grp_hdl = val;
}

void netbufferv4_is_hot_tbl_entry_desc_t::__set_selector_grp_hdl(const MemberHandle_t val) {
  this->selector_grp_hdl = val;
}

void netbufferv4_is_hot_tbl_entry_desc_t::__set_action_mbr_hdl(const MemberHandle_t val) {
  this->action_mbr_hdl = val;
}

void netbufferv4_is_hot_tbl_entry_desc_t::__set_action_desc(const netbufferv4_action_desc_t& val) {
  this->action_desc = val;
}

const char* netbufferv4_is_hot_tbl_entry_desc_t::ascii_fingerprint = "E813DA46CF0A494D4456060B85D93B99";
const uint8_t netbufferv4_is_hot_tbl_entry_desc_t::binary_fingerprint[16] = {0xE8,0x13,0xDA,0x46,0xCF,0x0A,0x49,0x4D,0x44,0x56,0x06,0x0B,0x85,0xD9,0x3B,0x99};

uint32_t netbufferv4_is_hot_tbl_entry_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match_spec = false;
  bool isset_has_mbr_hdl = false;
  bool isset_has_grp_hdl = false;
  bool isset_selector_grp_hdl = false;
  bool isset_action_mbr_hdl = false;
  bool isset_action_desc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->match_spec.read(iprot);
          isset_match_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_mbr_hdl);
          isset_has_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_grp_hdl);
          isset_has_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->selector_grp_hdl);
          isset_selector_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_mbr_hdl);
          isset_action_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_desc.read(iprot);
          isset_action_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selector_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_is_hot_tbl_entry_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_is_hot_tbl_entry_desc_t");

  xfer += oprot->writeFieldBegin("match_spec", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->match_spec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_mbr_hdl", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_grp_hdl", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selector_grp_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->selector_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_mbr_hdl", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->action_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_desc", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->action_desc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_is_hot_tbl_entry_desc_t &a, netbufferv4_is_hot_tbl_entry_desc_t &b) {
  using ::std::swap;
  swap(a.match_spec, b.match_spec);
  swap(a.has_mbr_hdl, b.has_mbr_hdl);
  swap(a.has_grp_hdl, b.has_grp_hdl);
  swap(a.selector_grp_hdl, b.selector_grp_hdl);
  swap(a.action_mbr_hdl, b.action_mbr_hdl);
  swap(a.action_desc, b.action_desc);
}

netbufferv4_is_hot_tbl_entry_desc_t::netbufferv4_is_hot_tbl_entry_desc_t(const netbufferv4_is_hot_tbl_entry_desc_t& other305) {
  match_spec = other305.match_spec;
  has_mbr_hdl = other305.has_mbr_hdl;
  has_grp_hdl = other305.has_grp_hdl;
  selector_grp_hdl = other305.selector_grp_hdl;
  action_mbr_hdl = other305.action_mbr_hdl;
  action_desc = other305.action_desc;
}
netbufferv4_is_hot_tbl_entry_desc_t& netbufferv4_is_hot_tbl_entry_desc_t::operator=(const netbufferv4_is_hot_tbl_entry_desc_t& other306) {
  match_spec = other306.match_spec;
  has_mbr_hdl = other306.has_mbr_hdl;
  has_grp_hdl = other306.has_grp_hdl;
  selector_grp_hdl = other306.selector_grp_hdl;
  action_mbr_hdl = other306.action_mbr_hdl;
  action_desc = other306.action_desc;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_is_hot_tbl_entry_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_is_hot_tbl_entry_desc_t(";
  out << "match_spec=" << to_string(obj.match_spec);
  out << ", " << "has_mbr_hdl=" << to_string(obj.has_mbr_hdl);
  out << ", " << "has_grp_hdl=" << to_string(obj.has_grp_hdl);
  out << ", " << "selector_grp_hdl=" << to_string(obj.selector_grp_hdl);
  out << ", " << "action_mbr_hdl=" << to_string(obj.action_mbr_hdl);
  out << ", " << "action_desc=" << to_string(obj.action_desc);
  out << ")";
  return out;
}


netbufferv4_lastclone_lastscansplit_tbl_entry_desc_t::~netbufferv4_lastclone_lastscansplit_tbl_entry_desc_t() throw() {
}


void netbufferv4_lastclone_lastscansplit_tbl_entry_desc_t::__set_match_spec(const netbufferv4_lastclone_lastscansplit_tbl_match_spec_t& val) {
  this->match_spec = val;
}

void netbufferv4_lastclone_lastscansplit_tbl_entry_desc_t::__set_has_mbr_hdl(const bool val) {
  this->has_mbr_hdl = val;
}

void netbufferv4_lastclone_lastscansplit_tbl_entry_desc_t::__set_has_grp_hdl(const bool val) {
  this->has_grp_hdl = val;
}

void netbufferv4_lastclone_lastscansplit_tbl_entry_desc_t::__set_selector_grp_hdl(const MemberHandle_t val) {
  this->selector_grp_hdl = val;
}

void netbufferv4_lastclone_lastscansplit_tbl_entry_desc_t::__set_action_mbr_hdl(const MemberHandle_t val) {
  this->action_mbr_hdl = val;
}

void netbufferv4_lastclone_lastscansplit_tbl_entry_desc_t::__set_action_desc(const netbufferv4_action_desc_t& val) {
  this->action_desc = val;
}

const char* netbufferv4_lastclone_lastscansplit_tbl_entry_desc_t::ascii_fingerprint = "7FB61F103EFBBCB9E1FCF19B919F00DF";
const uint8_t netbufferv4_lastclone_lastscansplit_tbl_entry_desc_t::binary_fingerprint[16] = {0x7F,0xB6,0x1F,0x10,0x3E,0xFB,0xBC,0xB9,0xE1,0xFC,0xF1,0x9B,0x91,0x9F,0x00,0xDF};

uint32_t netbufferv4_lastclone_lastscansplit_tbl_entry_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match_spec = false;
  bool isset_has_mbr_hdl = false;
  bool isset_has_grp_hdl = false;
  bool isset_selector_grp_hdl = false;
  bool isset_action_mbr_hdl = false;
  bool isset_action_desc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->match_spec.read(iprot);
          isset_match_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_mbr_hdl);
          isset_has_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_grp_hdl);
          isset_has_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->selector_grp_hdl);
          isset_selector_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_mbr_hdl);
          isset_action_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_desc.read(iprot);
          isset_action_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selector_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_lastclone_lastscansplit_tbl_entry_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_lastclone_lastscansplit_tbl_entry_desc_t");

  xfer += oprot->writeFieldBegin("match_spec", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->match_spec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_mbr_hdl", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_grp_hdl", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selector_grp_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->selector_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_mbr_hdl", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->action_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_desc", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->action_desc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_lastclone_lastscansplit_tbl_entry_desc_t &a, netbufferv4_lastclone_lastscansplit_tbl_entry_desc_t &b) {
  using ::std::swap;
  swap(a.match_spec, b.match_spec);
  swap(a.has_mbr_hdl, b.has_mbr_hdl);
  swap(a.has_grp_hdl, b.has_grp_hdl);
  swap(a.selector_grp_hdl, b.selector_grp_hdl);
  swap(a.action_mbr_hdl, b.action_mbr_hdl);
  swap(a.action_desc, b.action_desc);
}

netbufferv4_lastclone_lastscansplit_tbl_entry_desc_t::netbufferv4_lastclone_lastscansplit_tbl_entry_desc_t(const netbufferv4_lastclone_lastscansplit_tbl_entry_desc_t& other307) {
  match_spec = other307.match_spec;
  has_mbr_hdl = other307.has_mbr_hdl;
  has_grp_hdl = other307.has_grp_hdl;
  selector_grp_hdl = other307.selector_grp_hdl;
  action_mbr_hdl = other307.action_mbr_hdl;
  action_desc = other307.action_desc;
}
netbufferv4_lastclone_lastscansplit_tbl_entry_desc_t& netbufferv4_lastclone_lastscansplit_tbl_entry_desc_t::operator=(const netbufferv4_lastclone_lastscansplit_tbl_entry_desc_t& other308) {
  match_spec = other308.match_spec;
  has_mbr_hdl = other308.has_mbr_hdl;
  has_grp_hdl = other308.has_grp_hdl;
  selector_grp_hdl = other308.selector_grp_hdl;
  action_mbr_hdl = other308.action_mbr_hdl;
  action_desc = other308.action_desc;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_lastclone_lastscansplit_tbl_entry_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_lastclone_lastscansplit_tbl_entry_desc_t(";
  out << "match_spec=" << to_string(obj.match_spec);
  out << ", " << "has_mbr_hdl=" << to_string(obj.has_mbr_hdl);
  out << ", " << "has_grp_hdl=" << to_string(obj.has_grp_hdl);
  out << ", " << "selector_grp_hdl=" << to_string(obj.selector_grp_hdl);
  out << ", " << "action_mbr_hdl=" << to_string(obj.action_mbr_hdl);
  out << ", " << "action_desc=" << to_string(obj.action_desc);
  out << ")";
  return out;
}


netbufferv4_need_recirculate_tbl_entry_desc_t::~netbufferv4_need_recirculate_tbl_entry_desc_t() throw() {
}


void netbufferv4_need_recirculate_tbl_entry_desc_t::__set_match_spec(const netbufferv4_need_recirculate_tbl_match_spec_t& val) {
  this->match_spec = val;
}

void netbufferv4_need_recirculate_tbl_entry_desc_t::__set_has_mbr_hdl(const bool val) {
  this->has_mbr_hdl = val;
}

void netbufferv4_need_recirculate_tbl_entry_desc_t::__set_has_grp_hdl(const bool val) {
  this->has_grp_hdl = val;
}

void netbufferv4_need_recirculate_tbl_entry_desc_t::__set_selector_grp_hdl(const MemberHandle_t val) {
  this->selector_grp_hdl = val;
}

void netbufferv4_need_recirculate_tbl_entry_desc_t::__set_action_mbr_hdl(const MemberHandle_t val) {
  this->action_mbr_hdl = val;
}

void netbufferv4_need_recirculate_tbl_entry_desc_t::__set_action_desc(const netbufferv4_action_desc_t& val) {
  this->action_desc = val;
}

const char* netbufferv4_need_recirculate_tbl_entry_desc_t::ascii_fingerprint = "81DEBE26F66E0316F58C656D9A7A9618";
const uint8_t netbufferv4_need_recirculate_tbl_entry_desc_t::binary_fingerprint[16] = {0x81,0xDE,0xBE,0x26,0xF6,0x6E,0x03,0x16,0xF5,0x8C,0x65,0x6D,0x9A,0x7A,0x96,0x18};

uint32_t netbufferv4_need_recirculate_tbl_entry_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match_spec = false;
  bool isset_has_mbr_hdl = false;
  bool isset_has_grp_hdl = false;
  bool isset_selector_grp_hdl = false;
  bool isset_action_mbr_hdl = false;
  bool isset_action_desc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->match_spec.read(iprot);
          isset_match_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_mbr_hdl);
          isset_has_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_grp_hdl);
          isset_has_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->selector_grp_hdl);
          isset_selector_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_mbr_hdl);
          isset_action_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_desc.read(iprot);
          isset_action_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selector_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_need_recirculate_tbl_entry_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_need_recirculate_tbl_entry_desc_t");

  xfer += oprot->writeFieldBegin("match_spec", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->match_spec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_mbr_hdl", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_grp_hdl", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selector_grp_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->selector_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_mbr_hdl", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->action_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_desc", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->action_desc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_need_recirculate_tbl_entry_desc_t &a, netbufferv4_need_recirculate_tbl_entry_desc_t &b) {
  using ::std::swap;
  swap(a.match_spec, b.match_spec);
  swap(a.has_mbr_hdl, b.has_mbr_hdl);
  swap(a.has_grp_hdl, b.has_grp_hdl);
  swap(a.selector_grp_hdl, b.selector_grp_hdl);
  swap(a.action_mbr_hdl, b.action_mbr_hdl);
  swap(a.action_desc, b.action_desc);
}

netbufferv4_need_recirculate_tbl_entry_desc_t::netbufferv4_need_recirculate_tbl_entry_desc_t(const netbufferv4_need_recirculate_tbl_entry_desc_t& other309) {
  match_spec = other309.match_spec;
  has_mbr_hdl = other309.has_mbr_hdl;
  has_grp_hdl = other309.has_grp_hdl;
  selector_grp_hdl = other309.selector_grp_hdl;
  action_mbr_hdl = other309.action_mbr_hdl;
  action_desc = other309.action_desc;
}
netbufferv4_need_recirculate_tbl_entry_desc_t& netbufferv4_need_recirculate_tbl_entry_desc_t::operator=(const netbufferv4_need_recirculate_tbl_entry_desc_t& other310) {
  match_spec = other310.match_spec;
  has_mbr_hdl = other310.has_mbr_hdl;
  has_grp_hdl = other310.has_grp_hdl;
  selector_grp_hdl = other310.selector_grp_hdl;
  action_mbr_hdl = other310.action_mbr_hdl;
  action_desc = other310.action_desc;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_need_recirculate_tbl_entry_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_need_recirculate_tbl_entry_desc_t(";
  out << "match_spec=" << to_string(obj.match_spec);
  out << ", " << "has_mbr_hdl=" << to_string(obj.has_mbr_hdl);
  out << ", " << "has_grp_hdl=" << to_string(obj.has_grp_hdl);
  out << ", " << "selector_grp_hdl=" << to_string(obj.selector_grp_hdl);
  out << ", " << "action_mbr_hdl=" << to_string(obj.action_mbr_hdl);
  out << ", " << "action_desc=" << to_string(obj.action_desc);
  out << ")";
  return out;
}


netbufferv4_prepare_for_cachehit_tbl_entry_desc_t::~netbufferv4_prepare_for_cachehit_tbl_entry_desc_t() throw() {
}


void netbufferv4_prepare_for_cachehit_tbl_entry_desc_t::__set_match_spec(const netbufferv4_prepare_for_cachehit_tbl_match_spec_t& val) {
  this->match_spec = val;
}

void netbufferv4_prepare_for_cachehit_tbl_entry_desc_t::__set_has_mbr_hdl(const bool val) {
  this->has_mbr_hdl = val;
}

void netbufferv4_prepare_for_cachehit_tbl_entry_desc_t::__set_has_grp_hdl(const bool val) {
  this->has_grp_hdl = val;
}

void netbufferv4_prepare_for_cachehit_tbl_entry_desc_t::__set_selector_grp_hdl(const MemberHandle_t val) {
  this->selector_grp_hdl = val;
}

void netbufferv4_prepare_for_cachehit_tbl_entry_desc_t::__set_action_mbr_hdl(const MemberHandle_t val) {
  this->action_mbr_hdl = val;
}

void netbufferv4_prepare_for_cachehit_tbl_entry_desc_t::__set_action_desc(const netbufferv4_action_desc_t& val) {
  this->action_desc = val;
}

const char* netbufferv4_prepare_for_cachehit_tbl_entry_desc_t::ascii_fingerprint = "D307D2FF8787E40A589BF368594140B5";
const uint8_t netbufferv4_prepare_for_cachehit_tbl_entry_desc_t::binary_fingerprint[16] = {0xD3,0x07,0xD2,0xFF,0x87,0x87,0xE4,0x0A,0x58,0x9B,0xF3,0x68,0x59,0x41,0x40,0xB5};

uint32_t netbufferv4_prepare_for_cachehit_tbl_entry_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match_spec = false;
  bool isset_has_mbr_hdl = false;
  bool isset_has_grp_hdl = false;
  bool isset_selector_grp_hdl = false;
  bool isset_action_mbr_hdl = false;
  bool isset_action_desc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->match_spec.read(iprot);
          isset_match_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_mbr_hdl);
          isset_has_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_grp_hdl);
          isset_has_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->selector_grp_hdl);
          isset_selector_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_mbr_hdl);
          isset_action_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_desc.read(iprot);
          isset_action_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selector_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_prepare_for_cachehit_tbl_entry_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_prepare_for_cachehit_tbl_entry_desc_t");

  xfer += oprot->writeFieldBegin("match_spec", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->match_spec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_mbr_hdl", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_grp_hdl", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selector_grp_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->selector_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_mbr_hdl", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->action_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_desc", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->action_desc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_prepare_for_cachehit_tbl_entry_desc_t &a, netbufferv4_prepare_for_cachehit_tbl_entry_desc_t &b) {
  using ::std::swap;
  swap(a.match_spec, b.match_spec);
  swap(a.has_mbr_hdl, b.has_mbr_hdl);
  swap(a.has_grp_hdl, b.has_grp_hdl);
  swap(a.selector_grp_hdl, b.selector_grp_hdl);
  swap(a.action_mbr_hdl, b.action_mbr_hdl);
  swap(a.action_desc, b.action_desc);
}

netbufferv4_prepare_for_cachehit_tbl_entry_desc_t::netbufferv4_prepare_for_cachehit_tbl_entry_desc_t(const netbufferv4_prepare_for_cachehit_tbl_entry_desc_t& other311) {
  match_spec = other311.match_spec;
  has_mbr_hdl = other311.has_mbr_hdl;
  has_grp_hdl = other311.has_grp_hdl;
  selector_grp_hdl = other311.selector_grp_hdl;
  action_mbr_hdl = other311.action_mbr_hdl;
  action_desc = other311.action_desc;
}
netbufferv4_prepare_for_cachehit_tbl_entry_desc_t& netbufferv4_prepare_for_cachehit_tbl_entry_desc_t::operator=(const netbufferv4_prepare_for_cachehit_tbl_entry_desc_t& other312) {
  match_spec = other312.match_spec;
  has_mbr_hdl = other312.has_mbr_hdl;
  has_grp_hdl = other312.has_grp_hdl;
  selector_grp_hdl = other312.selector_grp_hdl;
  action_mbr_hdl = other312.action_mbr_hdl;
  action_desc = other312.action_desc;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_prepare_for_cachehit_tbl_entry_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_prepare_for_cachehit_tbl_entry_desc_t(";
  out << "match_spec=" << to_string(obj.match_spec);
  out << ", " << "has_mbr_hdl=" << to_string(obj.has_mbr_hdl);
  out << ", " << "has_grp_hdl=" << to_string(obj.has_grp_hdl);
  out << ", " << "selector_grp_hdl=" << to_string(obj.selector_grp_hdl);
  out << ", " << "action_mbr_hdl=" << to_string(obj.action_mbr_hdl);
  out << ", " << "action_desc=" << to_string(obj.action_desc);
  out << ")";
  return out;
}


netbufferv4_process_scanreq_split_tbl_entry_desc_t::~netbufferv4_process_scanreq_split_tbl_entry_desc_t() throw() {
}


void netbufferv4_process_scanreq_split_tbl_entry_desc_t::__set_match_spec(const netbufferv4_process_scanreq_split_tbl_match_spec_t& val) {
  this->match_spec = val;
}

void netbufferv4_process_scanreq_split_tbl_entry_desc_t::__set_has_mbr_hdl(const bool val) {
  this->has_mbr_hdl = val;
}

void netbufferv4_process_scanreq_split_tbl_entry_desc_t::__set_has_grp_hdl(const bool val) {
  this->has_grp_hdl = val;
}

void netbufferv4_process_scanreq_split_tbl_entry_desc_t::__set_selector_grp_hdl(const MemberHandle_t val) {
  this->selector_grp_hdl = val;
}

void netbufferv4_process_scanreq_split_tbl_entry_desc_t::__set_action_mbr_hdl(const MemberHandle_t val) {
  this->action_mbr_hdl = val;
}

void netbufferv4_process_scanreq_split_tbl_entry_desc_t::__set_action_desc(const netbufferv4_action_desc_t& val) {
  this->action_desc = val;
}

const char* netbufferv4_process_scanreq_split_tbl_entry_desc_t::ascii_fingerprint = "D307D2FF8787E40A589BF368594140B5";
const uint8_t netbufferv4_process_scanreq_split_tbl_entry_desc_t::binary_fingerprint[16] = {0xD3,0x07,0xD2,0xFF,0x87,0x87,0xE4,0x0A,0x58,0x9B,0xF3,0x68,0x59,0x41,0x40,0xB5};

uint32_t netbufferv4_process_scanreq_split_tbl_entry_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match_spec = false;
  bool isset_has_mbr_hdl = false;
  bool isset_has_grp_hdl = false;
  bool isset_selector_grp_hdl = false;
  bool isset_action_mbr_hdl = false;
  bool isset_action_desc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->match_spec.read(iprot);
          isset_match_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_mbr_hdl);
          isset_has_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_grp_hdl);
          isset_has_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->selector_grp_hdl);
          isset_selector_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_mbr_hdl);
          isset_action_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_desc.read(iprot);
          isset_action_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selector_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_process_scanreq_split_tbl_entry_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_process_scanreq_split_tbl_entry_desc_t");

  xfer += oprot->writeFieldBegin("match_spec", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->match_spec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_mbr_hdl", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_grp_hdl", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selector_grp_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->selector_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_mbr_hdl", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->action_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_desc", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->action_desc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_process_scanreq_split_tbl_entry_desc_t &a, netbufferv4_process_scanreq_split_tbl_entry_desc_t &b) {
  using ::std::swap;
  swap(a.match_spec, b.match_spec);
  swap(a.has_mbr_hdl, b.has_mbr_hdl);
  swap(a.has_grp_hdl, b.has_grp_hdl);
  swap(a.selector_grp_hdl, b.selector_grp_hdl);
  swap(a.action_mbr_hdl, b.action_mbr_hdl);
  swap(a.action_desc, b.action_desc);
}

netbufferv4_process_scanreq_split_tbl_entry_desc_t::netbufferv4_process_scanreq_split_tbl_entry_desc_t(const netbufferv4_process_scanreq_split_tbl_entry_desc_t& other313) {
  match_spec = other313.match_spec;
  has_mbr_hdl = other313.has_mbr_hdl;
  has_grp_hdl = other313.has_grp_hdl;
  selector_grp_hdl = other313.selector_grp_hdl;
  action_mbr_hdl = other313.action_mbr_hdl;
  action_desc = other313.action_desc;
}
netbufferv4_process_scanreq_split_tbl_entry_desc_t& netbufferv4_process_scanreq_split_tbl_entry_desc_t::operator=(const netbufferv4_process_scanreq_split_tbl_entry_desc_t& other314) {
  match_spec = other314.match_spec;
  has_mbr_hdl = other314.has_mbr_hdl;
  has_grp_hdl = other314.has_grp_hdl;
  selector_grp_hdl = other314.selector_grp_hdl;
  action_mbr_hdl = other314.action_mbr_hdl;
  action_desc = other314.action_desc;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_process_scanreq_split_tbl_entry_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_process_scanreq_split_tbl_entry_desc_t(";
  out << "match_spec=" << to_string(obj.match_spec);
  out << ", " << "has_mbr_hdl=" << to_string(obj.has_mbr_hdl);
  out << ", " << "has_grp_hdl=" << to_string(obj.has_grp_hdl);
  out << ", " << "selector_grp_hdl=" << to_string(obj.selector_grp_hdl);
  out << ", " << "action_mbr_hdl=" << to_string(obj.action_mbr_hdl);
  out << ", " << "action_desc=" << to_string(obj.action_desc);
  out << ")";
  return out;
}


netbufferv4_range_partition_for_scan_endkey_tbl_entry_desc_t::~netbufferv4_range_partition_for_scan_endkey_tbl_entry_desc_t() throw() {
}


void netbufferv4_range_partition_for_scan_endkey_tbl_entry_desc_t::__set_match_spec(const netbufferv4_range_partition_for_scan_endkey_tbl_match_spec_t& val) {
  this->match_spec = val;
}

void netbufferv4_range_partition_for_scan_endkey_tbl_entry_desc_t::__set_has_mbr_hdl(const bool val) {
  this->has_mbr_hdl = val;
}

void netbufferv4_range_partition_for_scan_endkey_tbl_entry_desc_t::__set_has_grp_hdl(const bool val) {
  this->has_grp_hdl = val;
}

void netbufferv4_range_partition_for_scan_endkey_tbl_entry_desc_t::__set_selector_grp_hdl(const MemberHandle_t val) {
  this->selector_grp_hdl = val;
}

void netbufferv4_range_partition_for_scan_endkey_tbl_entry_desc_t::__set_action_mbr_hdl(const MemberHandle_t val) {
  this->action_mbr_hdl = val;
}

void netbufferv4_range_partition_for_scan_endkey_tbl_entry_desc_t::__set_priority(const int32_t val) {
  this->priority = val;
}

void netbufferv4_range_partition_for_scan_endkey_tbl_entry_desc_t::__set_action_desc(const netbufferv4_action_desc_t& val) {
  this->action_desc = val;
}

const char* netbufferv4_range_partition_for_scan_endkey_tbl_entry_desc_t::ascii_fingerprint = "E68534C1167E9E3ABB85E45F2C600071";
const uint8_t netbufferv4_range_partition_for_scan_endkey_tbl_entry_desc_t::binary_fingerprint[16] = {0xE6,0x85,0x34,0xC1,0x16,0x7E,0x9E,0x3A,0xBB,0x85,0xE4,0x5F,0x2C,0x60,0x00,0x71};

uint32_t netbufferv4_range_partition_for_scan_endkey_tbl_entry_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match_spec = false;
  bool isset_has_mbr_hdl = false;
  bool isset_has_grp_hdl = false;
  bool isset_selector_grp_hdl = false;
  bool isset_action_mbr_hdl = false;
  bool isset_priority = false;
  bool isset_action_desc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->match_spec.read(iprot);
          isset_match_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_mbr_hdl);
          isset_has_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_grp_hdl);
          isset_has_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->selector_grp_hdl);
          isset_selector_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_mbr_hdl);
          isset_action_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->priority);
          isset_priority = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_desc.read(iprot);
          isset_action_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selector_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_priority)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_range_partition_for_scan_endkey_tbl_entry_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_range_partition_for_scan_endkey_tbl_entry_desc_t");

  xfer += oprot->writeFieldBegin("match_spec", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->match_spec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_mbr_hdl", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_grp_hdl", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selector_grp_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->selector_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_mbr_hdl", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->action_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("priority", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->priority);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_desc", ::apache::thrift::protocol::T_STRUCT, 7);
  xfer += this->action_desc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_range_partition_for_scan_endkey_tbl_entry_desc_t &a, netbufferv4_range_partition_for_scan_endkey_tbl_entry_desc_t &b) {
  using ::std::swap;
  swap(a.match_spec, b.match_spec);
  swap(a.has_mbr_hdl, b.has_mbr_hdl);
  swap(a.has_grp_hdl, b.has_grp_hdl);
  swap(a.selector_grp_hdl, b.selector_grp_hdl);
  swap(a.action_mbr_hdl, b.action_mbr_hdl);
  swap(a.priority, b.priority);
  swap(a.action_desc, b.action_desc);
}

netbufferv4_range_partition_for_scan_endkey_tbl_entry_desc_t::netbufferv4_range_partition_for_scan_endkey_tbl_entry_desc_t(const netbufferv4_range_partition_for_scan_endkey_tbl_entry_desc_t& other315) {
  match_spec = other315.match_spec;
  has_mbr_hdl = other315.has_mbr_hdl;
  has_grp_hdl = other315.has_grp_hdl;
  selector_grp_hdl = other315.selector_grp_hdl;
  action_mbr_hdl = other315.action_mbr_hdl;
  priority = other315.priority;
  action_desc = other315.action_desc;
}
netbufferv4_range_partition_for_scan_endkey_tbl_entry_desc_t& netbufferv4_range_partition_for_scan_endkey_tbl_entry_desc_t::operator=(const netbufferv4_range_partition_for_scan_endkey_tbl_entry_desc_t& other316) {
  match_spec = other316.match_spec;
  has_mbr_hdl = other316.has_mbr_hdl;
  has_grp_hdl = other316.has_grp_hdl;
  selector_grp_hdl = other316.selector_grp_hdl;
  action_mbr_hdl = other316.action_mbr_hdl;
  priority = other316.priority;
  action_desc = other316.action_desc;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_range_partition_for_scan_endkey_tbl_entry_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_range_partition_for_scan_endkey_tbl_entry_desc_t(";
  out << "match_spec=" << to_string(obj.match_spec);
  out << ", " << "has_mbr_hdl=" << to_string(obj.has_mbr_hdl);
  out << ", " << "has_grp_hdl=" << to_string(obj.has_grp_hdl);
  out << ", " << "selector_grp_hdl=" << to_string(obj.selector_grp_hdl);
  out << ", " << "action_mbr_hdl=" << to_string(obj.action_mbr_hdl);
  out << ", " << "priority=" << to_string(obj.priority);
  out << ", " << "action_desc=" << to_string(obj.action_desc);
  out << ")";
  return out;
}


netbufferv4_range_partition_tbl_entry_desc_t::~netbufferv4_range_partition_tbl_entry_desc_t() throw() {
}


void netbufferv4_range_partition_tbl_entry_desc_t::__set_match_spec(const netbufferv4_range_partition_tbl_match_spec_t& val) {
  this->match_spec = val;
}

void netbufferv4_range_partition_tbl_entry_desc_t::__set_has_mbr_hdl(const bool val) {
  this->has_mbr_hdl = val;
}

void netbufferv4_range_partition_tbl_entry_desc_t::__set_has_grp_hdl(const bool val) {
  this->has_grp_hdl = val;
}

void netbufferv4_range_partition_tbl_entry_desc_t::__set_selector_grp_hdl(const MemberHandle_t val) {
  this->selector_grp_hdl = val;
}

void netbufferv4_range_partition_tbl_entry_desc_t::__set_action_mbr_hdl(const MemberHandle_t val) {
  this->action_mbr_hdl = val;
}

void netbufferv4_range_partition_tbl_entry_desc_t::__set_priority(const int32_t val) {
  this->priority = val;
}

void netbufferv4_range_partition_tbl_entry_desc_t::__set_action_desc(const netbufferv4_action_desc_t& val) {
  this->action_desc = val;
}

const char* netbufferv4_range_partition_tbl_entry_desc_t::ascii_fingerprint = "E68534C1167E9E3ABB85E45F2C600071";
const uint8_t netbufferv4_range_partition_tbl_entry_desc_t::binary_fingerprint[16] = {0xE6,0x85,0x34,0xC1,0x16,0x7E,0x9E,0x3A,0xBB,0x85,0xE4,0x5F,0x2C,0x60,0x00,0x71};

uint32_t netbufferv4_range_partition_tbl_entry_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match_spec = false;
  bool isset_has_mbr_hdl = false;
  bool isset_has_grp_hdl = false;
  bool isset_selector_grp_hdl = false;
  bool isset_action_mbr_hdl = false;
  bool isset_priority = false;
  bool isset_action_desc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->match_spec.read(iprot);
          isset_match_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_mbr_hdl);
          isset_has_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_grp_hdl);
          isset_has_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->selector_grp_hdl);
          isset_selector_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_mbr_hdl);
          isset_action_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->priority);
          isset_priority = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_desc.read(iprot);
          isset_action_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selector_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_priority)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_range_partition_tbl_entry_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_range_partition_tbl_entry_desc_t");

  xfer += oprot->writeFieldBegin("match_spec", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->match_spec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_mbr_hdl", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_grp_hdl", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selector_grp_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->selector_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_mbr_hdl", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->action_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("priority", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->priority);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_desc", ::apache::thrift::protocol::T_STRUCT, 7);
  xfer += this->action_desc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_range_partition_tbl_entry_desc_t &a, netbufferv4_range_partition_tbl_entry_desc_t &b) {
  using ::std::swap;
  swap(a.match_spec, b.match_spec);
  swap(a.has_mbr_hdl, b.has_mbr_hdl);
  swap(a.has_grp_hdl, b.has_grp_hdl);
  swap(a.selector_grp_hdl, b.selector_grp_hdl);
  swap(a.action_mbr_hdl, b.action_mbr_hdl);
  swap(a.priority, b.priority);
  swap(a.action_desc, b.action_desc);
}

netbufferv4_range_partition_tbl_entry_desc_t::netbufferv4_range_partition_tbl_entry_desc_t(const netbufferv4_range_partition_tbl_entry_desc_t& other317) {
  match_spec = other317.match_spec;
  has_mbr_hdl = other317.has_mbr_hdl;
  has_grp_hdl = other317.has_grp_hdl;
  selector_grp_hdl = other317.selector_grp_hdl;
  action_mbr_hdl = other317.action_mbr_hdl;
  priority = other317.priority;
  action_desc = other317.action_desc;
}
netbufferv4_range_partition_tbl_entry_desc_t& netbufferv4_range_partition_tbl_entry_desc_t::operator=(const netbufferv4_range_partition_tbl_entry_desc_t& other318) {
  match_spec = other318.match_spec;
  has_mbr_hdl = other318.has_mbr_hdl;
  has_grp_hdl = other318.has_grp_hdl;
  selector_grp_hdl = other318.selector_grp_hdl;
  action_mbr_hdl = other318.action_mbr_hdl;
  priority = other318.priority;
  action_desc = other318.action_desc;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_range_partition_tbl_entry_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_range_partition_tbl_entry_desc_t(";
  out << "match_spec=" << to_string(obj.match_spec);
  out << ", " << "has_mbr_hdl=" << to_string(obj.has_mbr_hdl);
  out << ", " << "has_grp_hdl=" << to_string(obj.has_grp_hdl);
  out << ", " << "selector_grp_hdl=" << to_string(obj.selector_grp_hdl);
  out << ", " << "action_mbr_hdl=" << to_string(obj.action_mbr_hdl);
  out << ", " << "priority=" << to_string(obj.priority);
  out << ", " << "action_desc=" << to_string(obj.action_desc);
  out << ")";
  return out;
}


netbufferv4_recirculate_tbl_entry_desc_t::~netbufferv4_recirculate_tbl_entry_desc_t() throw() {
}


void netbufferv4_recirculate_tbl_entry_desc_t::__set_match_spec(const netbufferv4_recirculate_tbl_match_spec_t& val) {
  this->match_spec = val;
}

void netbufferv4_recirculate_tbl_entry_desc_t::__set_has_mbr_hdl(const bool val) {
  this->has_mbr_hdl = val;
}

void netbufferv4_recirculate_tbl_entry_desc_t::__set_has_grp_hdl(const bool val) {
  this->has_grp_hdl = val;
}

void netbufferv4_recirculate_tbl_entry_desc_t::__set_selector_grp_hdl(const MemberHandle_t val) {
  this->selector_grp_hdl = val;
}

void netbufferv4_recirculate_tbl_entry_desc_t::__set_action_mbr_hdl(const MemberHandle_t val) {
  this->action_mbr_hdl = val;
}

void netbufferv4_recirculate_tbl_entry_desc_t::__set_action_desc(const netbufferv4_action_desc_t& val) {
  this->action_desc = val;
}

const char* netbufferv4_recirculate_tbl_entry_desc_t::ascii_fingerprint = "84FBB469A2D7D4549BE1BB5FAE93BF03";
const uint8_t netbufferv4_recirculate_tbl_entry_desc_t::binary_fingerprint[16] = {0x84,0xFB,0xB4,0x69,0xA2,0xD7,0xD4,0x54,0x9B,0xE1,0xBB,0x5F,0xAE,0x93,0xBF,0x03};

uint32_t netbufferv4_recirculate_tbl_entry_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match_spec = false;
  bool isset_has_mbr_hdl = false;
  bool isset_has_grp_hdl = false;
  bool isset_selector_grp_hdl = false;
  bool isset_action_mbr_hdl = false;
  bool isset_action_desc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->match_spec.read(iprot);
          isset_match_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_mbr_hdl);
          isset_has_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_grp_hdl);
          isset_has_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->selector_grp_hdl);
          isset_selector_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_mbr_hdl);
          isset_action_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_desc.read(iprot);
          isset_action_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selector_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_recirculate_tbl_entry_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_recirculate_tbl_entry_desc_t");

  xfer += oprot->writeFieldBegin("match_spec", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->match_spec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_mbr_hdl", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_grp_hdl", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selector_grp_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->selector_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_mbr_hdl", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->action_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_desc", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->action_desc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_recirculate_tbl_entry_desc_t &a, netbufferv4_recirculate_tbl_entry_desc_t &b) {
  using ::std::swap;
  swap(a.match_spec, b.match_spec);
  swap(a.has_mbr_hdl, b.has_mbr_hdl);
  swap(a.has_grp_hdl, b.has_grp_hdl);
  swap(a.selector_grp_hdl, b.selector_grp_hdl);
  swap(a.action_mbr_hdl, b.action_mbr_hdl);
  swap(a.action_desc, b.action_desc);
}

netbufferv4_recirculate_tbl_entry_desc_t::netbufferv4_recirculate_tbl_entry_desc_t(const netbufferv4_recirculate_tbl_entry_desc_t& other319) {
  match_spec = other319.match_spec;
  has_mbr_hdl = other319.has_mbr_hdl;
  has_grp_hdl = other319.has_grp_hdl;
  selector_grp_hdl = other319.selector_grp_hdl;
  action_mbr_hdl = other319.action_mbr_hdl;
  action_desc = other319.action_desc;
}
netbufferv4_recirculate_tbl_entry_desc_t& netbufferv4_recirculate_tbl_entry_desc_t::operator=(const netbufferv4_recirculate_tbl_entry_desc_t& other320) {
  match_spec = other320.match_spec;
  has_mbr_hdl = other320.has_mbr_hdl;
  has_grp_hdl = other320.has_grp_hdl;
  selector_grp_hdl = other320.selector_grp_hdl;
  action_mbr_hdl = other320.action_mbr_hdl;
  action_desc = other320.action_desc;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_recirculate_tbl_entry_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_recirculate_tbl_entry_desc_t(";
  out << "match_spec=" << to_string(obj.match_spec);
  out << ", " << "has_mbr_hdl=" << to_string(obj.has_mbr_hdl);
  out << ", " << "has_grp_hdl=" << to_string(obj.has_grp_hdl);
  out << ", " << "selector_grp_hdl=" << to_string(obj.selector_grp_hdl);
  out << ", " << "action_mbr_hdl=" << to_string(obj.action_mbr_hdl);
  out << ", " << "action_desc=" << to_string(obj.action_desc);
  out << ")";
  return out;
}


netbufferv4_sample_tbl_entry_desc_t::~netbufferv4_sample_tbl_entry_desc_t() throw() {
}


void netbufferv4_sample_tbl_entry_desc_t::__set_match_spec(const netbufferv4_sample_tbl_match_spec_t& val) {
  this->match_spec = val;
}

void netbufferv4_sample_tbl_entry_desc_t::__set_has_mbr_hdl(const bool val) {
  this->has_mbr_hdl = val;
}

void netbufferv4_sample_tbl_entry_desc_t::__set_has_grp_hdl(const bool val) {
  this->has_grp_hdl = val;
}

void netbufferv4_sample_tbl_entry_desc_t::__set_selector_grp_hdl(const MemberHandle_t val) {
  this->selector_grp_hdl = val;
}

void netbufferv4_sample_tbl_entry_desc_t::__set_action_mbr_hdl(const MemberHandle_t val) {
  this->action_mbr_hdl = val;
}

void netbufferv4_sample_tbl_entry_desc_t::__set_action_desc(const netbufferv4_action_desc_t& val) {
  this->action_desc = val;
}

const char* netbufferv4_sample_tbl_entry_desc_t::ascii_fingerprint = "84FBB469A2D7D4549BE1BB5FAE93BF03";
const uint8_t netbufferv4_sample_tbl_entry_desc_t::binary_fingerprint[16] = {0x84,0xFB,0xB4,0x69,0xA2,0xD7,0xD4,0x54,0x9B,0xE1,0xBB,0x5F,0xAE,0x93,0xBF,0x03};

uint32_t netbufferv4_sample_tbl_entry_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match_spec = false;
  bool isset_has_mbr_hdl = false;
  bool isset_has_grp_hdl = false;
  bool isset_selector_grp_hdl = false;
  bool isset_action_mbr_hdl = false;
  bool isset_action_desc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->match_spec.read(iprot);
          isset_match_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_mbr_hdl);
          isset_has_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_grp_hdl);
          isset_has_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->selector_grp_hdl);
          isset_selector_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_mbr_hdl);
          isset_action_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_desc.read(iprot);
          isset_action_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selector_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_sample_tbl_entry_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_sample_tbl_entry_desc_t");

  xfer += oprot->writeFieldBegin("match_spec", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->match_spec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_mbr_hdl", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_grp_hdl", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selector_grp_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->selector_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_mbr_hdl", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->action_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_desc", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->action_desc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_sample_tbl_entry_desc_t &a, netbufferv4_sample_tbl_entry_desc_t &b) {
  using ::std::swap;
  swap(a.match_spec, b.match_spec);
  swap(a.has_mbr_hdl, b.has_mbr_hdl);
  swap(a.has_grp_hdl, b.has_grp_hdl);
  swap(a.selector_grp_hdl, b.selector_grp_hdl);
  swap(a.action_mbr_hdl, b.action_mbr_hdl);
  swap(a.action_desc, b.action_desc);
}

netbufferv4_sample_tbl_entry_desc_t::netbufferv4_sample_tbl_entry_desc_t(const netbufferv4_sample_tbl_entry_desc_t& other321) {
  match_spec = other321.match_spec;
  has_mbr_hdl = other321.has_mbr_hdl;
  has_grp_hdl = other321.has_grp_hdl;
  selector_grp_hdl = other321.selector_grp_hdl;
  action_mbr_hdl = other321.action_mbr_hdl;
  action_desc = other321.action_desc;
}
netbufferv4_sample_tbl_entry_desc_t& netbufferv4_sample_tbl_entry_desc_t::operator=(const netbufferv4_sample_tbl_entry_desc_t& other322) {
  match_spec = other322.match_spec;
  has_mbr_hdl = other322.has_mbr_hdl;
  has_grp_hdl = other322.has_grp_hdl;
  selector_grp_hdl = other322.selector_grp_hdl;
  action_mbr_hdl = other322.action_mbr_hdl;
  action_desc = other322.action_desc;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_sample_tbl_entry_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_sample_tbl_entry_desc_t(";
  out << "match_spec=" << to_string(obj.match_spec);
  out << ", " << "has_mbr_hdl=" << to_string(obj.has_mbr_hdl);
  out << ", " << "has_grp_hdl=" << to_string(obj.has_grp_hdl);
  out << ", " << "selector_grp_hdl=" << to_string(obj.selector_grp_hdl);
  out << ", " << "action_mbr_hdl=" << to_string(obj.action_mbr_hdl);
  out << ", " << "action_desc=" << to_string(obj.action_desc);
  out << ")";
  return out;
}


netbufferv4_save_client_udpport_tbl_entry_desc_t::~netbufferv4_save_client_udpport_tbl_entry_desc_t() throw() {
}


void netbufferv4_save_client_udpport_tbl_entry_desc_t::__set_match_spec(const netbufferv4_save_client_udpport_tbl_match_spec_t& val) {
  this->match_spec = val;
}

void netbufferv4_save_client_udpport_tbl_entry_desc_t::__set_has_mbr_hdl(const bool val) {
  this->has_mbr_hdl = val;
}

void netbufferv4_save_client_udpport_tbl_entry_desc_t::__set_has_grp_hdl(const bool val) {
  this->has_grp_hdl = val;
}

void netbufferv4_save_client_udpport_tbl_entry_desc_t::__set_selector_grp_hdl(const MemberHandle_t val) {
  this->selector_grp_hdl = val;
}

void netbufferv4_save_client_udpport_tbl_entry_desc_t::__set_action_mbr_hdl(const MemberHandle_t val) {
  this->action_mbr_hdl = val;
}

void netbufferv4_save_client_udpport_tbl_entry_desc_t::__set_action_desc(const netbufferv4_action_desc_t& val) {
  this->action_desc = val;
}

const char* netbufferv4_save_client_udpport_tbl_entry_desc_t::ascii_fingerprint = "10D8F3C7D2E0D97B5ECBCEF50AA9D98F";
const uint8_t netbufferv4_save_client_udpport_tbl_entry_desc_t::binary_fingerprint[16] = {0x10,0xD8,0xF3,0xC7,0xD2,0xE0,0xD9,0x7B,0x5E,0xCB,0xCE,0xF5,0x0A,0xA9,0xD9,0x8F};

uint32_t netbufferv4_save_client_udpport_tbl_entry_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match_spec = false;
  bool isset_has_mbr_hdl = false;
  bool isset_has_grp_hdl = false;
  bool isset_selector_grp_hdl = false;
  bool isset_action_mbr_hdl = false;
  bool isset_action_desc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->match_spec.read(iprot);
          isset_match_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_mbr_hdl);
          isset_has_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_grp_hdl);
          isset_has_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->selector_grp_hdl);
          isset_selector_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_mbr_hdl);
          isset_action_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_desc.read(iprot);
          isset_action_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selector_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_save_client_udpport_tbl_entry_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_save_client_udpport_tbl_entry_desc_t");

  xfer += oprot->writeFieldBegin("match_spec", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->match_spec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_mbr_hdl", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_grp_hdl", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selector_grp_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->selector_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_mbr_hdl", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->action_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_desc", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->action_desc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_save_client_udpport_tbl_entry_desc_t &a, netbufferv4_save_client_udpport_tbl_entry_desc_t &b) {
  using ::std::swap;
  swap(a.match_spec, b.match_spec);
  swap(a.has_mbr_hdl, b.has_mbr_hdl);
  swap(a.has_grp_hdl, b.has_grp_hdl);
  swap(a.selector_grp_hdl, b.selector_grp_hdl);
  swap(a.action_mbr_hdl, b.action_mbr_hdl);
  swap(a.action_desc, b.action_desc);
}

netbufferv4_save_client_udpport_tbl_entry_desc_t::netbufferv4_save_client_udpport_tbl_entry_desc_t(const netbufferv4_save_client_udpport_tbl_entry_desc_t& other323) {
  match_spec = other323.match_spec;
  has_mbr_hdl = other323.has_mbr_hdl;
  has_grp_hdl = other323.has_grp_hdl;
  selector_grp_hdl = other323.selector_grp_hdl;
  action_mbr_hdl = other323.action_mbr_hdl;
  action_desc = other323.action_desc;
}
netbufferv4_save_client_udpport_tbl_entry_desc_t& netbufferv4_save_client_udpport_tbl_entry_desc_t::operator=(const netbufferv4_save_client_udpport_tbl_entry_desc_t& other324) {
  match_spec = other324.match_spec;
  has_mbr_hdl = other324.has_mbr_hdl;
  has_grp_hdl = other324.has_grp_hdl;
  selector_grp_hdl = other324.selector_grp_hdl;
  action_mbr_hdl = other324.action_mbr_hdl;
  action_desc = other324.action_desc;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_save_client_udpport_tbl_entry_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_save_client_udpport_tbl_entry_desc_t(";
  out << "match_spec=" << to_string(obj.match_spec);
  out << ", " << "has_mbr_hdl=" << to_string(obj.has_mbr_hdl);
  out << ", " << "has_grp_hdl=" << to_string(obj.has_grp_hdl);
  out << ", " << "selector_grp_hdl=" << to_string(obj.selector_grp_hdl);
  out << ", " << "action_mbr_hdl=" << to_string(obj.action_mbr_hdl);
  out << ", " << "action_desc=" << to_string(obj.action_desc);
  out << ")";
  return out;
}


netbufferv4_set_hot_threshold_tbl_entry_desc_t::~netbufferv4_set_hot_threshold_tbl_entry_desc_t() throw() {
}


void netbufferv4_set_hot_threshold_tbl_entry_desc_t::__set_has_mbr_hdl(const bool val) {
  this->has_mbr_hdl = val;
}

void netbufferv4_set_hot_threshold_tbl_entry_desc_t::__set_has_grp_hdl(const bool val) {
  this->has_grp_hdl = val;
}

void netbufferv4_set_hot_threshold_tbl_entry_desc_t::__set_selector_grp_hdl(const MemberHandle_t val) {
  this->selector_grp_hdl = val;
}

void netbufferv4_set_hot_threshold_tbl_entry_desc_t::__set_action_mbr_hdl(const MemberHandle_t val) {
  this->action_mbr_hdl = val;
}

void netbufferv4_set_hot_threshold_tbl_entry_desc_t::__set_action_desc(const netbufferv4_action_desc_t& val) {
  this->action_desc = val;
}

const char* netbufferv4_set_hot_threshold_tbl_entry_desc_t::ascii_fingerprint = "C575449A3208CEA2FD13992294FA3C48";
const uint8_t netbufferv4_set_hot_threshold_tbl_entry_desc_t::binary_fingerprint[16] = {0xC5,0x75,0x44,0x9A,0x32,0x08,0xCE,0xA2,0xFD,0x13,0x99,0x22,0x94,0xFA,0x3C,0x48};

uint32_t netbufferv4_set_hot_threshold_tbl_entry_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_has_mbr_hdl = false;
  bool isset_has_grp_hdl = false;
  bool isset_selector_grp_hdl = false;
  bool isset_action_mbr_hdl = false;
  bool isset_action_desc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_mbr_hdl);
          isset_has_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_grp_hdl);
          isset_has_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->selector_grp_hdl);
          isset_selector_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_mbr_hdl);
          isset_action_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_desc.read(iprot);
          isset_action_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_has_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selector_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_set_hot_threshold_tbl_entry_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_set_hot_threshold_tbl_entry_desc_t");

  xfer += oprot->writeFieldBegin("has_mbr_hdl", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->has_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_grp_hdl", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selector_grp_hdl", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->selector_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_mbr_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->action_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_desc", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->action_desc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_set_hot_threshold_tbl_entry_desc_t &a, netbufferv4_set_hot_threshold_tbl_entry_desc_t &b) {
  using ::std::swap;
  swap(a.has_mbr_hdl, b.has_mbr_hdl);
  swap(a.has_grp_hdl, b.has_grp_hdl);
  swap(a.selector_grp_hdl, b.selector_grp_hdl);
  swap(a.action_mbr_hdl, b.action_mbr_hdl);
  swap(a.action_desc, b.action_desc);
}

netbufferv4_set_hot_threshold_tbl_entry_desc_t::netbufferv4_set_hot_threshold_tbl_entry_desc_t(const netbufferv4_set_hot_threshold_tbl_entry_desc_t& other325) {
  has_mbr_hdl = other325.has_mbr_hdl;
  has_grp_hdl = other325.has_grp_hdl;
  selector_grp_hdl = other325.selector_grp_hdl;
  action_mbr_hdl = other325.action_mbr_hdl;
  action_desc = other325.action_desc;
}
netbufferv4_set_hot_threshold_tbl_entry_desc_t& netbufferv4_set_hot_threshold_tbl_entry_desc_t::operator=(const netbufferv4_set_hot_threshold_tbl_entry_desc_t& other326) {
  has_mbr_hdl = other326.has_mbr_hdl;
  has_grp_hdl = other326.has_grp_hdl;
  selector_grp_hdl = other326.selector_grp_hdl;
  action_mbr_hdl = other326.action_mbr_hdl;
  action_desc = other326.action_desc;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_set_hot_threshold_tbl_entry_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_set_hot_threshold_tbl_entry_desc_t(";
  out << "has_mbr_hdl=" << to_string(obj.has_mbr_hdl);
  out << ", " << "has_grp_hdl=" << to_string(obj.has_grp_hdl);
  out << ", " << "selector_grp_hdl=" << to_string(obj.selector_grp_hdl);
  out << ", " << "action_mbr_hdl=" << to_string(obj.action_mbr_hdl);
  out << ", " << "action_desc=" << to_string(obj.action_desc);
  out << ")";
  return out;
}


netbufferv4_snapshot_flag_tbl_entry_desc_t::~netbufferv4_snapshot_flag_tbl_entry_desc_t() throw() {
}


void netbufferv4_snapshot_flag_tbl_entry_desc_t::__set_match_spec(const netbufferv4_snapshot_flag_tbl_match_spec_t& val) {
  this->match_spec = val;
}

void netbufferv4_snapshot_flag_tbl_entry_desc_t::__set_has_mbr_hdl(const bool val) {
  this->has_mbr_hdl = val;
}

void netbufferv4_snapshot_flag_tbl_entry_desc_t::__set_has_grp_hdl(const bool val) {
  this->has_grp_hdl = val;
}

void netbufferv4_snapshot_flag_tbl_entry_desc_t::__set_selector_grp_hdl(const MemberHandle_t val) {
  this->selector_grp_hdl = val;
}

void netbufferv4_snapshot_flag_tbl_entry_desc_t::__set_action_mbr_hdl(const MemberHandle_t val) {
  this->action_mbr_hdl = val;
}

void netbufferv4_snapshot_flag_tbl_entry_desc_t::__set_action_desc(const netbufferv4_action_desc_t& val) {
  this->action_desc = val;
}

const char* netbufferv4_snapshot_flag_tbl_entry_desc_t::ascii_fingerprint = "84FBB469A2D7D4549BE1BB5FAE93BF03";
const uint8_t netbufferv4_snapshot_flag_tbl_entry_desc_t::binary_fingerprint[16] = {0x84,0xFB,0xB4,0x69,0xA2,0xD7,0xD4,0x54,0x9B,0xE1,0xBB,0x5F,0xAE,0x93,0xBF,0x03};

uint32_t netbufferv4_snapshot_flag_tbl_entry_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match_spec = false;
  bool isset_has_mbr_hdl = false;
  bool isset_has_grp_hdl = false;
  bool isset_selector_grp_hdl = false;
  bool isset_action_mbr_hdl = false;
  bool isset_action_desc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->match_spec.read(iprot);
          isset_match_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_mbr_hdl);
          isset_has_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_grp_hdl);
          isset_has_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->selector_grp_hdl);
          isset_selector_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_mbr_hdl);
          isset_action_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_desc.read(iprot);
          isset_action_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selector_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_snapshot_flag_tbl_entry_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_snapshot_flag_tbl_entry_desc_t");

  xfer += oprot->writeFieldBegin("match_spec", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->match_spec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_mbr_hdl", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_grp_hdl", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selector_grp_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->selector_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_mbr_hdl", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->action_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_desc", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->action_desc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_snapshot_flag_tbl_entry_desc_t &a, netbufferv4_snapshot_flag_tbl_entry_desc_t &b) {
  using ::std::swap;
  swap(a.match_spec, b.match_spec);
  swap(a.has_mbr_hdl, b.has_mbr_hdl);
  swap(a.has_grp_hdl, b.has_grp_hdl);
  swap(a.selector_grp_hdl, b.selector_grp_hdl);
  swap(a.action_mbr_hdl, b.action_mbr_hdl);
  swap(a.action_desc, b.action_desc);
}

netbufferv4_snapshot_flag_tbl_entry_desc_t::netbufferv4_snapshot_flag_tbl_entry_desc_t(const netbufferv4_snapshot_flag_tbl_entry_desc_t& other327) {
  match_spec = other327.match_spec;
  has_mbr_hdl = other327.has_mbr_hdl;
  has_grp_hdl = other327.has_grp_hdl;
  selector_grp_hdl = other327.selector_grp_hdl;
  action_mbr_hdl = other327.action_mbr_hdl;
  action_desc = other327.action_desc;
}
netbufferv4_snapshot_flag_tbl_entry_desc_t& netbufferv4_snapshot_flag_tbl_entry_desc_t::operator=(const netbufferv4_snapshot_flag_tbl_entry_desc_t& other328) {
  match_spec = other328.match_spec;
  has_mbr_hdl = other328.has_mbr_hdl;
  has_grp_hdl = other328.has_grp_hdl;
  selector_grp_hdl = other328.selector_grp_hdl;
  action_mbr_hdl = other328.action_mbr_hdl;
  action_desc = other328.action_desc;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_snapshot_flag_tbl_entry_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_snapshot_flag_tbl_entry_desc_t(";
  out << "match_spec=" << to_string(obj.match_spec);
  out << ", " << "has_mbr_hdl=" << to_string(obj.has_mbr_hdl);
  out << ", " << "has_grp_hdl=" << to_string(obj.has_grp_hdl);
  out << ", " << "selector_grp_hdl=" << to_string(obj.selector_grp_hdl);
  out << ", " << "action_mbr_hdl=" << to_string(obj.action_mbr_hdl);
  out << ", " << "action_desc=" << to_string(obj.action_desc);
  out << ")";
  return out;
}


netbufferv4_update_ipmac_srcport_tbl_entry_desc_t::~netbufferv4_update_ipmac_srcport_tbl_entry_desc_t() throw() {
}


void netbufferv4_update_ipmac_srcport_tbl_entry_desc_t::__set_match_spec(const netbufferv4_update_ipmac_srcport_tbl_match_spec_t& val) {
  this->match_spec = val;
}

void netbufferv4_update_ipmac_srcport_tbl_entry_desc_t::__set_has_mbr_hdl(const bool val) {
  this->has_mbr_hdl = val;
}

void netbufferv4_update_ipmac_srcport_tbl_entry_desc_t::__set_has_grp_hdl(const bool val) {
  this->has_grp_hdl = val;
}

void netbufferv4_update_ipmac_srcport_tbl_entry_desc_t::__set_selector_grp_hdl(const MemberHandle_t val) {
  this->selector_grp_hdl = val;
}

void netbufferv4_update_ipmac_srcport_tbl_entry_desc_t::__set_action_mbr_hdl(const MemberHandle_t val) {
  this->action_mbr_hdl = val;
}

void netbufferv4_update_ipmac_srcport_tbl_entry_desc_t::__set_action_desc(const netbufferv4_action_desc_t& val) {
  this->action_desc = val;
}

const char* netbufferv4_update_ipmac_srcport_tbl_entry_desc_t::ascii_fingerprint = "81DEBE26F66E0316F58C656D9A7A9618";
const uint8_t netbufferv4_update_ipmac_srcport_tbl_entry_desc_t::binary_fingerprint[16] = {0x81,0xDE,0xBE,0x26,0xF6,0x6E,0x03,0x16,0xF5,0x8C,0x65,0x6D,0x9A,0x7A,0x96,0x18};

uint32_t netbufferv4_update_ipmac_srcport_tbl_entry_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match_spec = false;
  bool isset_has_mbr_hdl = false;
  bool isset_has_grp_hdl = false;
  bool isset_selector_grp_hdl = false;
  bool isset_action_mbr_hdl = false;
  bool isset_action_desc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->match_spec.read(iprot);
          isset_match_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_mbr_hdl);
          isset_has_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_grp_hdl);
          isset_has_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->selector_grp_hdl);
          isset_selector_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_mbr_hdl);
          isset_action_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_desc.read(iprot);
          isset_action_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selector_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_ipmac_srcport_tbl_entry_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_ipmac_srcport_tbl_entry_desc_t");

  xfer += oprot->writeFieldBegin("match_spec", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->match_spec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_mbr_hdl", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_grp_hdl", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selector_grp_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->selector_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_mbr_hdl", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->action_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_desc", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->action_desc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_ipmac_srcport_tbl_entry_desc_t &a, netbufferv4_update_ipmac_srcport_tbl_entry_desc_t &b) {
  using ::std::swap;
  swap(a.match_spec, b.match_spec);
  swap(a.has_mbr_hdl, b.has_mbr_hdl);
  swap(a.has_grp_hdl, b.has_grp_hdl);
  swap(a.selector_grp_hdl, b.selector_grp_hdl);
  swap(a.action_mbr_hdl, b.action_mbr_hdl);
  swap(a.action_desc, b.action_desc);
}

netbufferv4_update_ipmac_srcport_tbl_entry_desc_t::netbufferv4_update_ipmac_srcport_tbl_entry_desc_t(const netbufferv4_update_ipmac_srcport_tbl_entry_desc_t& other329) {
  match_spec = other329.match_spec;
  has_mbr_hdl = other329.has_mbr_hdl;
  has_grp_hdl = other329.has_grp_hdl;
  selector_grp_hdl = other329.selector_grp_hdl;
  action_mbr_hdl = other329.action_mbr_hdl;
  action_desc = other329.action_desc;
}
netbufferv4_update_ipmac_srcport_tbl_entry_desc_t& netbufferv4_update_ipmac_srcport_tbl_entry_desc_t::operator=(const netbufferv4_update_ipmac_srcport_tbl_entry_desc_t& other330) {
  match_spec = other330.match_spec;
  has_mbr_hdl = other330.has_mbr_hdl;
  has_grp_hdl = other330.has_grp_hdl;
  selector_grp_hdl = other330.selector_grp_hdl;
  action_mbr_hdl = other330.action_mbr_hdl;
  action_desc = other330.action_desc;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_ipmac_srcport_tbl_entry_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_ipmac_srcport_tbl_entry_desc_t(";
  out << "match_spec=" << to_string(obj.match_spec);
  out << ", " << "has_mbr_hdl=" << to_string(obj.has_mbr_hdl);
  out << ", " << "has_grp_hdl=" << to_string(obj.has_grp_hdl);
  out << ", " << "selector_grp_hdl=" << to_string(obj.selector_grp_hdl);
  out << ", " << "action_mbr_hdl=" << to_string(obj.action_mbr_hdl);
  out << ", " << "action_desc=" << to_string(obj.action_desc);
  out << ")";
  return out;
}


netbufferv4_update_pktlen_tbl_entry_desc_t::~netbufferv4_update_pktlen_tbl_entry_desc_t() throw() {
}


void netbufferv4_update_pktlen_tbl_entry_desc_t::__set_match_spec(const netbufferv4_update_pktlen_tbl_match_spec_t& val) {
  this->match_spec = val;
}

void netbufferv4_update_pktlen_tbl_entry_desc_t::__set_has_mbr_hdl(const bool val) {
  this->has_mbr_hdl = val;
}

void netbufferv4_update_pktlen_tbl_entry_desc_t::__set_has_grp_hdl(const bool val) {
  this->has_grp_hdl = val;
}

void netbufferv4_update_pktlen_tbl_entry_desc_t::__set_selector_grp_hdl(const MemberHandle_t val) {
  this->selector_grp_hdl = val;
}

void netbufferv4_update_pktlen_tbl_entry_desc_t::__set_action_mbr_hdl(const MemberHandle_t val) {
  this->action_mbr_hdl = val;
}

void netbufferv4_update_pktlen_tbl_entry_desc_t::__set_priority(const int32_t val) {
  this->priority = val;
}

void netbufferv4_update_pktlen_tbl_entry_desc_t::__set_action_desc(const netbufferv4_action_desc_t& val) {
  this->action_desc = val;
}

const char* netbufferv4_update_pktlen_tbl_entry_desc_t::ascii_fingerprint = "80E166D05391A70858FD2C7A7C8A9987";
const uint8_t netbufferv4_update_pktlen_tbl_entry_desc_t::binary_fingerprint[16] = {0x80,0xE1,0x66,0xD0,0x53,0x91,0xA7,0x08,0x58,0xFD,0x2C,0x7A,0x7C,0x8A,0x99,0x87};

uint32_t netbufferv4_update_pktlen_tbl_entry_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match_spec = false;
  bool isset_has_mbr_hdl = false;
  bool isset_has_grp_hdl = false;
  bool isset_selector_grp_hdl = false;
  bool isset_action_mbr_hdl = false;
  bool isset_priority = false;
  bool isset_action_desc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->match_spec.read(iprot);
          isset_match_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_mbr_hdl);
          isset_has_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_grp_hdl);
          isset_has_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->selector_grp_hdl);
          isset_selector_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_mbr_hdl);
          isset_action_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->priority);
          isset_priority = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_desc.read(iprot);
          isset_action_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selector_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_priority)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_pktlen_tbl_entry_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_pktlen_tbl_entry_desc_t");

  xfer += oprot->writeFieldBegin("match_spec", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->match_spec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_mbr_hdl", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_grp_hdl", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selector_grp_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->selector_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_mbr_hdl", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->action_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("priority", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->priority);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_desc", ::apache::thrift::protocol::T_STRUCT, 7);
  xfer += this->action_desc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_pktlen_tbl_entry_desc_t &a, netbufferv4_update_pktlen_tbl_entry_desc_t &b) {
  using ::std::swap;
  swap(a.match_spec, b.match_spec);
  swap(a.has_mbr_hdl, b.has_mbr_hdl);
  swap(a.has_grp_hdl, b.has_grp_hdl);
  swap(a.selector_grp_hdl, b.selector_grp_hdl);
  swap(a.action_mbr_hdl, b.action_mbr_hdl);
  swap(a.priority, b.priority);
  swap(a.action_desc, b.action_desc);
}

netbufferv4_update_pktlen_tbl_entry_desc_t::netbufferv4_update_pktlen_tbl_entry_desc_t(const netbufferv4_update_pktlen_tbl_entry_desc_t& other331) {
  match_spec = other331.match_spec;
  has_mbr_hdl = other331.has_mbr_hdl;
  has_grp_hdl = other331.has_grp_hdl;
  selector_grp_hdl = other331.selector_grp_hdl;
  action_mbr_hdl = other331.action_mbr_hdl;
  priority = other331.priority;
  action_desc = other331.action_desc;
}
netbufferv4_update_pktlen_tbl_entry_desc_t& netbufferv4_update_pktlen_tbl_entry_desc_t::operator=(const netbufferv4_update_pktlen_tbl_entry_desc_t& other332) {
  match_spec = other332.match_spec;
  has_mbr_hdl = other332.has_mbr_hdl;
  has_grp_hdl = other332.has_grp_hdl;
  selector_grp_hdl = other332.selector_grp_hdl;
  action_mbr_hdl = other332.action_mbr_hdl;
  priority = other332.priority;
  action_desc = other332.action_desc;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_pktlen_tbl_entry_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_pktlen_tbl_entry_desc_t(";
  out << "match_spec=" << to_string(obj.match_spec);
  out << ", " << "has_mbr_hdl=" << to_string(obj.has_mbr_hdl);
  out << ", " << "has_grp_hdl=" << to_string(obj.has_grp_hdl);
  out << ", " << "selector_grp_hdl=" << to_string(obj.selector_grp_hdl);
  out << ", " << "action_mbr_hdl=" << to_string(obj.action_mbr_hdl);
  out << ", " << "priority=" << to_string(obj.priority);
  out << ", " << "action_desc=" << to_string(obj.action_desc);
  out << ")";
  return out;
}


netbufferv4_update_valhi10_tbl_entry_desc_t::~netbufferv4_update_valhi10_tbl_entry_desc_t() throw() {
}


void netbufferv4_update_valhi10_tbl_entry_desc_t::__set_match_spec(const netbufferv4_update_valhi10_tbl_match_spec_t& val) {
  this->match_spec = val;
}

void netbufferv4_update_valhi10_tbl_entry_desc_t::__set_has_mbr_hdl(const bool val) {
  this->has_mbr_hdl = val;
}

void netbufferv4_update_valhi10_tbl_entry_desc_t::__set_has_grp_hdl(const bool val) {
  this->has_grp_hdl = val;
}

void netbufferv4_update_valhi10_tbl_entry_desc_t::__set_selector_grp_hdl(const MemberHandle_t val) {
  this->selector_grp_hdl = val;
}

void netbufferv4_update_valhi10_tbl_entry_desc_t::__set_action_mbr_hdl(const MemberHandle_t val) {
  this->action_mbr_hdl = val;
}

void netbufferv4_update_valhi10_tbl_entry_desc_t::__set_action_desc(const netbufferv4_action_desc_t& val) {
  this->action_desc = val;
}

const char* netbufferv4_update_valhi10_tbl_entry_desc_t::ascii_fingerprint = "CE9F8543027FE404200DB002809A6441";
const uint8_t netbufferv4_update_valhi10_tbl_entry_desc_t::binary_fingerprint[16] = {0xCE,0x9F,0x85,0x43,0x02,0x7F,0xE4,0x04,0x20,0x0D,0xB0,0x02,0x80,0x9A,0x64,0x41};

uint32_t netbufferv4_update_valhi10_tbl_entry_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match_spec = false;
  bool isset_has_mbr_hdl = false;
  bool isset_has_grp_hdl = false;
  bool isset_selector_grp_hdl = false;
  bool isset_action_mbr_hdl = false;
  bool isset_action_desc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->match_spec.read(iprot);
          isset_match_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_mbr_hdl);
          isset_has_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_grp_hdl);
          isset_has_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->selector_grp_hdl);
          isset_selector_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_mbr_hdl);
          isset_action_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_desc.read(iprot);
          isset_action_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selector_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_valhi10_tbl_entry_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_valhi10_tbl_entry_desc_t");

  xfer += oprot->writeFieldBegin("match_spec", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->match_spec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_mbr_hdl", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_grp_hdl", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selector_grp_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->selector_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_mbr_hdl", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->action_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_desc", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->action_desc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_valhi10_tbl_entry_desc_t &a, netbufferv4_update_valhi10_tbl_entry_desc_t &b) {
  using ::std::swap;
  swap(a.match_spec, b.match_spec);
  swap(a.has_mbr_hdl, b.has_mbr_hdl);
  swap(a.has_grp_hdl, b.has_grp_hdl);
  swap(a.selector_grp_hdl, b.selector_grp_hdl);
  swap(a.action_mbr_hdl, b.action_mbr_hdl);
  swap(a.action_desc, b.action_desc);
}

netbufferv4_update_valhi10_tbl_entry_desc_t::netbufferv4_update_valhi10_tbl_entry_desc_t(const netbufferv4_update_valhi10_tbl_entry_desc_t& other333) {
  match_spec = other333.match_spec;
  has_mbr_hdl = other333.has_mbr_hdl;
  has_grp_hdl = other333.has_grp_hdl;
  selector_grp_hdl = other333.selector_grp_hdl;
  action_mbr_hdl = other333.action_mbr_hdl;
  action_desc = other333.action_desc;
}
netbufferv4_update_valhi10_tbl_entry_desc_t& netbufferv4_update_valhi10_tbl_entry_desc_t::operator=(const netbufferv4_update_valhi10_tbl_entry_desc_t& other334) {
  match_spec = other334.match_spec;
  has_mbr_hdl = other334.has_mbr_hdl;
  has_grp_hdl = other334.has_grp_hdl;
  selector_grp_hdl = other334.selector_grp_hdl;
  action_mbr_hdl = other334.action_mbr_hdl;
  action_desc = other334.action_desc;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_valhi10_tbl_entry_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_valhi10_tbl_entry_desc_t(";
  out << "match_spec=" << to_string(obj.match_spec);
  out << ", " << "has_mbr_hdl=" << to_string(obj.has_mbr_hdl);
  out << ", " << "has_grp_hdl=" << to_string(obj.has_grp_hdl);
  out << ", " << "selector_grp_hdl=" << to_string(obj.selector_grp_hdl);
  out << ", " << "action_mbr_hdl=" << to_string(obj.action_mbr_hdl);
  out << ", " << "action_desc=" << to_string(obj.action_desc);
  out << ")";
  return out;
}


netbufferv4_update_valhi11_tbl_entry_desc_t::~netbufferv4_update_valhi11_tbl_entry_desc_t() throw() {
}


void netbufferv4_update_valhi11_tbl_entry_desc_t::__set_match_spec(const netbufferv4_update_valhi11_tbl_match_spec_t& val) {
  this->match_spec = val;
}

void netbufferv4_update_valhi11_tbl_entry_desc_t::__set_has_mbr_hdl(const bool val) {
  this->has_mbr_hdl = val;
}

void netbufferv4_update_valhi11_tbl_entry_desc_t::__set_has_grp_hdl(const bool val) {
  this->has_grp_hdl = val;
}

void netbufferv4_update_valhi11_tbl_entry_desc_t::__set_selector_grp_hdl(const MemberHandle_t val) {
  this->selector_grp_hdl = val;
}

void netbufferv4_update_valhi11_tbl_entry_desc_t::__set_action_mbr_hdl(const MemberHandle_t val) {
  this->action_mbr_hdl = val;
}

void netbufferv4_update_valhi11_tbl_entry_desc_t::__set_action_desc(const netbufferv4_action_desc_t& val) {
  this->action_desc = val;
}

const char* netbufferv4_update_valhi11_tbl_entry_desc_t::ascii_fingerprint = "CE9F8543027FE404200DB002809A6441";
const uint8_t netbufferv4_update_valhi11_tbl_entry_desc_t::binary_fingerprint[16] = {0xCE,0x9F,0x85,0x43,0x02,0x7F,0xE4,0x04,0x20,0x0D,0xB0,0x02,0x80,0x9A,0x64,0x41};

uint32_t netbufferv4_update_valhi11_tbl_entry_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match_spec = false;
  bool isset_has_mbr_hdl = false;
  bool isset_has_grp_hdl = false;
  bool isset_selector_grp_hdl = false;
  bool isset_action_mbr_hdl = false;
  bool isset_action_desc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->match_spec.read(iprot);
          isset_match_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_mbr_hdl);
          isset_has_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_grp_hdl);
          isset_has_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->selector_grp_hdl);
          isset_selector_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_mbr_hdl);
          isset_action_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_desc.read(iprot);
          isset_action_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selector_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_valhi11_tbl_entry_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_valhi11_tbl_entry_desc_t");

  xfer += oprot->writeFieldBegin("match_spec", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->match_spec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_mbr_hdl", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_grp_hdl", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selector_grp_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->selector_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_mbr_hdl", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->action_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_desc", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->action_desc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_valhi11_tbl_entry_desc_t &a, netbufferv4_update_valhi11_tbl_entry_desc_t &b) {
  using ::std::swap;
  swap(a.match_spec, b.match_spec);
  swap(a.has_mbr_hdl, b.has_mbr_hdl);
  swap(a.has_grp_hdl, b.has_grp_hdl);
  swap(a.selector_grp_hdl, b.selector_grp_hdl);
  swap(a.action_mbr_hdl, b.action_mbr_hdl);
  swap(a.action_desc, b.action_desc);
}

netbufferv4_update_valhi11_tbl_entry_desc_t::netbufferv4_update_valhi11_tbl_entry_desc_t(const netbufferv4_update_valhi11_tbl_entry_desc_t& other335) {
  match_spec = other335.match_spec;
  has_mbr_hdl = other335.has_mbr_hdl;
  has_grp_hdl = other335.has_grp_hdl;
  selector_grp_hdl = other335.selector_grp_hdl;
  action_mbr_hdl = other335.action_mbr_hdl;
  action_desc = other335.action_desc;
}
netbufferv4_update_valhi11_tbl_entry_desc_t& netbufferv4_update_valhi11_tbl_entry_desc_t::operator=(const netbufferv4_update_valhi11_tbl_entry_desc_t& other336) {
  match_spec = other336.match_spec;
  has_mbr_hdl = other336.has_mbr_hdl;
  has_grp_hdl = other336.has_grp_hdl;
  selector_grp_hdl = other336.selector_grp_hdl;
  action_mbr_hdl = other336.action_mbr_hdl;
  action_desc = other336.action_desc;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_valhi11_tbl_entry_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_valhi11_tbl_entry_desc_t(";
  out << "match_spec=" << to_string(obj.match_spec);
  out << ", " << "has_mbr_hdl=" << to_string(obj.has_mbr_hdl);
  out << ", " << "has_grp_hdl=" << to_string(obj.has_grp_hdl);
  out << ", " << "selector_grp_hdl=" << to_string(obj.selector_grp_hdl);
  out << ", " << "action_mbr_hdl=" << to_string(obj.action_mbr_hdl);
  out << ", " << "action_desc=" << to_string(obj.action_desc);
  out << ")";
  return out;
}


netbufferv4_update_valhi12_tbl_entry_desc_t::~netbufferv4_update_valhi12_tbl_entry_desc_t() throw() {
}


void netbufferv4_update_valhi12_tbl_entry_desc_t::__set_match_spec(const netbufferv4_update_valhi12_tbl_match_spec_t& val) {
  this->match_spec = val;
}

void netbufferv4_update_valhi12_tbl_entry_desc_t::__set_has_mbr_hdl(const bool val) {
  this->has_mbr_hdl = val;
}

void netbufferv4_update_valhi12_tbl_entry_desc_t::__set_has_grp_hdl(const bool val) {
  this->has_grp_hdl = val;
}

void netbufferv4_update_valhi12_tbl_entry_desc_t::__set_selector_grp_hdl(const MemberHandle_t val) {
  this->selector_grp_hdl = val;
}

void netbufferv4_update_valhi12_tbl_entry_desc_t::__set_action_mbr_hdl(const MemberHandle_t val) {
  this->action_mbr_hdl = val;
}

void netbufferv4_update_valhi12_tbl_entry_desc_t::__set_action_desc(const netbufferv4_action_desc_t& val) {
  this->action_desc = val;
}

const char* netbufferv4_update_valhi12_tbl_entry_desc_t::ascii_fingerprint = "CE9F8543027FE404200DB002809A6441";
const uint8_t netbufferv4_update_valhi12_tbl_entry_desc_t::binary_fingerprint[16] = {0xCE,0x9F,0x85,0x43,0x02,0x7F,0xE4,0x04,0x20,0x0D,0xB0,0x02,0x80,0x9A,0x64,0x41};

uint32_t netbufferv4_update_valhi12_tbl_entry_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match_spec = false;
  bool isset_has_mbr_hdl = false;
  bool isset_has_grp_hdl = false;
  bool isset_selector_grp_hdl = false;
  bool isset_action_mbr_hdl = false;
  bool isset_action_desc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->match_spec.read(iprot);
          isset_match_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_mbr_hdl);
          isset_has_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_grp_hdl);
          isset_has_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->selector_grp_hdl);
          isset_selector_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_mbr_hdl);
          isset_action_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_desc.read(iprot);
          isset_action_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selector_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_valhi12_tbl_entry_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_valhi12_tbl_entry_desc_t");

  xfer += oprot->writeFieldBegin("match_spec", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->match_spec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_mbr_hdl", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_grp_hdl", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selector_grp_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->selector_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_mbr_hdl", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->action_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_desc", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->action_desc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_valhi12_tbl_entry_desc_t &a, netbufferv4_update_valhi12_tbl_entry_desc_t &b) {
  using ::std::swap;
  swap(a.match_spec, b.match_spec);
  swap(a.has_mbr_hdl, b.has_mbr_hdl);
  swap(a.has_grp_hdl, b.has_grp_hdl);
  swap(a.selector_grp_hdl, b.selector_grp_hdl);
  swap(a.action_mbr_hdl, b.action_mbr_hdl);
  swap(a.action_desc, b.action_desc);
}

netbufferv4_update_valhi12_tbl_entry_desc_t::netbufferv4_update_valhi12_tbl_entry_desc_t(const netbufferv4_update_valhi12_tbl_entry_desc_t& other337) {
  match_spec = other337.match_spec;
  has_mbr_hdl = other337.has_mbr_hdl;
  has_grp_hdl = other337.has_grp_hdl;
  selector_grp_hdl = other337.selector_grp_hdl;
  action_mbr_hdl = other337.action_mbr_hdl;
  action_desc = other337.action_desc;
}
netbufferv4_update_valhi12_tbl_entry_desc_t& netbufferv4_update_valhi12_tbl_entry_desc_t::operator=(const netbufferv4_update_valhi12_tbl_entry_desc_t& other338) {
  match_spec = other338.match_spec;
  has_mbr_hdl = other338.has_mbr_hdl;
  has_grp_hdl = other338.has_grp_hdl;
  selector_grp_hdl = other338.selector_grp_hdl;
  action_mbr_hdl = other338.action_mbr_hdl;
  action_desc = other338.action_desc;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_valhi12_tbl_entry_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_valhi12_tbl_entry_desc_t(";
  out << "match_spec=" << to_string(obj.match_spec);
  out << ", " << "has_mbr_hdl=" << to_string(obj.has_mbr_hdl);
  out << ", " << "has_grp_hdl=" << to_string(obj.has_grp_hdl);
  out << ", " << "selector_grp_hdl=" << to_string(obj.selector_grp_hdl);
  out << ", " << "action_mbr_hdl=" << to_string(obj.action_mbr_hdl);
  out << ", " << "action_desc=" << to_string(obj.action_desc);
  out << ")";
  return out;
}


netbufferv4_update_valhi13_tbl_entry_desc_t::~netbufferv4_update_valhi13_tbl_entry_desc_t() throw() {
}


void netbufferv4_update_valhi13_tbl_entry_desc_t::__set_match_spec(const netbufferv4_update_valhi13_tbl_match_spec_t& val) {
  this->match_spec = val;
}

void netbufferv4_update_valhi13_tbl_entry_desc_t::__set_has_mbr_hdl(const bool val) {
  this->has_mbr_hdl = val;
}

void netbufferv4_update_valhi13_tbl_entry_desc_t::__set_has_grp_hdl(const bool val) {
  this->has_grp_hdl = val;
}

void netbufferv4_update_valhi13_tbl_entry_desc_t::__set_selector_grp_hdl(const MemberHandle_t val) {
  this->selector_grp_hdl = val;
}

void netbufferv4_update_valhi13_tbl_entry_desc_t::__set_action_mbr_hdl(const MemberHandle_t val) {
  this->action_mbr_hdl = val;
}

void netbufferv4_update_valhi13_tbl_entry_desc_t::__set_action_desc(const netbufferv4_action_desc_t& val) {
  this->action_desc = val;
}

const char* netbufferv4_update_valhi13_tbl_entry_desc_t::ascii_fingerprint = "CE9F8543027FE404200DB002809A6441";
const uint8_t netbufferv4_update_valhi13_tbl_entry_desc_t::binary_fingerprint[16] = {0xCE,0x9F,0x85,0x43,0x02,0x7F,0xE4,0x04,0x20,0x0D,0xB0,0x02,0x80,0x9A,0x64,0x41};

uint32_t netbufferv4_update_valhi13_tbl_entry_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match_spec = false;
  bool isset_has_mbr_hdl = false;
  bool isset_has_grp_hdl = false;
  bool isset_selector_grp_hdl = false;
  bool isset_action_mbr_hdl = false;
  bool isset_action_desc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->match_spec.read(iprot);
          isset_match_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_mbr_hdl);
          isset_has_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_grp_hdl);
          isset_has_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->selector_grp_hdl);
          isset_selector_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_mbr_hdl);
          isset_action_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_desc.read(iprot);
          isset_action_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selector_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_valhi13_tbl_entry_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_valhi13_tbl_entry_desc_t");

  xfer += oprot->writeFieldBegin("match_spec", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->match_spec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_mbr_hdl", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_grp_hdl", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selector_grp_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->selector_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_mbr_hdl", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->action_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_desc", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->action_desc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_valhi13_tbl_entry_desc_t &a, netbufferv4_update_valhi13_tbl_entry_desc_t &b) {
  using ::std::swap;
  swap(a.match_spec, b.match_spec);
  swap(a.has_mbr_hdl, b.has_mbr_hdl);
  swap(a.has_grp_hdl, b.has_grp_hdl);
  swap(a.selector_grp_hdl, b.selector_grp_hdl);
  swap(a.action_mbr_hdl, b.action_mbr_hdl);
  swap(a.action_desc, b.action_desc);
}

netbufferv4_update_valhi13_tbl_entry_desc_t::netbufferv4_update_valhi13_tbl_entry_desc_t(const netbufferv4_update_valhi13_tbl_entry_desc_t& other339) {
  match_spec = other339.match_spec;
  has_mbr_hdl = other339.has_mbr_hdl;
  has_grp_hdl = other339.has_grp_hdl;
  selector_grp_hdl = other339.selector_grp_hdl;
  action_mbr_hdl = other339.action_mbr_hdl;
  action_desc = other339.action_desc;
}
netbufferv4_update_valhi13_tbl_entry_desc_t& netbufferv4_update_valhi13_tbl_entry_desc_t::operator=(const netbufferv4_update_valhi13_tbl_entry_desc_t& other340) {
  match_spec = other340.match_spec;
  has_mbr_hdl = other340.has_mbr_hdl;
  has_grp_hdl = other340.has_grp_hdl;
  selector_grp_hdl = other340.selector_grp_hdl;
  action_mbr_hdl = other340.action_mbr_hdl;
  action_desc = other340.action_desc;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_valhi13_tbl_entry_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_valhi13_tbl_entry_desc_t(";
  out << "match_spec=" << to_string(obj.match_spec);
  out << ", " << "has_mbr_hdl=" << to_string(obj.has_mbr_hdl);
  out << ", " << "has_grp_hdl=" << to_string(obj.has_grp_hdl);
  out << ", " << "selector_grp_hdl=" << to_string(obj.selector_grp_hdl);
  out << ", " << "action_mbr_hdl=" << to_string(obj.action_mbr_hdl);
  out << ", " << "action_desc=" << to_string(obj.action_desc);
  out << ")";
  return out;
}


netbufferv4_update_valhi14_tbl_entry_desc_t::~netbufferv4_update_valhi14_tbl_entry_desc_t() throw() {
}


void netbufferv4_update_valhi14_tbl_entry_desc_t::__set_match_spec(const netbufferv4_update_valhi14_tbl_match_spec_t& val) {
  this->match_spec = val;
}

void netbufferv4_update_valhi14_tbl_entry_desc_t::__set_has_mbr_hdl(const bool val) {
  this->has_mbr_hdl = val;
}

void netbufferv4_update_valhi14_tbl_entry_desc_t::__set_has_grp_hdl(const bool val) {
  this->has_grp_hdl = val;
}

void netbufferv4_update_valhi14_tbl_entry_desc_t::__set_selector_grp_hdl(const MemberHandle_t val) {
  this->selector_grp_hdl = val;
}

void netbufferv4_update_valhi14_tbl_entry_desc_t::__set_action_mbr_hdl(const MemberHandle_t val) {
  this->action_mbr_hdl = val;
}

void netbufferv4_update_valhi14_tbl_entry_desc_t::__set_action_desc(const netbufferv4_action_desc_t& val) {
  this->action_desc = val;
}

const char* netbufferv4_update_valhi14_tbl_entry_desc_t::ascii_fingerprint = "CE9F8543027FE404200DB002809A6441";
const uint8_t netbufferv4_update_valhi14_tbl_entry_desc_t::binary_fingerprint[16] = {0xCE,0x9F,0x85,0x43,0x02,0x7F,0xE4,0x04,0x20,0x0D,0xB0,0x02,0x80,0x9A,0x64,0x41};

uint32_t netbufferv4_update_valhi14_tbl_entry_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match_spec = false;
  bool isset_has_mbr_hdl = false;
  bool isset_has_grp_hdl = false;
  bool isset_selector_grp_hdl = false;
  bool isset_action_mbr_hdl = false;
  bool isset_action_desc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->match_spec.read(iprot);
          isset_match_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_mbr_hdl);
          isset_has_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_grp_hdl);
          isset_has_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->selector_grp_hdl);
          isset_selector_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_mbr_hdl);
          isset_action_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_desc.read(iprot);
          isset_action_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selector_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_valhi14_tbl_entry_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_valhi14_tbl_entry_desc_t");

  xfer += oprot->writeFieldBegin("match_spec", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->match_spec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_mbr_hdl", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_grp_hdl", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selector_grp_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->selector_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_mbr_hdl", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->action_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_desc", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->action_desc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_valhi14_tbl_entry_desc_t &a, netbufferv4_update_valhi14_tbl_entry_desc_t &b) {
  using ::std::swap;
  swap(a.match_spec, b.match_spec);
  swap(a.has_mbr_hdl, b.has_mbr_hdl);
  swap(a.has_grp_hdl, b.has_grp_hdl);
  swap(a.selector_grp_hdl, b.selector_grp_hdl);
  swap(a.action_mbr_hdl, b.action_mbr_hdl);
  swap(a.action_desc, b.action_desc);
}

netbufferv4_update_valhi14_tbl_entry_desc_t::netbufferv4_update_valhi14_tbl_entry_desc_t(const netbufferv4_update_valhi14_tbl_entry_desc_t& other341) {
  match_spec = other341.match_spec;
  has_mbr_hdl = other341.has_mbr_hdl;
  has_grp_hdl = other341.has_grp_hdl;
  selector_grp_hdl = other341.selector_grp_hdl;
  action_mbr_hdl = other341.action_mbr_hdl;
  action_desc = other341.action_desc;
}
netbufferv4_update_valhi14_tbl_entry_desc_t& netbufferv4_update_valhi14_tbl_entry_desc_t::operator=(const netbufferv4_update_valhi14_tbl_entry_desc_t& other342) {
  match_spec = other342.match_spec;
  has_mbr_hdl = other342.has_mbr_hdl;
  has_grp_hdl = other342.has_grp_hdl;
  selector_grp_hdl = other342.selector_grp_hdl;
  action_mbr_hdl = other342.action_mbr_hdl;
  action_desc = other342.action_desc;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_valhi14_tbl_entry_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_valhi14_tbl_entry_desc_t(";
  out << "match_spec=" << to_string(obj.match_spec);
  out << ", " << "has_mbr_hdl=" << to_string(obj.has_mbr_hdl);
  out << ", " << "has_grp_hdl=" << to_string(obj.has_grp_hdl);
  out << ", " << "selector_grp_hdl=" << to_string(obj.selector_grp_hdl);
  out << ", " << "action_mbr_hdl=" << to_string(obj.action_mbr_hdl);
  out << ", " << "action_desc=" << to_string(obj.action_desc);
  out << ")";
  return out;
}


netbufferv4_update_valhi15_tbl_entry_desc_t::~netbufferv4_update_valhi15_tbl_entry_desc_t() throw() {
}


void netbufferv4_update_valhi15_tbl_entry_desc_t::__set_match_spec(const netbufferv4_update_valhi15_tbl_match_spec_t& val) {
  this->match_spec = val;
}

void netbufferv4_update_valhi15_tbl_entry_desc_t::__set_has_mbr_hdl(const bool val) {
  this->has_mbr_hdl = val;
}

void netbufferv4_update_valhi15_tbl_entry_desc_t::__set_has_grp_hdl(const bool val) {
  this->has_grp_hdl = val;
}

void netbufferv4_update_valhi15_tbl_entry_desc_t::__set_selector_grp_hdl(const MemberHandle_t val) {
  this->selector_grp_hdl = val;
}

void netbufferv4_update_valhi15_tbl_entry_desc_t::__set_action_mbr_hdl(const MemberHandle_t val) {
  this->action_mbr_hdl = val;
}

void netbufferv4_update_valhi15_tbl_entry_desc_t::__set_action_desc(const netbufferv4_action_desc_t& val) {
  this->action_desc = val;
}

const char* netbufferv4_update_valhi15_tbl_entry_desc_t::ascii_fingerprint = "CE9F8543027FE404200DB002809A6441";
const uint8_t netbufferv4_update_valhi15_tbl_entry_desc_t::binary_fingerprint[16] = {0xCE,0x9F,0x85,0x43,0x02,0x7F,0xE4,0x04,0x20,0x0D,0xB0,0x02,0x80,0x9A,0x64,0x41};

uint32_t netbufferv4_update_valhi15_tbl_entry_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match_spec = false;
  bool isset_has_mbr_hdl = false;
  bool isset_has_grp_hdl = false;
  bool isset_selector_grp_hdl = false;
  bool isset_action_mbr_hdl = false;
  bool isset_action_desc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->match_spec.read(iprot);
          isset_match_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_mbr_hdl);
          isset_has_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_grp_hdl);
          isset_has_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->selector_grp_hdl);
          isset_selector_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_mbr_hdl);
          isset_action_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_desc.read(iprot);
          isset_action_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selector_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_valhi15_tbl_entry_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_valhi15_tbl_entry_desc_t");

  xfer += oprot->writeFieldBegin("match_spec", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->match_spec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_mbr_hdl", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_grp_hdl", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selector_grp_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->selector_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_mbr_hdl", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->action_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_desc", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->action_desc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_valhi15_tbl_entry_desc_t &a, netbufferv4_update_valhi15_tbl_entry_desc_t &b) {
  using ::std::swap;
  swap(a.match_spec, b.match_spec);
  swap(a.has_mbr_hdl, b.has_mbr_hdl);
  swap(a.has_grp_hdl, b.has_grp_hdl);
  swap(a.selector_grp_hdl, b.selector_grp_hdl);
  swap(a.action_mbr_hdl, b.action_mbr_hdl);
  swap(a.action_desc, b.action_desc);
}

netbufferv4_update_valhi15_tbl_entry_desc_t::netbufferv4_update_valhi15_tbl_entry_desc_t(const netbufferv4_update_valhi15_tbl_entry_desc_t& other343) {
  match_spec = other343.match_spec;
  has_mbr_hdl = other343.has_mbr_hdl;
  has_grp_hdl = other343.has_grp_hdl;
  selector_grp_hdl = other343.selector_grp_hdl;
  action_mbr_hdl = other343.action_mbr_hdl;
  action_desc = other343.action_desc;
}
netbufferv4_update_valhi15_tbl_entry_desc_t& netbufferv4_update_valhi15_tbl_entry_desc_t::operator=(const netbufferv4_update_valhi15_tbl_entry_desc_t& other344) {
  match_spec = other344.match_spec;
  has_mbr_hdl = other344.has_mbr_hdl;
  has_grp_hdl = other344.has_grp_hdl;
  selector_grp_hdl = other344.selector_grp_hdl;
  action_mbr_hdl = other344.action_mbr_hdl;
  action_desc = other344.action_desc;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_valhi15_tbl_entry_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_valhi15_tbl_entry_desc_t(";
  out << "match_spec=" << to_string(obj.match_spec);
  out << ", " << "has_mbr_hdl=" << to_string(obj.has_mbr_hdl);
  out << ", " << "has_grp_hdl=" << to_string(obj.has_grp_hdl);
  out << ", " << "selector_grp_hdl=" << to_string(obj.selector_grp_hdl);
  out << ", " << "action_mbr_hdl=" << to_string(obj.action_mbr_hdl);
  out << ", " << "action_desc=" << to_string(obj.action_desc);
  out << ")";
  return out;
}


netbufferv4_update_valhi16_tbl_entry_desc_t::~netbufferv4_update_valhi16_tbl_entry_desc_t() throw() {
}


void netbufferv4_update_valhi16_tbl_entry_desc_t::__set_match_spec(const netbufferv4_update_valhi16_tbl_match_spec_t& val) {
  this->match_spec = val;
}

void netbufferv4_update_valhi16_tbl_entry_desc_t::__set_has_mbr_hdl(const bool val) {
  this->has_mbr_hdl = val;
}

void netbufferv4_update_valhi16_tbl_entry_desc_t::__set_has_grp_hdl(const bool val) {
  this->has_grp_hdl = val;
}

void netbufferv4_update_valhi16_tbl_entry_desc_t::__set_selector_grp_hdl(const MemberHandle_t val) {
  this->selector_grp_hdl = val;
}

void netbufferv4_update_valhi16_tbl_entry_desc_t::__set_action_mbr_hdl(const MemberHandle_t val) {
  this->action_mbr_hdl = val;
}

void netbufferv4_update_valhi16_tbl_entry_desc_t::__set_action_desc(const netbufferv4_action_desc_t& val) {
  this->action_desc = val;
}

const char* netbufferv4_update_valhi16_tbl_entry_desc_t::ascii_fingerprint = "CE9F8543027FE404200DB002809A6441";
const uint8_t netbufferv4_update_valhi16_tbl_entry_desc_t::binary_fingerprint[16] = {0xCE,0x9F,0x85,0x43,0x02,0x7F,0xE4,0x04,0x20,0x0D,0xB0,0x02,0x80,0x9A,0x64,0x41};

uint32_t netbufferv4_update_valhi16_tbl_entry_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match_spec = false;
  bool isset_has_mbr_hdl = false;
  bool isset_has_grp_hdl = false;
  bool isset_selector_grp_hdl = false;
  bool isset_action_mbr_hdl = false;
  bool isset_action_desc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->match_spec.read(iprot);
          isset_match_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_mbr_hdl);
          isset_has_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_grp_hdl);
          isset_has_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->selector_grp_hdl);
          isset_selector_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_mbr_hdl);
          isset_action_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_desc.read(iprot);
          isset_action_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selector_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_valhi16_tbl_entry_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_valhi16_tbl_entry_desc_t");

  xfer += oprot->writeFieldBegin("match_spec", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->match_spec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_mbr_hdl", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_grp_hdl", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selector_grp_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->selector_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_mbr_hdl", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->action_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_desc", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->action_desc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_valhi16_tbl_entry_desc_t &a, netbufferv4_update_valhi16_tbl_entry_desc_t &b) {
  using ::std::swap;
  swap(a.match_spec, b.match_spec);
  swap(a.has_mbr_hdl, b.has_mbr_hdl);
  swap(a.has_grp_hdl, b.has_grp_hdl);
  swap(a.selector_grp_hdl, b.selector_grp_hdl);
  swap(a.action_mbr_hdl, b.action_mbr_hdl);
  swap(a.action_desc, b.action_desc);
}

netbufferv4_update_valhi16_tbl_entry_desc_t::netbufferv4_update_valhi16_tbl_entry_desc_t(const netbufferv4_update_valhi16_tbl_entry_desc_t& other345) {
  match_spec = other345.match_spec;
  has_mbr_hdl = other345.has_mbr_hdl;
  has_grp_hdl = other345.has_grp_hdl;
  selector_grp_hdl = other345.selector_grp_hdl;
  action_mbr_hdl = other345.action_mbr_hdl;
  action_desc = other345.action_desc;
}
netbufferv4_update_valhi16_tbl_entry_desc_t& netbufferv4_update_valhi16_tbl_entry_desc_t::operator=(const netbufferv4_update_valhi16_tbl_entry_desc_t& other346) {
  match_spec = other346.match_spec;
  has_mbr_hdl = other346.has_mbr_hdl;
  has_grp_hdl = other346.has_grp_hdl;
  selector_grp_hdl = other346.selector_grp_hdl;
  action_mbr_hdl = other346.action_mbr_hdl;
  action_desc = other346.action_desc;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_valhi16_tbl_entry_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_valhi16_tbl_entry_desc_t(";
  out << "match_spec=" << to_string(obj.match_spec);
  out << ", " << "has_mbr_hdl=" << to_string(obj.has_mbr_hdl);
  out << ", " << "has_grp_hdl=" << to_string(obj.has_grp_hdl);
  out << ", " << "selector_grp_hdl=" << to_string(obj.selector_grp_hdl);
  out << ", " << "action_mbr_hdl=" << to_string(obj.action_mbr_hdl);
  out << ", " << "action_desc=" << to_string(obj.action_desc);
  out << ")";
  return out;
}


netbufferv4_update_valhi1_tbl_entry_desc_t::~netbufferv4_update_valhi1_tbl_entry_desc_t() throw() {
}


void netbufferv4_update_valhi1_tbl_entry_desc_t::__set_match_spec(const netbufferv4_update_valhi1_tbl_match_spec_t& val) {
  this->match_spec = val;
}

void netbufferv4_update_valhi1_tbl_entry_desc_t::__set_has_mbr_hdl(const bool val) {
  this->has_mbr_hdl = val;
}

void netbufferv4_update_valhi1_tbl_entry_desc_t::__set_has_grp_hdl(const bool val) {
  this->has_grp_hdl = val;
}

void netbufferv4_update_valhi1_tbl_entry_desc_t::__set_selector_grp_hdl(const MemberHandle_t val) {
  this->selector_grp_hdl = val;
}

void netbufferv4_update_valhi1_tbl_entry_desc_t::__set_action_mbr_hdl(const MemberHandle_t val) {
  this->action_mbr_hdl = val;
}

void netbufferv4_update_valhi1_tbl_entry_desc_t::__set_action_desc(const netbufferv4_action_desc_t& val) {
  this->action_desc = val;
}

const char* netbufferv4_update_valhi1_tbl_entry_desc_t::ascii_fingerprint = "CE9F8543027FE404200DB002809A6441";
const uint8_t netbufferv4_update_valhi1_tbl_entry_desc_t::binary_fingerprint[16] = {0xCE,0x9F,0x85,0x43,0x02,0x7F,0xE4,0x04,0x20,0x0D,0xB0,0x02,0x80,0x9A,0x64,0x41};

uint32_t netbufferv4_update_valhi1_tbl_entry_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match_spec = false;
  bool isset_has_mbr_hdl = false;
  bool isset_has_grp_hdl = false;
  bool isset_selector_grp_hdl = false;
  bool isset_action_mbr_hdl = false;
  bool isset_action_desc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->match_spec.read(iprot);
          isset_match_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_mbr_hdl);
          isset_has_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_grp_hdl);
          isset_has_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->selector_grp_hdl);
          isset_selector_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_mbr_hdl);
          isset_action_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_desc.read(iprot);
          isset_action_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selector_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_valhi1_tbl_entry_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_valhi1_tbl_entry_desc_t");

  xfer += oprot->writeFieldBegin("match_spec", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->match_spec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_mbr_hdl", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_grp_hdl", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selector_grp_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->selector_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_mbr_hdl", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->action_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_desc", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->action_desc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_valhi1_tbl_entry_desc_t &a, netbufferv4_update_valhi1_tbl_entry_desc_t &b) {
  using ::std::swap;
  swap(a.match_spec, b.match_spec);
  swap(a.has_mbr_hdl, b.has_mbr_hdl);
  swap(a.has_grp_hdl, b.has_grp_hdl);
  swap(a.selector_grp_hdl, b.selector_grp_hdl);
  swap(a.action_mbr_hdl, b.action_mbr_hdl);
  swap(a.action_desc, b.action_desc);
}

netbufferv4_update_valhi1_tbl_entry_desc_t::netbufferv4_update_valhi1_tbl_entry_desc_t(const netbufferv4_update_valhi1_tbl_entry_desc_t& other347) {
  match_spec = other347.match_spec;
  has_mbr_hdl = other347.has_mbr_hdl;
  has_grp_hdl = other347.has_grp_hdl;
  selector_grp_hdl = other347.selector_grp_hdl;
  action_mbr_hdl = other347.action_mbr_hdl;
  action_desc = other347.action_desc;
}
netbufferv4_update_valhi1_tbl_entry_desc_t& netbufferv4_update_valhi1_tbl_entry_desc_t::operator=(const netbufferv4_update_valhi1_tbl_entry_desc_t& other348) {
  match_spec = other348.match_spec;
  has_mbr_hdl = other348.has_mbr_hdl;
  has_grp_hdl = other348.has_grp_hdl;
  selector_grp_hdl = other348.selector_grp_hdl;
  action_mbr_hdl = other348.action_mbr_hdl;
  action_desc = other348.action_desc;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_valhi1_tbl_entry_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_valhi1_tbl_entry_desc_t(";
  out << "match_spec=" << to_string(obj.match_spec);
  out << ", " << "has_mbr_hdl=" << to_string(obj.has_mbr_hdl);
  out << ", " << "has_grp_hdl=" << to_string(obj.has_grp_hdl);
  out << ", " << "selector_grp_hdl=" << to_string(obj.selector_grp_hdl);
  out << ", " << "action_mbr_hdl=" << to_string(obj.action_mbr_hdl);
  out << ", " << "action_desc=" << to_string(obj.action_desc);
  out << ")";
  return out;
}


netbufferv4_update_valhi2_tbl_entry_desc_t::~netbufferv4_update_valhi2_tbl_entry_desc_t() throw() {
}


void netbufferv4_update_valhi2_tbl_entry_desc_t::__set_match_spec(const netbufferv4_update_valhi2_tbl_match_spec_t& val) {
  this->match_spec = val;
}

void netbufferv4_update_valhi2_tbl_entry_desc_t::__set_has_mbr_hdl(const bool val) {
  this->has_mbr_hdl = val;
}

void netbufferv4_update_valhi2_tbl_entry_desc_t::__set_has_grp_hdl(const bool val) {
  this->has_grp_hdl = val;
}

void netbufferv4_update_valhi2_tbl_entry_desc_t::__set_selector_grp_hdl(const MemberHandle_t val) {
  this->selector_grp_hdl = val;
}

void netbufferv4_update_valhi2_tbl_entry_desc_t::__set_action_mbr_hdl(const MemberHandle_t val) {
  this->action_mbr_hdl = val;
}

void netbufferv4_update_valhi2_tbl_entry_desc_t::__set_action_desc(const netbufferv4_action_desc_t& val) {
  this->action_desc = val;
}

const char* netbufferv4_update_valhi2_tbl_entry_desc_t::ascii_fingerprint = "CE9F8543027FE404200DB002809A6441";
const uint8_t netbufferv4_update_valhi2_tbl_entry_desc_t::binary_fingerprint[16] = {0xCE,0x9F,0x85,0x43,0x02,0x7F,0xE4,0x04,0x20,0x0D,0xB0,0x02,0x80,0x9A,0x64,0x41};

uint32_t netbufferv4_update_valhi2_tbl_entry_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match_spec = false;
  bool isset_has_mbr_hdl = false;
  bool isset_has_grp_hdl = false;
  bool isset_selector_grp_hdl = false;
  bool isset_action_mbr_hdl = false;
  bool isset_action_desc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->match_spec.read(iprot);
          isset_match_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_mbr_hdl);
          isset_has_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_grp_hdl);
          isset_has_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->selector_grp_hdl);
          isset_selector_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_mbr_hdl);
          isset_action_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_desc.read(iprot);
          isset_action_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selector_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_valhi2_tbl_entry_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_valhi2_tbl_entry_desc_t");

  xfer += oprot->writeFieldBegin("match_spec", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->match_spec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_mbr_hdl", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_grp_hdl", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selector_grp_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->selector_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_mbr_hdl", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->action_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_desc", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->action_desc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_valhi2_tbl_entry_desc_t &a, netbufferv4_update_valhi2_tbl_entry_desc_t &b) {
  using ::std::swap;
  swap(a.match_spec, b.match_spec);
  swap(a.has_mbr_hdl, b.has_mbr_hdl);
  swap(a.has_grp_hdl, b.has_grp_hdl);
  swap(a.selector_grp_hdl, b.selector_grp_hdl);
  swap(a.action_mbr_hdl, b.action_mbr_hdl);
  swap(a.action_desc, b.action_desc);
}

netbufferv4_update_valhi2_tbl_entry_desc_t::netbufferv4_update_valhi2_tbl_entry_desc_t(const netbufferv4_update_valhi2_tbl_entry_desc_t& other349) {
  match_spec = other349.match_spec;
  has_mbr_hdl = other349.has_mbr_hdl;
  has_grp_hdl = other349.has_grp_hdl;
  selector_grp_hdl = other349.selector_grp_hdl;
  action_mbr_hdl = other349.action_mbr_hdl;
  action_desc = other349.action_desc;
}
netbufferv4_update_valhi2_tbl_entry_desc_t& netbufferv4_update_valhi2_tbl_entry_desc_t::operator=(const netbufferv4_update_valhi2_tbl_entry_desc_t& other350) {
  match_spec = other350.match_spec;
  has_mbr_hdl = other350.has_mbr_hdl;
  has_grp_hdl = other350.has_grp_hdl;
  selector_grp_hdl = other350.selector_grp_hdl;
  action_mbr_hdl = other350.action_mbr_hdl;
  action_desc = other350.action_desc;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_valhi2_tbl_entry_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_valhi2_tbl_entry_desc_t(";
  out << "match_spec=" << to_string(obj.match_spec);
  out << ", " << "has_mbr_hdl=" << to_string(obj.has_mbr_hdl);
  out << ", " << "has_grp_hdl=" << to_string(obj.has_grp_hdl);
  out << ", " << "selector_grp_hdl=" << to_string(obj.selector_grp_hdl);
  out << ", " << "action_mbr_hdl=" << to_string(obj.action_mbr_hdl);
  out << ", " << "action_desc=" << to_string(obj.action_desc);
  out << ")";
  return out;
}


netbufferv4_update_valhi3_tbl_entry_desc_t::~netbufferv4_update_valhi3_tbl_entry_desc_t() throw() {
}


void netbufferv4_update_valhi3_tbl_entry_desc_t::__set_match_spec(const netbufferv4_update_valhi3_tbl_match_spec_t& val) {
  this->match_spec = val;
}

void netbufferv4_update_valhi3_tbl_entry_desc_t::__set_has_mbr_hdl(const bool val) {
  this->has_mbr_hdl = val;
}

void netbufferv4_update_valhi3_tbl_entry_desc_t::__set_has_grp_hdl(const bool val) {
  this->has_grp_hdl = val;
}

void netbufferv4_update_valhi3_tbl_entry_desc_t::__set_selector_grp_hdl(const MemberHandle_t val) {
  this->selector_grp_hdl = val;
}

void netbufferv4_update_valhi3_tbl_entry_desc_t::__set_action_mbr_hdl(const MemberHandle_t val) {
  this->action_mbr_hdl = val;
}

void netbufferv4_update_valhi3_tbl_entry_desc_t::__set_action_desc(const netbufferv4_action_desc_t& val) {
  this->action_desc = val;
}

const char* netbufferv4_update_valhi3_tbl_entry_desc_t::ascii_fingerprint = "CE9F8543027FE404200DB002809A6441";
const uint8_t netbufferv4_update_valhi3_tbl_entry_desc_t::binary_fingerprint[16] = {0xCE,0x9F,0x85,0x43,0x02,0x7F,0xE4,0x04,0x20,0x0D,0xB0,0x02,0x80,0x9A,0x64,0x41};

uint32_t netbufferv4_update_valhi3_tbl_entry_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match_spec = false;
  bool isset_has_mbr_hdl = false;
  bool isset_has_grp_hdl = false;
  bool isset_selector_grp_hdl = false;
  bool isset_action_mbr_hdl = false;
  bool isset_action_desc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->match_spec.read(iprot);
          isset_match_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_mbr_hdl);
          isset_has_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_grp_hdl);
          isset_has_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->selector_grp_hdl);
          isset_selector_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_mbr_hdl);
          isset_action_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_desc.read(iprot);
          isset_action_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selector_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_valhi3_tbl_entry_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_valhi3_tbl_entry_desc_t");

  xfer += oprot->writeFieldBegin("match_spec", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->match_spec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_mbr_hdl", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_grp_hdl", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selector_grp_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->selector_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_mbr_hdl", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->action_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_desc", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->action_desc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_valhi3_tbl_entry_desc_t &a, netbufferv4_update_valhi3_tbl_entry_desc_t &b) {
  using ::std::swap;
  swap(a.match_spec, b.match_spec);
  swap(a.has_mbr_hdl, b.has_mbr_hdl);
  swap(a.has_grp_hdl, b.has_grp_hdl);
  swap(a.selector_grp_hdl, b.selector_grp_hdl);
  swap(a.action_mbr_hdl, b.action_mbr_hdl);
  swap(a.action_desc, b.action_desc);
}

netbufferv4_update_valhi3_tbl_entry_desc_t::netbufferv4_update_valhi3_tbl_entry_desc_t(const netbufferv4_update_valhi3_tbl_entry_desc_t& other351) {
  match_spec = other351.match_spec;
  has_mbr_hdl = other351.has_mbr_hdl;
  has_grp_hdl = other351.has_grp_hdl;
  selector_grp_hdl = other351.selector_grp_hdl;
  action_mbr_hdl = other351.action_mbr_hdl;
  action_desc = other351.action_desc;
}
netbufferv4_update_valhi3_tbl_entry_desc_t& netbufferv4_update_valhi3_tbl_entry_desc_t::operator=(const netbufferv4_update_valhi3_tbl_entry_desc_t& other352) {
  match_spec = other352.match_spec;
  has_mbr_hdl = other352.has_mbr_hdl;
  has_grp_hdl = other352.has_grp_hdl;
  selector_grp_hdl = other352.selector_grp_hdl;
  action_mbr_hdl = other352.action_mbr_hdl;
  action_desc = other352.action_desc;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_valhi3_tbl_entry_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_valhi3_tbl_entry_desc_t(";
  out << "match_spec=" << to_string(obj.match_spec);
  out << ", " << "has_mbr_hdl=" << to_string(obj.has_mbr_hdl);
  out << ", " << "has_grp_hdl=" << to_string(obj.has_grp_hdl);
  out << ", " << "selector_grp_hdl=" << to_string(obj.selector_grp_hdl);
  out << ", " << "action_mbr_hdl=" << to_string(obj.action_mbr_hdl);
  out << ", " << "action_desc=" << to_string(obj.action_desc);
  out << ")";
  return out;
}


netbufferv4_update_valhi4_tbl_entry_desc_t::~netbufferv4_update_valhi4_tbl_entry_desc_t() throw() {
}


void netbufferv4_update_valhi4_tbl_entry_desc_t::__set_match_spec(const netbufferv4_update_valhi4_tbl_match_spec_t& val) {
  this->match_spec = val;
}

void netbufferv4_update_valhi4_tbl_entry_desc_t::__set_has_mbr_hdl(const bool val) {
  this->has_mbr_hdl = val;
}

void netbufferv4_update_valhi4_tbl_entry_desc_t::__set_has_grp_hdl(const bool val) {
  this->has_grp_hdl = val;
}

void netbufferv4_update_valhi4_tbl_entry_desc_t::__set_selector_grp_hdl(const MemberHandle_t val) {
  this->selector_grp_hdl = val;
}

void netbufferv4_update_valhi4_tbl_entry_desc_t::__set_action_mbr_hdl(const MemberHandle_t val) {
  this->action_mbr_hdl = val;
}

void netbufferv4_update_valhi4_tbl_entry_desc_t::__set_action_desc(const netbufferv4_action_desc_t& val) {
  this->action_desc = val;
}

const char* netbufferv4_update_valhi4_tbl_entry_desc_t::ascii_fingerprint = "CE9F8543027FE404200DB002809A6441";
const uint8_t netbufferv4_update_valhi4_tbl_entry_desc_t::binary_fingerprint[16] = {0xCE,0x9F,0x85,0x43,0x02,0x7F,0xE4,0x04,0x20,0x0D,0xB0,0x02,0x80,0x9A,0x64,0x41};

uint32_t netbufferv4_update_valhi4_tbl_entry_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match_spec = false;
  bool isset_has_mbr_hdl = false;
  bool isset_has_grp_hdl = false;
  bool isset_selector_grp_hdl = false;
  bool isset_action_mbr_hdl = false;
  bool isset_action_desc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->match_spec.read(iprot);
          isset_match_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_mbr_hdl);
          isset_has_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_grp_hdl);
          isset_has_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->selector_grp_hdl);
          isset_selector_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_mbr_hdl);
          isset_action_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_desc.read(iprot);
          isset_action_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selector_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_valhi4_tbl_entry_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_valhi4_tbl_entry_desc_t");

  xfer += oprot->writeFieldBegin("match_spec", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->match_spec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_mbr_hdl", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_grp_hdl", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selector_grp_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->selector_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_mbr_hdl", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->action_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_desc", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->action_desc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_valhi4_tbl_entry_desc_t &a, netbufferv4_update_valhi4_tbl_entry_desc_t &b) {
  using ::std::swap;
  swap(a.match_spec, b.match_spec);
  swap(a.has_mbr_hdl, b.has_mbr_hdl);
  swap(a.has_grp_hdl, b.has_grp_hdl);
  swap(a.selector_grp_hdl, b.selector_grp_hdl);
  swap(a.action_mbr_hdl, b.action_mbr_hdl);
  swap(a.action_desc, b.action_desc);
}

netbufferv4_update_valhi4_tbl_entry_desc_t::netbufferv4_update_valhi4_tbl_entry_desc_t(const netbufferv4_update_valhi4_tbl_entry_desc_t& other353) {
  match_spec = other353.match_spec;
  has_mbr_hdl = other353.has_mbr_hdl;
  has_grp_hdl = other353.has_grp_hdl;
  selector_grp_hdl = other353.selector_grp_hdl;
  action_mbr_hdl = other353.action_mbr_hdl;
  action_desc = other353.action_desc;
}
netbufferv4_update_valhi4_tbl_entry_desc_t& netbufferv4_update_valhi4_tbl_entry_desc_t::operator=(const netbufferv4_update_valhi4_tbl_entry_desc_t& other354) {
  match_spec = other354.match_spec;
  has_mbr_hdl = other354.has_mbr_hdl;
  has_grp_hdl = other354.has_grp_hdl;
  selector_grp_hdl = other354.selector_grp_hdl;
  action_mbr_hdl = other354.action_mbr_hdl;
  action_desc = other354.action_desc;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_valhi4_tbl_entry_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_valhi4_tbl_entry_desc_t(";
  out << "match_spec=" << to_string(obj.match_spec);
  out << ", " << "has_mbr_hdl=" << to_string(obj.has_mbr_hdl);
  out << ", " << "has_grp_hdl=" << to_string(obj.has_grp_hdl);
  out << ", " << "selector_grp_hdl=" << to_string(obj.selector_grp_hdl);
  out << ", " << "action_mbr_hdl=" << to_string(obj.action_mbr_hdl);
  out << ", " << "action_desc=" << to_string(obj.action_desc);
  out << ")";
  return out;
}


netbufferv4_update_valhi5_tbl_entry_desc_t::~netbufferv4_update_valhi5_tbl_entry_desc_t() throw() {
}


void netbufferv4_update_valhi5_tbl_entry_desc_t::__set_match_spec(const netbufferv4_update_valhi5_tbl_match_spec_t& val) {
  this->match_spec = val;
}

void netbufferv4_update_valhi5_tbl_entry_desc_t::__set_has_mbr_hdl(const bool val) {
  this->has_mbr_hdl = val;
}

void netbufferv4_update_valhi5_tbl_entry_desc_t::__set_has_grp_hdl(const bool val) {
  this->has_grp_hdl = val;
}

void netbufferv4_update_valhi5_tbl_entry_desc_t::__set_selector_grp_hdl(const MemberHandle_t val) {
  this->selector_grp_hdl = val;
}

void netbufferv4_update_valhi5_tbl_entry_desc_t::__set_action_mbr_hdl(const MemberHandle_t val) {
  this->action_mbr_hdl = val;
}

void netbufferv4_update_valhi5_tbl_entry_desc_t::__set_action_desc(const netbufferv4_action_desc_t& val) {
  this->action_desc = val;
}

const char* netbufferv4_update_valhi5_tbl_entry_desc_t::ascii_fingerprint = "CE9F8543027FE404200DB002809A6441";
const uint8_t netbufferv4_update_valhi5_tbl_entry_desc_t::binary_fingerprint[16] = {0xCE,0x9F,0x85,0x43,0x02,0x7F,0xE4,0x04,0x20,0x0D,0xB0,0x02,0x80,0x9A,0x64,0x41};

uint32_t netbufferv4_update_valhi5_tbl_entry_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match_spec = false;
  bool isset_has_mbr_hdl = false;
  bool isset_has_grp_hdl = false;
  bool isset_selector_grp_hdl = false;
  bool isset_action_mbr_hdl = false;
  bool isset_action_desc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->match_spec.read(iprot);
          isset_match_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_mbr_hdl);
          isset_has_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_grp_hdl);
          isset_has_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->selector_grp_hdl);
          isset_selector_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_mbr_hdl);
          isset_action_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_desc.read(iprot);
          isset_action_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selector_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_valhi5_tbl_entry_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_valhi5_tbl_entry_desc_t");

  xfer += oprot->writeFieldBegin("match_spec", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->match_spec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_mbr_hdl", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_grp_hdl", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selector_grp_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->selector_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_mbr_hdl", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->action_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_desc", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->action_desc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_valhi5_tbl_entry_desc_t &a, netbufferv4_update_valhi5_tbl_entry_desc_t &b) {
  using ::std::swap;
  swap(a.match_spec, b.match_spec);
  swap(a.has_mbr_hdl, b.has_mbr_hdl);
  swap(a.has_grp_hdl, b.has_grp_hdl);
  swap(a.selector_grp_hdl, b.selector_grp_hdl);
  swap(a.action_mbr_hdl, b.action_mbr_hdl);
  swap(a.action_desc, b.action_desc);
}

netbufferv4_update_valhi5_tbl_entry_desc_t::netbufferv4_update_valhi5_tbl_entry_desc_t(const netbufferv4_update_valhi5_tbl_entry_desc_t& other355) {
  match_spec = other355.match_spec;
  has_mbr_hdl = other355.has_mbr_hdl;
  has_grp_hdl = other355.has_grp_hdl;
  selector_grp_hdl = other355.selector_grp_hdl;
  action_mbr_hdl = other355.action_mbr_hdl;
  action_desc = other355.action_desc;
}
netbufferv4_update_valhi5_tbl_entry_desc_t& netbufferv4_update_valhi5_tbl_entry_desc_t::operator=(const netbufferv4_update_valhi5_tbl_entry_desc_t& other356) {
  match_spec = other356.match_spec;
  has_mbr_hdl = other356.has_mbr_hdl;
  has_grp_hdl = other356.has_grp_hdl;
  selector_grp_hdl = other356.selector_grp_hdl;
  action_mbr_hdl = other356.action_mbr_hdl;
  action_desc = other356.action_desc;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_valhi5_tbl_entry_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_valhi5_tbl_entry_desc_t(";
  out << "match_spec=" << to_string(obj.match_spec);
  out << ", " << "has_mbr_hdl=" << to_string(obj.has_mbr_hdl);
  out << ", " << "has_grp_hdl=" << to_string(obj.has_grp_hdl);
  out << ", " << "selector_grp_hdl=" << to_string(obj.selector_grp_hdl);
  out << ", " << "action_mbr_hdl=" << to_string(obj.action_mbr_hdl);
  out << ", " << "action_desc=" << to_string(obj.action_desc);
  out << ")";
  return out;
}


netbufferv4_update_valhi6_tbl_entry_desc_t::~netbufferv4_update_valhi6_tbl_entry_desc_t() throw() {
}


void netbufferv4_update_valhi6_tbl_entry_desc_t::__set_match_spec(const netbufferv4_update_valhi6_tbl_match_spec_t& val) {
  this->match_spec = val;
}

void netbufferv4_update_valhi6_tbl_entry_desc_t::__set_has_mbr_hdl(const bool val) {
  this->has_mbr_hdl = val;
}

void netbufferv4_update_valhi6_tbl_entry_desc_t::__set_has_grp_hdl(const bool val) {
  this->has_grp_hdl = val;
}

void netbufferv4_update_valhi6_tbl_entry_desc_t::__set_selector_grp_hdl(const MemberHandle_t val) {
  this->selector_grp_hdl = val;
}

void netbufferv4_update_valhi6_tbl_entry_desc_t::__set_action_mbr_hdl(const MemberHandle_t val) {
  this->action_mbr_hdl = val;
}

void netbufferv4_update_valhi6_tbl_entry_desc_t::__set_action_desc(const netbufferv4_action_desc_t& val) {
  this->action_desc = val;
}

const char* netbufferv4_update_valhi6_tbl_entry_desc_t::ascii_fingerprint = "CE9F8543027FE404200DB002809A6441";
const uint8_t netbufferv4_update_valhi6_tbl_entry_desc_t::binary_fingerprint[16] = {0xCE,0x9F,0x85,0x43,0x02,0x7F,0xE4,0x04,0x20,0x0D,0xB0,0x02,0x80,0x9A,0x64,0x41};

uint32_t netbufferv4_update_valhi6_tbl_entry_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match_spec = false;
  bool isset_has_mbr_hdl = false;
  bool isset_has_grp_hdl = false;
  bool isset_selector_grp_hdl = false;
  bool isset_action_mbr_hdl = false;
  bool isset_action_desc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->match_spec.read(iprot);
          isset_match_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_mbr_hdl);
          isset_has_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_grp_hdl);
          isset_has_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->selector_grp_hdl);
          isset_selector_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_mbr_hdl);
          isset_action_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_desc.read(iprot);
          isset_action_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selector_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_valhi6_tbl_entry_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_valhi6_tbl_entry_desc_t");

  xfer += oprot->writeFieldBegin("match_spec", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->match_spec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_mbr_hdl", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_grp_hdl", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selector_grp_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->selector_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_mbr_hdl", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->action_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_desc", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->action_desc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_valhi6_tbl_entry_desc_t &a, netbufferv4_update_valhi6_tbl_entry_desc_t &b) {
  using ::std::swap;
  swap(a.match_spec, b.match_spec);
  swap(a.has_mbr_hdl, b.has_mbr_hdl);
  swap(a.has_grp_hdl, b.has_grp_hdl);
  swap(a.selector_grp_hdl, b.selector_grp_hdl);
  swap(a.action_mbr_hdl, b.action_mbr_hdl);
  swap(a.action_desc, b.action_desc);
}

netbufferv4_update_valhi6_tbl_entry_desc_t::netbufferv4_update_valhi6_tbl_entry_desc_t(const netbufferv4_update_valhi6_tbl_entry_desc_t& other357) {
  match_spec = other357.match_spec;
  has_mbr_hdl = other357.has_mbr_hdl;
  has_grp_hdl = other357.has_grp_hdl;
  selector_grp_hdl = other357.selector_grp_hdl;
  action_mbr_hdl = other357.action_mbr_hdl;
  action_desc = other357.action_desc;
}
netbufferv4_update_valhi6_tbl_entry_desc_t& netbufferv4_update_valhi6_tbl_entry_desc_t::operator=(const netbufferv4_update_valhi6_tbl_entry_desc_t& other358) {
  match_spec = other358.match_spec;
  has_mbr_hdl = other358.has_mbr_hdl;
  has_grp_hdl = other358.has_grp_hdl;
  selector_grp_hdl = other358.selector_grp_hdl;
  action_mbr_hdl = other358.action_mbr_hdl;
  action_desc = other358.action_desc;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_valhi6_tbl_entry_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_valhi6_tbl_entry_desc_t(";
  out << "match_spec=" << to_string(obj.match_spec);
  out << ", " << "has_mbr_hdl=" << to_string(obj.has_mbr_hdl);
  out << ", " << "has_grp_hdl=" << to_string(obj.has_grp_hdl);
  out << ", " << "selector_grp_hdl=" << to_string(obj.selector_grp_hdl);
  out << ", " << "action_mbr_hdl=" << to_string(obj.action_mbr_hdl);
  out << ", " << "action_desc=" << to_string(obj.action_desc);
  out << ")";
  return out;
}


netbufferv4_update_valhi7_tbl_entry_desc_t::~netbufferv4_update_valhi7_tbl_entry_desc_t() throw() {
}


void netbufferv4_update_valhi7_tbl_entry_desc_t::__set_match_spec(const netbufferv4_update_valhi7_tbl_match_spec_t& val) {
  this->match_spec = val;
}

void netbufferv4_update_valhi7_tbl_entry_desc_t::__set_has_mbr_hdl(const bool val) {
  this->has_mbr_hdl = val;
}

void netbufferv4_update_valhi7_tbl_entry_desc_t::__set_has_grp_hdl(const bool val) {
  this->has_grp_hdl = val;
}

void netbufferv4_update_valhi7_tbl_entry_desc_t::__set_selector_grp_hdl(const MemberHandle_t val) {
  this->selector_grp_hdl = val;
}

void netbufferv4_update_valhi7_tbl_entry_desc_t::__set_action_mbr_hdl(const MemberHandle_t val) {
  this->action_mbr_hdl = val;
}

void netbufferv4_update_valhi7_tbl_entry_desc_t::__set_action_desc(const netbufferv4_action_desc_t& val) {
  this->action_desc = val;
}

const char* netbufferv4_update_valhi7_tbl_entry_desc_t::ascii_fingerprint = "CE9F8543027FE404200DB002809A6441";
const uint8_t netbufferv4_update_valhi7_tbl_entry_desc_t::binary_fingerprint[16] = {0xCE,0x9F,0x85,0x43,0x02,0x7F,0xE4,0x04,0x20,0x0D,0xB0,0x02,0x80,0x9A,0x64,0x41};

uint32_t netbufferv4_update_valhi7_tbl_entry_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match_spec = false;
  bool isset_has_mbr_hdl = false;
  bool isset_has_grp_hdl = false;
  bool isset_selector_grp_hdl = false;
  bool isset_action_mbr_hdl = false;
  bool isset_action_desc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->match_spec.read(iprot);
          isset_match_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_mbr_hdl);
          isset_has_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_grp_hdl);
          isset_has_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->selector_grp_hdl);
          isset_selector_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_mbr_hdl);
          isset_action_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_desc.read(iprot);
          isset_action_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selector_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_valhi7_tbl_entry_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_valhi7_tbl_entry_desc_t");

  xfer += oprot->writeFieldBegin("match_spec", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->match_spec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_mbr_hdl", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_grp_hdl", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selector_grp_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->selector_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_mbr_hdl", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->action_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_desc", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->action_desc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_valhi7_tbl_entry_desc_t &a, netbufferv4_update_valhi7_tbl_entry_desc_t &b) {
  using ::std::swap;
  swap(a.match_spec, b.match_spec);
  swap(a.has_mbr_hdl, b.has_mbr_hdl);
  swap(a.has_grp_hdl, b.has_grp_hdl);
  swap(a.selector_grp_hdl, b.selector_grp_hdl);
  swap(a.action_mbr_hdl, b.action_mbr_hdl);
  swap(a.action_desc, b.action_desc);
}

netbufferv4_update_valhi7_tbl_entry_desc_t::netbufferv4_update_valhi7_tbl_entry_desc_t(const netbufferv4_update_valhi7_tbl_entry_desc_t& other359) {
  match_spec = other359.match_spec;
  has_mbr_hdl = other359.has_mbr_hdl;
  has_grp_hdl = other359.has_grp_hdl;
  selector_grp_hdl = other359.selector_grp_hdl;
  action_mbr_hdl = other359.action_mbr_hdl;
  action_desc = other359.action_desc;
}
netbufferv4_update_valhi7_tbl_entry_desc_t& netbufferv4_update_valhi7_tbl_entry_desc_t::operator=(const netbufferv4_update_valhi7_tbl_entry_desc_t& other360) {
  match_spec = other360.match_spec;
  has_mbr_hdl = other360.has_mbr_hdl;
  has_grp_hdl = other360.has_grp_hdl;
  selector_grp_hdl = other360.selector_grp_hdl;
  action_mbr_hdl = other360.action_mbr_hdl;
  action_desc = other360.action_desc;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_valhi7_tbl_entry_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_valhi7_tbl_entry_desc_t(";
  out << "match_spec=" << to_string(obj.match_spec);
  out << ", " << "has_mbr_hdl=" << to_string(obj.has_mbr_hdl);
  out << ", " << "has_grp_hdl=" << to_string(obj.has_grp_hdl);
  out << ", " << "selector_grp_hdl=" << to_string(obj.selector_grp_hdl);
  out << ", " << "action_mbr_hdl=" << to_string(obj.action_mbr_hdl);
  out << ", " << "action_desc=" << to_string(obj.action_desc);
  out << ")";
  return out;
}


netbufferv4_update_valhi8_tbl_entry_desc_t::~netbufferv4_update_valhi8_tbl_entry_desc_t() throw() {
}


void netbufferv4_update_valhi8_tbl_entry_desc_t::__set_match_spec(const netbufferv4_update_valhi8_tbl_match_spec_t& val) {
  this->match_spec = val;
}

void netbufferv4_update_valhi8_tbl_entry_desc_t::__set_has_mbr_hdl(const bool val) {
  this->has_mbr_hdl = val;
}

void netbufferv4_update_valhi8_tbl_entry_desc_t::__set_has_grp_hdl(const bool val) {
  this->has_grp_hdl = val;
}

void netbufferv4_update_valhi8_tbl_entry_desc_t::__set_selector_grp_hdl(const MemberHandle_t val) {
  this->selector_grp_hdl = val;
}

void netbufferv4_update_valhi8_tbl_entry_desc_t::__set_action_mbr_hdl(const MemberHandle_t val) {
  this->action_mbr_hdl = val;
}

void netbufferv4_update_valhi8_tbl_entry_desc_t::__set_action_desc(const netbufferv4_action_desc_t& val) {
  this->action_desc = val;
}

const char* netbufferv4_update_valhi8_tbl_entry_desc_t::ascii_fingerprint = "CE9F8543027FE404200DB002809A6441";
const uint8_t netbufferv4_update_valhi8_tbl_entry_desc_t::binary_fingerprint[16] = {0xCE,0x9F,0x85,0x43,0x02,0x7F,0xE4,0x04,0x20,0x0D,0xB0,0x02,0x80,0x9A,0x64,0x41};

uint32_t netbufferv4_update_valhi8_tbl_entry_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match_spec = false;
  bool isset_has_mbr_hdl = false;
  bool isset_has_grp_hdl = false;
  bool isset_selector_grp_hdl = false;
  bool isset_action_mbr_hdl = false;
  bool isset_action_desc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->match_spec.read(iprot);
          isset_match_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_mbr_hdl);
          isset_has_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_grp_hdl);
          isset_has_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->selector_grp_hdl);
          isset_selector_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_mbr_hdl);
          isset_action_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_desc.read(iprot);
          isset_action_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selector_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_valhi8_tbl_entry_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_valhi8_tbl_entry_desc_t");

  xfer += oprot->writeFieldBegin("match_spec", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->match_spec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_mbr_hdl", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_grp_hdl", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selector_grp_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->selector_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_mbr_hdl", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->action_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_desc", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->action_desc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_valhi8_tbl_entry_desc_t &a, netbufferv4_update_valhi8_tbl_entry_desc_t &b) {
  using ::std::swap;
  swap(a.match_spec, b.match_spec);
  swap(a.has_mbr_hdl, b.has_mbr_hdl);
  swap(a.has_grp_hdl, b.has_grp_hdl);
  swap(a.selector_grp_hdl, b.selector_grp_hdl);
  swap(a.action_mbr_hdl, b.action_mbr_hdl);
  swap(a.action_desc, b.action_desc);
}

netbufferv4_update_valhi8_tbl_entry_desc_t::netbufferv4_update_valhi8_tbl_entry_desc_t(const netbufferv4_update_valhi8_tbl_entry_desc_t& other361) {
  match_spec = other361.match_spec;
  has_mbr_hdl = other361.has_mbr_hdl;
  has_grp_hdl = other361.has_grp_hdl;
  selector_grp_hdl = other361.selector_grp_hdl;
  action_mbr_hdl = other361.action_mbr_hdl;
  action_desc = other361.action_desc;
}
netbufferv4_update_valhi8_tbl_entry_desc_t& netbufferv4_update_valhi8_tbl_entry_desc_t::operator=(const netbufferv4_update_valhi8_tbl_entry_desc_t& other362) {
  match_spec = other362.match_spec;
  has_mbr_hdl = other362.has_mbr_hdl;
  has_grp_hdl = other362.has_grp_hdl;
  selector_grp_hdl = other362.selector_grp_hdl;
  action_mbr_hdl = other362.action_mbr_hdl;
  action_desc = other362.action_desc;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_valhi8_tbl_entry_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_valhi8_tbl_entry_desc_t(";
  out << "match_spec=" << to_string(obj.match_spec);
  out << ", " << "has_mbr_hdl=" << to_string(obj.has_mbr_hdl);
  out << ", " << "has_grp_hdl=" << to_string(obj.has_grp_hdl);
  out << ", " << "selector_grp_hdl=" << to_string(obj.selector_grp_hdl);
  out << ", " << "action_mbr_hdl=" << to_string(obj.action_mbr_hdl);
  out << ", " << "action_desc=" << to_string(obj.action_desc);
  out << ")";
  return out;
}


netbufferv4_update_valhi9_tbl_entry_desc_t::~netbufferv4_update_valhi9_tbl_entry_desc_t() throw() {
}


void netbufferv4_update_valhi9_tbl_entry_desc_t::__set_match_spec(const netbufferv4_update_valhi9_tbl_match_spec_t& val) {
  this->match_spec = val;
}

void netbufferv4_update_valhi9_tbl_entry_desc_t::__set_has_mbr_hdl(const bool val) {
  this->has_mbr_hdl = val;
}

void netbufferv4_update_valhi9_tbl_entry_desc_t::__set_has_grp_hdl(const bool val) {
  this->has_grp_hdl = val;
}

void netbufferv4_update_valhi9_tbl_entry_desc_t::__set_selector_grp_hdl(const MemberHandle_t val) {
  this->selector_grp_hdl = val;
}

void netbufferv4_update_valhi9_tbl_entry_desc_t::__set_action_mbr_hdl(const MemberHandle_t val) {
  this->action_mbr_hdl = val;
}

void netbufferv4_update_valhi9_tbl_entry_desc_t::__set_action_desc(const netbufferv4_action_desc_t& val) {
  this->action_desc = val;
}

const char* netbufferv4_update_valhi9_tbl_entry_desc_t::ascii_fingerprint = "CE9F8543027FE404200DB002809A6441";
const uint8_t netbufferv4_update_valhi9_tbl_entry_desc_t::binary_fingerprint[16] = {0xCE,0x9F,0x85,0x43,0x02,0x7F,0xE4,0x04,0x20,0x0D,0xB0,0x02,0x80,0x9A,0x64,0x41};

uint32_t netbufferv4_update_valhi9_tbl_entry_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match_spec = false;
  bool isset_has_mbr_hdl = false;
  bool isset_has_grp_hdl = false;
  bool isset_selector_grp_hdl = false;
  bool isset_action_mbr_hdl = false;
  bool isset_action_desc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->match_spec.read(iprot);
          isset_match_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_mbr_hdl);
          isset_has_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_grp_hdl);
          isset_has_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->selector_grp_hdl);
          isset_selector_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_mbr_hdl);
          isset_action_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_desc.read(iprot);
          isset_action_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selector_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_valhi9_tbl_entry_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_valhi9_tbl_entry_desc_t");

  xfer += oprot->writeFieldBegin("match_spec", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->match_spec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_mbr_hdl", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_grp_hdl", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selector_grp_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->selector_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_mbr_hdl", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->action_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_desc", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->action_desc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_valhi9_tbl_entry_desc_t &a, netbufferv4_update_valhi9_tbl_entry_desc_t &b) {
  using ::std::swap;
  swap(a.match_spec, b.match_spec);
  swap(a.has_mbr_hdl, b.has_mbr_hdl);
  swap(a.has_grp_hdl, b.has_grp_hdl);
  swap(a.selector_grp_hdl, b.selector_grp_hdl);
  swap(a.action_mbr_hdl, b.action_mbr_hdl);
  swap(a.action_desc, b.action_desc);
}

netbufferv4_update_valhi9_tbl_entry_desc_t::netbufferv4_update_valhi9_tbl_entry_desc_t(const netbufferv4_update_valhi9_tbl_entry_desc_t& other363) {
  match_spec = other363.match_spec;
  has_mbr_hdl = other363.has_mbr_hdl;
  has_grp_hdl = other363.has_grp_hdl;
  selector_grp_hdl = other363.selector_grp_hdl;
  action_mbr_hdl = other363.action_mbr_hdl;
  action_desc = other363.action_desc;
}
netbufferv4_update_valhi9_tbl_entry_desc_t& netbufferv4_update_valhi9_tbl_entry_desc_t::operator=(const netbufferv4_update_valhi9_tbl_entry_desc_t& other364) {
  match_spec = other364.match_spec;
  has_mbr_hdl = other364.has_mbr_hdl;
  has_grp_hdl = other364.has_grp_hdl;
  selector_grp_hdl = other364.selector_grp_hdl;
  action_mbr_hdl = other364.action_mbr_hdl;
  action_desc = other364.action_desc;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_valhi9_tbl_entry_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_valhi9_tbl_entry_desc_t(";
  out << "match_spec=" << to_string(obj.match_spec);
  out << ", " << "has_mbr_hdl=" << to_string(obj.has_mbr_hdl);
  out << ", " << "has_grp_hdl=" << to_string(obj.has_grp_hdl);
  out << ", " << "selector_grp_hdl=" << to_string(obj.selector_grp_hdl);
  out << ", " << "action_mbr_hdl=" << to_string(obj.action_mbr_hdl);
  out << ", " << "action_desc=" << to_string(obj.action_desc);
  out << ")";
  return out;
}


netbufferv4_update_vallen_tbl_entry_desc_t::~netbufferv4_update_vallen_tbl_entry_desc_t() throw() {
}


void netbufferv4_update_vallen_tbl_entry_desc_t::__set_match_spec(const netbufferv4_update_vallen_tbl_match_spec_t& val) {
  this->match_spec = val;
}

void netbufferv4_update_vallen_tbl_entry_desc_t::__set_has_mbr_hdl(const bool val) {
  this->has_mbr_hdl = val;
}

void netbufferv4_update_vallen_tbl_entry_desc_t::__set_has_grp_hdl(const bool val) {
  this->has_grp_hdl = val;
}

void netbufferv4_update_vallen_tbl_entry_desc_t::__set_selector_grp_hdl(const MemberHandle_t val) {
  this->selector_grp_hdl = val;
}

void netbufferv4_update_vallen_tbl_entry_desc_t::__set_action_mbr_hdl(const MemberHandle_t val) {
  this->action_mbr_hdl = val;
}

void netbufferv4_update_vallen_tbl_entry_desc_t::__set_action_desc(const netbufferv4_action_desc_t& val) {
  this->action_desc = val;
}

const char* netbufferv4_update_vallen_tbl_entry_desc_t::ascii_fingerprint = "75CC33AFCD5426C59CE364FA8987CA99";
const uint8_t netbufferv4_update_vallen_tbl_entry_desc_t::binary_fingerprint[16] = {0x75,0xCC,0x33,0xAF,0xCD,0x54,0x26,0xC5,0x9C,0xE3,0x64,0xFA,0x89,0x87,0xCA,0x99};

uint32_t netbufferv4_update_vallen_tbl_entry_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match_spec = false;
  bool isset_has_mbr_hdl = false;
  bool isset_has_grp_hdl = false;
  bool isset_selector_grp_hdl = false;
  bool isset_action_mbr_hdl = false;
  bool isset_action_desc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->match_spec.read(iprot);
          isset_match_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_mbr_hdl);
          isset_has_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_grp_hdl);
          isset_has_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->selector_grp_hdl);
          isset_selector_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_mbr_hdl);
          isset_action_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_desc.read(iprot);
          isset_action_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selector_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_vallen_tbl_entry_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_vallen_tbl_entry_desc_t");

  xfer += oprot->writeFieldBegin("match_spec", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->match_spec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_mbr_hdl", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_grp_hdl", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selector_grp_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->selector_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_mbr_hdl", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->action_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_desc", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->action_desc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_vallen_tbl_entry_desc_t &a, netbufferv4_update_vallen_tbl_entry_desc_t &b) {
  using ::std::swap;
  swap(a.match_spec, b.match_spec);
  swap(a.has_mbr_hdl, b.has_mbr_hdl);
  swap(a.has_grp_hdl, b.has_grp_hdl);
  swap(a.selector_grp_hdl, b.selector_grp_hdl);
  swap(a.action_mbr_hdl, b.action_mbr_hdl);
  swap(a.action_desc, b.action_desc);
}

netbufferv4_update_vallen_tbl_entry_desc_t::netbufferv4_update_vallen_tbl_entry_desc_t(const netbufferv4_update_vallen_tbl_entry_desc_t& other365) {
  match_spec = other365.match_spec;
  has_mbr_hdl = other365.has_mbr_hdl;
  has_grp_hdl = other365.has_grp_hdl;
  selector_grp_hdl = other365.selector_grp_hdl;
  action_mbr_hdl = other365.action_mbr_hdl;
  action_desc = other365.action_desc;
}
netbufferv4_update_vallen_tbl_entry_desc_t& netbufferv4_update_vallen_tbl_entry_desc_t::operator=(const netbufferv4_update_vallen_tbl_entry_desc_t& other366) {
  match_spec = other366.match_spec;
  has_mbr_hdl = other366.has_mbr_hdl;
  has_grp_hdl = other366.has_grp_hdl;
  selector_grp_hdl = other366.selector_grp_hdl;
  action_mbr_hdl = other366.action_mbr_hdl;
  action_desc = other366.action_desc;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_vallen_tbl_entry_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_vallen_tbl_entry_desc_t(";
  out << "match_spec=" << to_string(obj.match_spec);
  out << ", " << "has_mbr_hdl=" << to_string(obj.has_mbr_hdl);
  out << ", " << "has_grp_hdl=" << to_string(obj.has_grp_hdl);
  out << ", " << "selector_grp_hdl=" << to_string(obj.selector_grp_hdl);
  out << ", " << "action_mbr_hdl=" << to_string(obj.action_mbr_hdl);
  out << ", " << "action_desc=" << to_string(obj.action_desc);
  out << ")";
  return out;
}


netbufferv4_update_vallo10_tbl_entry_desc_t::~netbufferv4_update_vallo10_tbl_entry_desc_t() throw() {
}


void netbufferv4_update_vallo10_tbl_entry_desc_t::__set_match_spec(const netbufferv4_update_vallo10_tbl_match_spec_t& val) {
  this->match_spec = val;
}

void netbufferv4_update_vallo10_tbl_entry_desc_t::__set_has_mbr_hdl(const bool val) {
  this->has_mbr_hdl = val;
}

void netbufferv4_update_vallo10_tbl_entry_desc_t::__set_has_grp_hdl(const bool val) {
  this->has_grp_hdl = val;
}

void netbufferv4_update_vallo10_tbl_entry_desc_t::__set_selector_grp_hdl(const MemberHandle_t val) {
  this->selector_grp_hdl = val;
}

void netbufferv4_update_vallo10_tbl_entry_desc_t::__set_action_mbr_hdl(const MemberHandle_t val) {
  this->action_mbr_hdl = val;
}

void netbufferv4_update_vallo10_tbl_entry_desc_t::__set_action_desc(const netbufferv4_action_desc_t& val) {
  this->action_desc = val;
}

const char* netbufferv4_update_vallo10_tbl_entry_desc_t::ascii_fingerprint = "CE9F8543027FE404200DB002809A6441";
const uint8_t netbufferv4_update_vallo10_tbl_entry_desc_t::binary_fingerprint[16] = {0xCE,0x9F,0x85,0x43,0x02,0x7F,0xE4,0x04,0x20,0x0D,0xB0,0x02,0x80,0x9A,0x64,0x41};

uint32_t netbufferv4_update_vallo10_tbl_entry_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match_spec = false;
  bool isset_has_mbr_hdl = false;
  bool isset_has_grp_hdl = false;
  bool isset_selector_grp_hdl = false;
  bool isset_action_mbr_hdl = false;
  bool isset_action_desc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->match_spec.read(iprot);
          isset_match_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_mbr_hdl);
          isset_has_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_grp_hdl);
          isset_has_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->selector_grp_hdl);
          isset_selector_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_mbr_hdl);
          isset_action_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_desc.read(iprot);
          isset_action_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selector_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_vallo10_tbl_entry_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_vallo10_tbl_entry_desc_t");

  xfer += oprot->writeFieldBegin("match_spec", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->match_spec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_mbr_hdl", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_grp_hdl", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selector_grp_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->selector_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_mbr_hdl", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->action_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_desc", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->action_desc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_vallo10_tbl_entry_desc_t &a, netbufferv4_update_vallo10_tbl_entry_desc_t &b) {
  using ::std::swap;
  swap(a.match_spec, b.match_spec);
  swap(a.has_mbr_hdl, b.has_mbr_hdl);
  swap(a.has_grp_hdl, b.has_grp_hdl);
  swap(a.selector_grp_hdl, b.selector_grp_hdl);
  swap(a.action_mbr_hdl, b.action_mbr_hdl);
  swap(a.action_desc, b.action_desc);
}

netbufferv4_update_vallo10_tbl_entry_desc_t::netbufferv4_update_vallo10_tbl_entry_desc_t(const netbufferv4_update_vallo10_tbl_entry_desc_t& other367) {
  match_spec = other367.match_spec;
  has_mbr_hdl = other367.has_mbr_hdl;
  has_grp_hdl = other367.has_grp_hdl;
  selector_grp_hdl = other367.selector_grp_hdl;
  action_mbr_hdl = other367.action_mbr_hdl;
  action_desc = other367.action_desc;
}
netbufferv4_update_vallo10_tbl_entry_desc_t& netbufferv4_update_vallo10_tbl_entry_desc_t::operator=(const netbufferv4_update_vallo10_tbl_entry_desc_t& other368) {
  match_spec = other368.match_spec;
  has_mbr_hdl = other368.has_mbr_hdl;
  has_grp_hdl = other368.has_grp_hdl;
  selector_grp_hdl = other368.selector_grp_hdl;
  action_mbr_hdl = other368.action_mbr_hdl;
  action_desc = other368.action_desc;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_vallo10_tbl_entry_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_vallo10_tbl_entry_desc_t(";
  out << "match_spec=" << to_string(obj.match_spec);
  out << ", " << "has_mbr_hdl=" << to_string(obj.has_mbr_hdl);
  out << ", " << "has_grp_hdl=" << to_string(obj.has_grp_hdl);
  out << ", " << "selector_grp_hdl=" << to_string(obj.selector_grp_hdl);
  out << ", " << "action_mbr_hdl=" << to_string(obj.action_mbr_hdl);
  out << ", " << "action_desc=" << to_string(obj.action_desc);
  out << ")";
  return out;
}


netbufferv4_update_vallo11_tbl_entry_desc_t::~netbufferv4_update_vallo11_tbl_entry_desc_t() throw() {
}


void netbufferv4_update_vallo11_tbl_entry_desc_t::__set_match_spec(const netbufferv4_update_vallo11_tbl_match_spec_t& val) {
  this->match_spec = val;
}

void netbufferv4_update_vallo11_tbl_entry_desc_t::__set_has_mbr_hdl(const bool val) {
  this->has_mbr_hdl = val;
}

void netbufferv4_update_vallo11_tbl_entry_desc_t::__set_has_grp_hdl(const bool val) {
  this->has_grp_hdl = val;
}

void netbufferv4_update_vallo11_tbl_entry_desc_t::__set_selector_grp_hdl(const MemberHandle_t val) {
  this->selector_grp_hdl = val;
}

void netbufferv4_update_vallo11_tbl_entry_desc_t::__set_action_mbr_hdl(const MemberHandle_t val) {
  this->action_mbr_hdl = val;
}

void netbufferv4_update_vallo11_tbl_entry_desc_t::__set_action_desc(const netbufferv4_action_desc_t& val) {
  this->action_desc = val;
}

const char* netbufferv4_update_vallo11_tbl_entry_desc_t::ascii_fingerprint = "CE9F8543027FE404200DB002809A6441";
const uint8_t netbufferv4_update_vallo11_tbl_entry_desc_t::binary_fingerprint[16] = {0xCE,0x9F,0x85,0x43,0x02,0x7F,0xE4,0x04,0x20,0x0D,0xB0,0x02,0x80,0x9A,0x64,0x41};

uint32_t netbufferv4_update_vallo11_tbl_entry_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match_spec = false;
  bool isset_has_mbr_hdl = false;
  bool isset_has_grp_hdl = false;
  bool isset_selector_grp_hdl = false;
  bool isset_action_mbr_hdl = false;
  bool isset_action_desc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->match_spec.read(iprot);
          isset_match_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_mbr_hdl);
          isset_has_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_grp_hdl);
          isset_has_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->selector_grp_hdl);
          isset_selector_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_mbr_hdl);
          isset_action_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_desc.read(iprot);
          isset_action_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selector_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_vallo11_tbl_entry_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_vallo11_tbl_entry_desc_t");

  xfer += oprot->writeFieldBegin("match_spec", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->match_spec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_mbr_hdl", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_grp_hdl", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selector_grp_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->selector_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_mbr_hdl", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->action_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_desc", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->action_desc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_vallo11_tbl_entry_desc_t &a, netbufferv4_update_vallo11_tbl_entry_desc_t &b) {
  using ::std::swap;
  swap(a.match_spec, b.match_spec);
  swap(a.has_mbr_hdl, b.has_mbr_hdl);
  swap(a.has_grp_hdl, b.has_grp_hdl);
  swap(a.selector_grp_hdl, b.selector_grp_hdl);
  swap(a.action_mbr_hdl, b.action_mbr_hdl);
  swap(a.action_desc, b.action_desc);
}

netbufferv4_update_vallo11_tbl_entry_desc_t::netbufferv4_update_vallo11_tbl_entry_desc_t(const netbufferv4_update_vallo11_tbl_entry_desc_t& other369) {
  match_spec = other369.match_spec;
  has_mbr_hdl = other369.has_mbr_hdl;
  has_grp_hdl = other369.has_grp_hdl;
  selector_grp_hdl = other369.selector_grp_hdl;
  action_mbr_hdl = other369.action_mbr_hdl;
  action_desc = other369.action_desc;
}
netbufferv4_update_vallo11_tbl_entry_desc_t& netbufferv4_update_vallo11_tbl_entry_desc_t::operator=(const netbufferv4_update_vallo11_tbl_entry_desc_t& other370) {
  match_spec = other370.match_spec;
  has_mbr_hdl = other370.has_mbr_hdl;
  has_grp_hdl = other370.has_grp_hdl;
  selector_grp_hdl = other370.selector_grp_hdl;
  action_mbr_hdl = other370.action_mbr_hdl;
  action_desc = other370.action_desc;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_vallo11_tbl_entry_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_vallo11_tbl_entry_desc_t(";
  out << "match_spec=" << to_string(obj.match_spec);
  out << ", " << "has_mbr_hdl=" << to_string(obj.has_mbr_hdl);
  out << ", " << "has_grp_hdl=" << to_string(obj.has_grp_hdl);
  out << ", " << "selector_grp_hdl=" << to_string(obj.selector_grp_hdl);
  out << ", " << "action_mbr_hdl=" << to_string(obj.action_mbr_hdl);
  out << ", " << "action_desc=" << to_string(obj.action_desc);
  out << ")";
  return out;
}


netbufferv4_update_vallo12_tbl_entry_desc_t::~netbufferv4_update_vallo12_tbl_entry_desc_t() throw() {
}


void netbufferv4_update_vallo12_tbl_entry_desc_t::__set_match_spec(const netbufferv4_update_vallo12_tbl_match_spec_t& val) {
  this->match_spec = val;
}

void netbufferv4_update_vallo12_tbl_entry_desc_t::__set_has_mbr_hdl(const bool val) {
  this->has_mbr_hdl = val;
}

void netbufferv4_update_vallo12_tbl_entry_desc_t::__set_has_grp_hdl(const bool val) {
  this->has_grp_hdl = val;
}

void netbufferv4_update_vallo12_tbl_entry_desc_t::__set_selector_grp_hdl(const MemberHandle_t val) {
  this->selector_grp_hdl = val;
}

void netbufferv4_update_vallo12_tbl_entry_desc_t::__set_action_mbr_hdl(const MemberHandle_t val) {
  this->action_mbr_hdl = val;
}

void netbufferv4_update_vallo12_tbl_entry_desc_t::__set_action_desc(const netbufferv4_action_desc_t& val) {
  this->action_desc = val;
}

const char* netbufferv4_update_vallo12_tbl_entry_desc_t::ascii_fingerprint = "CE9F8543027FE404200DB002809A6441";
const uint8_t netbufferv4_update_vallo12_tbl_entry_desc_t::binary_fingerprint[16] = {0xCE,0x9F,0x85,0x43,0x02,0x7F,0xE4,0x04,0x20,0x0D,0xB0,0x02,0x80,0x9A,0x64,0x41};

uint32_t netbufferv4_update_vallo12_tbl_entry_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match_spec = false;
  bool isset_has_mbr_hdl = false;
  bool isset_has_grp_hdl = false;
  bool isset_selector_grp_hdl = false;
  bool isset_action_mbr_hdl = false;
  bool isset_action_desc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->match_spec.read(iprot);
          isset_match_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_mbr_hdl);
          isset_has_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_grp_hdl);
          isset_has_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->selector_grp_hdl);
          isset_selector_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_mbr_hdl);
          isset_action_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_desc.read(iprot);
          isset_action_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selector_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_vallo12_tbl_entry_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_vallo12_tbl_entry_desc_t");

  xfer += oprot->writeFieldBegin("match_spec", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->match_spec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_mbr_hdl", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_grp_hdl", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selector_grp_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->selector_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_mbr_hdl", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->action_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_desc", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->action_desc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_vallo12_tbl_entry_desc_t &a, netbufferv4_update_vallo12_tbl_entry_desc_t &b) {
  using ::std::swap;
  swap(a.match_spec, b.match_spec);
  swap(a.has_mbr_hdl, b.has_mbr_hdl);
  swap(a.has_grp_hdl, b.has_grp_hdl);
  swap(a.selector_grp_hdl, b.selector_grp_hdl);
  swap(a.action_mbr_hdl, b.action_mbr_hdl);
  swap(a.action_desc, b.action_desc);
}

netbufferv4_update_vallo12_tbl_entry_desc_t::netbufferv4_update_vallo12_tbl_entry_desc_t(const netbufferv4_update_vallo12_tbl_entry_desc_t& other371) {
  match_spec = other371.match_spec;
  has_mbr_hdl = other371.has_mbr_hdl;
  has_grp_hdl = other371.has_grp_hdl;
  selector_grp_hdl = other371.selector_grp_hdl;
  action_mbr_hdl = other371.action_mbr_hdl;
  action_desc = other371.action_desc;
}
netbufferv4_update_vallo12_tbl_entry_desc_t& netbufferv4_update_vallo12_tbl_entry_desc_t::operator=(const netbufferv4_update_vallo12_tbl_entry_desc_t& other372) {
  match_spec = other372.match_spec;
  has_mbr_hdl = other372.has_mbr_hdl;
  has_grp_hdl = other372.has_grp_hdl;
  selector_grp_hdl = other372.selector_grp_hdl;
  action_mbr_hdl = other372.action_mbr_hdl;
  action_desc = other372.action_desc;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_vallo12_tbl_entry_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_vallo12_tbl_entry_desc_t(";
  out << "match_spec=" << to_string(obj.match_spec);
  out << ", " << "has_mbr_hdl=" << to_string(obj.has_mbr_hdl);
  out << ", " << "has_grp_hdl=" << to_string(obj.has_grp_hdl);
  out << ", " << "selector_grp_hdl=" << to_string(obj.selector_grp_hdl);
  out << ", " << "action_mbr_hdl=" << to_string(obj.action_mbr_hdl);
  out << ", " << "action_desc=" << to_string(obj.action_desc);
  out << ")";
  return out;
}


netbufferv4_update_vallo13_tbl_entry_desc_t::~netbufferv4_update_vallo13_tbl_entry_desc_t() throw() {
}


void netbufferv4_update_vallo13_tbl_entry_desc_t::__set_match_spec(const netbufferv4_update_vallo13_tbl_match_spec_t& val) {
  this->match_spec = val;
}

void netbufferv4_update_vallo13_tbl_entry_desc_t::__set_has_mbr_hdl(const bool val) {
  this->has_mbr_hdl = val;
}

void netbufferv4_update_vallo13_tbl_entry_desc_t::__set_has_grp_hdl(const bool val) {
  this->has_grp_hdl = val;
}

void netbufferv4_update_vallo13_tbl_entry_desc_t::__set_selector_grp_hdl(const MemberHandle_t val) {
  this->selector_grp_hdl = val;
}

void netbufferv4_update_vallo13_tbl_entry_desc_t::__set_action_mbr_hdl(const MemberHandle_t val) {
  this->action_mbr_hdl = val;
}

void netbufferv4_update_vallo13_tbl_entry_desc_t::__set_action_desc(const netbufferv4_action_desc_t& val) {
  this->action_desc = val;
}

const char* netbufferv4_update_vallo13_tbl_entry_desc_t::ascii_fingerprint = "CE9F8543027FE404200DB002809A6441";
const uint8_t netbufferv4_update_vallo13_tbl_entry_desc_t::binary_fingerprint[16] = {0xCE,0x9F,0x85,0x43,0x02,0x7F,0xE4,0x04,0x20,0x0D,0xB0,0x02,0x80,0x9A,0x64,0x41};

uint32_t netbufferv4_update_vallo13_tbl_entry_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match_spec = false;
  bool isset_has_mbr_hdl = false;
  bool isset_has_grp_hdl = false;
  bool isset_selector_grp_hdl = false;
  bool isset_action_mbr_hdl = false;
  bool isset_action_desc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->match_spec.read(iprot);
          isset_match_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_mbr_hdl);
          isset_has_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_grp_hdl);
          isset_has_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->selector_grp_hdl);
          isset_selector_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_mbr_hdl);
          isset_action_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_desc.read(iprot);
          isset_action_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selector_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_vallo13_tbl_entry_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_vallo13_tbl_entry_desc_t");

  xfer += oprot->writeFieldBegin("match_spec", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->match_spec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_mbr_hdl", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_grp_hdl", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selector_grp_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->selector_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_mbr_hdl", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->action_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_desc", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->action_desc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_vallo13_tbl_entry_desc_t &a, netbufferv4_update_vallo13_tbl_entry_desc_t &b) {
  using ::std::swap;
  swap(a.match_spec, b.match_spec);
  swap(a.has_mbr_hdl, b.has_mbr_hdl);
  swap(a.has_grp_hdl, b.has_grp_hdl);
  swap(a.selector_grp_hdl, b.selector_grp_hdl);
  swap(a.action_mbr_hdl, b.action_mbr_hdl);
  swap(a.action_desc, b.action_desc);
}

netbufferv4_update_vallo13_tbl_entry_desc_t::netbufferv4_update_vallo13_tbl_entry_desc_t(const netbufferv4_update_vallo13_tbl_entry_desc_t& other373) {
  match_spec = other373.match_spec;
  has_mbr_hdl = other373.has_mbr_hdl;
  has_grp_hdl = other373.has_grp_hdl;
  selector_grp_hdl = other373.selector_grp_hdl;
  action_mbr_hdl = other373.action_mbr_hdl;
  action_desc = other373.action_desc;
}
netbufferv4_update_vallo13_tbl_entry_desc_t& netbufferv4_update_vallo13_tbl_entry_desc_t::operator=(const netbufferv4_update_vallo13_tbl_entry_desc_t& other374) {
  match_spec = other374.match_spec;
  has_mbr_hdl = other374.has_mbr_hdl;
  has_grp_hdl = other374.has_grp_hdl;
  selector_grp_hdl = other374.selector_grp_hdl;
  action_mbr_hdl = other374.action_mbr_hdl;
  action_desc = other374.action_desc;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_vallo13_tbl_entry_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_vallo13_tbl_entry_desc_t(";
  out << "match_spec=" << to_string(obj.match_spec);
  out << ", " << "has_mbr_hdl=" << to_string(obj.has_mbr_hdl);
  out << ", " << "has_grp_hdl=" << to_string(obj.has_grp_hdl);
  out << ", " << "selector_grp_hdl=" << to_string(obj.selector_grp_hdl);
  out << ", " << "action_mbr_hdl=" << to_string(obj.action_mbr_hdl);
  out << ", " << "action_desc=" << to_string(obj.action_desc);
  out << ")";
  return out;
}


netbufferv4_update_vallo14_tbl_entry_desc_t::~netbufferv4_update_vallo14_tbl_entry_desc_t() throw() {
}


void netbufferv4_update_vallo14_tbl_entry_desc_t::__set_match_spec(const netbufferv4_update_vallo14_tbl_match_spec_t& val) {
  this->match_spec = val;
}

void netbufferv4_update_vallo14_tbl_entry_desc_t::__set_has_mbr_hdl(const bool val) {
  this->has_mbr_hdl = val;
}

void netbufferv4_update_vallo14_tbl_entry_desc_t::__set_has_grp_hdl(const bool val) {
  this->has_grp_hdl = val;
}

void netbufferv4_update_vallo14_tbl_entry_desc_t::__set_selector_grp_hdl(const MemberHandle_t val) {
  this->selector_grp_hdl = val;
}

void netbufferv4_update_vallo14_tbl_entry_desc_t::__set_action_mbr_hdl(const MemberHandle_t val) {
  this->action_mbr_hdl = val;
}

void netbufferv4_update_vallo14_tbl_entry_desc_t::__set_action_desc(const netbufferv4_action_desc_t& val) {
  this->action_desc = val;
}

const char* netbufferv4_update_vallo14_tbl_entry_desc_t::ascii_fingerprint = "CE9F8543027FE404200DB002809A6441";
const uint8_t netbufferv4_update_vallo14_tbl_entry_desc_t::binary_fingerprint[16] = {0xCE,0x9F,0x85,0x43,0x02,0x7F,0xE4,0x04,0x20,0x0D,0xB0,0x02,0x80,0x9A,0x64,0x41};

uint32_t netbufferv4_update_vallo14_tbl_entry_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match_spec = false;
  bool isset_has_mbr_hdl = false;
  bool isset_has_grp_hdl = false;
  bool isset_selector_grp_hdl = false;
  bool isset_action_mbr_hdl = false;
  bool isset_action_desc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->match_spec.read(iprot);
          isset_match_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_mbr_hdl);
          isset_has_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_grp_hdl);
          isset_has_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->selector_grp_hdl);
          isset_selector_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_mbr_hdl);
          isset_action_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_desc.read(iprot);
          isset_action_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selector_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_vallo14_tbl_entry_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_vallo14_tbl_entry_desc_t");

  xfer += oprot->writeFieldBegin("match_spec", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->match_spec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_mbr_hdl", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_grp_hdl", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selector_grp_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->selector_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_mbr_hdl", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->action_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_desc", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->action_desc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_vallo14_tbl_entry_desc_t &a, netbufferv4_update_vallo14_tbl_entry_desc_t &b) {
  using ::std::swap;
  swap(a.match_spec, b.match_spec);
  swap(a.has_mbr_hdl, b.has_mbr_hdl);
  swap(a.has_grp_hdl, b.has_grp_hdl);
  swap(a.selector_grp_hdl, b.selector_grp_hdl);
  swap(a.action_mbr_hdl, b.action_mbr_hdl);
  swap(a.action_desc, b.action_desc);
}

netbufferv4_update_vallo14_tbl_entry_desc_t::netbufferv4_update_vallo14_tbl_entry_desc_t(const netbufferv4_update_vallo14_tbl_entry_desc_t& other375) {
  match_spec = other375.match_spec;
  has_mbr_hdl = other375.has_mbr_hdl;
  has_grp_hdl = other375.has_grp_hdl;
  selector_grp_hdl = other375.selector_grp_hdl;
  action_mbr_hdl = other375.action_mbr_hdl;
  action_desc = other375.action_desc;
}
netbufferv4_update_vallo14_tbl_entry_desc_t& netbufferv4_update_vallo14_tbl_entry_desc_t::operator=(const netbufferv4_update_vallo14_tbl_entry_desc_t& other376) {
  match_spec = other376.match_spec;
  has_mbr_hdl = other376.has_mbr_hdl;
  has_grp_hdl = other376.has_grp_hdl;
  selector_grp_hdl = other376.selector_grp_hdl;
  action_mbr_hdl = other376.action_mbr_hdl;
  action_desc = other376.action_desc;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_vallo14_tbl_entry_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_vallo14_tbl_entry_desc_t(";
  out << "match_spec=" << to_string(obj.match_spec);
  out << ", " << "has_mbr_hdl=" << to_string(obj.has_mbr_hdl);
  out << ", " << "has_grp_hdl=" << to_string(obj.has_grp_hdl);
  out << ", " << "selector_grp_hdl=" << to_string(obj.selector_grp_hdl);
  out << ", " << "action_mbr_hdl=" << to_string(obj.action_mbr_hdl);
  out << ", " << "action_desc=" << to_string(obj.action_desc);
  out << ")";
  return out;
}


netbufferv4_update_vallo15_tbl_entry_desc_t::~netbufferv4_update_vallo15_tbl_entry_desc_t() throw() {
}


void netbufferv4_update_vallo15_tbl_entry_desc_t::__set_match_spec(const netbufferv4_update_vallo15_tbl_match_spec_t& val) {
  this->match_spec = val;
}

void netbufferv4_update_vallo15_tbl_entry_desc_t::__set_has_mbr_hdl(const bool val) {
  this->has_mbr_hdl = val;
}

void netbufferv4_update_vallo15_tbl_entry_desc_t::__set_has_grp_hdl(const bool val) {
  this->has_grp_hdl = val;
}

void netbufferv4_update_vallo15_tbl_entry_desc_t::__set_selector_grp_hdl(const MemberHandle_t val) {
  this->selector_grp_hdl = val;
}

void netbufferv4_update_vallo15_tbl_entry_desc_t::__set_action_mbr_hdl(const MemberHandle_t val) {
  this->action_mbr_hdl = val;
}

void netbufferv4_update_vallo15_tbl_entry_desc_t::__set_action_desc(const netbufferv4_action_desc_t& val) {
  this->action_desc = val;
}

const char* netbufferv4_update_vallo15_tbl_entry_desc_t::ascii_fingerprint = "CE9F8543027FE404200DB002809A6441";
const uint8_t netbufferv4_update_vallo15_tbl_entry_desc_t::binary_fingerprint[16] = {0xCE,0x9F,0x85,0x43,0x02,0x7F,0xE4,0x04,0x20,0x0D,0xB0,0x02,0x80,0x9A,0x64,0x41};

uint32_t netbufferv4_update_vallo15_tbl_entry_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match_spec = false;
  bool isset_has_mbr_hdl = false;
  bool isset_has_grp_hdl = false;
  bool isset_selector_grp_hdl = false;
  bool isset_action_mbr_hdl = false;
  bool isset_action_desc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->match_spec.read(iprot);
          isset_match_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_mbr_hdl);
          isset_has_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_grp_hdl);
          isset_has_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->selector_grp_hdl);
          isset_selector_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_mbr_hdl);
          isset_action_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_desc.read(iprot);
          isset_action_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selector_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_vallo15_tbl_entry_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_vallo15_tbl_entry_desc_t");

  xfer += oprot->writeFieldBegin("match_spec", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->match_spec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_mbr_hdl", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_grp_hdl", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selector_grp_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->selector_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_mbr_hdl", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->action_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_desc", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->action_desc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_vallo15_tbl_entry_desc_t &a, netbufferv4_update_vallo15_tbl_entry_desc_t &b) {
  using ::std::swap;
  swap(a.match_spec, b.match_spec);
  swap(a.has_mbr_hdl, b.has_mbr_hdl);
  swap(a.has_grp_hdl, b.has_grp_hdl);
  swap(a.selector_grp_hdl, b.selector_grp_hdl);
  swap(a.action_mbr_hdl, b.action_mbr_hdl);
  swap(a.action_desc, b.action_desc);
}

netbufferv4_update_vallo15_tbl_entry_desc_t::netbufferv4_update_vallo15_tbl_entry_desc_t(const netbufferv4_update_vallo15_tbl_entry_desc_t& other377) {
  match_spec = other377.match_spec;
  has_mbr_hdl = other377.has_mbr_hdl;
  has_grp_hdl = other377.has_grp_hdl;
  selector_grp_hdl = other377.selector_grp_hdl;
  action_mbr_hdl = other377.action_mbr_hdl;
  action_desc = other377.action_desc;
}
netbufferv4_update_vallo15_tbl_entry_desc_t& netbufferv4_update_vallo15_tbl_entry_desc_t::operator=(const netbufferv4_update_vallo15_tbl_entry_desc_t& other378) {
  match_spec = other378.match_spec;
  has_mbr_hdl = other378.has_mbr_hdl;
  has_grp_hdl = other378.has_grp_hdl;
  selector_grp_hdl = other378.selector_grp_hdl;
  action_mbr_hdl = other378.action_mbr_hdl;
  action_desc = other378.action_desc;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_vallo15_tbl_entry_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_vallo15_tbl_entry_desc_t(";
  out << "match_spec=" << to_string(obj.match_spec);
  out << ", " << "has_mbr_hdl=" << to_string(obj.has_mbr_hdl);
  out << ", " << "has_grp_hdl=" << to_string(obj.has_grp_hdl);
  out << ", " << "selector_grp_hdl=" << to_string(obj.selector_grp_hdl);
  out << ", " << "action_mbr_hdl=" << to_string(obj.action_mbr_hdl);
  out << ", " << "action_desc=" << to_string(obj.action_desc);
  out << ")";
  return out;
}


netbufferv4_update_vallo16_tbl_entry_desc_t::~netbufferv4_update_vallo16_tbl_entry_desc_t() throw() {
}


void netbufferv4_update_vallo16_tbl_entry_desc_t::__set_match_spec(const netbufferv4_update_vallo16_tbl_match_spec_t& val) {
  this->match_spec = val;
}

void netbufferv4_update_vallo16_tbl_entry_desc_t::__set_has_mbr_hdl(const bool val) {
  this->has_mbr_hdl = val;
}

void netbufferv4_update_vallo16_tbl_entry_desc_t::__set_has_grp_hdl(const bool val) {
  this->has_grp_hdl = val;
}

void netbufferv4_update_vallo16_tbl_entry_desc_t::__set_selector_grp_hdl(const MemberHandle_t val) {
  this->selector_grp_hdl = val;
}

void netbufferv4_update_vallo16_tbl_entry_desc_t::__set_action_mbr_hdl(const MemberHandle_t val) {
  this->action_mbr_hdl = val;
}

void netbufferv4_update_vallo16_tbl_entry_desc_t::__set_action_desc(const netbufferv4_action_desc_t& val) {
  this->action_desc = val;
}

const char* netbufferv4_update_vallo16_tbl_entry_desc_t::ascii_fingerprint = "CE9F8543027FE404200DB002809A6441";
const uint8_t netbufferv4_update_vallo16_tbl_entry_desc_t::binary_fingerprint[16] = {0xCE,0x9F,0x85,0x43,0x02,0x7F,0xE4,0x04,0x20,0x0D,0xB0,0x02,0x80,0x9A,0x64,0x41};

uint32_t netbufferv4_update_vallo16_tbl_entry_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match_spec = false;
  bool isset_has_mbr_hdl = false;
  bool isset_has_grp_hdl = false;
  bool isset_selector_grp_hdl = false;
  bool isset_action_mbr_hdl = false;
  bool isset_action_desc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->match_spec.read(iprot);
          isset_match_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_mbr_hdl);
          isset_has_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_grp_hdl);
          isset_has_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->selector_grp_hdl);
          isset_selector_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_mbr_hdl);
          isset_action_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_desc.read(iprot);
          isset_action_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selector_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_vallo16_tbl_entry_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_vallo16_tbl_entry_desc_t");

  xfer += oprot->writeFieldBegin("match_spec", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->match_spec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_mbr_hdl", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_grp_hdl", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selector_grp_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->selector_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_mbr_hdl", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->action_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_desc", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->action_desc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_vallo16_tbl_entry_desc_t &a, netbufferv4_update_vallo16_tbl_entry_desc_t &b) {
  using ::std::swap;
  swap(a.match_spec, b.match_spec);
  swap(a.has_mbr_hdl, b.has_mbr_hdl);
  swap(a.has_grp_hdl, b.has_grp_hdl);
  swap(a.selector_grp_hdl, b.selector_grp_hdl);
  swap(a.action_mbr_hdl, b.action_mbr_hdl);
  swap(a.action_desc, b.action_desc);
}

netbufferv4_update_vallo16_tbl_entry_desc_t::netbufferv4_update_vallo16_tbl_entry_desc_t(const netbufferv4_update_vallo16_tbl_entry_desc_t& other379) {
  match_spec = other379.match_spec;
  has_mbr_hdl = other379.has_mbr_hdl;
  has_grp_hdl = other379.has_grp_hdl;
  selector_grp_hdl = other379.selector_grp_hdl;
  action_mbr_hdl = other379.action_mbr_hdl;
  action_desc = other379.action_desc;
}
netbufferv4_update_vallo16_tbl_entry_desc_t& netbufferv4_update_vallo16_tbl_entry_desc_t::operator=(const netbufferv4_update_vallo16_tbl_entry_desc_t& other380) {
  match_spec = other380.match_spec;
  has_mbr_hdl = other380.has_mbr_hdl;
  has_grp_hdl = other380.has_grp_hdl;
  selector_grp_hdl = other380.selector_grp_hdl;
  action_mbr_hdl = other380.action_mbr_hdl;
  action_desc = other380.action_desc;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_vallo16_tbl_entry_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_vallo16_tbl_entry_desc_t(";
  out << "match_spec=" << to_string(obj.match_spec);
  out << ", " << "has_mbr_hdl=" << to_string(obj.has_mbr_hdl);
  out << ", " << "has_grp_hdl=" << to_string(obj.has_grp_hdl);
  out << ", " << "selector_grp_hdl=" << to_string(obj.selector_grp_hdl);
  out << ", " << "action_mbr_hdl=" << to_string(obj.action_mbr_hdl);
  out << ", " << "action_desc=" << to_string(obj.action_desc);
  out << ")";
  return out;
}


netbufferv4_update_vallo1_tbl_entry_desc_t::~netbufferv4_update_vallo1_tbl_entry_desc_t() throw() {
}


void netbufferv4_update_vallo1_tbl_entry_desc_t::__set_match_spec(const netbufferv4_update_vallo1_tbl_match_spec_t& val) {
  this->match_spec = val;
}

void netbufferv4_update_vallo1_tbl_entry_desc_t::__set_has_mbr_hdl(const bool val) {
  this->has_mbr_hdl = val;
}

void netbufferv4_update_vallo1_tbl_entry_desc_t::__set_has_grp_hdl(const bool val) {
  this->has_grp_hdl = val;
}

void netbufferv4_update_vallo1_tbl_entry_desc_t::__set_selector_grp_hdl(const MemberHandle_t val) {
  this->selector_grp_hdl = val;
}

void netbufferv4_update_vallo1_tbl_entry_desc_t::__set_action_mbr_hdl(const MemberHandle_t val) {
  this->action_mbr_hdl = val;
}

void netbufferv4_update_vallo1_tbl_entry_desc_t::__set_action_desc(const netbufferv4_action_desc_t& val) {
  this->action_desc = val;
}

const char* netbufferv4_update_vallo1_tbl_entry_desc_t::ascii_fingerprint = "CE9F8543027FE404200DB002809A6441";
const uint8_t netbufferv4_update_vallo1_tbl_entry_desc_t::binary_fingerprint[16] = {0xCE,0x9F,0x85,0x43,0x02,0x7F,0xE4,0x04,0x20,0x0D,0xB0,0x02,0x80,0x9A,0x64,0x41};

uint32_t netbufferv4_update_vallo1_tbl_entry_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match_spec = false;
  bool isset_has_mbr_hdl = false;
  bool isset_has_grp_hdl = false;
  bool isset_selector_grp_hdl = false;
  bool isset_action_mbr_hdl = false;
  bool isset_action_desc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->match_spec.read(iprot);
          isset_match_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_mbr_hdl);
          isset_has_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_grp_hdl);
          isset_has_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->selector_grp_hdl);
          isset_selector_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_mbr_hdl);
          isset_action_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_desc.read(iprot);
          isset_action_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selector_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_vallo1_tbl_entry_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_vallo1_tbl_entry_desc_t");

  xfer += oprot->writeFieldBegin("match_spec", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->match_spec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_mbr_hdl", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_grp_hdl", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selector_grp_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->selector_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_mbr_hdl", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->action_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_desc", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->action_desc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_vallo1_tbl_entry_desc_t &a, netbufferv4_update_vallo1_tbl_entry_desc_t &b) {
  using ::std::swap;
  swap(a.match_spec, b.match_spec);
  swap(a.has_mbr_hdl, b.has_mbr_hdl);
  swap(a.has_grp_hdl, b.has_grp_hdl);
  swap(a.selector_grp_hdl, b.selector_grp_hdl);
  swap(a.action_mbr_hdl, b.action_mbr_hdl);
  swap(a.action_desc, b.action_desc);
}

netbufferv4_update_vallo1_tbl_entry_desc_t::netbufferv4_update_vallo1_tbl_entry_desc_t(const netbufferv4_update_vallo1_tbl_entry_desc_t& other381) {
  match_spec = other381.match_spec;
  has_mbr_hdl = other381.has_mbr_hdl;
  has_grp_hdl = other381.has_grp_hdl;
  selector_grp_hdl = other381.selector_grp_hdl;
  action_mbr_hdl = other381.action_mbr_hdl;
  action_desc = other381.action_desc;
}
netbufferv4_update_vallo1_tbl_entry_desc_t& netbufferv4_update_vallo1_tbl_entry_desc_t::operator=(const netbufferv4_update_vallo1_tbl_entry_desc_t& other382) {
  match_spec = other382.match_spec;
  has_mbr_hdl = other382.has_mbr_hdl;
  has_grp_hdl = other382.has_grp_hdl;
  selector_grp_hdl = other382.selector_grp_hdl;
  action_mbr_hdl = other382.action_mbr_hdl;
  action_desc = other382.action_desc;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_vallo1_tbl_entry_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_vallo1_tbl_entry_desc_t(";
  out << "match_spec=" << to_string(obj.match_spec);
  out << ", " << "has_mbr_hdl=" << to_string(obj.has_mbr_hdl);
  out << ", " << "has_grp_hdl=" << to_string(obj.has_grp_hdl);
  out << ", " << "selector_grp_hdl=" << to_string(obj.selector_grp_hdl);
  out << ", " << "action_mbr_hdl=" << to_string(obj.action_mbr_hdl);
  out << ", " << "action_desc=" << to_string(obj.action_desc);
  out << ")";
  return out;
}


netbufferv4_update_vallo2_tbl_entry_desc_t::~netbufferv4_update_vallo2_tbl_entry_desc_t() throw() {
}


void netbufferv4_update_vallo2_tbl_entry_desc_t::__set_match_spec(const netbufferv4_update_vallo2_tbl_match_spec_t& val) {
  this->match_spec = val;
}

void netbufferv4_update_vallo2_tbl_entry_desc_t::__set_has_mbr_hdl(const bool val) {
  this->has_mbr_hdl = val;
}

void netbufferv4_update_vallo2_tbl_entry_desc_t::__set_has_grp_hdl(const bool val) {
  this->has_grp_hdl = val;
}

void netbufferv4_update_vallo2_tbl_entry_desc_t::__set_selector_grp_hdl(const MemberHandle_t val) {
  this->selector_grp_hdl = val;
}

void netbufferv4_update_vallo2_tbl_entry_desc_t::__set_action_mbr_hdl(const MemberHandle_t val) {
  this->action_mbr_hdl = val;
}

void netbufferv4_update_vallo2_tbl_entry_desc_t::__set_action_desc(const netbufferv4_action_desc_t& val) {
  this->action_desc = val;
}

const char* netbufferv4_update_vallo2_tbl_entry_desc_t::ascii_fingerprint = "CE9F8543027FE404200DB002809A6441";
const uint8_t netbufferv4_update_vallo2_tbl_entry_desc_t::binary_fingerprint[16] = {0xCE,0x9F,0x85,0x43,0x02,0x7F,0xE4,0x04,0x20,0x0D,0xB0,0x02,0x80,0x9A,0x64,0x41};

uint32_t netbufferv4_update_vallo2_tbl_entry_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match_spec = false;
  bool isset_has_mbr_hdl = false;
  bool isset_has_grp_hdl = false;
  bool isset_selector_grp_hdl = false;
  bool isset_action_mbr_hdl = false;
  bool isset_action_desc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->match_spec.read(iprot);
          isset_match_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_mbr_hdl);
          isset_has_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_grp_hdl);
          isset_has_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->selector_grp_hdl);
          isset_selector_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_mbr_hdl);
          isset_action_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_desc.read(iprot);
          isset_action_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selector_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_vallo2_tbl_entry_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_vallo2_tbl_entry_desc_t");

  xfer += oprot->writeFieldBegin("match_spec", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->match_spec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_mbr_hdl", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_grp_hdl", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selector_grp_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->selector_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_mbr_hdl", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->action_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_desc", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->action_desc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_vallo2_tbl_entry_desc_t &a, netbufferv4_update_vallo2_tbl_entry_desc_t &b) {
  using ::std::swap;
  swap(a.match_spec, b.match_spec);
  swap(a.has_mbr_hdl, b.has_mbr_hdl);
  swap(a.has_grp_hdl, b.has_grp_hdl);
  swap(a.selector_grp_hdl, b.selector_grp_hdl);
  swap(a.action_mbr_hdl, b.action_mbr_hdl);
  swap(a.action_desc, b.action_desc);
}

netbufferv4_update_vallo2_tbl_entry_desc_t::netbufferv4_update_vallo2_tbl_entry_desc_t(const netbufferv4_update_vallo2_tbl_entry_desc_t& other383) {
  match_spec = other383.match_spec;
  has_mbr_hdl = other383.has_mbr_hdl;
  has_grp_hdl = other383.has_grp_hdl;
  selector_grp_hdl = other383.selector_grp_hdl;
  action_mbr_hdl = other383.action_mbr_hdl;
  action_desc = other383.action_desc;
}
netbufferv4_update_vallo2_tbl_entry_desc_t& netbufferv4_update_vallo2_tbl_entry_desc_t::operator=(const netbufferv4_update_vallo2_tbl_entry_desc_t& other384) {
  match_spec = other384.match_spec;
  has_mbr_hdl = other384.has_mbr_hdl;
  has_grp_hdl = other384.has_grp_hdl;
  selector_grp_hdl = other384.selector_grp_hdl;
  action_mbr_hdl = other384.action_mbr_hdl;
  action_desc = other384.action_desc;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_vallo2_tbl_entry_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_vallo2_tbl_entry_desc_t(";
  out << "match_spec=" << to_string(obj.match_spec);
  out << ", " << "has_mbr_hdl=" << to_string(obj.has_mbr_hdl);
  out << ", " << "has_grp_hdl=" << to_string(obj.has_grp_hdl);
  out << ", " << "selector_grp_hdl=" << to_string(obj.selector_grp_hdl);
  out << ", " << "action_mbr_hdl=" << to_string(obj.action_mbr_hdl);
  out << ", " << "action_desc=" << to_string(obj.action_desc);
  out << ")";
  return out;
}


netbufferv4_update_vallo3_tbl_entry_desc_t::~netbufferv4_update_vallo3_tbl_entry_desc_t() throw() {
}


void netbufferv4_update_vallo3_tbl_entry_desc_t::__set_match_spec(const netbufferv4_update_vallo3_tbl_match_spec_t& val) {
  this->match_spec = val;
}

void netbufferv4_update_vallo3_tbl_entry_desc_t::__set_has_mbr_hdl(const bool val) {
  this->has_mbr_hdl = val;
}

void netbufferv4_update_vallo3_tbl_entry_desc_t::__set_has_grp_hdl(const bool val) {
  this->has_grp_hdl = val;
}

void netbufferv4_update_vallo3_tbl_entry_desc_t::__set_selector_grp_hdl(const MemberHandle_t val) {
  this->selector_grp_hdl = val;
}

void netbufferv4_update_vallo3_tbl_entry_desc_t::__set_action_mbr_hdl(const MemberHandle_t val) {
  this->action_mbr_hdl = val;
}

void netbufferv4_update_vallo3_tbl_entry_desc_t::__set_action_desc(const netbufferv4_action_desc_t& val) {
  this->action_desc = val;
}

const char* netbufferv4_update_vallo3_tbl_entry_desc_t::ascii_fingerprint = "CE9F8543027FE404200DB002809A6441";
const uint8_t netbufferv4_update_vallo3_tbl_entry_desc_t::binary_fingerprint[16] = {0xCE,0x9F,0x85,0x43,0x02,0x7F,0xE4,0x04,0x20,0x0D,0xB0,0x02,0x80,0x9A,0x64,0x41};

uint32_t netbufferv4_update_vallo3_tbl_entry_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match_spec = false;
  bool isset_has_mbr_hdl = false;
  bool isset_has_grp_hdl = false;
  bool isset_selector_grp_hdl = false;
  bool isset_action_mbr_hdl = false;
  bool isset_action_desc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->match_spec.read(iprot);
          isset_match_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_mbr_hdl);
          isset_has_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_grp_hdl);
          isset_has_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->selector_grp_hdl);
          isset_selector_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_mbr_hdl);
          isset_action_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_desc.read(iprot);
          isset_action_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selector_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_vallo3_tbl_entry_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_vallo3_tbl_entry_desc_t");

  xfer += oprot->writeFieldBegin("match_spec", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->match_spec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_mbr_hdl", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_grp_hdl", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selector_grp_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->selector_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_mbr_hdl", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->action_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_desc", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->action_desc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_vallo3_tbl_entry_desc_t &a, netbufferv4_update_vallo3_tbl_entry_desc_t &b) {
  using ::std::swap;
  swap(a.match_spec, b.match_spec);
  swap(a.has_mbr_hdl, b.has_mbr_hdl);
  swap(a.has_grp_hdl, b.has_grp_hdl);
  swap(a.selector_grp_hdl, b.selector_grp_hdl);
  swap(a.action_mbr_hdl, b.action_mbr_hdl);
  swap(a.action_desc, b.action_desc);
}

netbufferv4_update_vallo3_tbl_entry_desc_t::netbufferv4_update_vallo3_tbl_entry_desc_t(const netbufferv4_update_vallo3_tbl_entry_desc_t& other385) {
  match_spec = other385.match_spec;
  has_mbr_hdl = other385.has_mbr_hdl;
  has_grp_hdl = other385.has_grp_hdl;
  selector_grp_hdl = other385.selector_grp_hdl;
  action_mbr_hdl = other385.action_mbr_hdl;
  action_desc = other385.action_desc;
}
netbufferv4_update_vallo3_tbl_entry_desc_t& netbufferv4_update_vallo3_tbl_entry_desc_t::operator=(const netbufferv4_update_vallo3_tbl_entry_desc_t& other386) {
  match_spec = other386.match_spec;
  has_mbr_hdl = other386.has_mbr_hdl;
  has_grp_hdl = other386.has_grp_hdl;
  selector_grp_hdl = other386.selector_grp_hdl;
  action_mbr_hdl = other386.action_mbr_hdl;
  action_desc = other386.action_desc;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_vallo3_tbl_entry_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_vallo3_tbl_entry_desc_t(";
  out << "match_spec=" << to_string(obj.match_spec);
  out << ", " << "has_mbr_hdl=" << to_string(obj.has_mbr_hdl);
  out << ", " << "has_grp_hdl=" << to_string(obj.has_grp_hdl);
  out << ", " << "selector_grp_hdl=" << to_string(obj.selector_grp_hdl);
  out << ", " << "action_mbr_hdl=" << to_string(obj.action_mbr_hdl);
  out << ", " << "action_desc=" << to_string(obj.action_desc);
  out << ")";
  return out;
}


netbufferv4_update_vallo4_tbl_entry_desc_t::~netbufferv4_update_vallo4_tbl_entry_desc_t() throw() {
}


void netbufferv4_update_vallo4_tbl_entry_desc_t::__set_match_spec(const netbufferv4_update_vallo4_tbl_match_spec_t& val) {
  this->match_spec = val;
}

void netbufferv4_update_vallo4_tbl_entry_desc_t::__set_has_mbr_hdl(const bool val) {
  this->has_mbr_hdl = val;
}

void netbufferv4_update_vallo4_tbl_entry_desc_t::__set_has_grp_hdl(const bool val) {
  this->has_grp_hdl = val;
}

void netbufferv4_update_vallo4_tbl_entry_desc_t::__set_selector_grp_hdl(const MemberHandle_t val) {
  this->selector_grp_hdl = val;
}

void netbufferv4_update_vallo4_tbl_entry_desc_t::__set_action_mbr_hdl(const MemberHandle_t val) {
  this->action_mbr_hdl = val;
}

void netbufferv4_update_vallo4_tbl_entry_desc_t::__set_action_desc(const netbufferv4_action_desc_t& val) {
  this->action_desc = val;
}

const char* netbufferv4_update_vallo4_tbl_entry_desc_t::ascii_fingerprint = "CE9F8543027FE404200DB002809A6441";
const uint8_t netbufferv4_update_vallo4_tbl_entry_desc_t::binary_fingerprint[16] = {0xCE,0x9F,0x85,0x43,0x02,0x7F,0xE4,0x04,0x20,0x0D,0xB0,0x02,0x80,0x9A,0x64,0x41};

uint32_t netbufferv4_update_vallo4_tbl_entry_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match_spec = false;
  bool isset_has_mbr_hdl = false;
  bool isset_has_grp_hdl = false;
  bool isset_selector_grp_hdl = false;
  bool isset_action_mbr_hdl = false;
  bool isset_action_desc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->match_spec.read(iprot);
          isset_match_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_mbr_hdl);
          isset_has_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_grp_hdl);
          isset_has_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->selector_grp_hdl);
          isset_selector_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_mbr_hdl);
          isset_action_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_desc.read(iprot);
          isset_action_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selector_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_vallo4_tbl_entry_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_vallo4_tbl_entry_desc_t");

  xfer += oprot->writeFieldBegin("match_spec", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->match_spec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_mbr_hdl", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_grp_hdl", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selector_grp_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->selector_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_mbr_hdl", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->action_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_desc", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->action_desc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_vallo4_tbl_entry_desc_t &a, netbufferv4_update_vallo4_tbl_entry_desc_t &b) {
  using ::std::swap;
  swap(a.match_spec, b.match_spec);
  swap(a.has_mbr_hdl, b.has_mbr_hdl);
  swap(a.has_grp_hdl, b.has_grp_hdl);
  swap(a.selector_grp_hdl, b.selector_grp_hdl);
  swap(a.action_mbr_hdl, b.action_mbr_hdl);
  swap(a.action_desc, b.action_desc);
}

netbufferv4_update_vallo4_tbl_entry_desc_t::netbufferv4_update_vallo4_tbl_entry_desc_t(const netbufferv4_update_vallo4_tbl_entry_desc_t& other387) {
  match_spec = other387.match_spec;
  has_mbr_hdl = other387.has_mbr_hdl;
  has_grp_hdl = other387.has_grp_hdl;
  selector_grp_hdl = other387.selector_grp_hdl;
  action_mbr_hdl = other387.action_mbr_hdl;
  action_desc = other387.action_desc;
}
netbufferv4_update_vallo4_tbl_entry_desc_t& netbufferv4_update_vallo4_tbl_entry_desc_t::operator=(const netbufferv4_update_vallo4_tbl_entry_desc_t& other388) {
  match_spec = other388.match_spec;
  has_mbr_hdl = other388.has_mbr_hdl;
  has_grp_hdl = other388.has_grp_hdl;
  selector_grp_hdl = other388.selector_grp_hdl;
  action_mbr_hdl = other388.action_mbr_hdl;
  action_desc = other388.action_desc;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_vallo4_tbl_entry_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_vallo4_tbl_entry_desc_t(";
  out << "match_spec=" << to_string(obj.match_spec);
  out << ", " << "has_mbr_hdl=" << to_string(obj.has_mbr_hdl);
  out << ", " << "has_grp_hdl=" << to_string(obj.has_grp_hdl);
  out << ", " << "selector_grp_hdl=" << to_string(obj.selector_grp_hdl);
  out << ", " << "action_mbr_hdl=" << to_string(obj.action_mbr_hdl);
  out << ", " << "action_desc=" << to_string(obj.action_desc);
  out << ")";
  return out;
}


netbufferv4_update_vallo5_tbl_entry_desc_t::~netbufferv4_update_vallo5_tbl_entry_desc_t() throw() {
}


void netbufferv4_update_vallo5_tbl_entry_desc_t::__set_match_spec(const netbufferv4_update_vallo5_tbl_match_spec_t& val) {
  this->match_spec = val;
}

void netbufferv4_update_vallo5_tbl_entry_desc_t::__set_has_mbr_hdl(const bool val) {
  this->has_mbr_hdl = val;
}

void netbufferv4_update_vallo5_tbl_entry_desc_t::__set_has_grp_hdl(const bool val) {
  this->has_grp_hdl = val;
}

void netbufferv4_update_vallo5_tbl_entry_desc_t::__set_selector_grp_hdl(const MemberHandle_t val) {
  this->selector_grp_hdl = val;
}

void netbufferv4_update_vallo5_tbl_entry_desc_t::__set_action_mbr_hdl(const MemberHandle_t val) {
  this->action_mbr_hdl = val;
}

void netbufferv4_update_vallo5_tbl_entry_desc_t::__set_action_desc(const netbufferv4_action_desc_t& val) {
  this->action_desc = val;
}

const char* netbufferv4_update_vallo5_tbl_entry_desc_t::ascii_fingerprint = "CE9F8543027FE404200DB002809A6441";
const uint8_t netbufferv4_update_vallo5_tbl_entry_desc_t::binary_fingerprint[16] = {0xCE,0x9F,0x85,0x43,0x02,0x7F,0xE4,0x04,0x20,0x0D,0xB0,0x02,0x80,0x9A,0x64,0x41};

uint32_t netbufferv4_update_vallo5_tbl_entry_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match_spec = false;
  bool isset_has_mbr_hdl = false;
  bool isset_has_grp_hdl = false;
  bool isset_selector_grp_hdl = false;
  bool isset_action_mbr_hdl = false;
  bool isset_action_desc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->match_spec.read(iprot);
          isset_match_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_mbr_hdl);
          isset_has_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_grp_hdl);
          isset_has_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->selector_grp_hdl);
          isset_selector_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_mbr_hdl);
          isset_action_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_desc.read(iprot);
          isset_action_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selector_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_vallo5_tbl_entry_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_vallo5_tbl_entry_desc_t");

  xfer += oprot->writeFieldBegin("match_spec", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->match_spec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_mbr_hdl", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_grp_hdl", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selector_grp_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->selector_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_mbr_hdl", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->action_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_desc", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->action_desc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_vallo5_tbl_entry_desc_t &a, netbufferv4_update_vallo5_tbl_entry_desc_t &b) {
  using ::std::swap;
  swap(a.match_spec, b.match_spec);
  swap(a.has_mbr_hdl, b.has_mbr_hdl);
  swap(a.has_grp_hdl, b.has_grp_hdl);
  swap(a.selector_grp_hdl, b.selector_grp_hdl);
  swap(a.action_mbr_hdl, b.action_mbr_hdl);
  swap(a.action_desc, b.action_desc);
}

netbufferv4_update_vallo5_tbl_entry_desc_t::netbufferv4_update_vallo5_tbl_entry_desc_t(const netbufferv4_update_vallo5_tbl_entry_desc_t& other389) {
  match_spec = other389.match_spec;
  has_mbr_hdl = other389.has_mbr_hdl;
  has_grp_hdl = other389.has_grp_hdl;
  selector_grp_hdl = other389.selector_grp_hdl;
  action_mbr_hdl = other389.action_mbr_hdl;
  action_desc = other389.action_desc;
}
netbufferv4_update_vallo5_tbl_entry_desc_t& netbufferv4_update_vallo5_tbl_entry_desc_t::operator=(const netbufferv4_update_vallo5_tbl_entry_desc_t& other390) {
  match_spec = other390.match_spec;
  has_mbr_hdl = other390.has_mbr_hdl;
  has_grp_hdl = other390.has_grp_hdl;
  selector_grp_hdl = other390.selector_grp_hdl;
  action_mbr_hdl = other390.action_mbr_hdl;
  action_desc = other390.action_desc;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_vallo5_tbl_entry_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_vallo5_tbl_entry_desc_t(";
  out << "match_spec=" << to_string(obj.match_spec);
  out << ", " << "has_mbr_hdl=" << to_string(obj.has_mbr_hdl);
  out << ", " << "has_grp_hdl=" << to_string(obj.has_grp_hdl);
  out << ", " << "selector_grp_hdl=" << to_string(obj.selector_grp_hdl);
  out << ", " << "action_mbr_hdl=" << to_string(obj.action_mbr_hdl);
  out << ", " << "action_desc=" << to_string(obj.action_desc);
  out << ")";
  return out;
}


netbufferv4_update_vallo6_tbl_entry_desc_t::~netbufferv4_update_vallo6_tbl_entry_desc_t() throw() {
}


void netbufferv4_update_vallo6_tbl_entry_desc_t::__set_match_spec(const netbufferv4_update_vallo6_tbl_match_spec_t& val) {
  this->match_spec = val;
}

void netbufferv4_update_vallo6_tbl_entry_desc_t::__set_has_mbr_hdl(const bool val) {
  this->has_mbr_hdl = val;
}

void netbufferv4_update_vallo6_tbl_entry_desc_t::__set_has_grp_hdl(const bool val) {
  this->has_grp_hdl = val;
}

void netbufferv4_update_vallo6_tbl_entry_desc_t::__set_selector_grp_hdl(const MemberHandle_t val) {
  this->selector_grp_hdl = val;
}

void netbufferv4_update_vallo6_tbl_entry_desc_t::__set_action_mbr_hdl(const MemberHandle_t val) {
  this->action_mbr_hdl = val;
}

void netbufferv4_update_vallo6_tbl_entry_desc_t::__set_action_desc(const netbufferv4_action_desc_t& val) {
  this->action_desc = val;
}

const char* netbufferv4_update_vallo6_tbl_entry_desc_t::ascii_fingerprint = "CE9F8543027FE404200DB002809A6441";
const uint8_t netbufferv4_update_vallo6_tbl_entry_desc_t::binary_fingerprint[16] = {0xCE,0x9F,0x85,0x43,0x02,0x7F,0xE4,0x04,0x20,0x0D,0xB0,0x02,0x80,0x9A,0x64,0x41};

uint32_t netbufferv4_update_vallo6_tbl_entry_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match_spec = false;
  bool isset_has_mbr_hdl = false;
  bool isset_has_grp_hdl = false;
  bool isset_selector_grp_hdl = false;
  bool isset_action_mbr_hdl = false;
  bool isset_action_desc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->match_spec.read(iprot);
          isset_match_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_mbr_hdl);
          isset_has_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_grp_hdl);
          isset_has_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->selector_grp_hdl);
          isset_selector_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_mbr_hdl);
          isset_action_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_desc.read(iprot);
          isset_action_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selector_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_vallo6_tbl_entry_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_vallo6_tbl_entry_desc_t");

  xfer += oprot->writeFieldBegin("match_spec", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->match_spec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_mbr_hdl", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_grp_hdl", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selector_grp_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->selector_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_mbr_hdl", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->action_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_desc", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->action_desc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_vallo6_tbl_entry_desc_t &a, netbufferv4_update_vallo6_tbl_entry_desc_t &b) {
  using ::std::swap;
  swap(a.match_spec, b.match_spec);
  swap(a.has_mbr_hdl, b.has_mbr_hdl);
  swap(a.has_grp_hdl, b.has_grp_hdl);
  swap(a.selector_grp_hdl, b.selector_grp_hdl);
  swap(a.action_mbr_hdl, b.action_mbr_hdl);
  swap(a.action_desc, b.action_desc);
}

netbufferv4_update_vallo6_tbl_entry_desc_t::netbufferv4_update_vallo6_tbl_entry_desc_t(const netbufferv4_update_vallo6_tbl_entry_desc_t& other391) {
  match_spec = other391.match_spec;
  has_mbr_hdl = other391.has_mbr_hdl;
  has_grp_hdl = other391.has_grp_hdl;
  selector_grp_hdl = other391.selector_grp_hdl;
  action_mbr_hdl = other391.action_mbr_hdl;
  action_desc = other391.action_desc;
}
netbufferv4_update_vallo6_tbl_entry_desc_t& netbufferv4_update_vallo6_tbl_entry_desc_t::operator=(const netbufferv4_update_vallo6_tbl_entry_desc_t& other392) {
  match_spec = other392.match_spec;
  has_mbr_hdl = other392.has_mbr_hdl;
  has_grp_hdl = other392.has_grp_hdl;
  selector_grp_hdl = other392.selector_grp_hdl;
  action_mbr_hdl = other392.action_mbr_hdl;
  action_desc = other392.action_desc;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_vallo6_tbl_entry_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_vallo6_tbl_entry_desc_t(";
  out << "match_spec=" << to_string(obj.match_spec);
  out << ", " << "has_mbr_hdl=" << to_string(obj.has_mbr_hdl);
  out << ", " << "has_grp_hdl=" << to_string(obj.has_grp_hdl);
  out << ", " << "selector_grp_hdl=" << to_string(obj.selector_grp_hdl);
  out << ", " << "action_mbr_hdl=" << to_string(obj.action_mbr_hdl);
  out << ", " << "action_desc=" << to_string(obj.action_desc);
  out << ")";
  return out;
}


netbufferv4_update_vallo7_tbl_entry_desc_t::~netbufferv4_update_vallo7_tbl_entry_desc_t() throw() {
}


void netbufferv4_update_vallo7_tbl_entry_desc_t::__set_match_spec(const netbufferv4_update_vallo7_tbl_match_spec_t& val) {
  this->match_spec = val;
}

void netbufferv4_update_vallo7_tbl_entry_desc_t::__set_has_mbr_hdl(const bool val) {
  this->has_mbr_hdl = val;
}

void netbufferv4_update_vallo7_tbl_entry_desc_t::__set_has_grp_hdl(const bool val) {
  this->has_grp_hdl = val;
}

void netbufferv4_update_vallo7_tbl_entry_desc_t::__set_selector_grp_hdl(const MemberHandle_t val) {
  this->selector_grp_hdl = val;
}

void netbufferv4_update_vallo7_tbl_entry_desc_t::__set_action_mbr_hdl(const MemberHandle_t val) {
  this->action_mbr_hdl = val;
}

void netbufferv4_update_vallo7_tbl_entry_desc_t::__set_action_desc(const netbufferv4_action_desc_t& val) {
  this->action_desc = val;
}

const char* netbufferv4_update_vallo7_tbl_entry_desc_t::ascii_fingerprint = "CE9F8543027FE404200DB002809A6441";
const uint8_t netbufferv4_update_vallo7_tbl_entry_desc_t::binary_fingerprint[16] = {0xCE,0x9F,0x85,0x43,0x02,0x7F,0xE4,0x04,0x20,0x0D,0xB0,0x02,0x80,0x9A,0x64,0x41};

uint32_t netbufferv4_update_vallo7_tbl_entry_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match_spec = false;
  bool isset_has_mbr_hdl = false;
  bool isset_has_grp_hdl = false;
  bool isset_selector_grp_hdl = false;
  bool isset_action_mbr_hdl = false;
  bool isset_action_desc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->match_spec.read(iprot);
          isset_match_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_mbr_hdl);
          isset_has_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_grp_hdl);
          isset_has_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->selector_grp_hdl);
          isset_selector_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_mbr_hdl);
          isset_action_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_desc.read(iprot);
          isset_action_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selector_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_vallo7_tbl_entry_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_vallo7_tbl_entry_desc_t");

  xfer += oprot->writeFieldBegin("match_spec", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->match_spec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_mbr_hdl", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_grp_hdl", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selector_grp_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->selector_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_mbr_hdl", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->action_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_desc", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->action_desc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_vallo7_tbl_entry_desc_t &a, netbufferv4_update_vallo7_tbl_entry_desc_t &b) {
  using ::std::swap;
  swap(a.match_spec, b.match_spec);
  swap(a.has_mbr_hdl, b.has_mbr_hdl);
  swap(a.has_grp_hdl, b.has_grp_hdl);
  swap(a.selector_grp_hdl, b.selector_grp_hdl);
  swap(a.action_mbr_hdl, b.action_mbr_hdl);
  swap(a.action_desc, b.action_desc);
}

netbufferv4_update_vallo7_tbl_entry_desc_t::netbufferv4_update_vallo7_tbl_entry_desc_t(const netbufferv4_update_vallo7_tbl_entry_desc_t& other393) {
  match_spec = other393.match_spec;
  has_mbr_hdl = other393.has_mbr_hdl;
  has_grp_hdl = other393.has_grp_hdl;
  selector_grp_hdl = other393.selector_grp_hdl;
  action_mbr_hdl = other393.action_mbr_hdl;
  action_desc = other393.action_desc;
}
netbufferv4_update_vallo7_tbl_entry_desc_t& netbufferv4_update_vallo7_tbl_entry_desc_t::operator=(const netbufferv4_update_vallo7_tbl_entry_desc_t& other394) {
  match_spec = other394.match_spec;
  has_mbr_hdl = other394.has_mbr_hdl;
  has_grp_hdl = other394.has_grp_hdl;
  selector_grp_hdl = other394.selector_grp_hdl;
  action_mbr_hdl = other394.action_mbr_hdl;
  action_desc = other394.action_desc;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_vallo7_tbl_entry_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_vallo7_tbl_entry_desc_t(";
  out << "match_spec=" << to_string(obj.match_spec);
  out << ", " << "has_mbr_hdl=" << to_string(obj.has_mbr_hdl);
  out << ", " << "has_grp_hdl=" << to_string(obj.has_grp_hdl);
  out << ", " << "selector_grp_hdl=" << to_string(obj.selector_grp_hdl);
  out << ", " << "action_mbr_hdl=" << to_string(obj.action_mbr_hdl);
  out << ", " << "action_desc=" << to_string(obj.action_desc);
  out << ")";
  return out;
}


netbufferv4_update_vallo8_tbl_entry_desc_t::~netbufferv4_update_vallo8_tbl_entry_desc_t() throw() {
}


void netbufferv4_update_vallo8_tbl_entry_desc_t::__set_match_spec(const netbufferv4_update_vallo8_tbl_match_spec_t& val) {
  this->match_spec = val;
}

void netbufferv4_update_vallo8_tbl_entry_desc_t::__set_has_mbr_hdl(const bool val) {
  this->has_mbr_hdl = val;
}

void netbufferv4_update_vallo8_tbl_entry_desc_t::__set_has_grp_hdl(const bool val) {
  this->has_grp_hdl = val;
}

void netbufferv4_update_vallo8_tbl_entry_desc_t::__set_selector_grp_hdl(const MemberHandle_t val) {
  this->selector_grp_hdl = val;
}

void netbufferv4_update_vallo8_tbl_entry_desc_t::__set_action_mbr_hdl(const MemberHandle_t val) {
  this->action_mbr_hdl = val;
}

void netbufferv4_update_vallo8_tbl_entry_desc_t::__set_action_desc(const netbufferv4_action_desc_t& val) {
  this->action_desc = val;
}

const char* netbufferv4_update_vallo8_tbl_entry_desc_t::ascii_fingerprint = "CE9F8543027FE404200DB002809A6441";
const uint8_t netbufferv4_update_vallo8_tbl_entry_desc_t::binary_fingerprint[16] = {0xCE,0x9F,0x85,0x43,0x02,0x7F,0xE4,0x04,0x20,0x0D,0xB0,0x02,0x80,0x9A,0x64,0x41};

uint32_t netbufferv4_update_vallo8_tbl_entry_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match_spec = false;
  bool isset_has_mbr_hdl = false;
  bool isset_has_grp_hdl = false;
  bool isset_selector_grp_hdl = false;
  bool isset_action_mbr_hdl = false;
  bool isset_action_desc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->match_spec.read(iprot);
          isset_match_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_mbr_hdl);
          isset_has_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_grp_hdl);
          isset_has_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->selector_grp_hdl);
          isset_selector_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_mbr_hdl);
          isset_action_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_desc.read(iprot);
          isset_action_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selector_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_vallo8_tbl_entry_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_vallo8_tbl_entry_desc_t");

  xfer += oprot->writeFieldBegin("match_spec", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->match_spec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_mbr_hdl", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_grp_hdl", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selector_grp_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->selector_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_mbr_hdl", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->action_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_desc", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->action_desc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_vallo8_tbl_entry_desc_t &a, netbufferv4_update_vallo8_tbl_entry_desc_t &b) {
  using ::std::swap;
  swap(a.match_spec, b.match_spec);
  swap(a.has_mbr_hdl, b.has_mbr_hdl);
  swap(a.has_grp_hdl, b.has_grp_hdl);
  swap(a.selector_grp_hdl, b.selector_grp_hdl);
  swap(a.action_mbr_hdl, b.action_mbr_hdl);
  swap(a.action_desc, b.action_desc);
}

netbufferv4_update_vallo8_tbl_entry_desc_t::netbufferv4_update_vallo8_tbl_entry_desc_t(const netbufferv4_update_vallo8_tbl_entry_desc_t& other395) {
  match_spec = other395.match_spec;
  has_mbr_hdl = other395.has_mbr_hdl;
  has_grp_hdl = other395.has_grp_hdl;
  selector_grp_hdl = other395.selector_grp_hdl;
  action_mbr_hdl = other395.action_mbr_hdl;
  action_desc = other395.action_desc;
}
netbufferv4_update_vallo8_tbl_entry_desc_t& netbufferv4_update_vallo8_tbl_entry_desc_t::operator=(const netbufferv4_update_vallo8_tbl_entry_desc_t& other396) {
  match_spec = other396.match_spec;
  has_mbr_hdl = other396.has_mbr_hdl;
  has_grp_hdl = other396.has_grp_hdl;
  selector_grp_hdl = other396.selector_grp_hdl;
  action_mbr_hdl = other396.action_mbr_hdl;
  action_desc = other396.action_desc;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_vallo8_tbl_entry_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_vallo8_tbl_entry_desc_t(";
  out << "match_spec=" << to_string(obj.match_spec);
  out << ", " << "has_mbr_hdl=" << to_string(obj.has_mbr_hdl);
  out << ", " << "has_grp_hdl=" << to_string(obj.has_grp_hdl);
  out << ", " << "selector_grp_hdl=" << to_string(obj.selector_grp_hdl);
  out << ", " << "action_mbr_hdl=" << to_string(obj.action_mbr_hdl);
  out << ", " << "action_desc=" << to_string(obj.action_desc);
  out << ")";
  return out;
}


netbufferv4_update_vallo9_tbl_entry_desc_t::~netbufferv4_update_vallo9_tbl_entry_desc_t() throw() {
}


void netbufferv4_update_vallo9_tbl_entry_desc_t::__set_match_spec(const netbufferv4_update_vallo9_tbl_match_spec_t& val) {
  this->match_spec = val;
}

void netbufferv4_update_vallo9_tbl_entry_desc_t::__set_has_mbr_hdl(const bool val) {
  this->has_mbr_hdl = val;
}

void netbufferv4_update_vallo9_tbl_entry_desc_t::__set_has_grp_hdl(const bool val) {
  this->has_grp_hdl = val;
}

void netbufferv4_update_vallo9_tbl_entry_desc_t::__set_selector_grp_hdl(const MemberHandle_t val) {
  this->selector_grp_hdl = val;
}

void netbufferv4_update_vallo9_tbl_entry_desc_t::__set_action_mbr_hdl(const MemberHandle_t val) {
  this->action_mbr_hdl = val;
}

void netbufferv4_update_vallo9_tbl_entry_desc_t::__set_action_desc(const netbufferv4_action_desc_t& val) {
  this->action_desc = val;
}

const char* netbufferv4_update_vallo9_tbl_entry_desc_t::ascii_fingerprint = "CE9F8543027FE404200DB002809A6441";
const uint8_t netbufferv4_update_vallo9_tbl_entry_desc_t::binary_fingerprint[16] = {0xCE,0x9F,0x85,0x43,0x02,0x7F,0xE4,0x04,0x20,0x0D,0xB0,0x02,0x80,0x9A,0x64,0x41};

uint32_t netbufferv4_update_vallo9_tbl_entry_desc_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_match_spec = false;
  bool isset_has_mbr_hdl = false;
  bool isset_has_grp_hdl = false;
  bool isset_selector_grp_hdl = false;
  bool isset_action_mbr_hdl = false;
  bool isset_action_desc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->match_spec.read(iprot);
          isset_match_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_mbr_hdl);
          isset_has_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_grp_hdl);
          isset_has_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->selector_grp_hdl);
          isset_selector_grp_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action_mbr_hdl);
          isset_action_mbr_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_desc.read(iprot);
          isset_action_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_match_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selector_grp_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_mbr_hdl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_desc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t netbufferv4_update_vallo9_tbl_entry_desc_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_update_vallo9_tbl_entry_desc_t");

  xfer += oprot->writeFieldBegin("match_spec", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->match_spec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_mbr_hdl", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_grp_hdl", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->has_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selector_grp_hdl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->selector_grp_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_mbr_hdl", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->action_mbr_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_desc", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->action_desc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(netbufferv4_update_vallo9_tbl_entry_desc_t &a, netbufferv4_update_vallo9_tbl_entry_desc_t &b) {
  using ::std::swap;
  swap(a.match_spec, b.match_spec);
  swap(a.has_mbr_hdl, b.has_mbr_hdl);
  swap(a.has_grp_hdl, b.has_grp_hdl);
  swap(a.selector_grp_hdl, b.selector_grp_hdl);
  swap(a.action_mbr_hdl, b.action_mbr_hdl);
  swap(a.action_desc, b.action_desc);
}

netbufferv4_update_vallo9_tbl_entry_desc_t::netbufferv4_update_vallo9_tbl_entry_desc_t(const netbufferv4_update_vallo9_tbl_entry_desc_t& other397) {
  match_spec = other397.match_spec;
  has_mbr_hdl = other397.has_mbr_hdl;
  has_grp_hdl = other397.has_grp_hdl;
  selector_grp_hdl = other397.selector_grp_hdl;
  action_mbr_hdl = other397.action_mbr_hdl;
  action_desc = other397.action_desc;
}
netbufferv4_update_vallo9_tbl_entry_desc_t& netbufferv4_update_vallo9_tbl_entry_desc_t::operator=(const netbufferv4_update_vallo9_tbl_entry_desc_t& other398) {
  match_spec = other398.match_spec;
  has_mbr_hdl = other398.has_mbr_hdl;
  has_grp_hdl = other398.has_grp_hdl;
  selector_grp_hdl = other398.selector_grp_hdl;
  action_mbr_hdl = other398.action_mbr_hdl;
  action_desc = other398.action_desc;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const netbufferv4_update_vallo9_tbl_entry_desc_t& obj) {
  using apache::thrift::to_string;
  out << "netbufferv4_update_vallo9_tbl_entry_desc_t(";
  out << "match_spec=" << to_string(obj.match_spec);
  out << ", " << "has_mbr_hdl=" << to_string(obj.has_mbr_hdl);
  out << ", " << "has_grp_hdl=" << to_string(obj.has_grp_hdl);
  out << ", " << "selector_grp_hdl=" << to_string(obj.selector_grp_hdl);
  out << ", " << "action_mbr_hdl=" << to_string(obj.action_mbr_hdl);
  out << ", " << "action_desc=" << to_string(obj.action_desc);
  out << ")";
  return out;
}


InvalidTableOperation::~InvalidTableOperation() throw() {
}


void InvalidTableOperation::__set_code(const int32_t val) {
  this->code = val;
}

const char* InvalidTableOperation::ascii_fingerprint = "E86CACEB22240450EDCBEFC3A83970E4";
const uint8_t InvalidTableOperation::binary_fingerprint[16] = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

uint32_t InvalidTableOperation::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->code);
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InvalidTableOperation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("InvalidTableOperation");

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(InvalidTableOperation &a, InvalidTableOperation &b) {
  using ::std::swap;
  swap(a.code, b.code);
  swap(a.__isset, b.__isset);
}

InvalidTableOperation::InvalidTableOperation(const InvalidTableOperation& other399) : TException() {
  code = other399.code;
  __isset = other399.__isset;
}
InvalidTableOperation& InvalidTableOperation::operator=(const InvalidTableOperation& other400) {
  code = other400.code;
  __isset = other400.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const InvalidTableOperation& obj) {
  using apache::thrift::to_string;
  out << "InvalidTableOperation(";
  out << "code=" << to_string(obj.code);
  out << ")";
  return out;
}


InvalidLearnOperation::~InvalidLearnOperation() throw() {
}


void InvalidLearnOperation::__set_code(const int32_t val) {
  this->code = val;
}

const char* InvalidLearnOperation::ascii_fingerprint = "E86CACEB22240450EDCBEFC3A83970E4";
const uint8_t InvalidLearnOperation::binary_fingerprint[16] = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

uint32_t InvalidLearnOperation::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->code);
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InvalidLearnOperation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("InvalidLearnOperation");

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(InvalidLearnOperation &a, InvalidLearnOperation &b) {
  using ::std::swap;
  swap(a.code, b.code);
  swap(a.__isset, b.__isset);
}

InvalidLearnOperation::InvalidLearnOperation(const InvalidLearnOperation& other401) : TException() {
  code = other401.code;
  __isset = other401.__isset;
}
InvalidLearnOperation& InvalidLearnOperation::operator=(const InvalidLearnOperation& other402) {
  code = other402.code;
  __isset = other402.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const InvalidLearnOperation& obj) {
  using apache::thrift::to_string;
  out << "InvalidLearnOperation(";
  out << "code=" << to_string(obj.code);
  out << ")";
  return out;
}


InvalidDbgOperation::~InvalidDbgOperation() throw() {
}


void InvalidDbgOperation::__set_code(const int32_t val) {
  this->code = val;
}

const char* InvalidDbgOperation::ascii_fingerprint = "E86CACEB22240450EDCBEFC3A83970E4";
const uint8_t InvalidDbgOperation::binary_fingerprint[16] = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

uint32_t InvalidDbgOperation::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->code);
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InvalidDbgOperation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("InvalidDbgOperation");

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(InvalidDbgOperation &a, InvalidDbgOperation &b) {
  using ::std::swap;
  swap(a.code, b.code);
  swap(a.__isset, b.__isset);
}

InvalidDbgOperation::InvalidDbgOperation(const InvalidDbgOperation& other403) : TException() {
  code = other403.code;
  __isset = other403.__isset;
}
InvalidDbgOperation& InvalidDbgOperation::operator=(const InvalidDbgOperation& other404) {
  code = other404.code;
  __isset = other404.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const InvalidDbgOperation& obj) {
  using apache::thrift::to_string;
  out << "InvalidDbgOperation(";
  out << "code=" << to_string(obj.code);
  out << ")";
  return out;
}


InvalidSnapshotOperation::~InvalidSnapshotOperation() throw() {
}


void InvalidSnapshotOperation::__set_code(const int32_t val) {
  this->code = val;
}

const char* InvalidSnapshotOperation::ascii_fingerprint = "E86CACEB22240450EDCBEFC3A83970E4";
const uint8_t InvalidSnapshotOperation::binary_fingerprint[16] = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

uint32_t InvalidSnapshotOperation::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->code);
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InvalidSnapshotOperation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("InvalidSnapshotOperation");

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(InvalidSnapshotOperation &a, InvalidSnapshotOperation &b) {
  using ::std::swap;
  swap(a.code, b.code);
  swap(a.__isset, b.__isset);
}

InvalidSnapshotOperation::InvalidSnapshotOperation(const InvalidSnapshotOperation& other405) : TException() {
  code = other405.code;
  __isset = other405.__isset;
}
InvalidSnapshotOperation& InvalidSnapshotOperation::operator=(const InvalidSnapshotOperation& other406) {
  code = other406.code;
  __isset = other406.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const InvalidSnapshotOperation& obj) {
  using apache::thrift::to_string;
  out << "InvalidSnapshotOperation(";
  out << "code=" << to_string(obj.code);
  out << ")";
  return out;
}


InvalidCounterOperation::~InvalidCounterOperation() throw() {
}


void InvalidCounterOperation::__set_code(const int32_t val) {
  this->code = val;
}

const char* InvalidCounterOperation::ascii_fingerprint = "E86CACEB22240450EDCBEFC3A83970E4";
const uint8_t InvalidCounterOperation::binary_fingerprint[16] = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

uint32_t InvalidCounterOperation::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->code);
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InvalidCounterOperation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("InvalidCounterOperation");

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(InvalidCounterOperation &a, InvalidCounterOperation &b) {
  using ::std::swap;
  swap(a.code, b.code);
  swap(a.__isset, b.__isset);
}

InvalidCounterOperation::InvalidCounterOperation(const InvalidCounterOperation& other407) : TException() {
  code = other407.code;
  __isset = other407.__isset;
}
InvalidCounterOperation& InvalidCounterOperation::operator=(const InvalidCounterOperation& other408) {
  code = other408.code;
  __isset = other408.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const InvalidCounterOperation& obj) {
  using apache::thrift::to_string;
  out << "InvalidCounterOperation(";
  out << "code=" << to_string(obj.code);
  out << ")";
  return out;
}


InvalidRegisterOperation::~InvalidRegisterOperation() throw() {
}


void InvalidRegisterOperation::__set_code(const int32_t val) {
  this->code = val;
}

const char* InvalidRegisterOperation::ascii_fingerprint = "E86CACEB22240450EDCBEFC3A83970E4";
const uint8_t InvalidRegisterOperation::binary_fingerprint[16] = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

uint32_t InvalidRegisterOperation::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->code);
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InvalidRegisterOperation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("InvalidRegisterOperation");

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(InvalidRegisterOperation &a, InvalidRegisterOperation &b) {
  using ::std::swap;
  swap(a.code, b.code);
  swap(a.__isset, b.__isset);
}

InvalidRegisterOperation::InvalidRegisterOperation(const InvalidRegisterOperation& other409) : TException() {
  code = other409.code;
  __isset = other409.__isset;
}
InvalidRegisterOperation& InvalidRegisterOperation::operator=(const InvalidRegisterOperation& other410) {
  code = other410.code;
  __isset = other410.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const InvalidRegisterOperation& obj) {
  using apache::thrift::to_string;
  out << "InvalidRegisterOperation(";
  out << "code=" << to_string(obj.code);
  out << ")";
  return out;
}


InvalidMeterOperation::~InvalidMeterOperation() throw() {
}


void InvalidMeterOperation::__set_code(const int32_t val) {
  this->code = val;
}

const char* InvalidMeterOperation::ascii_fingerprint = "E86CACEB22240450EDCBEFC3A83970E4";
const uint8_t InvalidMeterOperation::binary_fingerprint[16] = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

uint32_t InvalidMeterOperation::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->code);
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InvalidMeterOperation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("InvalidMeterOperation");

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(InvalidMeterOperation &a, InvalidMeterOperation &b) {
  using ::std::swap;
  swap(a.code, b.code);
  swap(a.__isset, b.__isset);
}

InvalidMeterOperation::InvalidMeterOperation(const InvalidMeterOperation& other411) : TException() {
  code = other411.code;
  __isset = other411.__isset;
}
InvalidMeterOperation& InvalidMeterOperation::operator=(const InvalidMeterOperation& other412) {
  code = other412.code;
  __isset = other412.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const InvalidMeterOperation& obj) {
  using apache::thrift::to_string;
  out << "InvalidMeterOperation(";
  out << "code=" << to_string(obj.code);
  out << ")";
  return out;
}


InvalidLPFOperation::~InvalidLPFOperation() throw() {
}


void InvalidLPFOperation::__set_code(const int32_t val) {
  this->code = val;
}

const char* InvalidLPFOperation::ascii_fingerprint = "E86CACEB22240450EDCBEFC3A83970E4";
const uint8_t InvalidLPFOperation::binary_fingerprint[16] = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

uint32_t InvalidLPFOperation::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->code);
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InvalidLPFOperation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("InvalidLPFOperation");

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(InvalidLPFOperation &a, InvalidLPFOperation &b) {
  using ::std::swap;
  swap(a.code, b.code);
  swap(a.__isset, b.__isset);
}

InvalidLPFOperation::InvalidLPFOperation(const InvalidLPFOperation& other413) : TException() {
  code = other413.code;
  __isset = other413.__isset;
}
InvalidLPFOperation& InvalidLPFOperation::operator=(const InvalidLPFOperation& other414) {
  code = other414.code;
  __isset = other414.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const InvalidLPFOperation& obj) {
  using apache::thrift::to_string;
  out << "InvalidLPFOperation(";
  out << "code=" << to_string(obj.code);
  out << ")";
  return out;
}


InvalidWREDOperation::~InvalidWREDOperation() throw() {
}


void InvalidWREDOperation::__set_code(const int32_t val) {
  this->code = val;
}

const char* InvalidWREDOperation::ascii_fingerprint = "E86CACEB22240450EDCBEFC3A83970E4";
const uint8_t InvalidWREDOperation::binary_fingerprint[16] = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

uint32_t InvalidWREDOperation::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->code);
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InvalidWREDOperation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("InvalidWREDOperation");

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(InvalidWREDOperation &a, InvalidWREDOperation &b) {
  using ::std::swap;
  swap(a.code, b.code);
  swap(a.__isset, b.__isset);
}

InvalidWREDOperation::InvalidWREDOperation(const InvalidWREDOperation& other415) : TException() {
  code = other415.code;
  __isset = other415.__isset;
}
InvalidWREDOperation& InvalidWREDOperation::operator=(const InvalidWREDOperation& other416) {
  code = other416.code;
  __isset = other416.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const InvalidWREDOperation& obj) {
  using apache::thrift::to_string;
  out << "InvalidWREDOperation(";
  out << "code=" << to_string(obj.code);
  out << ")";
  return out;
}

} // namespace
