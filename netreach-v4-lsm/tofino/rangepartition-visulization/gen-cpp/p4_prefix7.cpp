#include "p4_prefix.h"
namespace p4_pd_rpc {

void netbufferv4Processor::process_eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss");
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_result result;
  try {
    iface_->eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss(args.sess_hdl, args.dev_id, args.entry, args.action_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_by_match_spec");
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_by_match_spec", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_by_match_spec_result result;
  try {
    iface_->eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec, args.action_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_by_match_spec");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_modify_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_modify_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss");
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_result result;
  try {
    iface_->eg_port_forward_tbl_table_modify_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss(args.sess_hdl, args.dev_id, args.entry, args.action_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_modify_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_modify_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_by_match_spec");
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_by_match_spec", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_by_match_spec_result result;
  try {
    iface_->eg_port_forward_tbl_table_modify_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec, args.action_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_by_match_spec");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_modify_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_modify_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone");
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_result result;
  try {
    iface_->eg_port_forward_tbl_table_modify_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone(args.sess_hdl, args.dev_id, args.entry, args.action_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_modify_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_modify_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_by_match_spec");
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_by_match_spec", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_by_match_spec_result result;
  try {
    iface_->eg_port_forward_tbl_table_modify_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec, args.action_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_by_match_spec");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq");
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_result result;
  try {
    iface_->eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_by_match_spec");
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_by_match_spec", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_by_match_spec_result result;
  try {
    iface_->eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_by_match_spec");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq");
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_result result;
  try {
    iface_->eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_by_match_spec");
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_by_match_spec", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_by_match_spec_result result;
  try {
    iface_->eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_by_match_spec");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putres_by_mirroring(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putres_by_mirroring", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putres_by_mirroring");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putres_by_mirroring");
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putres_by_mirroring_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putres_by_mirroring", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putres_by_mirroring_result result;
  try {
    iface_->eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putres_by_mirroring(args.sess_hdl, args.dev_id, args.entry, args.action_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putres_by_mirroring");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putres_by_mirroring", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putres_by_mirroring");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putres_by_mirroring", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putres_by_mirroring", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putres_by_mirroring_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putres_by_mirroring_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putres_by_mirroring_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putres_by_mirroring_by_match_spec");
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putres_by_mirroring_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putres_by_mirroring_by_match_spec", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putres_by_mirroring_by_match_spec_result result;
  try {
    iface_->eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putres_by_mirroring_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec, args.action_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putres_by_mirroring_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putres_by_mirroring_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putres_by_mirroring_by_match_spec");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putres_by_mirroring_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putres_by_mirroring_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres");
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_result result;
  try {
    iface_->eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres(args.sess_hdl, args.dev_id, args.entry, args.action_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_by_match_spec");
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_by_match_spec", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_by_match_spec_result result;
  try {
    iface_->eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec, args.action_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_by_match_spec");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_modify_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_modify_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres");
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_result result;
  try {
    iface_->eg_port_forward_tbl_table_modify_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres(args.sess_hdl, args.dev_id, args.entry, args.action_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_modify_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_modify_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_by_match_spec");
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_by_match_spec", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_by_match_spec_result result;
  try {
    iface_->eg_port_forward_tbl_table_modify_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec, args.action_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_by_match_spec");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_modify_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring");
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_result result;
  try {
    iface_->eg_port_forward_tbl_table_modify_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring(args.sess_hdl, args.dev_id, args.entry, args.action_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_modify_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_by_match_spec");
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_by_match_spec", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_by_match_spec_result result;
  try {
    iface_->eg_port_forward_tbl_table_modify_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec, args.action_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_by_match_spec");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_case3(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_case3", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_case3");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_case3");
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_case3_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_case3", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_case3_result result;
  try {
    iface_->eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_case3(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_case3");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_case3", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_case3");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_case3", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_case3", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_case3_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_case3_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_case3_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_case3_by_match_spec");
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_case3_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_case3_by_match_spec", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_case3_by_match_spec_result result;
  try {
    iface_->eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_case3_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_case3_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_case3_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_case3_by_match_spec");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_case3_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_case3_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_case3(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_case3", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_case3");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_case3");
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_case3_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_case3", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_case3_result result;
  try {
    iface_->eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_case3(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_case3");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_case3", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_case3");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_case3", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_case3", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_case3_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_case3_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_case3_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_case3_by_match_spec");
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_case3_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_case3_by_match_spec", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_case3_by_match_spec_result result;
  try {
    iface_->eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_case3_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_case3_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_case3_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_case3_by_match_spec");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_case3_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_case3_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq");
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_result result;
  try {
    iface_->eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_by_match_spec");
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_by_match_spec", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_by_match_spec_result result;
  try {
    iface_->eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_by_match_spec");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delres_by_mirroring(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delres_by_mirroring", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delres_by_mirroring");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delres_by_mirroring");
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delres_by_mirroring_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delres_by_mirroring", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delres_by_mirroring_result result;
  try {
    iface_->eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delres_by_mirroring(args.sess_hdl, args.dev_id, args.entry, args.action_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delres_by_mirroring");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delres_by_mirroring", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delres_by_mirroring");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delres_by_mirroring", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delres_by_mirroring", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delres_by_mirroring_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delres_by_mirroring_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delres_by_mirroring_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delres_by_mirroring_by_match_spec");
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delres_by_mirroring_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delres_by_mirroring_by_match_spec", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delres_by_mirroring_by_match_spec_result result;
  try {
    iface_->eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delres_by_mirroring_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec, args.action_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delres_by_mirroring_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delres_by_mirroring_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delres_by_mirroring_by_match_spec");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delres_by_mirroring_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delres_by_mirroring_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres");
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_result result;
  try {
    iface_->eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres(args.sess_hdl, args.dev_id, args.entry, args.action_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_by_match_spec");
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_by_match_spec", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_by_match_spec_result result;
  try {
    iface_->eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec, args.action_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_by_match_spec");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_modify_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_modify_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres");
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_result result;
  try {
    iface_->eg_port_forward_tbl_table_modify_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres(args.sess_hdl, args.dev_id, args.entry, args.action_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_modify_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_modify_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_by_match_spec");
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_by_match_spec", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_by_match_spec_result result;
  try {
    iface_->eg_port_forward_tbl_table_modify_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec, args.action_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_by_match_spec");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_modify_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring");
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_result result;
  try {
    iface_->eg_port_forward_tbl_table_modify_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring(args.sess_hdl, args.dev_id, args.entry, args.action_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_modify_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_by_match_spec");
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_by_match_spec", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_by_match_spec_result result;
  try {
    iface_->eg_port_forward_tbl_table_modify_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec, args.action_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_by_match_spec");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_case3(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_case3", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_case3");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_case3");
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_case3_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_case3", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_case3_result result;
  try {
    iface_->eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_case3(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_case3");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_case3", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_case3");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_case3", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_case3", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_case3_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_case3_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_case3_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_case3_by_match_spec");
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_case3_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_case3_by_match_spec", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_case3_by_match_spec_result result;
  try {
    iface_->eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_case3_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_case3_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_case3_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_case3_by_match_spec");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_case3_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_case3_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_modify_with_forward_scanreq_split_and_clone(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_modify_with_forward_scanreq_split_and_clone", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_scanreq_split_and_clone");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_scanreq_split_and_clone");
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_forward_scanreq_split_and_clone_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_scanreq_split_and_clone", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_forward_scanreq_split_and_clone_result result;
  try {
    iface_->eg_port_forward_tbl_table_modify_with_forward_scanreq_split_and_clone(args.sess_hdl, args.dev_id, args.entry, args.action_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_scanreq_split_and_clone");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_forward_scanreq_split_and_clone", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_scanreq_split_and_clone");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_forward_scanreq_split_and_clone", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_scanreq_split_and_clone", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_modify_with_forward_scanreq_split_and_clone_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_modify_with_forward_scanreq_split_and_clone_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_scanreq_split_and_clone_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_scanreq_split_and_clone_by_match_spec");
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_forward_scanreq_split_and_clone_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_scanreq_split_and_clone_by_match_spec", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_forward_scanreq_split_and_clone_by_match_spec_result result;
  try {
    iface_->eg_port_forward_tbl_table_modify_with_forward_scanreq_split_and_clone_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec, args.action_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_scanreq_split_and_clone_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_forward_scanreq_split_and_clone_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_scanreq_split_and_clone_by_match_spec");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_forward_scanreq_split_and_clone_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_scanreq_split_and_clone_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_modify_with_forward_scanreq_split(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_modify_with_forward_scanreq_split", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_scanreq_split");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_scanreq_split");
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_forward_scanreq_split_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_scanreq_split", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_forward_scanreq_split_result result;
  try {
    iface_->eg_port_forward_tbl_table_modify_with_forward_scanreq_split(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_scanreq_split");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_forward_scanreq_split", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_scanreq_split");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_forward_scanreq_split", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_scanreq_split", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_modify_with_forward_scanreq_split_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_modify_with_forward_scanreq_split_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_scanreq_split_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_scanreq_split_by_match_spec");
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_forward_scanreq_split_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_scanreq_split_by_match_spec", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_forward_scanreq_split_by_match_spec_result result;
  try {
    iface_->eg_port_forward_tbl_table_modify_with_forward_scanreq_split_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_scanreq_split_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_forward_scanreq_split_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_scanreq_split_by_match_spec");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_forward_scanreq_split_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_scanreq_split_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_modify_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_modify_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone");
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_result result;
  try {
    iface_->eg_port_forward_tbl_table_modify_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone(args.sess_hdl, args.dev_id, args.entry, args.action_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_modify_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_modify_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_by_match_spec");
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_by_match_spec", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_by_match_spec_result result;
  try {
    iface_->eg_port_forward_tbl_table_modify_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec, args.action_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_by_match_spec");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_modify_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_modify_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone");
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_result result;
  try {
    iface_->eg_port_forward_tbl_table_modify_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone(args.sess_hdl, args.dev_id, args.entry, args.action_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_modify_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_modify_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_by_match_spec");
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_by_match_spec", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_by_match_spec_result result;
  try {
    iface_->eg_port_forward_tbl_table_modify_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec, args.action_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_by_match_spec");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_modify_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_modify_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone");
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_result result;
  try {
    iface_->eg_port_forward_tbl_table_modify_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone(args.sess_hdl, args.dev_id, args.entry, args.action_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_modify_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_modify_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_by_match_spec");
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_by_match_spec", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_by_match_spec_result result;
  try {
    iface_->eg_port_forward_tbl_table_modify_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec, args.action_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_by_match_spec");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_modify_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_modify_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone");
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_result result;
  try {
    iface_->eg_port_forward_tbl_table_modify_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone(args.sess_hdl, args.dev_id, args.entry, args.action_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_modify_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_modify_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_by_match_spec");
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_by_match_spec", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_by_match_spec_result result;
  try {
    iface_->eg_port_forward_tbl_table_modify_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec, args.action_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_by_match_spec");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_modify_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_modify_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_nop");
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_nop", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_nop_result result;
  try {
    iface_->eg_port_forward_tbl_table_modify_with_nop(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_nop");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_nop", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_modify_with_nop_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_modify_with_nop_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_nop_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_nop_by_match_spec");
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_nop_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_nop_by_match_spec", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_nop_by_match_spec_result result;
  try {
    iface_->eg_port_forward_tbl_table_modify_with_nop_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_nop_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_nop_by_match_spec");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_nop_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm1_tbl_table_modify_with_hash_for_cm1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm1_tbl_table_modify_with_hash_for_cm1", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm1_tbl_table_modify_with_hash_for_cm1");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm1_tbl_table_modify_with_hash_for_cm1");
  }

  netbufferv4_hash_for_cm1_tbl_table_modify_with_hash_for_cm1_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm1_tbl_table_modify_with_hash_for_cm1", bytes);
  }

  netbufferv4_hash_for_cm1_tbl_table_modify_with_hash_for_cm1_result result;
  try {
    iface_->hash_for_cm1_tbl_table_modify_with_hash_for_cm1(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm1_tbl_table_modify_with_hash_for_cm1");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm1_tbl_table_modify_with_hash_for_cm1", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm1_tbl_table_modify_with_hash_for_cm1");
  }

  oprot->writeMessageBegin("hash_for_cm1_tbl_table_modify_with_hash_for_cm1", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm1_tbl_table_modify_with_hash_for_cm1", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm1_tbl_table_modify_with_hash_for_cm1_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm1_tbl_table_modify_with_hash_for_cm1_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm1_tbl_table_modify_with_hash_for_cm1_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm1_tbl_table_modify_with_hash_for_cm1_by_match_spec");
  }

  netbufferv4_hash_for_cm1_tbl_table_modify_with_hash_for_cm1_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm1_tbl_table_modify_with_hash_for_cm1_by_match_spec", bytes);
  }

  netbufferv4_hash_for_cm1_tbl_table_modify_with_hash_for_cm1_by_match_spec_result result;
  try {
    iface_->hash_for_cm1_tbl_table_modify_with_hash_for_cm1_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm1_tbl_table_modify_with_hash_for_cm1_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm1_tbl_table_modify_with_hash_for_cm1_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm1_tbl_table_modify_with_hash_for_cm1_by_match_spec");
  }

  oprot->writeMessageBegin("hash_for_cm1_tbl_table_modify_with_hash_for_cm1_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm1_tbl_table_modify_with_hash_for_cm1_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm1_tbl_table_modify_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm1_tbl_table_modify_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm1_tbl_table_modify_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm1_tbl_table_modify_with_nop");
  }

  netbufferv4_hash_for_cm1_tbl_table_modify_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm1_tbl_table_modify_with_nop", bytes);
  }

  netbufferv4_hash_for_cm1_tbl_table_modify_with_nop_result result;
  try {
    iface_->hash_for_cm1_tbl_table_modify_with_nop(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm1_tbl_table_modify_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm1_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm1_tbl_table_modify_with_nop");
  }

  oprot->writeMessageBegin("hash_for_cm1_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm1_tbl_table_modify_with_nop", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm1_tbl_table_modify_with_nop_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm1_tbl_table_modify_with_nop_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm1_tbl_table_modify_with_nop_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm1_tbl_table_modify_with_nop_by_match_spec");
  }

  netbufferv4_hash_for_cm1_tbl_table_modify_with_nop_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm1_tbl_table_modify_with_nop_by_match_spec", bytes);
  }

  netbufferv4_hash_for_cm1_tbl_table_modify_with_nop_by_match_spec_result result;
  try {
    iface_->hash_for_cm1_tbl_table_modify_with_nop_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm1_tbl_table_modify_with_nop_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm1_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm1_tbl_table_modify_with_nop_by_match_spec");
  }

  oprot->writeMessageBegin("hash_for_cm1_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm1_tbl_table_modify_with_nop_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm2_tbl_table_modify_with_hash_for_cm2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm2_tbl_table_modify_with_hash_for_cm2", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm2_tbl_table_modify_with_hash_for_cm2");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm2_tbl_table_modify_with_hash_for_cm2");
  }

  netbufferv4_hash_for_cm2_tbl_table_modify_with_hash_for_cm2_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm2_tbl_table_modify_with_hash_for_cm2", bytes);
  }

  netbufferv4_hash_for_cm2_tbl_table_modify_with_hash_for_cm2_result result;
  try {
    iface_->hash_for_cm2_tbl_table_modify_with_hash_for_cm2(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm2_tbl_table_modify_with_hash_for_cm2");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm2_tbl_table_modify_with_hash_for_cm2", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm2_tbl_table_modify_with_hash_for_cm2");
  }

  oprot->writeMessageBegin("hash_for_cm2_tbl_table_modify_with_hash_for_cm2", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm2_tbl_table_modify_with_hash_for_cm2", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm2_tbl_table_modify_with_hash_for_cm2_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm2_tbl_table_modify_with_hash_for_cm2_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm2_tbl_table_modify_with_hash_for_cm2_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm2_tbl_table_modify_with_hash_for_cm2_by_match_spec");
  }

  netbufferv4_hash_for_cm2_tbl_table_modify_with_hash_for_cm2_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm2_tbl_table_modify_with_hash_for_cm2_by_match_spec", bytes);
  }

  netbufferv4_hash_for_cm2_tbl_table_modify_with_hash_for_cm2_by_match_spec_result result;
  try {
    iface_->hash_for_cm2_tbl_table_modify_with_hash_for_cm2_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm2_tbl_table_modify_with_hash_for_cm2_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm2_tbl_table_modify_with_hash_for_cm2_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm2_tbl_table_modify_with_hash_for_cm2_by_match_spec");
  }

  oprot->writeMessageBegin("hash_for_cm2_tbl_table_modify_with_hash_for_cm2_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm2_tbl_table_modify_with_hash_for_cm2_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm2_tbl_table_modify_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm2_tbl_table_modify_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm2_tbl_table_modify_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm2_tbl_table_modify_with_nop");
  }

  netbufferv4_hash_for_cm2_tbl_table_modify_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm2_tbl_table_modify_with_nop", bytes);
  }

  netbufferv4_hash_for_cm2_tbl_table_modify_with_nop_result result;
  try {
    iface_->hash_for_cm2_tbl_table_modify_with_nop(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm2_tbl_table_modify_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm2_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm2_tbl_table_modify_with_nop");
  }

  oprot->writeMessageBegin("hash_for_cm2_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm2_tbl_table_modify_with_nop", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm2_tbl_table_modify_with_nop_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm2_tbl_table_modify_with_nop_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm2_tbl_table_modify_with_nop_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm2_tbl_table_modify_with_nop_by_match_spec");
  }

  netbufferv4_hash_for_cm2_tbl_table_modify_with_nop_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm2_tbl_table_modify_with_nop_by_match_spec", bytes);
  }

  netbufferv4_hash_for_cm2_tbl_table_modify_with_nop_by_match_spec_result result;
  try {
    iface_->hash_for_cm2_tbl_table_modify_with_nop_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm2_tbl_table_modify_with_nop_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm2_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm2_tbl_table_modify_with_nop_by_match_spec");
  }

  oprot->writeMessageBegin("hash_for_cm2_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm2_tbl_table_modify_with_nop_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm3_tbl_table_modify_with_hash_for_cm3(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm3_tbl_table_modify_with_hash_for_cm3", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm3_tbl_table_modify_with_hash_for_cm3");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm3_tbl_table_modify_with_hash_for_cm3");
  }

  netbufferv4_hash_for_cm3_tbl_table_modify_with_hash_for_cm3_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm3_tbl_table_modify_with_hash_for_cm3", bytes);
  }

  netbufferv4_hash_for_cm3_tbl_table_modify_with_hash_for_cm3_result result;
  try {
    iface_->hash_for_cm3_tbl_table_modify_with_hash_for_cm3(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm3_tbl_table_modify_with_hash_for_cm3");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm3_tbl_table_modify_with_hash_for_cm3", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm3_tbl_table_modify_with_hash_for_cm3");
  }

  oprot->writeMessageBegin("hash_for_cm3_tbl_table_modify_with_hash_for_cm3", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm3_tbl_table_modify_with_hash_for_cm3", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm3_tbl_table_modify_with_hash_for_cm3_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm3_tbl_table_modify_with_hash_for_cm3_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm3_tbl_table_modify_with_hash_for_cm3_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm3_tbl_table_modify_with_hash_for_cm3_by_match_spec");
  }

  netbufferv4_hash_for_cm3_tbl_table_modify_with_hash_for_cm3_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm3_tbl_table_modify_with_hash_for_cm3_by_match_spec", bytes);
  }

  netbufferv4_hash_for_cm3_tbl_table_modify_with_hash_for_cm3_by_match_spec_result result;
  try {
    iface_->hash_for_cm3_tbl_table_modify_with_hash_for_cm3_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm3_tbl_table_modify_with_hash_for_cm3_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm3_tbl_table_modify_with_hash_for_cm3_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm3_tbl_table_modify_with_hash_for_cm3_by_match_spec");
  }

  oprot->writeMessageBegin("hash_for_cm3_tbl_table_modify_with_hash_for_cm3_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm3_tbl_table_modify_with_hash_for_cm3_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm3_tbl_table_modify_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm3_tbl_table_modify_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm3_tbl_table_modify_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm3_tbl_table_modify_with_nop");
  }

  netbufferv4_hash_for_cm3_tbl_table_modify_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm3_tbl_table_modify_with_nop", bytes);
  }

  netbufferv4_hash_for_cm3_tbl_table_modify_with_nop_result result;
  try {
    iface_->hash_for_cm3_tbl_table_modify_with_nop(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm3_tbl_table_modify_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm3_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm3_tbl_table_modify_with_nop");
  }

  oprot->writeMessageBegin("hash_for_cm3_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm3_tbl_table_modify_with_nop", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm3_tbl_table_modify_with_nop_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm3_tbl_table_modify_with_nop_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm3_tbl_table_modify_with_nop_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm3_tbl_table_modify_with_nop_by_match_spec");
  }

  netbufferv4_hash_for_cm3_tbl_table_modify_with_nop_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm3_tbl_table_modify_with_nop_by_match_spec", bytes);
  }

  netbufferv4_hash_for_cm3_tbl_table_modify_with_nop_by_match_spec_result result;
  try {
    iface_->hash_for_cm3_tbl_table_modify_with_nop_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm3_tbl_table_modify_with_nop_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm3_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm3_tbl_table_modify_with_nop_by_match_spec");
  }

  oprot->writeMessageBegin("hash_for_cm3_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm3_tbl_table_modify_with_nop_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm4_tbl_table_modify_with_hash_for_cm4(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm4_tbl_table_modify_with_hash_for_cm4", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm4_tbl_table_modify_with_hash_for_cm4");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm4_tbl_table_modify_with_hash_for_cm4");
  }

  netbufferv4_hash_for_cm4_tbl_table_modify_with_hash_for_cm4_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm4_tbl_table_modify_with_hash_for_cm4", bytes);
  }

  netbufferv4_hash_for_cm4_tbl_table_modify_with_hash_for_cm4_result result;
  try {
    iface_->hash_for_cm4_tbl_table_modify_with_hash_for_cm4(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm4_tbl_table_modify_with_hash_for_cm4");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm4_tbl_table_modify_with_hash_for_cm4", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm4_tbl_table_modify_with_hash_for_cm4");
  }

  oprot->writeMessageBegin("hash_for_cm4_tbl_table_modify_with_hash_for_cm4", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm4_tbl_table_modify_with_hash_for_cm4", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm4_tbl_table_modify_with_hash_for_cm4_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm4_tbl_table_modify_with_hash_for_cm4_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm4_tbl_table_modify_with_hash_for_cm4_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm4_tbl_table_modify_with_hash_for_cm4_by_match_spec");
  }

  netbufferv4_hash_for_cm4_tbl_table_modify_with_hash_for_cm4_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm4_tbl_table_modify_with_hash_for_cm4_by_match_spec", bytes);
  }

  netbufferv4_hash_for_cm4_tbl_table_modify_with_hash_for_cm4_by_match_spec_result result;
  try {
    iface_->hash_for_cm4_tbl_table_modify_with_hash_for_cm4_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm4_tbl_table_modify_with_hash_for_cm4_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm4_tbl_table_modify_with_hash_for_cm4_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm4_tbl_table_modify_with_hash_for_cm4_by_match_spec");
  }

  oprot->writeMessageBegin("hash_for_cm4_tbl_table_modify_with_hash_for_cm4_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm4_tbl_table_modify_with_hash_for_cm4_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm4_tbl_table_modify_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm4_tbl_table_modify_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm4_tbl_table_modify_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm4_tbl_table_modify_with_nop");
  }

  netbufferv4_hash_for_cm4_tbl_table_modify_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm4_tbl_table_modify_with_nop", bytes);
  }

  netbufferv4_hash_for_cm4_tbl_table_modify_with_nop_result result;
  try {
    iface_->hash_for_cm4_tbl_table_modify_with_nop(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm4_tbl_table_modify_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm4_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm4_tbl_table_modify_with_nop");
  }

  oprot->writeMessageBegin("hash_for_cm4_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm4_tbl_table_modify_with_nop", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm4_tbl_table_modify_with_nop_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm4_tbl_table_modify_with_nop_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm4_tbl_table_modify_with_nop_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm4_tbl_table_modify_with_nop_by_match_spec");
  }

  netbufferv4_hash_for_cm4_tbl_table_modify_with_nop_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm4_tbl_table_modify_with_nop_by_match_spec", bytes);
  }

  netbufferv4_hash_for_cm4_tbl_table_modify_with_nop_by_match_spec_result result;
  try {
    iface_->hash_for_cm4_tbl_table_modify_with_nop_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm4_tbl_table_modify_with_nop_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm4_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm4_tbl_table_modify_with_nop_by_match_spec");
  }

  oprot->writeMessageBegin("hash_for_cm4_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm4_tbl_table_modify_with_nop_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_hash_for_seq_tbl_table_modify_with_hash_for_seq(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_seq_tbl_table_modify_with_hash_for_seq", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_seq_tbl_table_modify_with_hash_for_seq");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_seq_tbl_table_modify_with_hash_for_seq");
  }

  netbufferv4_hash_for_seq_tbl_table_modify_with_hash_for_seq_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_seq_tbl_table_modify_with_hash_for_seq", bytes);
  }

  netbufferv4_hash_for_seq_tbl_table_modify_with_hash_for_seq_result result;
  try {
    iface_->hash_for_seq_tbl_table_modify_with_hash_for_seq(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_seq_tbl_table_modify_with_hash_for_seq");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_seq_tbl_table_modify_with_hash_for_seq", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_seq_tbl_table_modify_with_hash_for_seq");
  }

  oprot->writeMessageBegin("hash_for_seq_tbl_table_modify_with_hash_for_seq", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_seq_tbl_table_modify_with_hash_for_seq", bytes);
  }
}

void netbufferv4Processor::process_hash_for_seq_tbl_table_modify_with_hash_for_seq_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_seq_tbl_table_modify_with_hash_for_seq_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_seq_tbl_table_modify_with_hash_for_seq_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_seq_tbl_table_modify_with_hash_for_seq_by_match_spec");
  }

  netbufferv4_hash_for_seq_tbl_table_modify_with_hash_for_seq_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_seq_tbl_table_modify_with_hash_for_seq_by_match_spec", bytes);
  }

  netbufferv4_hash_for_seq_tbl_table_modify_with_hash_for_seq_by_match_spec_result result;
  try {
    iface_->hash_for_seq_tbl_table_modify_with_hash_for_seq_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_seq_tbl_table_modify_with_hash_for_seq_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_seq_tbl_table_modify_with_hash_for_seq_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_seq_tbl_table_modify_with_hash_for_seq_by_match_spec");
  }

  oprot->writeMessageBegin("hash_for_seq_tbl_table_modify_with_hash_for_seq_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_seq_tbl_table_modify_with_hash_for_seq_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_hash_for_seq_tbl_table_modify_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_seq_tbl_table_modify_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_seq_tbl_table_modify_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_seq_tbl_table_modify_with_nop");
  }

  netbufferv4_hash_for_seq_tbl_table_modify_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_seq_tbl_table_modify_with_nop", bytes);
  }

  netbufferv4_hash_for_seq_tbl_table_modify_with_nop_result result;
  try {
    iface_->hash_for_seq_tbl_table_modify_with_nop(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_seq_tbl_table_modify_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_seq_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_seq_tbl_table_modify_with_nop");
  }

  oprot->writeMessageBegin("hash_for_seq_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_seq_tbl_table_modify_with_nop", bytes);
  }
}

void netbufferv4Processor::process_hash_for_seq_tbl_table_modify_with_nop_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_seq_tbl_table_modify_with_nop_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_seq_tbl_table_modify_with_nop_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_seq_tbl_table_modify_with_nop_by_match_spec");
  }

  netbufferv4_hash_for_seq_tbl_table_modify_with_nop_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_seq_tbl_table_modify_with_nop_by_match_spec", bytes);
  }

  netbufferv4_hash_for_seq_tbl_table_modify_with_nop_by_match_spec_result result;
  try {
    iface_->hash_for_seq_tbl_table_modify_with_nop_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_seq_tbl_table_modify_with_nop_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_seq_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_seq_tbl_table_modify_with_nop_by_match_spec");
  }

  oprot->writeMessageBegin("hash_for_seq_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_seq_tbl_table_modify_with_nop_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_ig_port_forward_tbl_table_modify_with_update_getreq_to_getreq_inswitch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.ig_port_forward_tbl_table_modify_with_update_getreq_to_getreq_inswitch", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_getreq_to_getreq_inswitch");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_getreq_to_getreq_inswitch");
  }

  netbufferv4_ig_port_forward_tbl_table_modify_with_update_getreq_to_getreq_inswitch_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_getreq_to_getreq_inswitch", bytes);
  }

  netbufferv4_ig_port_forward_tbl_table_modify_with_update_getreq_to_getreq_inswitch_result result;
  try {
    iface_->ig_port_forward_tbl_table_modify_with_update_getreq_to_getreq_inswitch(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_getreq_to_getreq_inswitch");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ig_port_forward_tbl_table_modify_with_update_getreq_to_getreq_inswitch", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_getreq_to_getreq_inswitch");
  }

  oprot->writeMessageBegin("ig_port_forward_tbl_table_modify_with_update_getreq_to_getreq_inswitch", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_getreq_to_getreq_inswitch", bytes);
  }
}

void netbufferv4Processor::process_ig_port_forward_tbl_table_modify_with_update_getreq_to_getreq_inswitch_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.ig_port_forward_tbl_table_modify_with_update_getreq_to_getreq_inswitch_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_getreq_to_getreq_inswitch_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_getreq_to_getreq_inswitch_by_match_spec");
  }

  netbufferv4_ig_port_forward_tbl_table_modify_with_update_getreq_to_getreq_inswitch_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_getreq_to_getreq_inswitch_by_match_spec", bytes);
  }

  netbufferv4_ig_port_forward_tbl_table_modify_with_update_getreq_to_getreq_inswitch_by_match_spec_result result;
  try {
    iface_->ig_port_forward_tbl_table_modify_with_update_getreq_to_getreq_inswitch_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_getreq_to_getreq_inswitch_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ig_port_forward_tbl_table_modify_with_update_getreq_to_getreq_inswitch_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_getreq_to_getreq_inswitch_by_match_spec");
  }

  oprot->writeMessageBegin("ig_port_forward_tbl_table_modify_with_update_getreq_to_getreq_inswitch_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_getreq_to_getreq_inswitch_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_ig_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_latest_seq_inswitch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.ig_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_latest_seq_inswitch", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_latest_seq_inswitch");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_latest_seq_inswitch");
  }

  netbufferv4_ig_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_latest_seq_inswitch_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_latest_seq_inswitch", bytes);
  }

  netbufferv4_ig_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_latest_seq_inswitch_result result;
  try {
    iface_->ig_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_latest_seq_inswitch(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_latest_seq_inswitch");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ig_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_latest_seq_inswitch", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_latest_seq_inswitch");
  }

  oprot->writeMessageBegin("ig_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_latest_seq_inswitch", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_latest_seq_inswitch", bytes);
  }
}

void netbufferv4Processor::process_ig_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_latest_seq_inswitch_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.ig_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_latest_seq_inswitch_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_latest_seq_inswitch_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_latest_seq_inswitch_by_match_spec");
  }

  netbufferv4_ig_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_latest_seq_inswitch_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_latest_seq_inswitch_by_match_spec", bytes);
  }

  netbufferv4_ig_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_latest_seq_inswitch_by_match_spec_result result;
  try {
    iface_->ig_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_latest_seq_inswitch_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_latest_seq_inswitch_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ig_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_latest_seq_inswitch_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_latest_seq_inswitch_by_match_spec");
  }

  oprot->writeMessageBegin("ig_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_latest_seq_inswitch_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_latest_seq_inswitch_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_ig_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.ig_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch");
  }

  netbufferv4_ig_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch", bytes);
  }

  netbufferv4_ig_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch_result result;
  try {
    iface_->ig_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ig_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch");
  }

  oprot->writeMessageBegin("ig_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch", bytes);
  }
}

void netbufferv4Processor::process_ig_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.ig_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch_by_match_spec");
  }

  netbufferv4_ig_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch_by_match_spec", bytes);
  }

  netbufferv4_ig_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch_by_match_spec_result result;
  try {
    iface_->ig_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ig_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch_by_match_spec");
  }

  oprot->writeMessageBegin("ig_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_ig_port_forward_tbl_table_modify_with_update_putreq_to_putreq_inswitch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.ig_port_forward_tbl_table_modify_with_update_putreq_to_putreq_inswitch", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_putreq_to_putreq_inswitch");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_putreq_to_putreq_inswitch");
  }

  netbufferv4_ig_port_forward_tbl_table_modify_with_update_putreq_to_putreq_inswitch_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_putreq_to_putreq_inswitch", bytes);
  }

  netbufferv4_ig_port_forward_tbl_table_modify_with_update_putreq_to_putreq_inswitch_result result;
  try {
    iface_->ig_port_forward_tbl_table_modify_with_update_putreq_to_putreq_inswitch(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_putreq_to_putreq_inswitch");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ig_port_forward_tbl_table_modify_with_update_putreq_to_putreq_inswitch", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_putreq_to_putreq_inswitch");
  }

  oprot->writeMessageBegin("ig_port_forward_tbl_table_modify_with_update_putreq_to_putreq_inswitch", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_putreq_to_putreq_inswitch", bytes);
  }
}

void netbufferv4Processor::process_ig_port_forward_tbl_table_modify_with_update_putreq_to_putreq_inswitch_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.ig_port_forward_tbl_table_modify_with_update_putreq_to_putreq_inswitch_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_putreq_to_putreq_inswitch_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_putreq_to_putreq_inswitch_by_match_spec");
  }

  netbufferv4_ig_port_forward_tbl_table_modify_with_update_putreq_to_putreq_inswitch_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_putreq_to_putreq_inswitch_by_match_spec", bytes);
  }

  netbufferv4_ig_port_forward_tbl_table_modify_with_update_putreq_to_putreq_inswitch_by_match_spec_result result;
  try {
    iface_->ig_port_forward_tbl_table_modify_with_update_putreq_to_putreq_inswitch_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_putreq_to_putreq_inswitch_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ig_port_forward_tbl_table_modify_with_update_putreq_to_putreq_inswitch_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_putreq_to_putreq_inswitch_by_match_spec");
  }

  oprot->writeMessageBegin("ig_port_forward_tbl_table_modify_with_update_putreq_to_putreq_inswitch_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_putreq_to_putreq_inswitch_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_ig_port_forward_tbl_table_modify_with_update_delreq_to_delreq_inswitch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.ig_port_forward_tbl_table_modify_with_update_delreq_to_delreq_inswitch", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_delreq_to_delreq_inswitch");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_delreq_to_delreq_inswitch");
  }

  netbufferv4_ig_port_forward_tbl_table_modify_with_update_delreq_to_delreq_inswitch_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_delreq_to_delreq_inswitch", bytes);
  }

  netbufferv4_ig_port_forward_tbl_table_modify_with_update_delreq_to_delreq_inswitch_result result;
  try {
    iface_->ig_port_forward_tbl_table_modify_with_update_delreq_to_delreq_inswitch(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_delreq_to_delreq_inswitch");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ig_port_forward_tbl_table_modify_with_update_delreq_to_delreq_inswitch", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_delreq_to_delreq_inswitch");
  }

  oprot->writeMessageBegin("ig_port_forward_tbl_table_modify_with_update_delreq_to_delreq_inswitch", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_delreq_to_delreq_inswitch", bytes);
  }
}

void netbufferv4Processor::process_ig_port_forward_tbl_table_modify_with_update_delreq_to_delreq_inswitch_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.ig_port_forward_tbl_table_modify_with_update_delreq_to_delreq_inswitch_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_delreq_to_delreq_inswitch_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_delreq_to_delreq_inswitch_by_match_spec");
  }

  netbufferv4_ig_port_forward_tbl_table_modify_with_update_delreq_to_delreq_inswitch_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_delreq_to_delreq_inswitch_by_match_spec", bytes);
  }

  netbufferv4_ig_port_forward_tbl_table_modify_with_update_delreq_to_delreq_inswitch_by_match_spec_result result;
  try {
    iface_->ig_port_forward_tbl_table_modify_with_update_delreq_to_delreq_inswitch_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_delreq_to_delreq_inswitch_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ig_port_forward_tbl_table_modify_with_update_delreq_to_delreq_inswitch_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_delreq_to_delreq_inswitch_by_match_spec");
  }

  oprot->writeMessageBegin("ig_port_forward_tbl_table_modify_with_update_delreq_to_delreq_inswitch_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_delreq_to_delreq_inswitch_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_ig_port_forward_tbl_table_modify_with_update_scanreq_to_scanreq_split(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.ig_port_forward_tbl_table_modify_with_update_scanreq_to_scanreq_split", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_scanreq_to_scanreq_split");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_scanreq_to_scanreq_split");
  }

  netbufferv4_ig_port_forward_tbl_table_modify_with_update_scanreq_to_scanreq_split_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_scanreq_to_scanreq_split", bytes);
  }

  netbufferv4_ig_port_forward_tbl_table_modify_with_update_scanreq_to_scanreq_split_result result;
  try {
    iface_->ig_port_forward_tbl_table_modify_with_update_scanreq_to_scanreq_split(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_scanreq_to_scanreq_split");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ig_port_forward_tbl_table_modify_with_update_scanreq_to_scanreq_split", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_scanreq_to_scanreq_split");
  }

  oprot->writeMessageBegin("ig_port_forward_tbl_table_modify_with_update_scanreq_to_scanreq_split", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_scanreq_to_scanreq_split", bytes);
  }
}

void netbufferv4Processor::process_ig_port_forward_tbl_table_modify_with_update_scanreq_to_scanreq_split_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.ig_port_forward_tbl_table_modify_with_update_scanreq_to_scanreq_split_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_scanreq_to_scanreq_split_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_scanreq_to_scanreq_split_by_match_spec");
  }

  netbufferv4_ig_port_forward_tbl_table_modify_with_update_scanreq_to_scanreq_split_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_scanreq_to_scanreq_split_by_match_spec", bytes);
  }

  netbufferv4_ig_port_forward_tbl_table_modify_with_update_scanreq_to_scanreq_split_by_match_spec_result result;
  try {
    iface_->ig_port_forward_tbl_table_modify_with_update_scanreq_to_scanreq_split_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_scanreq_to_scanreq_split_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ig_port_forward_tbl_table_modify_with_update_scanreq_to_scanreq_split_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_scanreq_to_scanreq_split_by_match_spec");
  }

  oprot->writeMessageBegin("ig_port_forward_tbl_table_modify_with_update_scanreq_to_scanreq_split_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_update_scanreq_to_scanreq_split_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_ig_port_forward_tbl_table_modify_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.ig_port_forward_tbl_table_modify_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_nop");
  }

  netbufferv4_ig_port_forward_tbl_table_modify_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_nop", bytes);
  }

  netbufferv4_ig_port_forward_tbl_table_modify_with_nop_result result;
  try {
    iface_->ig_port_forward_tbl_table_modify_with_nop(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ig_port_forward_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_nop");
  }

  oprot->writeMessageBegin("ig_port_forward_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_nop", bytes);
  }
}

void netbufferv4Processor::process_ig_port_forward_tbl_table_modify_with_nop_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.ig_port_forward_tbl_table_modify_with_nop_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_nop_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_nop_by_match_spec");
  }

  netbufferv4_ig_port_forward_tbl_table_modify_with_nop_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_nop_by_match_spec", bytes);
  }

  netbufferv4_ig_port_forward_tbl_table_modify_with_nop_by_match_spec_result result;
  try {
    iface_->ig_port_forward_tbl_table_modify_with_nop_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_nop_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ig_port_forward_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_nop_by_match_spec");
  }

  oprot->writeMessageBegin("ig_port_forward_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.ig_port_forward_tbl_table_modify_with_nop_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_ipv4_forward_tbl_table_modify_with_forward_normal_response(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.ipv4_forward_tbl_table_modify_with_forward_normal_response", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.ipv4_forward_tbl_table_modify_with_forward_normal_response");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.ipv4_forward_tbl_table_modify_with_forward_normal_response");
  }

  netbufferv4_ipv4_forward_tbl_table_modify_with_forward_normal_response_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.ipv4_forward_tbl_table_modify_with_forward_normal_response", bytes);
  }

  netbufferv4_ipv4_forward_tbl_table_modify_with_forward_normal_response_result result;
  try {
    iface_->ipv4_forward_tbl_table_modify_with_forward_normal_response(args.sess_hdl, args.dev_id, args.entry, args.action_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.ipv4_forward_tbl_table_modify_with_forward_normal_response");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ipv4_forward_tbl_table_modify_with_forward_normal_response", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.ipv4_forward_tbl_table_modify_with_forward_normal_response");
  }

  oprot->writeMessageBegin("ipv4_forward_tbl_table_modify_with_forward_normal_response", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.ipv4_forward_tbl_table_modify_with_forward_normal_response", bytes);
  }
}

void netbufferv4Processor::process_ipv4_forward_tbl_table_modify_with_forward_normal_response_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.ipv4_forward_tbl_table_modify_with_forward_normal_response_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.ipv4_forward_tbl_table_modify_with_forward_normal_response_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.ipv4_forward_tbl_table_modify_with_forward_normal_response_by_match_spec");
  }

  netbufferv4_ipv4_forward_tbl_table_modify_with_forward_normal_response_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.ipv4_forward_tbl_table_modify_with_forward_normal_response_by_match_spec", bytes);
  }

  netbufferv4_ipv4_forward_tbl_table_modify_with_forward_normal_response_by_match_spec_result result;
  try {
    iface_->ipv4_forward_tbl_table_modify_with_forward_normal_response_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec, args.action_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.ipv4_forward_tbl_table_modify_with_forward_normal_response_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ipv4_forward_tbl_table_modify_with_forward_normal_response_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.ipv4_forward_tbl_table_modify_with_forward_normal_response_by_match_spec");
  }

  oprot->writeMessageBegin("ipv4_forward_tbl_table_modify_with_forward_normal_response_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.ipv4_forward_tbl_table_modify_with_forward_normal_response_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_ipv4_forward_tbl_table_modify_with_forward_special_get_response(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.ipv4_forward_tbl_table_modify_with_forward_special_get_response", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.ipv4_forward_tbl_table_modify_with_forward_special_get_response");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.ipv4_forward_tbl_table_modify_with_forward_special_get_response");
  }

  netbufferv4_ipv4_forward_tbl_table_modify_with_forward_special_get_response_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.ipv4_forward_tbl_table_modify_with_forward_special_get_response", bytes);
  }

  netbufferv4_ipv4_forward_tbl_table_modify_with_forward_special_get_response_result result;
  try {
    iface_->ipv4_forward_tbl_table_modify_with_forward_special_get_response(args.sess_hdl, args.dev_id, args.entry, args.action_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.ipv4_forward_tbl_table_modify_with_forward_special_get_response");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ipv4_forward_tbl_table_modify_with_forward_special_get_response", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.ipv4_forward_tbl_table_modify_with_forward_special_get_response");
  }

  oprot->writeMessageBegin("ipv4_forward_tbl_table_modify_with_forward_special_get_response", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.ipv4_forward_tbl_table_modify_with_forward_special_get_response", bytes);
  }
}

void netbufferv4Processor::process_ipv4_forward_tbl_table_modify_with_forward_special_get_response_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.ipv4_forward_tbl_table_modify_with_forward_special_get_response_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.ipv4_forward_tbl_table_modify_with_forward_special_get_response_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.ipv4_forward_tbl_table_modify_with_forward_special_get_response_by_match_spec");
  }

  netbufferv4_ipv4_forward_tbl_table_modify_with_forward_special_get_response_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.ipv4_forward_tbl_table_modify_with_forward_special_get_response_by_match_spec", bytes);
  }

  netbufferv4_ipv4_forward_tbl_table_modify_with_forward_special_get_response_by_match_spec_result result;
  try {
    iface_->ipv4_forward_tbl_table_modify_with_forward_special_get_response_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec, args.action_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.ipv4_forward_tbl_table_modify_with_forward_special_get_response_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ipv4_forward_tbl_table_modify_with_forward_special_get_response_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.ipv4_forward_tbl_table_modify_with_forward_special_get_response_by_match_spec");
  }

  oprot->writeMessageBegin("ipv4_forward_tbl_table_modify_with_forward_special_get_response_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.ipv4_forward_tbl_table_modify_with_forward_special_get_response_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_ipv4_forward_tbl_table_modify_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.ipv4_forward_tbl_table_modify_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.ipv4_forward_tbl_table_modify_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.ipv4_forward_tbl_table_modify_with_nop");
  }

  netbufferv4_ipv4_forward_tbl_table_modify_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.ipv4_forward_tbl_table_modify_with_nop", bytes);
  }

  netbufferv4_ipv4_forward_tbl_table_modify_with_nop_result result;
  try {
    iface_->ipv4_forward_tbl_table_modify_with_nop(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.ipv4_forward_tbl_table_modify_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ipv4_forward_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.ipv4_forward_tbl_table_modify_with_nop");
  }

  oprot->writeMessageBegin("ipv4_forward_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.ipv4_forward_tbl_table_modify_with_nop", bytes);
  }
}

void netbufferv4Processor::process_ipv4_forward_tbl_table_modify_with_nop_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.ipv4_forward_tbl_table_modify_with_nop_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.ipv4_forward_tbl_table_modify_with_nop_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.ipv4_forward_tbl_table_modify_with_nop_by_match_spec");
  }

  netbufferv4_ipv4_forward_tbl_table_modify_with_nop_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.ipv4_forward_tbl_table_modify_with_nop_by_match_spec", bytes);
  }

  netbufferv4_ipv4_forward_tbl_table_modify_with_nop_by_match_spec_result result;
  try {
    iface_->ipv4_forward_tbl_table_modify_with_nop_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.ipv4_forward_tbl_table_modify_with_nop_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ipv4_forward_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.ipv4_forward_tbl_table_modify_with_nop_by_match_spec");
  }

  oprot->writeMessageBegin("ipv4_forward_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.ipv4_forward_tbl_table_modify_with_nop_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_is_hot_tbl_table_modify_with_set_is_hot(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.is_hot_tbl_table_modify_with_set_is_hot", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.is_hot_tbl_table_modify_with_set_is_hot");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.is_hot_tbl_table_modify_with_set_is_hot");
  }

  netbufferv4_is_hot_tbl_table_modify_with_set_is_hot_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.is_hot_tbl_table_modify_with_set_is_hot", bytes);
  }

  netbufferv4_is_hot_tbl_table_modify_with_set_is_hot_result result;
  try {
    iface_->is_hot_tbl_table_modify_with_set_is_hot(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.is_hot_tbl_table_modify_with_set_is_hot");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("is_hot_tbl_table_modify_with_set_is_hot", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.is_hot_tbl_table_modify_with_set_is_hot");
  }

  oprot->writeMessageBegin("is_hot_tbl_table_modify_with_set_is_hot", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.is_hot_tbl_table_modify_with_set_is_hot", bytes);
  }
}

void netbufferv4Processor::process_is_hot_tbl_table_modify_with_set_is_hot_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.is_hot_tbl_table_modify_with_set_is_hot_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.is_hot_tbl_table_modify_with_set_is_hot_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.is_hot_tbl_table_modify_with_set_is_hot_by_match_spec");
  }

  netbufferv4_is_hot_tbl_table_modify_with_set_is_hot_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.is_hot_tbl_table_modify_with_set_is_hot_by_match_spec", bytes);
  }

  netbufferv4_is_hot_tbl_table_modify_with_set_is_hot_by_match_spec_result result;
  try {
    iface_->is_hot_tbl_table_modify_with_set_is_hot_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.is_hot_tbl_table_modify_with_set_is_hot_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("is_hot_tbl_table_modify_with_set_is_hot_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.is_hot_tbl_table_modify_with_set_is_hot_by_match_spec");
  }

  oprot->writeMessageBegin("is_hot_tbl_table_modify_with_set_is_hot_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.is_hot_tbl_table_modify_with_set_is_hot_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_is_hot_tbl_table_modify_with_reset_is_hot(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.is_hot_tbl_table_modify_with_reset_is_hot", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.is_hot_tbl_table_modify_with_reset_is_hot");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.is_hot_tbl_table_modify_with_reset_is_hot");
  }

  netbufferv4_is_hot_tbl_table_modify_with_reset_is_hot_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.is_hot_tbl_table_modify_with_reset_is_hot", bytes);
  }

  netbufferv4_is_hot_tbl_table_modify_with_reset_is_hot_result result;
  try {
    iface_->is_hot_tbl_table_modify_with_reset_is_hot(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.is_hot_tbl_table_modify_with_reset_is_hot");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("is_hot_tbl_table_modify_with_reset_is_hot", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.is_hot_tbl_table_modify_with_reset_is_hot");
  }

  oprot->writeMessageBegin("is_hot_tbl_table_modify_with_reset_is_hot", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.is_hot_tbl_table_modify_with_reset_is_hot", bytes);
  }
}

void netbufferv4Processor::process_is_hot_tbl_table_modify_with_reset_is_hot_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.is_hot_tbl_table_modify_with_reset_is_hot_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.is_hot_tbl_table_modify_with_reset_is_hot_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.is_hot_tbl_table_modify_with_reset_is_hot_by_match_spec");
  }

  netbufferv4_is_hot_tbl_table_modify_with_reset_is_hot_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.is_hot_tbl_table_modify_with_reset_is_hot_by_match_spec", bytes);
  }

  netbufferv4_is_hot_tbl_table_modify_with_reset_is_hot_by_match_spec_result result;
  try {
    iface_->is_hot_tbl_table_modify_with_reset_is_hot_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.is_hot_tbl_table_modify_with_reset_is_hot_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("is_hot_tbl_table_modify_with_reset_is_hot_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.is_hot_tbl_table_modify_with_reset_is_hot_by_match_spec");
  }

  oprot->writeMessageBegin("is_hot_tbl_table_modify_with_reset_is_hot_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.is_hot_tbl_table_modify_with_reset_is_hot_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_lastclone_lastscansplit_tbl_table_modify_with_set_is_lastclone(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.lastclone_lastscansplit_tbl_table_modify_with_set_is_lastclone", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_modify_with_set_is_lastclone");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_modify_with_set_is_lastclone");
  }

  netbufferv4_lastclone_lastscansplit_tbl_table_modify_with_set_is_lastclone_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_modify_with_set_is_lastclone", bytes);
  }

  netbufferv4_lastclone_lastscansplit_tbl_table_modify_with_set_is_lastclone_result result;
  try {
    iface_->lastclone_lastscansplit_tbl_table_modify_with_set_is_lastclone(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_modify_with_set_is_lastclone");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("lastclone_lastscansplit_tbl_table_modify_with_set_is_lastclone", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_modify_with_set_is_lastclone");
  }

  oprot->writeMessageBegin("lastclone_lastscansplit_tbl_table_modify_with_set_is_lastclone", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_modify_with_set_is_lastclone", bytes);
  }
}

void netbufferv4Processor::process_lastclone_lastscansplit_tbl_table_modify_with_set_is_lastclone_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.lastclone_lastscansplit_tbl_table_modify_with_set_is_lastclone_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_modify_with_set_is_lastclone_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_modify_with_set_is_lastclone_by_match_spec");
  }

  netbufferv4_lastclone_lastscansplit_tbl_table_modify_with_set_is_lastclone_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_modify_with_set_is_lastclone_by_match_spec", bytes);
  }

  netbufferv4_lastclone_lastscansplit_tbl_table_modify_with_set_is_lastclone_by_match_spec_result result;
  try {
    iface_->lastclone_lastscansplit_tbl_table_modify_with_set_is_lastclone_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_modify_with_set_is_lastclone_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("lastclone_lastscansplit_tbl_table_modify_with_set_is_lastclone_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_modify_with_set_is_lastclone_by_match_spec");
  }

  oprot->writeMessageBegin("lastclone_lastscansplit_tbl_table_modify_with_set_is_lastclone_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_modify_with_set_is_lastclone_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_lastclone_lastscansplit_tbl_table_modify_with_set_is_lastscansplit(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.lastclone_lastscansplit_tbl_table_modify_with_set_is_lastscansplit", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_modify_with_set_is_lastscansplit");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_modify_with_set_is_lastscansplit");
  }

  netbufferv4_lastclone_lastscansplit_tbl_table_modify_with_set_is_lastscansplit_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_modify_with_set_is_lastscansplit", bytes);
  }

  netbufferv4_lastclone_lastscansplit_tbl_table_modify_with_set_is_lastscansplit_result result;
  try {
    iface_->lastclone_lastscansplit_tbl_table_modify_with_set_is_lastscansplit(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_modify_with_set_is_lastscansplit");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("lastclone_lastscansplit_tbl_table_modify_with_set_is_lastscansplit", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_modify_with_set_is_lastscansplit");
  }

  oprot->writeMessageBegin("lastclone_lastscansplit_tbl_table_modify_with_set_is_lastscansplit", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_modify_with_set_is_lastscansplit", bytes);
  }
}

void netbufferv4Processor::process_lastclone_lastscansplit_tbl_table_modify_with_set_is_lastscansplit_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.lastclone_lastscansplit_tbl_table_modify_with_set_is_lastscansplit_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_modify_with_set_is_lastscansplit_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_modify_with_set_is_lastscansplit_by_match_spec");
  }

  netbufferv4_lastclone_lastscansplit_tbl_table_modify_with_set_is_lastscansplit_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_modify_with_set_is_lastscansplit_by_match_spec", bytes);
  }

  netbufferv4_lastclone_lastscansplit_tbl_table_modify_with_set_is_lastscansplit_by_match_spec_result result;
  try {
    iface_->lastclone_lastscansplit_tbl_table_modify_with_set_is_lastscansplit_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_modify_with_set_is_lastscansplit_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("lastclone_lastscansplit_tbl_table_modify_with_set_is_lastscansplit_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_modify_with_set_is_lastscansplit_by_match_spec");
  }

  oprot->writeMessageBegin("lastclone_lastscansplit_tbl_table_modify_with_set_is_lastscansplit_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_modify_with_set_is_lastscansplit_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_lastclone_lastscansplit_tbl_table_modify_with_reset_is_lastclone_lastscansplit(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.lastclone_lastscansplit_tbl_table_modify_with_reset_is_lastclone_lastscansplit", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_modify_with_reset_is_lastclone_lastscansplit");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_modify_with_reset_is_lastclone_lastscansplit");
  }

  netbufferv4_lastclone_lastscansplit_tbl_table_modify_with_reset_is_lastclone_lastscansplit_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_modify_with_reset_is_lastclone_lastscansplit", bytes);
  }

  netbufferv4_lastclone_lastscansplit_tbl_table_modify_with_reset_is_lastclone_lastscansplit_result result;
  try {
    iface_->lastclone_lastscansplit_tbl_table_modify_with_reset_is_lastclone_lastscansplit(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_modify_with_reset_is_lastclone_lastscansplit");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("lastclone_lastscansplit_tbl_table_modify_with_reset_is_lastclone_lastscansplit", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_modify_with_reset_is_lastclone_lastscansplit");
  }

  oprot->writeMessageBegin("lastclone_lastscansplit_tbl_table_modify_with_reset_is_lastclone_lastscansplit", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_modify_with_reset_is_lastclone_lastscansplit", bytes);
  }
}

void netbufferv4Processor::process_lastclone_lastscansplit_tbl_table_modify_with_reset_is_lastclone_lastscansplit_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.lastclone_lastscansplit_tbl_table_modify_with_reset_is_lastclone_lastscansplit_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_modify_with_reset_is_lastclone_lastscansplit_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_modify_with_reset_is_lastclone_lastscansplit_by_match_spec");
  }

  netbufferv4_lastclone_lastscansplit_tbl_table_modify_with_reset_is_lastclone_lastscansplit_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_modify_with_reset_is_lastclone_lastscansplit_by_match_spec", bytes);
  }

  netbufferv4_lastclone_lastscansplit_tbl_table_modify_with_reset_is_lastclone_lastscansplit_by_match_spec_result result;
  try {
    iface_->lastclone_lastscansplit_tbl_table_modify_with_reset_is_lastclone_lastscansplit_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_modify_with_reset_is_lastclone_lastscansplit_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("lastclone_lastscansplit_tbl_table_modify_with_reset_is_lastclone_lastscansplit_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_modify_with_reset_is_lastclone_lastscansplit_by_match_spec");
  }

  oprot->writeMessageBegin("lastclone_lastscansplit_tbl_table_modify_with_reset_is_lastclone_lastscansplit_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_modify_with_reset_is_lastclone_lastscansplit_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_need_recirculate_tbl_table_modify_with_set_need_recirculate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.need_recirculate_tbl_table_modify_with_set_need_recirculate", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.need_recirculate_tbl_table_modify_with_set_need_recirculate");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.need_recirculate_tbl_table_modify_with_set_need_recirculate");
  }

  netbufferv4_need_recirculate_tbl_table_modify_with_set_need_recirculate_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.need_recirculate_tbl_table_modify_with_set_need_recirculate", bytes);
  }

  netbufferv4_need_recirculate_tbl_table_modify_with_set_need_recirculate_result result;
  try {
    iface_->need_recirculate_tbl_table_modify_with_set_need_recirculate(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.need_recirculate_tbl_table_modify_with_set_need_recirculate");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("need_recirculate_tbl_table_modify_with_set_need_recirculate", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.need_recirculate_tbl_table_modify_with_set_need_recirculate");
  }

  oprot->writeMessageBegin("need_recirculate_tbl_table_modify_with_set_need_recirculate", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.need_recirculate_tbl_table_modify_with_set_need_recirculate", bytes);
  }
}

void netbufferv4Processor::process_need_recirculate_tbl_table_modify_with_set_need_recirculate_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.need_recirculate_tbl_table_modify_with_set_need_recirculate_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.need_recirculate_tbl_table_modify_with_set_need_recirculate_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.need_recirculate_tbl_table_modify_with_set_need_recirculate_by_match_spec");
  }

  netbufferv4_need_recirculate_tbl_table_modify_with_set_need_recirculate_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.need_recirculate_tbl_table_modify_with_set_need_recirculate_by_match_spec", bytes);
  }

  netbufferv4_need_recirculate_tbl_table_modify_with_set_need_recirculate_by_match_spec_result result;
  try {
    iface_->need_recirculate_tbl_table_modify_with_set_need_recirculate_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.need_recirculate_tbl_table_modify_with_set_need_recirculate_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("need_recirculate_tbl_table_modify_with_set_need_recirculate_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.need_recirculate_tbl_table_modify_with_set_need_recirculate_by_match_spec");
  }

  oprot->writeMessageBegin("need_recirculate_tbl_table_modify_with_set_need_recirculate_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.need_recirculate_tbl_table_modify_with_set_need_recirculate_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_need_recirculate_tbl_table_modify_with_reset_need_recirculate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.need_recirculate_tbl_table_modify_with_reset_need_recirculate", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.need_recirculate_tbl_table_modify_with_reset_need_recirculate");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.need_recirculate_tbl_table_modify_with_reset_need_recirculate");
  }

  netbufferv4_need_recirculate_tbl_table_modify_with_reset_need_recirculate_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.need_recirculate_tbl_table_modify_with_reset_need_recirculate", bytes);
  }

  netbufferv4_need_recirculate_tbl_table_modify_with_reset_need_recirculate_result result;
  try {
    iface_->need_recirculate_tbl_table_modify_with_reset_need_recirculate(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.need_recirculate_tbl_table_modify_with_reset_need_recirculate");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("need_recirculate_tbl_table_modify_with_reset_need_recirculate", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.need_recirculate_tbl_table_modify_with_reset_need_recirculate");
  }

  oprot->writeMessageBegin("need_recirculate_tbl_table_modify_with_reset_need_recirculate", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.need_recirculate_tbl_table_modify_with_reset_need_recirculate", bytes);
  }
}

void netbufferv4Processor::process_need_recirculate_tbl_table_modify_with_reset_need_recirculate_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.need_recirculate_tbl_table_modify_with_reset_need_recirculate_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.need_recirculate_tbl_table_modify_with_reset_need_recirculate_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.need_recirculate_tbl_table_modify_with_reset_need_recirculate_by_match_spec");
  }

  netbufferv4_need_recirculate_tbl_table_modify_with_reset_need_recirculate_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.need_recirculate_tbl_table_modify_with_reset_need_recirculate_by_match_spec", bytes);
  }

  netbufferv4_need_recirculate_tbl_table_modify_with_reset_need_recirculate_by_match_spec_result result;
  try {
    iface_->need_recirculate_tbl_table_modify_with_reset_need_recirculate_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.need_recirculate_tbl_table_modify_with_reset_need_recirculate_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("need_recirculate_tbl_table_modify_with_reset_need_recirculate_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.need_recirculate_tbl_table_modify_with_reset_need_recirculate_by_match_spec");
  }

  oprot->writeMessageBegin("need_recirculate_tbl_table_modify_with_reset_need_recirculate_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.need_recirculate_tbl_table_modify_with_reset_need_recirculate_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_prepare_for_cachehit_tbl_table_modify_with_set_client_sid(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.prepare_for_cachehit_tbl_table_modify_with_set_client_sid", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.prepare_for_cachehit_tbl_table_modify_with_set_client_sid");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.prepare_for_cachehit_tbl_table_modify_with_set_client_sid");
  }

  netbufferv4_prepare_for_cachehit_tbl_table_modify_with_set_client_sid_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.prepare_for_cachehit_tbl_table_modify_with_set_client_sid", bytes);
  }

  netbufferv4_prepare_for_cachehit_tbl_table_modify_with_set_client_sid_result result;
  try {
    iface_->prepare_for_cachehit_tbl_table_modify_with_set_client_sid(args.sess_hdl, args.dev_id, args.entry, args.action_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.prepare_for_cachehit_tbl_table_modify_with_set_client_sid");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("prepare_for_cachehit_tbl_table_modify_with_set_client_sid", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.prepare_for_cachehit_tbl_table_modify_with_set_client_sid");
  }

  oprot->writeMessageBegin("prepare_for_cachehit_tbl_table_modify_with_set_client_sid", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.prepare_for_cachehit_tbl_table_modify_with_set_client_sid", bytes);
  }
}

void netbufferv4Processor::process_prepare_for_cachehit_tbl_table_modify_with_set_client_sid_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.prepare_for_cachehit_tbl_table_modify_with_set_client_sid_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.prepare_for_cachehit_tbl_table_modify_with_set_client_sid_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.prepare_for_cachehit_tbl_table_modify_with_set_client_sid_by_match_spec");
  }

  netbufferv4_prepare_for_cachehit_tbl_table_modify_with_set_client_sid_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.prepare_for_cachehit_tbl_table_modify_with_set_client_sid_by_match_spec", bytes);
  }

  netbufferv4_prepare_for_cachehit_tbl_table_modify_with_set_client_sid_by_match_spec_result result;
  try {
    iface_->prepare_for_cachehit_tbl_table_modify_with_set_client_sid_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec, args.action_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.prepare_for_cachehit_tbl_table_modify_with_set_client_sid_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("prepare_for_cachehit_tbl_table_modify_with_set_client_sid_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.prepare_for_cachehit_tbl_table_modify_with_set_client_sid_by_match_spec");
  }

  oprot->writeMessageBegin("prepare_for_cachehit_tbl_table_modify_with_set_client_sid_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.prepare_for_cachehit_tbl_table_modify_with_set_client_sid_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_prepare_for_cachehit_tbl_table_modify_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.prepare_for_cachehit_tbl_table_modify_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.prepare_for_cachehit_tbl_table_modify_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.prepare_for_cachehit_tbl_table_modify_with_nop");
  }

  netbufferv4_prepare_for_cachehit_tbl_table_modify_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.prepare_for_cachehit_tbl_table_modify_with_nop", bytes);
  }

  netbufferv4_prepare_for_cachehit_tbl_table_modify_with_nop_result result;
  try {
    iface_->prepare_for_cachehit_tbl_table_modify_with_nop(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.prepare_for_cachehit_tbl_table_modify_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("prepare_for_cachehit_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.prepare_for_cachehit_tbl_table_modify_with_nop");
  }

  oprot->writeMessageBegin("prepare_for_cachehit_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.prepare_for_cachehit_tbl_table_modify_with_nop", bytes);
  }
}

void netbufferv4Processor::process_prepare_for_cachehit_tbl_table_modify_with_nop_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.prepare_for_cachehit_tbl_table_modify_with_nop_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.prepare_for_cachehit_tbl_table_modify_with_nop_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.prepare_for_cachehit_tbl_table_modify_with_nop_by_match_spec");
  }

  netbufferv4_prepare_for_cachehit_tbl_table_modify_with_nop_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.prepare_for_cachehit_tbl_table_modify_with_nop_by_match_spec", bytes);
  }

  netbufferv4_prepare_for_cachehit_tbl_table_modify_with_nop_by_match_spec_result result;
  try {
    iface_->prepare_for_cachehit_tbl_table_modify_with_nop_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.prepare_for_cachehit_tbl_table_modify_with_nop_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("prepare_for_cachehit_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.prepare_for_cachehit_tbl_table_modify_with_nop_by_match_spec");
  }

  oprot->writeMessageBegin("prepare_for_cachehit_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.prepare_for_cachehit_tbl_table_modify_with_nop_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_process_scanreq_split_tbl_table_modify_with_process_scanreq_split(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.process_scanreq_split_tbl_table_modify_with_process_scanreq_split", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.process_scanreq_split_tbl_table_modify_with_process_scanreq_split");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.process_scanreq_split_tbl_table_modify_with_process_scanreq_split");
  }

  netbufferv4_process_scanreq_split_tbl_table_modify_with_process_scanreq_split_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.process_scanreq_split_tbl_table_modify_with_process_scanreq_split", bytes);
  }

  netbufferv4_process_scanreq_split_tbl_table_modify_with_process_scanreq_split_result result;
  try {
    iface_->process_scanreq_split_tbl_table_modify_with_process_scanreq_split(args.sess_hdl, args.dev_id, args.entry, args.action_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.process_scanreq_split_tbl_table_modify_with_process_scanreq_split");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("process_scanreq_split_tbl_table_modify_with_process_scanreq_split", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.process_scanreq_split_tbl_table_modify_with_process_scanreq_split");
  }

  oprot->writeMessageBegin("process_scanreq_split_tbl_table_modify_with_process_scanreq_split", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.process_scanreq_split_tbl_table_modify_with_process_scanreq_split", bytes);
  }
}

void netbufferv4Processor::process_process_scanreq_split_tbl_table_modify_with_process_scanreq_split_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.process_scanreq_split_tbl_table_modify_with_process_scanreq_split_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.process_scanreq_split_tbl_table_modify_with_process_scanreq_split_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.process_scanreq_split_tbl_table_modify_with_process_scanreq_split_by_match_spec");
  }

  netbufferv4_process_scanreq_split_tbl_table_modify_with_process_scanreq_split_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.process_scanreq_split_tbl_table_modify_with_process_scanreq_split_by_match_spec", bytes);
  }

  netbufferv4_process_scanreq_split_tbl_table_modify_with_process_scanreq_split_by_match_spec_result result;
  try {
    iface_->process_scanreq_split_tbl_table_modify_with_process_scanreq_split_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec, args.action_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.process_scanreq_split_tbl_table_modify_with_process_scanreq_split_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("process_scanreq_split_tbl_table_modify_with_process_scanreq_split_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.process_scanreq_split_tbl_table_modify_with_process_scanreq_split_by_match_spec");
  }

  oprot->writeMessageBegin("process_scanreq_split_tbl_table_modify_with_process_scanreq_split_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.process_scanreq_split_tbl_table_modify_with_process_scanreq_split_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_process_scanreq_split_tbl_table_modify_with_process_cloned_scanreq_split(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.process_scanreq_split_tbl_table_modify_with_process_cloned_scanreq_split", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.process_scanreq_split_tbl_table_modify_with_process_cloned_scanreq_split");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.process_scanreq_split_tbl_table_modify_with_process_cloned_scanreq_split");
  }

  netbufferv4_process_scanreq_split_tbl_table_modify_with_process_cloned_scanreq_split_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.process_scanreq_split_tbl_table_modify_with_process_cloned_scanreq_split", bytes);
  }

  netbufferv4_process_scanreq_split_tbl_table_modify_with_process_cloned_scanreq_split_result result;
  try {
    iface_->process_scanreq_split_tbl_table_modify_with_process_cloned_scanreq_split(args.sess_hdl, args.dev_id, args.entry, args.action_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.process_scanreq_split_tbl_table_modify_with_process_cloned_scanreq_split");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("process_scanreq_split_tbl_table_modify_with_process_cloned_scanreq_split", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.process_scanreq_split_tbl_table_modify_with_process_cloned_scanreq_split");
  }

  oprot->writeMessageBegin("process_scanreq_split_tbl_table_modify_with_process_cloned_scanreq_split", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.process_scanreq_split_tbl_table_modify_with_process_cloned_scanreq_split", bytes);
  }
}

void netbufferv4Processor::process_process_scanreq_split_tbl_table_modify_with_process_cloned_scanreq_split_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.process_scanreq_split_tbl_table_modify_with_process_cloned_scanreq_split_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.process_scanreq_split_tbl_table_modify_with_process_cloned_scanreq_split_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.process_scanreq_split_tbl_table_modify_with_process_cloned_scanreq_split_by_match_spec");
  }

  netbufferv4_process_scanreq_split_tbl_table_modify_with_process_cloned_scanreq_split_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.process_scanreq_split_tbl_table_modify_with_process_cloned_scanreq_split_by_match_spec", bytes);
  }

  netbufferv4_process_scanreq_split_tbl_table_modify_with_process_cloned_scanreq_split_by_match_spec_result result;
  try {
    iface_->process_scanreq_split_tbl_table_modify_with_process_cloned_scanreq_split_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec, args.action_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.process_scanreq_split_tbl_table_modify_with_process_cloned_scanreq_split_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("process_scanreq_split_tbl_table_modify_with_process_cloned_scanreq_split_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.process_scanreq_split_tbl_table_modify_with_process_cloned_scanreq_split_by_match_spec");
  }

  oprot->writeMessageBegin("process_scanreq_split_tbl_table_modify_with_process_cloned_scanreq_split_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.process_scanreq_split_tbl_table_modify_with_process_cloned_scanreq_split_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_process_scanreq_split_tbl_table_modify_with_reset_meta_serversid_remainscannum(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.process_scanreq_split_tbl_table_modify_with_reset_meta_serversid_remainscannum", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.process_scanreq_split_tbl_table_modify_with_reset_meta_serversid_remainscannum");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.process_scanreq_split_tbl_table_modify_with_reset_meta_serversid_remainscannum");
  }

  netbufferv4_process_scanreq_split_tbl_table_modify_with_reset_meta_serversid_remainscannum_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.process_scanreq_split_tbl_table_modify_with_reset_meta_serversid_remainscannum", bytes);
  }

  netbufferv4_process_scanreq_split_tbl_table_modify_with_reset_meta_serversid_remainscannum_result result;
  try {
    iface_->process_scanreq_split_tbl_table_modify_with_reset_meta_serversid_remainscannum(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.process_scanreq_split_tbl_table_modify_with_reset_meta_serversid_remainscannum");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("process_scanreq_split_tbl_table_modify_with_reset_meta_serversid_remainscannum", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.process_scanreq_split_tbl_table_modify_with_reset_meta_serversid_remainscannum");
  }

  oprot->writeMessageBegin("process_scanreq_split_tbl_table_modify_with_reset_meta_serversid_remainscannum", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.process_scanreq_split_tbl_table_modify_with_reset_meta_serversid_remainscannum", bytes);
  }
}

void netbufferv4Processor::process_process_scanreq_split_tbl_table_modify_with_reset_meta_serversid_remainscannum_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.process_scanreq_split_tbl_table_modify_with_reset_meta_serversid_remainscannum_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.process_scanreq_split_tbl_table_modify_with_reset_meta_serversid_remainscannum_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.process_scanreq_split_tbl_table_modify_with_reset_meta_serversid_remainscannum_by_match_spec");
  }

  netbufferv4_process_scanreq_split_tbl_table_modify_with_reset_meta_serversid_remainscannum_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.process_scanreq_split_tbl_table_modify_with_reset_meta_serversid_remainscannum_by_match_spec", bytes);
  }

  netbufferv4_process_scanreq_split_tbl_table_modify_with_reset_meta_serversid_remainscannum_by_match_spec_result result;
  try {
    iface_->process_scanreq_split_tbl_table_modify_with_reset_meta_serversid_remainscannum_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.process_scanreq_split_tbl_table_modify_with_reset_meta_serversid_remainscannum_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("process_scanreq_split_tbl_table_modify_with_reset_meta_serversid_remainscannum_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.process_scanreq_split_tbl_table_modify_with_reset_meta_serversid_remainscannum_by_match_spec");
  }

  oprot->writeMessageBegin("process_scanreq_split_tbl_table_modify_with_reset_meta_serversid_remainscannum_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.process_scanreq_split_tbl_table_modify_with_reset_meta_serversid_remainscannum_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_range_partition_for_scan_endkey_tbl_table_modify_with_range_partition_for_scan_endkey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.range_partition_for_scan_endkey_tbl_table_modify_with_range_partition_for_scan_endkey", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_table_modify_with_range_partition_for_scan_endkey");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_table_modify_with_range_partition_for_scan_endkey");
  }

  netbufferv4_range_partition_for_scan_endkey_tbl_table_modify_with_range_partition_for_scan_endkey_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_table_modify_with_range_partition_for_scan_endkey", bytes);
  }

  netbufferv4_range_partition_for_scan_endkey_tbl_table_modify_with_range_partition_for_scan_endkey_result result;
  try {
    iface_->range_partition_for_scan_endkey_tbl_table_modify_with_range_partition_for_scan_endkey(args.sess_hdl, args.dev_id, args.entry, args.action_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_table_modify_with_range_partition_for_scan_endkey");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("range_partition_for_scan_endkey_tbl_table_modify_with_range_partition_for_scan_endkey", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_table_modify_with_range_partition_for_scan_endkey");
  }

  oprot->writeMessageBegin("range_partition_for_scan_endkey_tbl_table_modify_with_range_partition_for_scan_endkey", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_table_modify_with_range_partition_for_scan_endkey", bytes);
  }
}

void netbufferv4Processor::process_range_partition_for_scan_endkey_tbl_table_modify_with_range_partition_for_scan_endkey_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.range_partition_for_scan_endkey_tbl_table_modify_with_range_partition_for_scan_endkey_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_table_modify_with_range_partition_for_scan_endkey_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_table_modify_with_range_partition_for_scan_endkey_by_match_spec");
  }

  netbufferv4_range_partition_for_scan_endkey_tbl_table_modify_with_range_partition_for_scan_endkey_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_table_modify_with_range_partition_for_scan_endkey_by_match_spec", bytes);
  }

  netbufferv4_range_partition_for_scan_endkey_tbl_table_modify_with_range_partition_for_scan_endkey_by_match_spec_result result;
  try {
    iface_->range_partition_for_scan_endkey_tbl_table_modify_with_range_partition_for_scan_endkey_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec, args.priority, args.action_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_table_modify_with_range_partition_for_scan_endkey_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("range_partition_for_scan_endkey_tbl_table_modify_with_range_partition_for_scan_endkey_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_table_modify_with_range_partition_for_scan_endkey_by_match_spec");
  }

  oprot->writeMessageBegin("range_partition_for_scan_endkey_tbl_table_modify_with_range_partition_for_scan_endkey_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_table_modify_with_range_partition_for_scan_endkey_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_range_partition_for_scan_endkey_tbl_table_modify_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.range_partition_for_scan_endkey_tbl_table_modify_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_table_modify_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_table_modify_with_nop");
  }

  netbufferv4_range_partition_for_scan_endkey_tbl_table_modify_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_table_modify_with_nop", bytes);
  }

  netbufferv4_range_partition_for_scan_endkey_tbl_table_modify_with_nop_result result;
  try {
    iface_->range_partition_for_scan_endkey_tbl_table_modify_with_nop(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_table_modify_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("range_partition_for_scan_endkey_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_table_modify_with_nop");
  }

  oprot->writeMessageBegin("range_partition_for_scan_endkey_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_table_modify_with_nop", bytes);
  }
}

void netbufferv4Processor::process_range_partition_for_scan_endkey_tbl_table_modify_with_nop_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.range_partition_for_scan_endkey_tbl_table_modify_with_nop_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_table_modify_with_nop_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_table_modify_with_nop_by_match_spec");
  }

  netbufferv4_range_partition_for_scan_endkey_tbl_table_modify_with_nop_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_table_modify_with_nop_by_match_spec", bytes);
  }

  netbufferv4_range_partition_for_scan_endkey_tbl_table_modify_with_nop_by_match_spec_result result;
  try {
    iface_->range_partition_for_scan_endkey_tbl_table_modify_with_nop_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec, args.priority);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_table_modify_with_nop_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("range_partition_for_scan_endkey_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_table_modify_with_nop_by_match_spec");
  }

  oprot->writeMessageBegin("range_partition_for_scan_endkey_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_table_modify_with_nop_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_range_partition_tbl_table_modify_with_range_partition(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.range_partition_tbl_table_modify_with_range_partition", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.range_partition_tbl_table_modify_with_range_partition");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.range_partition_tbl_table_modify_with_range_partition");
  }

  netbufferv4_range_partition_tbl_table_modify_with_range_partition_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.range_partition_tbl_table_modify_with_range_partition", bytes);
  }

  netbufferv4_range_partition_tbl_table_modify_with_range_partition_result result;
  try {
    iface_->range_partition_tbl_table_modify_with_range_partition(args.sess_hdl, args.dev_id, args.entry, args.action_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.range_partition_tbl_table_modify_with_range_partition");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("range_partition_tbl_table_modify_with_range_partition", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.range_partition_tbl_table_modify_with_range_partition");
  }

  oprot->writeMessageBegin("range_partition_tbl_table_modify_with_range_partition", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.range_partition_tbl_table_modify_with_range_partition", bytes);
  }
}

void netbufferv4Processor::process_range_partition_tbl_table_modify_with_range_partition_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.range_partition_tbl_table_modify_with_range_partition_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.range_partition_tbl_table_modify_with_range_partition_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.range_partition_tbl_table_modify_with_range_partition_by_match_spec");
  }

  netbufferv4_range_partition_tbl_table_modify_with_range_partition_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.range_partition_tbl_table_modify_with_range_partition_by_match_spec", bytes);
  }

  netbufferv4_range_partition_tbl_table_modify_with_range_partition_by_match_spec_result result;
  try {
    iface_->range_partition_tbl_table_modify_with_range_partition_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec, args.priority, args.action_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.range_partition_tbl_table_modify_with_range_partition_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("range_partition_tbl_table_modify_with_range_partition_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.range_partition_tbl_table_modify_with_range_partition_by_match_spec");
  }

  oprot->writeMessageBegin("range_partition_tbl_table_modify_with_range_partition_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.range_partition_tbl_table_modify_with_range_partition_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_range_partition_tbl_table_modify_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.range_partition_tbl_table_modify_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.range_partition_tbl_table_modify_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.range_partition_tbl_table_modify_with_nop");
  }

  netbufferv4_range_partition_tbl_table_modify_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.range_partition_tbl_table_modify_with_nop", bytes);
  }

  netbufferv4_range_partition_tbl_table_modify_with_nop_result result;
  try {
    iface_->range_partition_tbl_table_modify_with_nop(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.range_partition_tbl_table_modify_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("range_partition_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.range_partition_tbl_table_modify_with_nop");
  }

  oprot->writeMessageBegin("range_partition_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.range_partition_tbl_table_modify_with_nop", bytes);
  }
}

void netbufferv4Processor::process_range_partition_tbl_table_modify_with_nop_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.range_partition_tbl_table_modify_with_nop_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.range_partition_tbl_table_modify_with_nop_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.range_partition_tbl_table_modify_with_nop_by_match_spec");
  }

  netbufferv4_range_partition_tbl_table_modify_with_nop_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.range_partition_tbl_table_modify_with_nop_by_match_spec", bytes);
  }

  netbufferv4_range_partition_tbl_table_modify_with_nop_by_match_spec_result result;
  try {
    iface_->range_partition_tbl_table_modify_with_nop_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec, args.priority);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.range_partition_tbl_table_modify_with_nop_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("range_partition_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.range_partition_tbl_table_modify_with_nop_by_match_spec");
  }

  oprot->writeMessageBegin("range_partition_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.range_partition_tbl_table_modify_with_nop_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_recirculate_tbl_table_modify_with_recirculate_pkt(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.recirculate_tbl_table_modify_with_recirculate_pkt", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.recirculate_tbl_table_modify_with_recirculate_pkt");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.recirculate_tbl_table_modify_with_recirculate_pkt");
  }

  netbufferv4_recirculate_tbl_table_modify_with_recirculate_pkt_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.recirculate_tbl_table_modify_with_recirculate_pkt", bytes);
  }

  netbufferv4_recirculate_tbl_table_modify_with_recirculate_pkt_result result;
  try {
    iface_->recirculate_tbl_table_modify_with_recirculate_pkt(args.sess_hdl, args.dev_id, args.entry, args.action_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.recirculate_tbl_table_modify_with_recirculate_pkt");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("recirculate_tbl_table_modify_with_recirculate_pkt", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.recirculate_tbl_table_modify_with_recirculate_pkt");
  }

  oprot->writeMessageBegin("recirculate_tbl_table_modify_with_recirculate_pkt", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.recirculate_tbl_table_modify_with_recirculate_pkt", bytes);
  }
}

void netbufferv4Processor::process_recirculate_tbl_table_modify_with_recirculate_pkt_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.recirculate_tbl_table_modify_with_recirculate_pkt_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.recirculate_tbl_table_modify_with_recirculate_pkt_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.recirculate_tbl_table_modify_with_recirculate_pkt_by_match_spec");
  }

  netbufferv4_recirculate_tbl_table_modify_with_recirculate_pkt_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.recirculate_tbl_table_modify_with_recirculate_pkt_by_match_spec", bytes);
  }

  netbufferv4_recirculate_tbl_table_modify_with_recirculate_pkt_by_match_spec_result result;
  try {
    iface_->recirculate_tbl_table_modify_with_recirculate_pkt_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec, args.action_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.recirculate_tbl_table_modify_with_recirculate_pkt_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("recirculate_tbl_table_modify_with_recirculate_pkt_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.recirculate_tbl_table_modify_with_recirculate_pkt_by_match_spec");
  }

  oprot->writeMessageBegin("recirculate_tbl_table_modify_with_recirculate_pkt_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.recirculate_tbl_table_modify_with_recirculate_pkt_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_recirculate_tbl_table_modify_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.recirculate_tbl_table_modify_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.recirculate_tbl_table_modify_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.recirculate_tbl_table_modify_with_nop");
  }

  netbufferv4_recirculate_tbl_table_modify_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.recirculate_tbl_table_modify_with_nop", bytes);
  }

  netbufferv4_recirculate_tbl_table_modify_with_nop_result result;
  try {
    iface_->recirculate_tbl_table_modify_with_nop(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.recirculate_tbl_table_modify_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("recirculate_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.recirculate_tbl_table_modify_with_nop");
  }

  oprot->writeMessageBegin("recirculate_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.recirculate_tbl_table_modify_with_nop", bytes);
  }
}

void netbufferv4Processor::process_recirculate_tbl_table_modify_with_nop_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.recirculate_tbl_table_modify_with_nop_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.recirculate_tbl_table_modify_with_nop_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.recirculate_tbl_table_modify_with_nop_by_match_spec");
  }

  netbufferv4_recirculate_tbl_table_modify_with_nop_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.recirculate_tbl_table_modify_with_nop_by_match_spec", bytes);
  }

  netbufferv4_recirculate_tbl_table_modify_with_nop_by_match_spec_result result;
  try {
    iface_->recirculate_tbl_table_modify_with_nop_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.recirculate_tbl_table_modify_with_nop_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("recirculate_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.recirculate_tbl_table_modify_with_nop_by_match_spec");
  }

  oprot->writeMessageBegin("recirculate_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.recirculate_tbl_table_modify_with_nop_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_sample_tbl_table_modify_with_sample(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.sample_tbl_table_modify_with_sample", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.sample_tbl_table_modify_with_sample");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.sample_tbl_table_modify_with_sample");
  }

  netbufferv4_sample_tbl_table_modify_with_sample_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.sample_tbl_table_modify_with_sample", bytes);
  }

  netbufferv4_sample_tbl_table_modify_with_sample_result result;
  try {
    iface_->sample_tbl_table_modify_with_sample(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.sample_tbl_table_modify_with_sample");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sample_tbl_table_modify_with_sample", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.sample_tbl_table_modify_with_sample");
  }

  oprot->writeMessageBegin("sample_tbl_table_modify_with_sample", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.sample_tbl_table_modify_with_sample", bytes);
  }
}

void netbufferv4Processor::process_sample_tbl_table_modify_with_sample_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.sample_tbl_table_modify_with_sample_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.sample_tbl_table_modify_with_sample_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.sample_tbl_table_modify_with_sample_by_match_spec");
  }

  netbufferv4_sample_tbl_table_modify_with_sample_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.sample_tbl_table_modify_with_sample_by_match_spec", bytes);
  }

  netbufferv4_sample_tbl_table_modify_with_sample_by_match_spec_result result;
  try {
    iface_->sample_tbl_table_modify_with_sample_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.sample_tbl_table_modify_with_sample_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sample_tbl_table_modify_with_sample_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.sample_tbl_table_modify_with_sample_by_match_spec");
  }

  oprot->writeMessageBegin("sample_tbl_table_modify_with_sample_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.sample_tbl_table_modify_with_sample_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_sample_tbl_table_modify_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.sample_tbl_table_modify_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.sample_tbl_table_modify_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.sample_tbl_table_modify_with_nop");
  }

  netbufferv4_sample_tbl_table_modify_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.sample_tbl_table_modify_with_nop", bytes);
  }

  netbufferv4_sample_tbl_table_modify_with_nop_result result;
  try {
    iface_->sample_tbl_table_modify_with_nop(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.sample_tbl_table_modify_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sample_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.sample_tbl_table_modify_with_nop");
  }

  oprot->writeMessageBegin("sample_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.sample_tbl_table_modify_with_nop", bytes);
  }
}

void netbufferv4Processor::process_sample_tbl_table_modify_with_nop_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.sample_tbl_table_modify_with_nop_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.sample_tbl_table_modify_with_nop_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.sample_tbl_table_modify_with_nop_by_match_spec");
  }

  netbufferv4_sample_tbl_table_modify_with_nop_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.sample_tbl_table_modify_with_nop_by_match_spec", bytes);
  }

  netbufferv4_sample_tbl_table_modify_with_nop_by_match_spec_result result;
  try {
    iface_->sample_tbl_table_modify_with_nop_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.sample_tbl_table_modify_with_nop_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sample_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.sample_tbl_table_modify_with_nop_by_match_spec");
  }

  oprot->writeMessageBegin("sample_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.sample_tbl_table_modify_with_nop_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_save_client_udpport_tbl_table_modify_with_save_client_udpport(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.save_client_udpport_tbl_table_modify_with_save_client_udpport", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.save_client_udpport_tbl_table_modify_with_save_client_udpport");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.save_client_udpport_tbl_table_modify_with_save_client_udpport");
  }

  netbufferv4_save_client_udpport_tbl_table_modify_with_save_client_udpport_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.save_client_udpport_tbl_table_modify_with_save_client_udpport", bytes);
  }

  netbufferv4_save_client_udpport_tbl_table_modify_with_save_client_udpport_result result;
  try {
    iface_->save_client_udpport_tbl_table_modify_with_save_client_udpport(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.save_client_udpport_tbl_table_modify_with_save_client_udpport");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("save_client_udpport_tbl_table_modify_with_save_client_udpport", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.save_client_udpport_tbl_table_modify_with_save_client_udpport");
  }

  oprot->writeMessageBegin("save_client_udpport_tbl_table_modify_with_save_client_udpport", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.save_client_udpport_tbl_table_modify_with_save_client_udpport", bytes);
  }
}

void netbufferv4Processor::process_save_client_udpport_tbl_table_modify_with_save_client_udpport_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.save_client_udpport_tbl_table_modify_with_save_client_udpport_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.save_client_udpport_tbl_table_modify_with_save_client_udpport_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.save_client_udpport_tbl_table_modify_with_save_client_udpport_by_match_spec");
  }

  netbufferv4_save_client_udpport_tbl_table_modify_with_save_client_udpport_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.save_client_udpport_tbl_table_modify_with_save_client_udpport_by_match_spec", bytes);
  }

  netbufferv4_save_client_udpport_tbl_table_modify_with_save_client_udpport_by_match_spec_result result;
  try {
    iface_->save_client_udpport_tbl_table_modify_with_save_client_udpport_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.save_client_udpport_tbl_table_modify_with_save_client_udpport_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("save_client_udpport_tbl_table_modify_with_save_client_udpport_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.save_client_udpport_tbl_table_modify_with_save_client_udpport_by_match_spec");
  }

  oprot->writeMessageBegin("save_client_udpport_tbl_table_modify_with_save_client_udpport_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.save_client_udpport_tbl_table_modify_with_save_client_udpport_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_save_client_udpport_tbl_table_modify_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.save_client_udpport_tbl_table_modify_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.save_client_udpport_tbl_table_modify_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.save_client_udpport_tbl_table_modify_with_nop");
  }

  netbufferv4_save_client_udpport_tbl_table_modify_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.save_client_udpport_tbl_table_modify_with_nop", bytes);
  }

  netbufferv4_save_client_udpport_tbl_table_modify_with_nop_result result;
  try {
    iface_->save_client_udpport_tbl_table_modify_with_nop(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.save_client_udpport_tbl_table_modify_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("save_client_udpport_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.save_client_udpport_tbl_table_modify_with_nop");
  }

  oprot->writeMessageBegin("save_client_udpport_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.save_client_udpport_tbl_table_modify_with_nop", bytes);
  }
}

void netbufferv4Processor::process_save_client_udpport_tbl_table_modify_with_nop_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.save_client_udpport_tbl_table_modify_with_nop_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.save_client_udpport_tbl_table_modify_with_nop_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.save_client_udpport_tbl_table_modify_with_nop_by_match_spec");
  }

  netbufferv4_save_client_udpport_tbl_table_modify_with_nop_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.save_client_udpport_tbl_table_modify_with_nop_by_match_spec", bytes);
  }

  netbufferv4_save_client_udpport_tbl_table_modify_with_nop_by_match_spec_result result;
  try {
    iface_->save_client_udpport_tbl_table_modify_with_nop_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.save_client_udpport_tbl_table_modify_with_nop_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("save_client_udpport_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.save_client_udpport_tbl_table_modify_with_nop_by_match_spec");
  }

  oprot->writeMessageBegin("save_client_udpport_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.save_client_udpport_tbl_table_modify_with_nop_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_snapshot_flag_tbl_table_modify_with_set_snapshot_flag(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.snapshot_flag_tbl_table_modify_with_set_snapshot_flag", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.snapshot_flag_tbl_table_modify_with_set_snapshot_flag");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.snapshot_flag_tbl_table_modify_with_set_snapshot_flag");
  }

  netbufferv4_snapshot_flag_tbl_table_modify_with_set_snapshot_flag_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.snapshot_flag_tbl_table_modify_with_set_snapshot_flag", bytes);
  }

  netbufferv4_snapshot_flag_tbl_table_modify_with_set_snapshot_flag_result result;
  try {
    iface_->snapshot_flag_tbl_table_modify_with_set_snapshot_flag(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.snapshot_flag_tbl_table_modify_with_set_snapshot_flag");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("snapshot_flag_tbl_table_modify_with_set_snapshot_flag", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.snapshot_flag_tbl_table_modify_with_set_snapshot_flag");
  }

  oprot->writeMessageBegin("snapshot_flag_tbl_table_modify_with_set_snapshot_flag", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.snapshot_flag_tbl_table_modify_with_set_snapshot_flag", bytes);
  }
}

void netbufferv4Processor::process_snapshot_flag_tbl_table_modify_with_set_snapshot_flag_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.snapshot_flag_tbl_table_modify_with_set_snapshot_flag_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.snapshot_flag_tbl_table_modify_with_set_snapshot_flag_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.snapshot_flag_tbl_table_modify_with_set_snapshot_flag_by_match_spec");
  }

  netbufferv4_snapshot_flag_tbl_table_modify_with_set_snapshot_flag_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.snapshot_flag_tbl_table_modify_with_set_snapshot_flag_by_match_spec", bytes);
  }

  netbufferv4_snapshot_flag_tbl_table_modify_with_set_snapshot_flag_by_match_spec_result result;
  try {
    iface_->snapshot_flag_tbl_table_modify_with_set_snapshot_flag_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.snapshot_flag_tbl_table_modify_with_set_snapshot_flag_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("snapshot_flag_tbl_table_modify_with_set_snapshot_flag_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.snapshot_flag_tbl_table_modify_with_set_snapshot_flag_by_match_spec");
  }

  oprot->writeMessageBegin("snapshot_flag_tbl_table_modify_with_set_snapshot_flag_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.snapshot_flag_tbl_table_modify_with_set_snapshot_flag_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_snapshot_flag_tbl_table_modify_with_reset_snapshot_flag(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.snapshot_flag_tbl_table_modify_with_reset_snapshot_flag", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.snapshot_flag_tbl_table_modify_with_reset_snapshot_flag");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.snapshot_flag_tbl_table_modify_with_reset_snapshot_flag");
  }

  netbufferv4_snapshot_flag_tbl_table_modify_with_reset_snapshot_flag_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.snapshot_flag_tbl_table_modify_with_reset_snapshot_flag", bytes);
  }

  netbufferv4_snapshot_flag_tbl_table_modify_with_reset_snapshot_flag_result result;
  try {
    iface_->snapshot_flag_tbl_table_modify_with_reset_snapshot_flag(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.snapshot_flag_tbl_table_modify_with_reset_snapshot_flag");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("snapshot_flag_tbl_table_modify_with_reset_snapshot_flag", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.snapshot_flag_tbl_table_modify_with_reset_snapshot_flag");
  }

  oprot->writeMessageBegin("snapshot_flag_tbl_table_modify_with_reset_snapshot_flag", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.snapshot_flag_tbl_table_modify_with_reset_snapshot_flag", bytes);
  }
}

void netbufferv4Processor::process_snapshot_flag_tbl_table_modify_with_reset_snapshot_flag_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.snapshot_flag_tbl_table_modify_with_reset_snapshot_flag_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.snapshot_flag_tbl_table_modify_with_reset_snapshot_flag_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.snapshot_flag_tbl_table_modify_with_reset_snapshot_flag_by_match_spec");
  }

  netbufferv4_snapshot_flag_tbl_table_modify_with_reset_snapshot_flag_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.snapshot_flag_tbl_table_modify_with_reset_snapshot_flag_by_match_spec", bytes);
  }

  netbufferv4_snapshot_flag_tbl_table_modify_with_reset_snapshot_flag_by_match_spec_result result;
  try {
    iface_->snapshot_flag_tbl_table_modify_with_reset_snapshot_flag_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.snapshot_flag_tbl_table_modify_with_reset_snapshot_flag_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("snapshot_flag_tbl_table_modify_with_reset_snapshot_flag_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.snapshot_flag_tbl_table_modify_with_reset_snapshot_flag_by_match_spec");
  }

  oprot->writeMessageBegin("snapshot_flag_tbl_table_modify_with_reset_snapshot_flag_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.snapshot_flag_tbl_table_modify_with_reset_snapshot_flag_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_server2client(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_server2client", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_server2client");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_server2client");
  }

  netbufferv4_update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_server2client_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_server2client", bytes);
  }

  netbufferv4_update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_server2client_result result;
  try {
    iface_->update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_server2client(args.sess_hdl, args.dev_id, args.entry, args.action_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_server2client");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_server2client", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_server2client");
  }

  oprot->writeMessageBegin("update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_server2client", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_server2client", bytes);
  }
}

void netbufferv4Processor::process_update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_server2client_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_server2client_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_server2client_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_server2client_by_match_spec");
  }

  netbufferv4_update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_server2client_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_server2client_by_match_spec", bytes);
  }

  netbufferv4_update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_server2client_by_match_spec_result result;
  try {
    iface_->update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_server2client_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec, args.action_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_server2client_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_server2client_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_server2client_by_match_spec");
  }

  oprot->writeMessageBegin("update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_server2client_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_server2client_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_switch2switchos(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_switch2switchos", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_switch2switchos");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_switch2switchos");
  }

  netbufferv4_update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_switch2switchos_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_switch2switchos", bytes);
  }

  netbufferv4_update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_switch2switchos_result result;
  try {
    iface_->update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_switch2switchos(args.sess_hdl, args.dev_id, args.entry, args.action_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_switch2switchos");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_switch2switchos", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_switch2switchos");
  }

  oprot->writeMessageBegin("update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_switch2switchos", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_switch2switchos", bytes);
  }
}

void netbufferv4Processor::process_update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_switch2switchos_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_switch2switchos_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_switch2switchos_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_switch2switchos_by_match_spec");
  }

  netbufferv4_update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_switch2switchos_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_switch2switchos_by_match_spec", bytes);
  }

  netbufferv4_update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_switch2switchos_by_match_spec_result result;
  try {
    iface_->update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_switch2switchos_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec, args.action_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_switch2switchos_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_switch2switchos_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_switch2switchos_by_match_spec");
  }

  oprot->writeMessageBegin("update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_switch2switchos_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_switch2switchos_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_ipmac_srcport_tbl_table_modify_with_update_dstipmac_client2server(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_ipmac_srcport_tbl_table_modify_with_update_dstipmac_client2server", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_ipmac_srcport_tbl_table_modify_with_update_dstipmac_client2server");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_modify_with_update_dstipmac_client2server");
  }

  netbufferv4_update_ipmac_srcport_tbl_table_modify_with_update_dstipmac_client2server_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_modify_with_update_dstipmac_client2server", bytes);
  }

  netbufferv4_update_ipmac_srcport_tbl_table_modify_with_update_dstipmac_client2server_result result;
  try {
    iface_->update_ipmac_srcport_tbl_table_modify_with_update_dstipmac_client2server(args.sess_hdl, args.dev_id, args.entry, args.action_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_modify_with_update_dstipmac_client2server");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_ipmac_srcport_tbl_table_modify_with_update_dstipmac_client2server", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_modify_with_update_dstipmac_client2server");
  }

  oprot->writeMessageBegin("update_ipmac_srcport_tbl_table_modify_with_update_dstipmac_client2server", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_modify_with_update_dstipmac_client2server", bytes);
  }
}

void netbufferv4Processor::process_update_ipmac_srcport_tbl_table_modify_with_update_dstipmac_client2server_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_ipmac_srcport_tbl_table_modify_with_update_dstipmac_client2server_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_ipmac_srcport_tbl_table_modify_with_update_dstipmac_client2server_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_modify_with_update_dstipmac_client2server_by_match_spec");
  }

  netbufferv4_update_ipmac_srcport_tbl_table_modify_with_update_dstipmac_client2server_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_modify_with_update_dstipmac_client2server_by_match_spec", bytes);
  }

  netbufferv4_update_ipmac_srcport_tbl_table_modify_with_update_dstipmac_client2server_by_match_spec_result result;
  try {
    iface_->update_ipmac_srcport_tbl_table_modify_with_update_dstipmac_client2server_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec, args.action_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_modify_with_update_dstipmac_client2server_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_ipmac_srcport_tbl_table_modify_with_update_dstipmac_client2server_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_modify_with_update_dstipmac_client2server_by_match_spec");
  }

  oprot->writeMessageBegin("update_ipmac_srcport_tbl_table_modify_with_update_dstipmac_client2server_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_modify_with_update_dstipmac_client2server_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_ipmac_srcport_tbl_table_modify_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_ipmac_srcport_tbl_table_modify_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_ipmac_srcport_tbl_table_modify_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_modify_with_nop");
  }

  netbufferv4_update_ipmac_srcport_tbl_table_modify_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_modify_with_nop", bytes);
  }

  netbufferv4_update_ipmac_srcport_tbl_table_modify_with_nop_result result;
  try {
    iface_->update_ipmac_srcport_tbl_table_modify_with_nop(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_modify_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_ipmac_srcport_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_modify_with_nop");
  }

  oprot->writeMessageBegin("update_ipmac_srcport_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_modify_with_nop", bytes);
  }
}

void netbufferv4Processor::process_update_ipmac_srcport_tbl_table_modify_with_nop_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_ipmac_srcport_tbl_table_modify_with_nop_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_ipmac_srcport_tbl_table_modify_with_nop_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_modify_with_nop_by_match_spec");
  }

  netbufferv4_update_ipmac_srcport_tbl_table_modify_with_nop_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_modify_with_nop_by_match_spec", bytes);
  }

  netbufferv4_update_ipmac_srcport_tbl_table_modify_with_nop_by_match_spec_result result;
  try {
    iface_->update_ipmac_srcport_tbl_table_modify_with_nop_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_modify_with_nop_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_ipmac_srcport_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_modify_with_nop_by_match_spec");
  }

  oprot->writeMessageBegin("update_ipmac_srcport_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_modify_with_nop_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_pktlen_tbl_table_modify_with_update_pktlen(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_pktlen_tbl_table_modify_with_update_pktlen", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_pktlen_tbl_table_modify_with_update_pktlen");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_pktlen_tbl_table_modify_with_update_pktlen");
  }

  netbufferv4_update_pktlen_tbl_table_modify_with_update_pktlen_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_pktlen_tbl_table_modify_with_update_pktlen", bytes);
  }

  netbufferv4_update_pktlen_tbl_table_modify_with_update_pktlen_result result;
  try {
    iface_->update_pktlen_tbl_table_modify_with_update_pktlen(args.sess_hdl, args.dev_id, args.entry, args.action_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_pktlen_tbl_table_modify_with_update_pktlen");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_pktlen_tbl_table_modify_with_update_pktlen", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_pktlen_tbl_table_modify_with_update_pktlen");
  }

  oprot->writeMessageBegin("update_pktlen_tbl_table_modify_with_update_pktlen", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_pktlen_tbl_table_modify_with_update_pktlen", bytes);
  }
}

void netbufferv4Processor::process_update_pktlen_tbl_table_modify_with_update_pktlen_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_pktlen_tbl_table_modify_with_update_pktlen_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_pktlen_tbl_table_modify_with_update_pktlen_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_pktlen_tbl_table_modify_with_update_pktlen_by_match_spec");
  }

  netbufferv4_update_pktlen_tbl_table_modify_with_update_pktlen_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_pktlen_tbl_table_modify_with_update_pktlen_by_match_spec", bytes);
  }

  netbufferv4_update_pktlen_tbl_table_modify_with_update_pktlen_by_match_spec_result result;
  try {
    iface_->update_pktlen_tbl_table_modify_with_update_pktlen_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec, args.priority, args.action_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_pktlen_tbl_table_modify_with_update_pktlen_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_pktlen_tbl_table_modify_with_update_pktlen_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_pktlen_tbl_table_modify_with_update_pktlen_by_match_spec");
  }

  oprot->writeMessageBegin("update_pktlen_tbl_table_modify_with_update_pktlen_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_pktlen_tbl_table_modify_with_update_pktlen_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_pktlen_tbl_table_modify_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_pktlen_tbl_table_modify_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_pktlen_tbl_table_modify_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_pktlen_tbl_table_modify_with_nop");
  }

  netbufferv4_update_pktlen_tbl_table_modify_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_pktlen_tbl_table_modify_with_nop", bytes);
  }

  netbufferv4_update_pktlen_tbl_table_modify_with_nop_result result;
  try {
    iface_->update_pktlen_tbl_table_modify_with_nop(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_pktlen_tbl_table_modify_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_pktlen_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_pktlen_tbl_table_modify_with_nop");
  }

  oprot->writeMessageBegin("update_pktlen_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_pktlen_tbl_table_modify_with_nop", bytes);
  }
}

void netbufferv4Processor::process_update_pktlen_tbl_table_modify_with_nop_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_pktlen_tbl_table_modify_with_nop_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_pktlen_tbl_table_modify_with_nop_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_pktlen_tbl_table_modify_with_nop_by_match_spec");
  }

  netbufferv4_update_pktlen_tbl_table_modify_with_nop_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_pktlen_tbl_table_modify_with_nop_by_match_spec", bytes);
  }

  netbufferv4_update_pktlen_tbl_table_modify_with_nop_by_match_spec_result result;
  try {
    iface_->update_pktlen_tbl_table_modify_with_nop_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec, args.priority);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_pktlen_tbl_table_modify_with_nop_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_pktlen_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_pktlen_tbl_table_modify_with_nop_by_match_spec");
  }

  oprot->writeMessageBegin("update_pktlen_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_pktlen_tbl_table_modify_with_nop_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi10_tbl_table_modify_with_get_valhi10(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi10_tbl_table_modify_with_get_valhi10", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi10_tbl_table_modify_with_get_valhi10");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi10_tbl_table_modify_with_get_valhi10");
  }

  netbufferv4_update_valhi10_tbl_table_modify_with_get_valhi10_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi10_tbl_table_modify_with_get_valhi10", bytes);
  }

  netbufferv4_update_valhi10_tbl_table_modify_with_get_valhi10_result result;
  try {
    iface_->update_valhi10_tbl_table_modify_with_get_valhi10(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi10_tbl_table_modify_with_get_valhi10");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi10_tbl_table_modify_with_get_valhi10", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi10_tbl_table_modify_with_get_valhi10");
  }

  oprot->writeMessageBegin("update_valhi10_tbl_table_modify_with_get_valhi10", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi10_tbl_table_modify_with_get_valhi10", bytes);
  }
}

void netbufferv4Processor::process_update_valhi10_tbl_table_modify_with_get_valhi10_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi10_tbl_table_modify_with_get_valhi10_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi10_tbl_table_modify_with_get_valhi10_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi10_tbl_table_modify_with_get_valhi10_by_match_spec");
  }

  netbufferv4_update_valhi10_tbl_table_modify_with_get_valhi10_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi10_tbl_table_modify_with_get_valhi10_by_match_spec", bytes);
  }

  netbufferv4_update_valhi10_tbl_table_modify_with_get_valhi10_by_match_spec_result result;
  try {
    iface_->update_valhi10_tbl_table_modify_with_get_valhi10_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi10_tbl_table_modify_with_get_valhi10_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi10_tbl_table_modify_with_get_valhi10_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi10_tbl_table_modify_with_get_valhi10_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi10_tbl_table_modify_with_get_valhi10_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi10_tbl_table_modify_with_get_valhi10_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi10_tbl_table_modify_with_set_and_get_valhi10(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi10_tbl_table_modify_with_set_and_get_valhi10", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi10_tbl_table_modify_with_set_and_get_valhi10");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi10_tbl_table_modify_with_set_and_get_valhi10");
  }

  netbufferv4_update_valhi10_tbl_table_modify_with_set_and_get_valhi10_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi10_tbl_table_modify_with_set_and_get_valhi10", bytes);
  }

  netbufferv4_update_valhi10_tbl_table_modify_with_set_and_get_valhi10_result result;
  try {
    iface_->update_valhi10_tbl_table_modify_with_set_and_get_valhi10(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi10_tbl_table_modify_with_set_and_get_valhi10");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi10_tbl_table_modify_with_set_and_get_valhi10", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi10_tbl_table_modify_with_set_and_get_valhi10");
  }

  oprot->writeMessageBegin("update_valhi10_tbl_table_modify_with_set_and_get_valhi10", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi10_tbl_table_modify_with_set_and_get_valhi10", bytes);
  }
}

void netbufferv4Processor::process_update_valhi10_tbl_table_modify_with_set_and_get_valhi10_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi10_tbl_table_modify_with_set_and_get_valhi10_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi10_tbl_table_modify_with_set_and_get_valhi10_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi10_tbl_table_modify_with_set_and_get_valhi10_by_match_spec");
  }

  netbufferv4_update_valhi10_tbl_table_modify_with_set_and_get_valhi10_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi10_tbl_table_modify_with_set_and_get_valhi10_by_match_spec", bytes);
  }

  netbufferv4_update_valhi10_tbl_table_modify_with_set_and_get_valhi10_by_match_spec_result result;
  try {
    iface_->update_valhi10_tbl_table_modify_with_set_and_get_valhi10_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi10_tbl_table_modify_with_set_and_get_valhi10_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi10_tbl_table_modify_with_set_and_get_valhi10_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi10_tbl_table_modify_with_set_and_get_valhi10_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi10_tbl_table_modify_with_set_and_get_valhi10_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi10_tbl_table_modify_with_set_and_get_valhi10_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi10_tbl_table_modify_with_reset_and_get_valhi10(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi10_tbl_table_modify_with_reset_and_get_valhi10", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi10_tbl_table_modify_with_reset_and_get_valhi10");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi10_tbl_table_modify_with_reset_and_get_valhi10");
  }

  netbufferv4_update_valhi10_tbl_table_modify_with_reset_and_get_valhi10_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi10_tbl_table_modify_with_reset_and_get_valhi10", bytes);
  }

  netbufferv4_update_valhi10_tbl_table_modify_with_reset_and_get_valhi10_result result;
  try {
    iface_->update_valhi10_tbl_table_modify_with_reset_and_get_valhi10(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi10_tbl_table_modify_with_reset_and_get_valhi10");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi10_tbl_table_modify_with_reset_and_get_valhi10", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi10_tbl_table_modify_with_reset_and_get_valhi10");
  }

  oprot->writeMessageBegin("update_valhi10_tbl_table_modify_with_reset_and_get_valhi10", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi10_tbl_table_modify_with_reset_and_get_valhi10", bytes);
  }
}

void netbufferv4Processor::process_update_valhi10_tbl_table_modify_with_reset_and_get_valhi10_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi10_tbl_table_modify_with_reset_and_get_valhi10_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi10_tbl_table_modify_with_reset_and_get_valhi10_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi10_tbl_table_modify_with_reset_and_get_valhi10_by_match_spec");
  }

  netbufferv4_update_valhi10_tbl_table_modify_with_reset_and_get_valhi10_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi10_tbl_table_modify_with_reset_and_get_valhi10_by_match_spec", bytes);
  }

  netbufferv4_update_valhi10_tbl_table_modify_with_reset_and_get_valhi10_by_match_spec_result result;
  try {
    iface_->update_valhi10_tbl_table_modify_with_reset_and_get_valhi10_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi10_tbl_table_modify_with_reset_and_get_valhi10_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi10_tbl_table_modify_with_reset_and_get_valhi10_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi10_tbl_table_modify_with_reset_and_get_valhi10_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi10_tbl_table_modify_with_reset_and_get_valhi10_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi10_tbl_table_modify_with_reset_and_get_valhi10_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi10_tbl_table_modify_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi10_tbl_table_modify_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi10_tbl_table_modify_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi10_tbl_table_modify_with_nop");
  }

  netbufferv4_update_valhi10_tbl_table_modify_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi10_tbl_table_modify_with_nop", bytes);
  }

  netbufferv4_update_valhi10_tbl_table_modify_with_nop_result result;
  try {
    iface_->update_valhi10_tbl_table_modify_with_nop(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi10_tbl_table_modify_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi10_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi10_tbl_table_modify_with_nop");
  }

  oprot->writeMessageBegin("update_valhi10_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi10_tbl_table_modify_with_nop", bytes);
  }
}

void netbufferv4Processor::process_update_valhi10_tbl_table_modify_with_nop_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi10_tbl_table_modify_with_nop_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi10_tbl_table_modify_with_nop_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi10_tbl_table_modify_with_nop_by_match_spec");
  }

  netbufferv4_update_valhi10_tbl_table_modify_with_nop_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi10_tbl_table_modify_with_nop_by_match_spec", bytes);
  }

  netbufferv4_update_valhi10_tbl_table_modify_with_nop_by_match_spec_result result;
  try {
    iface_->update_valhi10_tbl_table_modify_with_nop_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi10_tbl_table_modify_with_nop_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi10_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi10_tbl_table_modify_with_nop_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi10_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi10_tbl_table_modify_with_nop_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi11_tbl_table_modify_with_get_valhi11(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi11_tbl_table_modify_with_get_valhi11", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi11_tbl_table_modify_with_get_valhi11");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi11_tbl_table_modify_with_get_valhi11");
  }

  netbufferv4_update_valhi11_tbl_table_modify_with_get_valhi11_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi11_tbl_table_modify_with_get_valhi11", bytes);
  }

  netbufferv4_update_valhi11_tbl_table_modify_with_get_valhi11_result result;
  try {
    iface_->update_valhi11_tbl_table_modify_with_get_valhi11(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi11_tbl_table_modify_with_get_valhi11");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi11_tbl_table_modify_with_get_valhi11", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi11_tbl_table_modify_with_get_valhi11");
  }

  oprot->writeMessageBegin("update_valhi11_tbl_table_modify_with_get_valhi11", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi11_tbl_table_modify_with_get_valhi11", bytes);
  }
}

void netbufferv4Processor::process_update_valhi11_tbl_table_modify_with_get_valhi11_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi11_tbl_table_modify_with_get_valhi11_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi11_tbl_table_modify_with_get_valhi11_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi11_tbl_table_modify_with_get_valhi11_by_match_spec");
  }

  netbufferv4_update_valhi11_tbl_table_modify_with_get_valhi11_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi11_tbl_table_modify_with_get_valhi11_by_match_spec", bytes);
  }

  netbufferv4_update_valhi11_tbl_table_modify_with_get_valhi11_by_match_spec_result result;
  try {
    iface_->update_valhi11_tbl_table_modify_with_get_valhi11_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi11_tbl_table_modify_with_get_valhi11_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi11_tbl_table_modify_with_get_valhi11_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi11_tbl_table_modify_with_get_valhi11_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi11_tbl_table_modify_with_get_valhi11_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi11_tbl_table_modify_with_get_valhi11_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi11_tbl_table_modify_with_set_and_get_valhi11(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi11_tbl_table_modify_with_set_and_get_valhi11", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi11_tbl_table_modify_with_set_and_get_valhi11");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi11_tbl_table_modify_with_set_and_get_valhi11");
  }

  netbufferv4_update_valhi11_tbl_table_modify_with_set_and_get_valhi11_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi11_tbl_table_modify_with_set_and_get_valhi11", bytes);
  }

  netbufferv4_update_valhi11_tbl_table_modify_with_set_and_get_valhi11_result result;
  try {
    iface_->update_valhi11_tbl_table_modify_with_set_and_get_valhi11(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi11_tbl_table_modify_with_set_and_get_valhi11");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi11_tbl_table_modify_with_set_and_get_valhi11", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi11_tbl_table_modify_with_set_and_get_valhi11");
  }

  oprot->writeMessageBegin("update_valhi11_tbl_table_modify_with_set_and_get_valhi11", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi11_tbl_table_modify_with_set_and_get_valhi11", bytes);
  }
}

void netbufferv4Processor::process_update_valhi11_tbl_table_modify_with_set_and_get_valhi11_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi11_tbl_table_modify_with_set_and_get_valhi11_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi11_tbl_table_modify_with_set_and_get_valhi11_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi11_tbl_table_modify_with_set_and_get_valhi11_by_match_spec");
  }

  netbufferv4_update_valhi11_tbl_table_modify_with_set_and_get_valhi11_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi11_tbl_table_modify_with_set_and_get_valhi11_by_match_spec", bytes);
  }

  netbufferv4_update_valhi11_tbl_table_modify_with_set_and_get_valhi11_by_match_spec_result result;
  try {
    iface_->update_valhi11_tbl_table_modify_with_set_and_get_valhi11_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi11_tbl_table_modify_with_set_and_get_valhi11_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi11_tbl_table_modify_with_set_and_get_valhi11_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi11_tbl_table_modify_with_set_and_get_valhi11_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi11_tbl_table_modify_with_set_and_get_valhi11_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi11_tbl_table_modify_with_set_and_get_valhi11_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi11_tbl_table_modify_with_reset_and_get_valhi11(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi11_tbl_table_modify_with_reset_and_get_valhi11", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi11_tbl_table_modify_with_reset_and_get_valhi11");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi11_tbl_table_modify_with_reset_and_get_valhi11");
  }

  netbufferv4_update_valhi11_tbl_table_modify_with_reset_and_get_valhi11_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi11_tbl_table_modify_with_reset_and_get_valhi11", bytes);
  }

  netbufferv4_update_valhi11_tbl_table_modify_with_reset_and_get_valhi11_result result;
  try {
    iface_->update_valhi11_tbl_table_modify_with_reset_and_get_valhi11(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi11_tbl_table_modify_with_reset_and_get_valhi11");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi11_tbl_table_modify_with_reset_and_get_valhi11", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi11_tbl_table_modify_with_reset_and_get_valhi11");
  }

  oprot->writeMessageBegin("update_valhi11_tbl_table_modify_with_reset_and_get_valhi11", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi11_tbl_table_modify_with_reset_and_get_valhi11", bytes);
  }
}

void netbufferv4Processor::process_update_valhi11_tbl_table_modify_with_reset_and_get_valhi11_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi11_tbl_table_modify_with_reset_and_get_valhi11_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi11_tbl_table_modify_with_reset_and_get_valhi11_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi11_tbl_table_modify_with_reset_and_get_valhi11_by_match_spec");
  }

  netbufferv4_update_valhi11_tbl_table_modify_with_reset_and_get_valhi11_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi11_tbl_table_modify_with_reset_and_get_valhi11_by_match_spec", bytes);
  }

  netbufferv4_update_valhi11_tbl_table_modify_with_reset_and_get_valhi11_by_match_spec_result result;
  try {
    iface_->update_valhi11_tbl_table_modify_with_reset_and_get_valhi11_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi11_tbl_table_modify_with_reset_and_get_valhi11_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi11_tbl_table_modify_with_reset_and_get_valhi11_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi11_tbl_table_modify_with_reset_and_get_valhi11_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi11_tbl_table_modify_with_reset_and_get_valhi11_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi11_tbl_table_modify_with_reset_and_get_valhi11_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi11_tbl_table_modify_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi11_tbl_table_modify_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi11_tbl_table_modify_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi11_tbl_table_modify_with_nop");
  }

  netbufferv4_update_valhi11_tbl_table_modify_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi11_tbl_table_modify_with_nop", bytes);
  }

  netbufferv4_update_valhi11_tbl_table_modify_with_nop_result result;
  try {
    iface_->update_valhi11_tbl_table_modify_with_nop(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi11_tbl_table_modify_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi11_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi11_tbl_table_modify_with_nop");
  }

  oprot->writeMessageBegin("update_valhi11_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi11_tbl_table_modify_with_nop", bytes);
  }
}

void netbufferv4Processor::process_update_valhi11_tbl_table_modify_with_nop_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi11_tbl_table_modify_with_nop_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi11_tbl_table_modify_with_nop_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi11_tbl_table_modify_with_nop_by_match_spec");
  }

  netbufferv4_update_valhi11_tbl_table_modify_with_nop_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi11_tbl_table_modify_with_nop_by_match_spec", bytes);
  }

  netbufferv4_update_valhi11_tbl_table_modify_with_nop_by_match_spec_result result;
  try {
    iface_->update_valhi11_tbl_table_modify_with_nop_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi11_tbl_table_modify_with_nop_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi11_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi11_tbl_table_modify_with_nop_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi11_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi11_tbl_table_modify_with_nop_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi12_tbl_table_modify_with_get_valhi12(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi12_tbl_table_modify_with_get_valhi12", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi12_tbl_table_modify_with_get_valhi12");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi12_tbl_table_modify_with_get_valhi12");
  }

  netbufferv4_update_valhi12_tbl_table_modify_with_get_valhi12_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi12_tbl_table_modify_with_get_valhi12", bytes);
  }

  netbufferv4_update_valhi12_tbl_table_modify_with_get_valhi12_result result;
  try {
    iface_->update_valhi12_tbl_table_modify_with_get_valhi12(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi12_tbl_table_modify_with_get_valhi12");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi12_tbl_table_modify_with_get_valhi12", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi12_tbl_table_modify_with_get_valhi12");
  }

  oprot->writeMessageBegin("update_valhi12_tbl_table_modify_with_get_valhi12", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi12_tbl_table_modify_with_get_valhi12", bytes);
  }
}

void netbufferv4Processor::process_update_valhi12_tbl_table_modify_with_get_valhi12_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi12_tbl_table_modify_with_get_valhi12_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi12_tbl_table_modify_with_get_valhi12_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi12_tbl_table_modify_with_get_valhi12_by_match_spec");
  }

  netbufferv4_update_valhi12_tbl_table_modify_with_get_valhi12_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi12_tbl_table_modify_with_get_valhi12_by_match_spec", bytes);
  }

  netbufferv4_update_valhi12_tbl_table_modify_with_get_valhi12_by_match_spec_result result;
  try {
    iface_->update_valhi12_tbl_table_modify_with_get_valhi12_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi12_tbl_table_modify_with_get_valhi12_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi12_tbl_table_modify_with_get_valhi12_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi12_tbl_table_modify_with_get_valhi12_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi12_tbl_table_modify_with_get_valhi12_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi12_tbl_table_modify_with_get_valhi12_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi12_tbl_table_modify_with_set_and_get_valhi12(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi12_tbl_table_modify_with_set_and_get_valhi12", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi12_tbl_table_modify_with_set_and_get_valhi12");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi12_tbl_table_modify_with_set_and_get_valhi12");
  }

  netbufferv4_update_valhi12_tbl_table_modify_with_set_and_get_valhi12_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi12_tbl_table_modify_with_set_and_get_valhi12", bytes);
  }

  netbufferv4_update_valhi12_tbl_table_modify_with_set_and_get_valhi12_result result;
  try {
    iface_->update_valhi12_tbl_table_modify_with_set_and_get_valhi12(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi12_tbl_table_modify_with_set_and_get_valhi12");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi12_tbl_table_modify_with_set_and_get_valhi12", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi12_tbl_table_modify_with_set_and_get_valhi12");
  }

  oprot->writeMessageBegin("update_valhi12_tbl_table_modify_with_set_and_get_valhi12", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi12_tbl_table_modify_with_set_and_get_valhi12", bytes);
  }
}

void netbufferv4Processor::process_update_valhi12_tbl_table_modify_with_set_and_get_valhi12_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi12_tbl_table_modify_with_set_and_get_valhi12_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi12_tbl_table_modify_with_set_and_get_valhi12_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi12_tbl_table_modify_with_set_and_get_valhi12_by_match_spec");
  }

  netbufferv4_update_valhi12_tbl_table_modify_with_set_and_get_valhi12_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi12_tbl_table_modify_with_set_and_get_valhi12_by_match_spec", bytes);
  }

  netbufferv4_update_valhi12_tbl_table_modify_with_set_and_get_valhi12_by_match_spec_result result;
  try {
    iface_->update_valhi12_tbl_table_modify_with_set_and_get_valhi12_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi12_tbl_table_modify_with_set_and_get_valhi12_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi12_tbl_table_modify_with_set_and_get_valhi12_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi12_tbl_table_modify_with_set_and_get_valhi12_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi12_tbl_table_modify_with_set_and_get_valhi12_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi12_tbl_table_modify_with_set_and_get_valhi12_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi12_tbl_table_modify_with_reset_and_get_valhi12(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi12_tbl_table_modify_with_reset_and_get_valhi12", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi12_tbl_table_modify_with_reset_and_get_valhi12");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi12_tbl_table_modify_with_reset_and_get_valhi12");
  }

  netbufferv4_update_valhi12_tbl_table_modify_with_reset_and_get_valhi12_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi12_tbl_table_modify_with_reset_and_get_valhi12", bytes);
  }

  netbufferv4_update_valhi12_tbl_table_modify_with_reset_and_get_valhi12_result result;
  try {
    iface_->update_valhi12_tbl_table_modify_with_reset_and_get_valhi12(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi12_tbl_table_modify_with_reset_and_get_valhi12");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi12_tbl_table_modify_with_reset_and_get_valhi12", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi12_tbl_table_modify_with_reset_and_get_valhi12");
  }

  oprot->writeMessageBegin("update_valhi12_tbl_table_modify_with_reset_and_get_valhi12", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi12_tbl_table_modify_with_reset_and_get_valhi12", bytes);
  }
}

void netbufferv4Processor::process_update_valhi12_tbl_table_modify_with_reset_and_get_valhi12_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi12_tbl_table_modify_with_reset_and_get_valhi12_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi12_tbl_table_modify_with_reset_and_get_valhi12_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi12_tbl_table_modify_with_reset_and_get_valhi12_by_match_spec");
  }

  netbufferv4_update_valhi12_tbl_table_modify_with_reset_and_get_valhi12_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi12_tbl_table_modify_with_reset_and_get_valhi12_by_match_spec", bytes);
  }

  netbufferv4_update_valhi12_tbl_table_modify_with_reset_and_get_valhi12_by_match_spec_result result;
  try {
    iface_->update_valhi12_tbl_table_modify_with_reset_and_get_valhi12_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi12_tbl_table_modify_with_reset_and_get_valhi12_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi12_tbl_table_modify_with_reset_and_get_valhi12_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi12_tbl_table_modify_with_reset_and_get_valhi12_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi12_tbl_table_modify_with_reset_and_get_valhi12_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi12_tbl_table_modify_with_reset_and_get_valhi12_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi12_tbl_table_modify_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi12_tbl_table_modify_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi12_tbl_table_modify_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi12_tbl_table_modify_with_nop");
  }

  netbufferv4_update_valhi12_tbl_table_modify_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi12_tbl_table_modify_with_nop", bytes);
  }

  netbufferv4_update_valhi12_tbl_table_modify_with_nop_result result;
  try {
    iface_->update_valhi12_tbl_table_modify_with_nop(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi12_tbl_table_modify_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi12_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi12_tbl_table_modify_with_nop");
  }

  oprot->writeMessageBegin("update_valhi12_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi12_tbl_table_modify_with_nop", bytes);
  }
}

void netbufferv4Processor::process_update_valhi12_tbl_table_modify_with_nop_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi12_tbl_table_modify_with_nop_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi12_tbl_table_modify_with_nop_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi12_tbl_table_modify_with_nop_by_match_spec");
  }

  netbufferv4_update_valhi12_tbl_table_modify_with_nop_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi12_tbl_table_modify_with_nop_by_match_spec", bytes);
  }

  netbufferv4_update_valhi12_tbl_table_modify_with_nop_by_match_spec_result result;
  try {
    iface_->update_valhi12_tbl_table_modify_with_nop_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi12_tbl_table_modify_with_nop_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi12_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi12_tbl_table_modify_with_nop_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi12_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi12_tbl_table_modify_with_nop_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi13_tbl_table_modify_with_get_valhi13(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi13_tbl_table_modify_with_get_valhi13", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi13_tbl_table_modify_with_get_valhi13");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi13_tbl_table_modify_with_get_valhi13");
  }

  netbufferv4_update_valhi13_tbl_table_modify_with_get_valhi13_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi13_tbl_table_modify_with_get_valhi13", bytes);
  }

  netbufferv4_update_valhi13_tbl_table_modify_with_get_valhi13_result result;
  try {
    iface_->update_valhi13_tbl_table_modify_with_get_valhi13(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi13_tbl_table_modify_with_get_valhi13");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi13_tbl_table_modify_with_get_valhi13", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi13_tbl_table_modify_with_get_valhi13");
  }

  oprot->writeMessageBegin("update_valhi13_tbl_table_modify_with_get_valhi13", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi13_tbl_table_modify_with_get_valhi13", bytes);
  }
}

void netbufferv4Processor::process_update_valhi13_tbl_table_modify_with_get_valhi13_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi13_tbl_table_modify_with_get_valhi13_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi13_tbl_table_modify_with_get_valhi13_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi13_tbl_table_modify_with_get_valhi13_by_match_spec");
  }

  netbufferv4_update_valhi13_tbl_table_modify_with_get_valhi13_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi13_tbl_table_modify_with_get_valhi13_by_match_spec", bytes);
  }

  netbufferv4_update_valhi13_tbl_table_modify_with_get_valhi13_by_match_spec_result result;
  try {
    iface_->update_valhi13_tbl_table_modify_with_get_valhi13_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi13_tbl_table_modify_with_get_valhi13_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi13_tbl_table_modify_with_get_valhi13_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi13_tbl_table_modify_with_get_valhi13_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi13_tbl_table_modify_with_get_valhi13_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi13_tbl_table_modify_with_get_valhi13_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi13_tbl_table_modify_with_set_and_get_valhi13(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi13_tbl_table_modify_with_set_and_get_valhi13", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi13_tbl_table_modify_with_set_and_get_valhi13");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi13_tbl_table_modify_with_set_and_get_valhi13");
  }

  netbufferv4_update_valhi13_tbl_table_modify_with_set_and_get_valhi13_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi13_tbl_table_modify_with_set_and_get_valhi13", bytes);
  }

  netbufferv4_update_valhi13_tbl_table_modify_with_set_and_get_valhi13_result result;
  try {
    iface_->update_valhi13_tbl_table_modify_with_set_and_get_valhi13(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi13_tbl_table_modify_with_set_and_get_valhi13");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi13_tbl_table_modify_with_set_and_get_valhi13", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi13_tbl_table_modify_with_set_and_get_valhi13");
  }

  oprot->writeMessageBegin("update_valhi13_tbl_table_modify_with_set_and_get_valhi13", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi13_tbl_table_modify_with_set_and_get_valhi13", bytes);
  }
}

void netbufferv4Processor::process_update_valhi13_tbl_table_modify_with_set_and_get_valhi13_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi13_tbl_table_modify_with_set_and_get_valhi13_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi13_tbl_table_modify_with_set_and_get_valhi13_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi13_tbl_table_modify_with_set_and_get_valhi13_by_match_spec");
  }

  netbufferv4_update_valhi13_tbl_table_modify_with_set_and_get_valhi13_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi13_tbl_table_modify_with_set_and_get_valhi13_by_match_spec", bytes);
  }

  netbufferv4_update_valhi13_tbl_table_modify_with_set_and_get_valhi13_by_match_spec_result result;
  try {
    iface_->update_valhi13_tbl_table_modify_with_set_and_get_valhi13_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi13_tbl_table_modify_with_set_and_get_valhi13_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi13_tbl_table_modify_with_set_and_get_valhi13_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi13_tbl_table_modify_with_set_and_get_valhi13_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi13_tbl_table_modify_with_set_and_get_valhi13_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi13_tbl_table_modify_with_set_and_get_valhi13_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi13_tbl_table_modify_with_reset_and_get_valhi13(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi13_tbl_table_modify_with_reset_and_get_valhi13", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi13_tbl_table_modify_with_reset_and_get_valhi13");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi13_tbl_table_modify_with_reset_and_get_valhi13");
  }

  netbufferv4_update_valhi13_tbl_table_modify_with_reset_and_get_valhi13_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi13_tbl_table_modify_with_reset_and_get_valhi13", bytes);
  }

  netbufferv4_update_valhi13_tbl_table_modify_with_reset_and_get_valhi13_result result;
  try {
    iface_->update_valhi13_tbl_table_modify_with_reset_and_get_valhi13(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi13_tbl_table_modify_with_reset_and_get_valhi13");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi13_tbl_table_modify_with_reset_and_get_valhi13", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi13_tbl_table_modify_with_reset_and_get_valhi13");
  }

  oprot->writeMessageBegin("update_valhi13_tbl_table_modify_with_reset_and_get_valhi13", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi13_tbl_table_modify_with_reset_and_get_valhi13", bytes);
  }
}

void netbufferv4Processor::process_update_valhi13_tbl_table_modify_with_reset_and_get_valhi13_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi13_tbl_table_modify_with_reset_and_get_valhi13_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi13_tbl_table_modify_with_reset_and_get_valhi13_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi13_tbl_table_modify_with_reset_and_get_valhi13_by_match_spec");
  }

  netbufferv4_update_valhi13_tbl_table_modify_with_reset_and_get_valhi13_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi13_tbl_table_modify_with_reset_and_get_valhi13_by_match_spec", bytes);
  }

  netbufferv4_update_valhi13_tbl_table_modify_with_reset_and_get_valhi13_by_match_spec_result result;
  try {
    iface_->update_valhi13_tbl_table_modify_with_reset_and_get_valhi13_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi13_tbl_table_modify_with_reset_and_get_valhi13_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi13_tbl_table_modify_with_reset_and_get_valhi13_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi13_tbl_table_modify_with_reset_and_get_valhi13_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi13_tbl_table_modify_with_reset_and_get_valhi13_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi13_tbl_table_modify_with_reset_and_get_valhi13_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi13_tbl_table_modify_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi13_tbl_table_modify_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi13_tbl_table_modify_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi13_tbl_table_modify_with_nop");
  }

  netbufferv4_update_valhi13_tbl_table_modify_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi13_tbl_table_modify_with_nop", bytes);
  }

  netbufferv4_update_valhi13_tbl_table_modify_with_nop_result result;
  try {
    iface_->update_valhi13_tbl_table_modify_with_nop(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi13_tbl_table_modify_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi13_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi13_tbl_table_modify_with_nop");
  }

  oprot->writeMessageBegin("update_valhi13_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi13_tbl_table_modify_with_nop", bytes);
  }
}

void netbufferv4Processor::process_update_valhi13_tbl_table_modify_with_nop_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi13_tbl_table_modify_with_nop_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi13_tbl_table_modify_with_nop_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi13_tbl_table_modify_with_nop_by_match_spec");
  }

  netbufferv4_update_valhi13_tbl_table_modify_with_nop_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi13_tbl_table_modify_with_nop_by_match_spec", bytes);
  }

  netbufferv4_update_valhi13_tbl_table_modify_with_nop_by_match_spec_result result;
  try {
    iface_->update_valhi13_tbl_table_modify_with_nop_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi13_tbl_table_modify_with_nop_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi13_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi13_tbl_table_modify_with_nop_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi13_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi13_tbl_table_modify_with_nop_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi14_tbl_table_modify_with_get_valhi14(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi14_tbl_table_modify_with_get_valhi14", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi14_tbl_table_modify_with_get_valhi14");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi14_tbl_table_modify_with_get_valhi14");
  }

  netbufferv4_update_valhi14_tbl_table_modify_with_get_valhi14_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi14_tbl_table_modify_with_get_valhi14", bytes);
  }

  netbufferv4_update_valhi14_tbl_table_modify_with_get_valhi14_result result;
  try {
    iface_->update_valhi14_tbl_table_modify_with_get_valhi14(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi14_tbl_table_modify_with_get_valhi14");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi14_tbl_table_modify_with_get_valhi14", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi14_tbl_table_modify_with_get_valhi14");
  }

  oprot->writeMessageBegin("update_valhi14_tbl_table_modify_with_get_valhi14", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi14_tbl_table_modify_with_get_valhi14", bytes);
  }
}

void netbufferv4Processor::process_update_valhi14_tbl_table_modify_with_get_valhi14_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi14_tbl_table_modify_with_get_valhi14_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi14_tbl_table_modify_with_get_valhi14_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi14_tbl_table_modify_with_get_valhi14_by_match_spec");
  }

  netbufferv4_update_valhi14_tbl_table_modify_with_get_valhi14_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi14_tbl_table_modify_with_get_valhi14_by_match_spec", bytes);
  }

  netbufferv4_update_valhi14_tbl_table_modify_with_get_valhi14_by_match_spec_result result;
  try {
    iface_->update_valhi14_tbl_table_modify_with_get_valhi14_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi14_tbl_table_modify_with_get_valhi14_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi14_tbl_table_modify_with_get_valhi14_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi14_tbl_table_modify_with_get_valhi14_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi14_tbl_table_modify_with_get_valhi14_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi14_tbl_table_modify_with_get_valhi14_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi14_tbl_table_modify_with_set_and_get_valhi14(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi14_tbl_table_modify_with_set_and_get_valhi14", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi14_tbl_table_modify_with_set_and_get_valhi14");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi14_tbl_table_modify_with_set_and_get_valhi14");
  }

  netbufferv4_update_valhi14_tbl_table_modify_with_set_and_get_valhi14_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi14_tbl_table_modify_with_set_and_get_valhi14", bytes);
  }

  netbufferv4_update_valhi14_tbl_table_modify_with_set_and_get_valhi14_result result;
  try {
    iface_->update_valhi14_tbl_table_modify_with_set_and_get_valhi14(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi14_tbl_table_modify_with_set_and_get_valhi14");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi14_tbl_table_modify_with_set_and_get_valhi14", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi14_tbl_table_modify_with_set_and_get_valhi14");
  }

  oprot->writeMessageBegin("update_valhi14_tbl_table_modify_with_set_and_get_valhi14", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi14_tbl_table_modify_with_set_and_get_valhi14", bytes);
  }
}

void netbufferv4Processor::process_update_valhi14_tbl_table_modify_with_set_and_get_valhi14_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi14_tbl_table_modify_with_set_and_get_valhi14_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi14_tbl_table_modify_with_set_and_get_valhi14_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi14_tbl_table_modify_with_set_and_get_valhi14_by_match_spec");
  }

  netbufferv4_update_valhi14_tbl_table_modify_with_set_and_get_valhi14_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi14_tbl_table_modify_with_set_and_get_valhi14_by_match_spec", bytes);
  }

  netbufferv4_update_valhi14_tbl_table_modify_with_set_and_get_valhi14_by_match_spec_result result;
  try {
    iface_->update_valhi14_tbl_table_modify_with_set_and_get_valhi14_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi14_tbl_table_modify_with_set_and_get_valhi14_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi14_tbl_table_modify_with_set_and_get_valhi14_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi14_tbl_table_modify_with_set_and_get_valhi14_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi14_tbl_table_modify_with_set_and_get_valhi14_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi14_tbl_table_modify_with_set_and_get_valhi14_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi14_tbl_table_modify_with_reset_and_get_valhi14(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi14_tbl_table_modify_with_reset_and_get_valhi14", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi14_tbl_table_modify_with_reset_and_get_valhi14");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi14_tbl_table_modify_with_reset_and_get_valhi14");
  }

  netbufferv4_update_valhi14_tbl_table_modify_with_reset_and_get_valhi14_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi14_tbl_table_modify_with_reset_and_get_valhi14", bytes);
  }

  netbufferv4_update_valhi14_tbl_table_modify_with_reset_and_get_valhi14_result result;
  try {
    iface_->update_valhi14_tbl_table_modify_with_reset_and_get_valhi14(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi14_tbl_table_modify_with_reset_and_get_valhi14");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi14_tbl_table_modify_with_reset_and_get_valhi14", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi14_tbl_table_modify_with_reset_and_get_valhi14");
  }

  oprot->writeMessageBegin("update_valhi14_tbl_table_modify_with_reset_and_get_valhi14", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi14_tbl_table_modify_with_reset_and_get_valhi14", bytes);
  }
}

void netbufferv4Processor::process_update_valhi14_tbl_table_modify_with_reset_and_get_valhi14_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi14_tbl_table_modify_with_reset_and_get_valhi14_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi14_tbl_table_modify_with_reset_and_get_valhi14_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi14_tbl_table_modify_with_reset_and_get_valhi14_by_match_spec");
  }

  netbufferv4_update_valhi14_tbl_table_modify_with_reset_and_get_valhi14_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi14_tbl_table_modify_with_reset_and_get_valhi14_by_match_spec", bytes);
  }

  netbufferv4_update_valhi14_tbl_table_modify_with_reset_and_get_valhi14_by_match_spec_result result;
  try {
    iface_->update_valhi14_tbl_table_modify_with_reset_and_get_valhi14_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi14_tbl_table_modify_with_reset_and_get_valhi14_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi14_tbl_table_modify_with_reset_and_get_valhi14_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi14_tbl_table_modify_with_reset_and_get_valhi14_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi14_tbl_table_modify_with_reset_and_get_valhi14_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi14_tbl_table_modify_with_reset_and_get_valhi14_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi14_tbl_table_modify_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi14_tbl_table_modify_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi14_tbl_table_modify_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi14_tbl_table_modify_with_nop");
  }

  netbufferv4_update_valhi14_tbl_table_modify_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi14_tbl_table_modify_with_nop", bytes);
  }

  netbufferv4_update_valhi14_tbl_table_modify_with_nop_result result;
  try {
    iface_->update_valhi14_tbl_table_modify_with_nop(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi14_tbl_table_modify_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi14_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi14_tbl_table_modify_with_nop");
  }

  oprot->writeMessageBegin("update_valhi14_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi14_tbl_table_modify_with_nop", bytes);
  }
}

void netbufferv4Processor::process_update_valhi14_tbl_table_modify_with_nop_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi14_tbl_table_modify_with_nop_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi14_tbl_table_modify_with_nop_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi14_tbl_table_modify_with_nop_by_match_spec");
  }

  netbufferv4_update_valhi14_tbl_table_modify_with_nop_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi14_tbl_table_modify_with_nop_by_match_spec", bytes);
  }

  netbufferv4_update_valhi14_tbl_table_modify_with_nop_by_match_spec_result result;
  try {
    iface_->update_valhi14_tbl_table_modify_with_nop_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi14_tbl_table_modify_with_nop_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi14_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi14_tbl_table_modify_with_nop_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi14_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi14_tbl_table_modify_with_nop_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi15_tbl_table_modify_with_get_valhi15(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi15_tbl_table_modify_with_get_valhi15", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi15_tbl_table_modify_with_get_valhi15");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi15_tbl_table_modify_with_get_valhi15");
  }

  netbufferv4_update_valhi15_tbl_table_modify_with_get_valhi15_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi15_tbl_table_modify_with_get_valhi15", bytes);
  }

  netbufferv4_update_valhi15_tbl_table_modify_with_get_valhi15_result result;
  try {
    iface_->update_valhi15_tbl_table_modify_with_get_valhi15(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi15_tbl_table_modify_with_get_valhi15");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi15_tbl_table_modify_with_get_valhi15", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi15_tbl_table_modify_with_get_valhi15");
  }

  oprot->writeMessageBegin("update_valhi15_tbl_table_modify_with_get_valhi15", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi15_tbl_table_modify_with_get_valhi15", bytes);
  }
}

void netbufferv4Processor::process_update_valhi15_tbl_table_modify_with_get_valhi15_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi15_tbl_table_modify_with_get_valhi15_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi15_tbl_table_modify_with_get_valhi15_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi15_tbl_table_modify_with_get_valhi15_by_match_spec");
  }

  netbufferv4_update_valhi15_tbl_table_modify_with_get_valhi15_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi15_tbl_table_modify_with_get_valhi15_by_match_spec", bytes);
  }

  netbufferv4_update_valhi15_tbl_table_modify_with_get_valhi15_by_match_spec_result result;
  try {
    iface_->update_valhi15_tbl_table_modify_with_get_valhi15_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi15_tbl_table_modify_with_get_valhi15_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi15_tbl_table_modify_with_get_valhi15_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi15_tbl_table_modify_with_get_valhi15_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi15_tbl_table_modify_with_get_valhi15_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi15_tbl_table_modify_with_get_valhi15_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi15_tbl_table_modify_with_set_and_get_valhi15(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi15_tbl_table_modify_with_set_and_get_valhi15", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi15_tbl_table_modify_with_set_and_get_valhi15");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi15_tbl_table_modify_with_set_and_get_valhi15");
  }

  netbufferv4_update_valhi15_tbl_table_modify_with_set_and_get_valhi15_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi15_tbl_table_modify_with_set_and_get_valhi15", bytes);
  }

  netbufferv4_update_valhi15_tbl_table_modify_with_set_and_get_valhi15_result result;
  try {
    iface_->update_valhi15_tbl_table_modify_with_set_and_get_valhi15(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi15_tbl_table_modify_with_set_and_get_valhi15");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi15_tbl_table_modify_with_set_and_get_valhi15", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi15_tbl_table_modify_with_set_and_get_valhi15");
  }

  oprot->writeMessageBegin("update_valhi15_tbl_table_modify_with_set_and_get_valhi15", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi15_tbl_table_modify_with_set_and_get_valhi15", bytes);
  }
}

void netbufferv4Processor::process_update_valhi15_tbl_table_modify_with_set_and_get_valhi15_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi15_tbl_table_modify_with_set_and_get_valhi15_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi15_tbl_table_modify_with_set_and_get_valhi15_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi15_tbl_table_modify_with_set_and_get_valhi15_by_match_spec");
  }

  netbufferv4_update_valhi15_tbl_table_modify_with_set_and_get_valhi15_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi15_tbl_table_modify_with_set_and_get_valhi15_by_match_spec", bytes);
  }

  netbufferv4_update_valhi15_tbl_table_modify_with_set_and_get_valhi15_by_match_spec_result result;
  try {
    iface_->update_valhi15_tbl_table_modify_with_set_and_get_valhi15_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi15_tbl_table_modify_with_set_and_get_valhi15_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi15_tbl_table_modify_with_set_and_get_valhi15_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi15_tbl_table_modify_with_set_and_get_valhi15_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi15_tbl_table_modify_with_set_and_get_valhi15_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi15_tbl_table_modify_with_set_and_get_valhi15_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi15_tbl_table_modify_with_reset_and_get_valhi15(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi15_tbl_table_modify_with_reset_and_get_valhi15", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi15_tbl_table_modify_with_reset_and_get_valhi15");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi15_tbl_table_modify_with_reset_and_get_valhi15");
  }

  netbufferv4_update_valhi15_tbl_table_modify_with_reset_and_get_valhi15_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi15_tbl_table_modify_with_reset_and_get_valhi15", bytes);
  }

  netbufferv4_update_valhi15_tbl_table_modify_with_reset_and_get_valhi15_result result;
  try {
    iface_->update_valhi15_tbl_table_modify_with_reset_and_get_valhi15(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi15_tbl_table_modify_with_reset_and_get_valhi15");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi15_tbl_table_modify_with_reset_and_get_valhi15", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi15_tbl_table_modify_with_reset_and_get_valhi15");
  }

  oprot->writeMessageBegin("update_valhi15_tbl_table_modify_with_reset_and_get_valhi15", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi15_tbl_table_modify_with_reset_and_get_valhi15", bytes);
  }
}

void netbufferv4Processor::process_update_valhi15_tbl_table_modify_with_reset_and_get_valhi15_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi15_tbl_table_modify_with_reset_and_get_valhi15_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi15_tbl_table_modify_with_reset_and_get_valhi15_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi15_tbl_table_modify_with_reset_and_get_valhi15_by_match_spec");
  }

  netbufferv4_update_valhi15_tbl_table_modify_with_reset_and_get_valhi15_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi15_tbl_table_modify_with_reset_and_get_valhi15_by_match_spec", bytes);
  }

  netbufferv4_update_valhi15_tbl_table_modify_with_reset_and_get_valhi15_by_match_spec_result result;
  try {
    iface_->update_valhi15_tbl_table_modify_with_reset_and_get_valhi15_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi15_tbl_table_modify_with_reset_and_get_valhi15_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi15_tbl_table_modify_with_reset_and_get_valhi15_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi15_tbl_table_modify_with_reset_and_get_valhi15_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi15_tbl_table_modify_with_reset_and_get_valhi15_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi15_tbl_table_modify_with_reset_and_get_valhi15_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi15_tbl_table_modify_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi15_tbl_table_modify_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi15_tbl_table_modify_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi15_tbl_table_modify_with_nop");
  }

  netbufferv4_update_valhi15_tbl_table_modify_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi15_tbl_table_modify_with_nop", bytes);
  }

  netbufferv4_update_valhi15_tbl_table_modify_with_nop_result result;
  try {
    iface_->update_valhi15_tbl_table_modify_with_nop(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi15_tbl_table_modify_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi15_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi15_tbl_table_modify_with_nop");
  }

  oprot->writeMessageBegin("update_valhi15_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi15_tbl_table_modify_with_nop", bytes);
  }
}

void netbufferv4Processor::process_update_valhi15_tbl_table_modify_with_nop_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi15_tbl_table_modify_with_nop_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi15_tbl_table_modify_with_nop_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi15_tbl_table_modify_with_nop_by_match_spec");
  }

  netbufferv4_update_valhi15_tbl_table_modify_with_nop_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi15_tbl_table_modify_with_nop_by_match_spec", bytes);
  }

  netbufferv4_update_valhi15_tbl_table_modify_with_nop_by_match_spec_result result;
  try {
    iface_->update_valhi15_tbl_table_modify_with_nop_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi15_tbl_table_modify_with_nop_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi15_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi15_tbl_table_modify_with_nop_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi15_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi15_tbl_table_modify_with_nop_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi16_tbl_table_modify_with_get_valhi16(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi16_tbl_table_modify_with_get_valhi16", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi16_tbl_table_modify_with_get_valhi16");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi16_tbl_table_modify_with_get_valhi16");
  }

  netbufferv4_update_valhi16_tbl_table_modify_with_get_valhi16_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi16_tbl_table_modify_with_get_valhi16", bytes);
  }

  netbufferv4_update_valhi16_tbl_table_modify_with_get_valhi16_result result;
  try {
    iface_->update_valhi16_tbl_table_modify_with_get_valhi16(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi16_tbl_table_modify_with_get_valhi16");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi16_tbl_table_modify_with_get_valhi16", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi16_tbl_table_modify_with_get_valhi16");
  }

  oprot->writeMessageBegin("update_valhi16_tbl_table_modify_with_get_valhi16", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi16_tbl_table_modify_with_get_valhi16", bytes);
  }
}

void netbufferv4Processor::process_update_valhi16_tbl_table_modify_with_get_valhi16_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi16_tbl_table_modify_with_get_valhi16_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi16_tbl_table_modify_with_get_valhi16_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi16_tbl_table_modify_with_get_valhi16_by_match_spec");
  }

  netbufferv4_update_valhi16_tbl_table_modify_with_get_valhi16_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi16_tbl_table_modify_with_get_valhi16_by_match_spec", bytes);
  }

  netbufferv4_update_valhi16_tbl_table_modify_with_get_valhi16_by_match_spec_result result;
  try {
    iface_->update_valhi16_tbl_table_modify_with_get_valhi16_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi16_tbl_table_modify_with_get_valhi16_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi16_tbl_table_modify_with_get_valhi16_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi16_tbl_table_modify_with_get_valhi16_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi16_tbl_table_modify_with_get_valhi16_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi16_tbl_table_modify_with_get_valhi16_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi16_tbl_table_modify_with_set_and_get_valhi16(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi16_tbl_table_modify_with_set_and_get_valhi16", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi16_tbl_table_modify_with_set_and_get_valhi16");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi16_tbl_table_modify_with_set_and_get_valhi16");
  }

  netbufferv4_update_valhi16_tbl_table_modify_with_set_and_get_valhi16_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi16_tbl_table_modify_with_set_and_get_valhi16", bytes);
  }

  netbufferv4_update_valhi16_tbl_table_modify_with_set_and_get_valhi16_result result;
  try {
    iface_->update_valhi16_tbl_table_modify_with_set_and_get_valhi16(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi16_tbl_table_modify_with_set_and_get_valhi16");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi16_tbl_table_modify_with_set_and_get_valhi16", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi16_tbl_table_modify_with_set_and_get_valhi16");
  }

  oprot->writeMessageBegin("update_valhi16_tbl_table_modify_with_set_and_get_valhi16", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi16_tbl_table_modify_with_set_and_get_valhi16", bytes);
  }
}

void netbufferv4Processor::process_update_valhi16_tbl_table_modify_with_set_and_get_valhi16_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi16_tbl_table_modify_with_set_and_get_valhi16_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi16_tbl_table_modify_with_set_and_get_valhi16_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi16_tbl_table_modify_with_set_and_get_valhi16_by_match_spec");
  }

  netbufferv4_update_valhi16_tbl_table_modify_with_set_and_get_valhi16_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi16_tbl_table_modify_with_set_and_get_valhi16_by_match_spec", bytes);
  }

  netbufferv4_update_valhi16_tbl_table_modify_with_set_and_get_valhi16_by_match_spec_result result;
  try {
    iface_->update_valhi16_tbl_table_modify_with_set_and_get_valhi16_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi16_tbl_table_modify_with_set_and_get_valhi16_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi16_tbl_table_modify_with_set_and_get_valhi16_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi16_tbl_table_modify_with_set_and_get_valhi16_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi16_tbl_table_modify_with_set_and_get_valhi16_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi16_tbl_table_modify_with_set_and_get_valhi16_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi16_tbl_table_modify_with_reset_and_get_valhi16(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi16_tbl_table_modify_with_reset_and_get_valhi16", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi16_tbl_table_modify_with_reset_and_get_valhi16");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi16_tbl_table_modify_with_reset_and_get_valhi16");
  }

  netbufferv4_update_valhi16_tbl_table_modify_with_reset_and_get_valhi16_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi16_tbl_table_modify_with_reset_and_get_valhi16", bytes);
  }

  netbufferv4_update_valhi16_tbl_table_modify_with_reset_and_get_valhi16_result result;
  try {
    iface_->update_valhi16_tbl_table_modify_with_reset_and_get_valhi16(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi16_tbl_table_modify_with_reset_and_get_valhi16");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi16_tbl_table_modify_with_reset_and_get_valhi16", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi16_tbl_table_modify_with_reset_and_get_valhi16");
  }

  oprot->writeMessageBegin("update_valhi16_tbl_table_modify_with_reset_and_get_valhi16", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi16_tbl_table_modify_with_reset_and_get_valhi16", bytes);
  }
}

void netbufferv4Processor::process_update_valhi16_tbl_table_modify_with_reset_and_get_valhi16_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi16_tbl_table_modify_with_reset_and_get_valhi16_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi16_tbl_table_modify_with_reset_and_get_valhi16_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi16_tbl_table_modify_with_reset_and_get_valhi16_by_match_spec");
  }

  netbufferv4_update_valhi16_tbl_table_modify_with_reset_and_get_valhi16_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi16_tbl_table_modify_with_reset_and_get_valhi16_by_match_spec", bytes);
  }

  netbufferv4_update_valhi16_tbl_table_modify_with_reset_and_get_valhi16_by_match_spec_result result;
  try {
    iface_->update_valhi16_tbl_table_modify_with_reset_and_get_valhi16_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi16_tbl_table_modify_with_reset_and_get_valhi16_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi16_tbl_table_modify_with_reset_and_get_valhi16_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi16_tbl_table_modify_with_reset_and_get_valhi16_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi16_tbl_table_modify_with_reset_and_get_valhi16_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi16_tbl_table_modify_with_reset_and_get_valhi16_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi16_tbl_table_modify_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi16_tbl_table_modify_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi16_tbl_table_modify_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi16_tbl_table_modify_with_nop");
  }

  netbufferv4_update_valhi16_tbl_table_modify_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi16_tbl_table_modify_with_nop", bytes);
  }

  netbufferv4_update_valhi16_tbl_table_modify_with_nop_result result;
  try {
    iface_->update_valhi16_tbl_table_modify_with_nop(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi16_tbl_table_modify_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi16_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi16_tbl_table_modify_with_nop");
  }

  oprot->writeMessageBegin("update_valhi16_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi16_tbl_table_modify_with_nop", bytes);
  }
}

void netbufferv4Processor::process_update_valhi16_tbl_table_modify_with_nop_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi16_tbl_table_modify_with_nop_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi16_tbl_table_modify_with_nop_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi16_tbl_table_modify_with_nop_by_match_spec");
  }

  netbufferv4_update_valhi16_tbl_table_modify_with_nop_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi16_tbl_table_modify_with_nop_by_match_spec", bytes);
  }

  netbufferv4_update_valhi16_tbl_table_modify_with_nop_by_match_spec_result result;
  try {
    iface_->update_valhi16_tbl_table_modify_with_nop_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi16_tbl_table_modify_with_nop_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi16_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi16_tbl_table_modify_with_nop_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi16_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi16_tbl_table_modify_with_nop_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi1_tbl_table_modify_with_get_valhi1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi1_tbl_table_modify_with_get_valhi1", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi1_tbl_table_modify_with_get_valhi1");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi1_tbl_table_modify_with_get_valhi1");
  }

  netbufferv4_update_valhi1_tbl_table_modify_with_get_valhi1_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi1_tbl_table_modify_with_get_valhi1", bytes);
  }

  netbufferv4_update_valhi1_tbl_table_modify_with_get_valhi1_result result;
  try {
    iface_->update_valhi1_tbl_table_modify_with_get_valhi1(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi1_tbl_table_modify_with_get_valhi1");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi1_tbl_table_modify_with_get_valhi1", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi1_tbl_table_modify_with_get_valhi1");
  }

  oprot->writeMessageBegin("update_valhi1_tbl_table_modify_with_get_valhi1", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi1_tbl_table_modify_with_get_valhi1", bytes);
  }
}

void netbufferv4Processor::process_update_valhi1_tbl_table_modify_with_get_valhi1_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi1_tbl_table_modify_with_get_valhi1_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi1_tbl_table_modify_with_get_valhi1_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi1_tbl_table_modify_with_get_valhi1_by_match_spec");
  }

  netbufferv4_update_valhi1_tbl_table_modify_with_get_valhi1_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi1_tbl_table_modify_with_get_valhi1_by_match_spec", bytes);
  }

  netbufferv4_update_valhi1_tbl_table_modify_with_get_valhi1_by_match_spec_result result;
  try {
    iface_->update_valhi1_tbl_table_modify_with_get_valhi1_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi1_tbl_table_modify_with_get_valhi1_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi1_tbl_table_modify_with_get_valhi1_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi1_tbl_table_modify_with_get_valhi1_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi1_tbl_table_modify_with_get_valhi1_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi1_tbl_table_modify_with_get_valhi1_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi1_tbl_table_modify_with_set_and_get_valhi1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi1_tbl_table_modify_with_set_and_get_valhi1", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi1_tbl_table_modify_with_set_and_get_valhi1");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi1_tbl_table_modify_with_set_and_get_valhi1");
  }

  netbufferv4_update_valhi1_tbl_table_modify_with_set_and_get_valhi1_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi1_tbl_table_modify_with_set_and_get_valhi1", bytes);
  }

  netbufferv4_update_valhi1_tbl_table_modify_with_set_and_get_valhi1_result result;
  try {
    iface_->update_valhi1_tbl_table_modify_with_set_and_get_valhi1(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi1_tbl_table_modify_with_set_and_get_valhi1");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi1_tbl_table_modify_with_set_and_get_valhi1", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi1_tbl_table_modify_with_set_and_get_valhi1");
  }

  oprot->writeMessageBegin("update_valhi1_tbl_table_modify_with_set_and_get_valhi1", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi1_tbl_table_modify_with_set_and_get_valhi1", bytes);
  }
}

void netbufferv4Processor::process_update_valhi1_tbl_table_modify_with_set_and_get_valhi1_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi1_tbl_table_modify_with_set_and_get_valhi1_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi1_tbl_table_modify_with_set_and_get_valhi1_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi1_tbl_table_modify_with_set_and_get_valhi1_by_match_spec");
  }

  netbufferv4_update_valhi1_tbl_table_modify_with_set_and_get_valhi1_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi1_tbl_table_modify_with_set_and_get_valhi1_by_match_spec", bytes);
  }

  netbufferv4_update_valhi1_tbl_table_modify_with_set_and_get_valhi1_by_match_spec_result result;
  try {
    iface_->update_valhi1_tbl_table_modify_with_set_and_get_valhi1_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi1_tbl_table_modify_with_set_and_get_valhi1_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi1_tbl_table_modify_with_set_and_get_valhi1_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi1_tbl_table_modify_with_set_and_get_valhi1_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi1_tbl_table_modify_with_set_and_get_valhi1_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi1_tbl_table_modify_with_set_and_get_valhi1_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi1_tbl_table_modify_with_reset_and_get_valhi1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi1_tbl_table_modify_with_reset_and_get_valhi1", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi1_tbl_table_modify_with_reset_and_get_valhi1");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi1_tbl_table_modify_with_reset_and_get_valhi1");
  }

  netbufferv4_update_valhi1_tbl_table_modify_with_reset_and_get_valhi1_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi1_tbl_table_modify_with_reset_and_get_valhi1", bytes);
  }

  netbufferv4_update_valhi1_tbl_table_modify_with_reset_and_get_valhi1_result result;
  try {
    iface_->update_valhi1_tbl_table_modify_with_reset_and_get_valhi1(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi1_tbl_table_modify_with_reset_and_get_valhi1");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi1_tbl_table_modify_with_reset_and_get_valhi1", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi1_tbl_table_modify_with_reset_and_get_valhi1");
  }

  oprot->writeMessageBegin("update_valhi1_tbl_table_modify_with_reset_and_get_valhi1", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi1_tbl_table_modify_with_reset_and_get_valhi1", bytes);
  }
}

void netbufferv4Processor::process_update_valhi1_tbl_table_modify_with_reset_and_get_valhi1_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi1_tbl_table_modify_with_reset_and_get_valhi1_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi1_tbl_table_modify_with_reset_and_get_valhi1_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi1_tbl_table_modify_with_reset_and_get_valhi1_by_match_spec");
  }

  netbufferv4_update_valhi1_tbl_table_modify_with_reset_and_get_valhi1_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi1_tbl_table_modify_with_reset_and_get_valhi1_by_match_spec", bytes);
  }

  netbufferv4_update_valhi1_tbl_table_modify_with_reset_and_get_valhi1_by_match_spec_result result;
  try {
    iface_->update_valhi1_tbl_table_modify_with_reset_and_get_valhi1_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi1_tbl_table_modify_with_reset_and_get_valhi1_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi1_tbl_table_modify_with_reset_and_get_valhi1_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi1_tbl_table_modify_with_reset_and_get_valhi1_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi1_tbl_table_modify_with_reset_and_get_valhi1_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi1_tbl_table_modify_with_reset_and_get_valhi1_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi1_tbl_table_modify_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi1_tbl_table_modify_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi1_tbl_table_modify_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi1_tbl_table_modify_with_nop");
  }

  netbufferv4_update_valhi1_tbl_table_modify_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi1_tbl_table_modify_with_nop", bytes);
  }

  netbufferv4_update_valhi1_tbl_table_modify_with_nop_result result;
  try {
    iface_->update_valhi1_tbl_table_modify_with_nop(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi1_tbl_table_modify_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi1_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi1_tbl_table_modify_with_nop");
  }

  oprot->writeMessageBegin("update_valhi1_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi1_tbl_table_modify_with_nop", bytes);
  }
}

void netbufferv4Processor::process_update_valhi1_tbl_table_modify_with_nop_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi1_tbl_table_modify_with_nop_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi1_tbl_table_modify_with_nop_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi1_tbl_table_modify_with_nop_by_match_spec");
  }

  netbufferv4_update_valhi1_tbl_table_modify_with_nop_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi1_tbl_table_modify_with_nop_by_match_spec", bytes);
  }

  netbufferv4_update_valhi1_tbl_table_modify_with_nop_by_match_spec_result result;
  try {
    iface_->update_valhi1_tbl_table_modify_with_nop_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi1_tbl_table_modify_with_nop_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi1_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi1_tbl_table_modify_with_nop_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi1_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi1_tbl_table_modify_with_nop_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi2_tbl_table_modify_with_get_valhi2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi2_tbl_table_modify_with_get_valhi2", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi2_tbl_table_modify_with_get_valhi2");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi2_tbl_table_modify_with_get_valhi2");
  }

  netbufferv4_update_valhi2_tbl_table_modify_with_get_valhi2_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi2_tbl_table_modify_with_get_valhi2", bytes);
  }

  netbufferv4_update_valhi2_tbl_table_modify_with_get_valhi2_result result;
  try {
    iface_->update_valhi2_tbl_table_modify_with_get_valhi2(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi2_tbl_table_modify_with_get_valhi2");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi2_tbl_table_modify_with_get_valhi2", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi2_tbl_table_modify_with_get_valhi2");
  }

  oprot->writeMessageBegin("update_valhi2_tbl_table_modify_with_get_valhi2", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi2_tbl_table_modify_with_get_valhi2", bytes);
  }
}

void netbufferv4Processor::process_update_valhi2_tbl_table_modify_with_get_valhi2_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi2_tbl_table_modify_with_get_valhi2_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi2_tbl_table_modify_with_get_valhi2_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi2_tbl_table_modify_with_get_valhi2_by_match_spec");
  }

  netbufferv4_update_valhi2_tbl_table_modify_with_get_valhi2_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi2_tbl_table_modify_with_get_valhi2_by_match_spec", bytes);
  }

  netbufferv4_update_valhi2_tbl_table_modify_with_get_valhi2_by_match_spec_result result;
  try {
    iface_->update_valhi2_tbl_table_modify_with_get_valhi2_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi2_tbl_table_modify_with_get_valhi2_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi2_tbl_table_modify_with_get_valhi2_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi2_tbl_table_modify_with_get_valhi2_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi2_tbl_table_modify_with_get_valhi2_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi2_tbl_table_modify_with_get_valhi2_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi2_tbl_table_modify_with_set_and_get_valhi2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi2_tbl_table_modify_with_set_and_get_valhi2", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi2_tbl_table_modify_with_set_and_get_valhi2");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi2_tbl_table_modify_with_set_and_get_valhi2");
  }

  netbufferv4_update_valhi2_tbl_table_modify_with_set_and_get_valhi2_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi2_tbl_table_modify_with_set_and_get_valhi2", bytes);
  }

  netbufferv4_update_valhi2_tbl_table_modify_with_set_and_get_valhi2_result result;
  try {
    iface_->update_valhi2_tbl_table_modify_with_set_and_get_valhi2(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi2_tbl_table_modify_with_set_and_get_valhi2");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi2_tbl_table_modify_with_set_and_get_valhi2", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi2_tbl_table_modify_with_set_and_get_valhi2");
  }

  oprot->writeMessageBegin("update_valhi2_tbl_table_modify_with_set_and_get_valhi2", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi2_tbl_table_modify_with_set_and_get_valhi2", bytes);
  }
}

void netbufferv4Processor::process_update_valhi2_tbl_table_modify_with_set_and_get_valhi2_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi2_tbl_table_modify_with_set_and_get_valhi2_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi2_tbl_table_modify_with_set_and_get_valhi2_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi2_tbl_table_modify_with_set_and_get_valhi2_by_match_spec");
  }

  netbufferv4_update_valhi2_tbl_table_modify_with_set_and_get_valhi2_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi2_tbl_table_modify_with_set_and_get_valhi2_by_match_spec", bytes);
  }

  netbufferv4_update_valhi2_tbl_table_modify_with_set_and_get_valhi2_by_match_spec_result result;
  try {
    iface_->update_valhi2_tbl_table_modify_with_set_and_get_valhi2_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi2_tbl_table_modify_with_set_and_get_valhi2_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi2_tbl_table_modify_with_set_and_get_valhi2_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi2_tbl_table_modify_with_set_and_get_valhi2_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi2_tbl_table_modify_with_set_and_get_valhi2_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi2_tbl_table_modify_with_set_and_get_valhi2_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi2_tbl_table_modify_with_reset_and_get_valhi2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi2_tbl_table_modify_with_reset_and_get_valhi2", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi2_tbl_table_modify_with_reset_and_get_valhi2");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi2_tbl_table_modify_with_reset_and_get_valhi2");
  }

  netbufferv4_update_valhi2_tbl_table_modify_with_reset_and_get_valhi2_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi2_tbl_table_modify_with_reset_and_get_valhi2", bytes);
  }

  netbufferv4_update_valhi2_tbl_table_modify_with_reset_and_get_valhi2_result result;
  try {
    iface_->update_valhi2_tbl_table_modify_with_reset_and_get_valhi2(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi2_tbl_table_modify_with_reset_and_get_valhi2");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi2_tbl_table_modify_with_reset_and_get_valhi2", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi2_tbl_table_modify_with_reset_and_get_valhi2");
  }

  oprot->writeMessageBegin("update_valhi2_tbl_table_modify_with_reset_and_get_valhi2", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi2_tbl_table_modify_with_reset_and_get_valhi2", bytes);
  }
}

void netbufferv4Processor::process_update_valhi2_tbl_table_modify_with_reset_and_get_valhi2_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi2_tbl_table_modify_with_reset_and_get_valhi2_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi2_tbl_table_modify_with_reset_and_get_valhi2_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi2_tbl_table_modify_with_reset_and_get_valhi2_by_match_spec");
  }

  netbufferv4_update_valhi2_tbl_table_modify_with_reset_and_get_valhi2_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi2_tbl_table_modify_with_reset_and_get_valhi2_by_match_spec", bytes);
  }

  netbufferv4_update_valhi2_tbl_table_modify_with_reset_and_get_valhi2_by_match_spec_result result;
  try {
    iface_->update_valhi2_tbl_table_modify_with_reset_and_get_valhi2_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi2_tbl_table_modify_with_reset_and_get_valhi2_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi2_tbl_table_modify_with_reset_and_get_valhi2_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi2_tbl_table_modify_with_reset_and_get_valhi2_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi2_tbl_table_modify_with_reset_and_get_valhi2_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi2_tbl_table_modify_with_reset_and_get_valhi2_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi2_tbl_table_modify_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi2_tbl_table_modify_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi2_tbl_table_modify_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi2_tbl_table_modify_with_nop");
  }

  netbufferv4_update_valhi2_tbl_table_modify_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi2_tbl_table_modify_with_nop", bytes);
  }

  netbufferv4_update_valhi2_tbl_table_modify_with_nop_result result;
  try {
    iface_->update_valhi2_tbl_table_modify_with_nop(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi2_tbl_table_modify_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi2_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi2_tbl_table_modify_with_nop");
  }

  oprot->writeMessageBegin("update_valhi2_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi2_tbl_table_modify_with_nop", bytes);
  }
}

void netbufferv4Processor::process_update_valhi2_tbl_table_modify_with_nop_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi2_tbl_table_modify_with_nop_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi2_tbl_table_modify_with_nop_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi2_tbl_table_modify_with_nop_by_match_spec");
  }

  netbufferv4_update_valhi2_tbl_table_modify_with_nop_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi2_tbl_table_modify_with_nop_by_match_spec", bytes);
  }

  netbufferv4_update_valhi2_tbl_table_modify_with_nop_by_match_spec_result result;
  try {
    iface_->update_valhi2_tbl_table_modify_with_nop_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi2_tbl_table_modify_with_nop_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi2_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi2_tbl_table_modify_with_nop_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi2_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi2_tbl_table_modify_with_nop_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi3_tbl_table_modify_with_get_valhi3(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi3_tbl_table_modify_with_get_valhi3", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi3_tbl_table_modify_with_get_valhi3");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi3_tbl_table_modify_with_get_valhi3");
  }

  netbufferv4_update_valhi3_tbl_table_modify_with_get_valhi3_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi3_tbl_table_modify_with_get_valhi3", bytes);
  }

  netbufferv4_update_valhi3_tbl_table_modify_with_get_valhi3_result result;
  try {
    iface_->update_valhi3_tbl_table_modify_with_get_valhi3(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi3_tbl_table_modify_with_get_valhi3");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi3_tbl_table_modify_with_get_valhi3", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi3_tbl_table_modify_with_get_valhi3");
  }

  oprot->writeMessageBegin("update_valhi3_tbl_table_modify_with_get_valhi3", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi3_tbl_table_modify_with_get_valhi3", bytes);
  }
}

void netbufferv4Processor::process_update_valhi3_tbl_table_modify_with_get_valhi3_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi3_tbl_table_modify_with_get_valhi3_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi3_tbl_table_modify_with_get_valhi3_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi3_tbl_table_modify_with_get_valhi3_by_match_spec");
  }

  netbufferv4_update_valhi3_tbl_table_modify_with_get_valhi3_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi3_tbl_table_modify_with_get_valhi3_by_match_spec", bytes);
  }

  netbufferv4_update_valhi3_tbl_table_modify_with_get_valhi3_by_match_spec_result result;
  try {
    iface_->update_valhi3_tbl_table_modify_with_get_valhi3_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi3_tbl_table_modify_with_get_valhi3_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi3_tbl_table_modify_with_get_valhi3_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi3_tbl_table_modify_with_get_valhi3_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi3_tbl_table_modify_with_get_valhi3_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi3_tbl_table_modify_with_get_valhi3_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi3_tbl_table_modify_with_set_and_get_valhi3(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi3_tbl_table_modify_with_set_and_get_valhi3", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi3_tbl_table_modify_with_set_and_get_valhi3");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi3_tbl_table_modify_with_set_and_get_valhi3");
  }

  netbufferv4_update_valhi3_tbl_table_modify_with_set_and_get_valhi3_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi3_tbl_table_modify_with_set_and_get_valhi3", bytes);
  }

  netbufferv4_update_valhi3_tbl_table_modify_with_set_and_get_valhi3_result result;
  try {
    iface_->update_valhi3_tbl_table_modify_with_set_and_get_valhi3(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi3_tbl_table_modify_with_set_and_get_valhi3");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi3_tbl_table_modify_with_set_and_get_valhi3", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi3_tbl_table_modify_with_set_and_get_valhi3");
  }

  oprot->writeMessageBegin("update_valhi3_tbl_table_modify_with_set_and_get_valhi3", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi3_tbl_table_modify_with_set_and_get_valhi3", bytes);
  }
}

void netbufferv4Processor::process_update_valhi3_tbl_table_modify_with_set_and_get_valhi3_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi3_tbl_table_modify_with_set_and_get_valhi3_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi3_tbl_table_modify_with_set_and_get_valhi3_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi3_tbl_table_modify_with_set_and_get_valhi3_by_match_spec");
  }

  netbufferv4_update_valhi3_tbl_table_modify_with_set_and_get_valhi3_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi3_tbl_table_modify_with_set_and_get_valhi3_by_match_spec", bytes);
  }

  netbufferv4_update_valhi3_tbl_table_modify_with_set_and_get_valhi3_by_match_spec_result result;
  try {
    iface_->update_valhi3_tbl_table_modify_with_set_and_get_valhi3_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi3_tbl_table_modify_with_set_and_get_valhi3_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi3_tbl_table_modify_with_set_and_get_valhi3_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi3_tbl_table_modify_with_set_and_get_valhi3_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi3_tbl_table_modify_with_set_and_get_valhi3_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi3_tbl_table_modify_with_set_and_get_valhi3_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi3_tbl_table_modify_with_reset_and_get_valhi3(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi3_tbl_table_modify_with_reset_and_get_valhi3", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi3_tbl_table_modify_with_reset_and_get_valhi3");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi3_tbl_table_modify_with_reset_and_get_valhi3");
  }

  netbufferv4_update_valhi3_tbl_table_modify_with_reset_and_get_valhi3_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi3_tbl_table_modify_with_reset_and_get_valhi3", bytes);
  }

  netbufferv4_update_valhi3_tbl_table_modify_with_reset_and_get_valhi3_result result;
  try {
    iface_->update_valhi3_tbl_table_modify_with_reset_and_get_valhi3(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi3_tbl_table_modify_with_reset_and_get_valhi3");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi3_tbl_table_modify_with_reset_and_get_valhi3", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi3_tbl_table_modify_with_reset_and_get_valhi3");
  }

  oprot->writeMessageBegin("update_valhi3_tbl_table_modify_with_reset_and_get_valhi3", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi3_tbl_table_modify_with_reset_and_get_valhi3", bytes);
  }
}

void netbufferv4Processor::process_update_valhi3_tbl_table_modify_with_reset_and_get_valhi3_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi3_tbl_table_modify_with_reset_and_get_valhi3_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi3_tbl_table_modify_with_reset_and_get_valhi3_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi3_tbl_table_modify_with_reset_and_get_valhi3_by_match_spec");
  }

  netbufferv4_update_valhi3_tbl_table_modify_with_reset_and_get_valhi3_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi3_tbl_table_modify_with_reset_and_get_valhi3_by_match_spec", bytes);
  }

  netbufferv4_update_valhi3_tbl_table_modify_with_reset_and_get_valhi3_by_match_spec_result result;
  try {
    iface_->update_valhi3_tbl_table_modify_with_reset_and_get_valhi3_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi3_tbl_table_modify_with_reset_and_get_valhi3_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi3_tbl_table_modify_with_reset_and_get_valhi3_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi3_tbl_table_modify_with_reset_and_get_valhi3_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi3_tbl_table_modify_with_reset_and_get_valhi3_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi3_tbl_table_modify_with_reset_and_get_valhi3_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi3_tbl_table_modify_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi3_tbl_table_modify_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi3_tbl_table_modify_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi3_tbl_table_modify_with_nop");
  }

  netbufferv4_update_valhi3_tbl_table_modify_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi3_tbl_table_modify_with_nop", bytes);
  }

  netbufferv4_update_valhi3_tbl_table_modify_with_nop_result result;
  try {
    iface_->update_valhi3_tbl_table_modify_with_nop(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi3_tbl_table_modify_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi3_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi3_tbl_table_modify_with_nop");
  }

  oprot->writeMessageBegin("update_valhi3_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi3_tbl_table_modify_with_nop", bytes);
  }
}

void netbufferv4Processor::process_update_valhi3_tbl_table_modify_with_nop_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi3_tbl_table_modify_with_nop_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi3_tbl_table_modify_with_nop_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi3_tbl_table_modify_with_nop_by_match_spec");
  }

  netbufferv4_update_valhi3_tbl_table_modify_with_nop_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi3_tbl_table_modify_with_nop_by_match_spec", bytes);
  }

  netbufferv4_update_valhi3_tbl_table_modify_with_nop_by_match_spec_result result;
  try {
    iface_->update_valhi3_tbl_table_modify_with_nop_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi3_tbl_table_modify_with_nop_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi3_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi3_tbl_table_modify_with_nop_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi3_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi3_tbl_table_modify_with_nop_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi4_tbl_table_modify_with_get_valhi4(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi4_tbl_table_modify_with_get_valhi4", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi4_tbl_table_modify_with_get_valhi4");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi4_tbl_table_modify_with_get_valhi4");
  }

  netbufferv4_update_valhi4_tbl_table_modify_with_get_valhi4_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi4_tbl_table_modify_with_get_valhi4", bytes);
  }

  netbufferv4_update_valhi4_tbl_table_modify_with_get_valhi4_result result;
  try {
    iface_->update_valhi4_tbl_table_modify_with_get_valhi4(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi4_tbl_table_modify_with_get_valhi4");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi4_tbl_table_modify_with_get_valhi4", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi4_tbl_table_modify_with_get_valhi4");
  }

  oprot->writeMessageBegin("update_valhi4_tbl_table_modify_with_get_valhi4", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi4_tbl_table_modify_with_get_valhi4", bytes);
  }
}

void netbufferv4Processor::process_update_valhi4_tbl_table_modify_with_get_valhi4_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi4_tbl_table_modify_with_get_valhi4_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi4_tbl_table_modify_with_get_valhi4_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi4_tbl_table_modify_with_get_valhi4_by_match_spec");
  }

  netbufferv4_update_valhi4_tbl_table_modify_with_get_valhi4_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi4_tbl_table_modify_with_get_valhi4_by_match_spec", bytes);
  }

  netbufferv4_update_valhi4_tbl_table_modify_with_get_valhi4_by_match_spec_result result;
  try {
    iface_->update_valhi4_tbl_table_modify_with_get_valhi4_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi4_tbl_table_modify_with_get_valhi4_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi4_tbl_table_modify_with_get_valhi4_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi4_tbl_table_modify_with_get_valhi4_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi4_tbl_table_modify_with_get_valhi4_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi4_tbl_table_modify_with_get_valhi4_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi4_tbl_table_modify_with_set_and_get_valhi4(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi4_tbl_table_modify_with_set_and_get_valhi4", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi4_tbl_table_modify_with_set_and_get_valhi4");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi4_tbl_table_modify_with_set_and_get_valhi4");
  }

  netbufferv4_update_valhi4_tbl_table_modify_with_set_and_get_valhi4_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi4_tbl_table_modify_with_set_and_get_valhi4", bytes);
  }

  netbufferv4_update_valhi4_tbl_table_modify_with_set_and_get_valhi4_result result;
  try {
    iface_->update_valhi4_tbl_table_modify_with_set_and_get_valhi4(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi4_tbl_table_modify_with_set_and_get_valhi4");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi4_tbl_table_modify_with_set_and_get_valhi4", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi4_tbl_table_modify_with_set_and_get_valhi4");
  }

  oprot->writeMessageBegin("update_valhi4_tbl_table_modify_with_set_and_get_valhi4", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi4_tbl_table_modify_with_set_and_get_valhi4", bytes);
  }
}

void netbufferv4Processor::process_update_valhi4_tbl_table_modify_with_set_and_get_valhi4_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi4_tbl_table_modify_with_set_and_get_valhi4_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi4_tbl_table_modify_with_set_and_get_valhi4_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi4_tbl_table_modify_with_set_and_get_valhi4_by_match_spec");
  }

  netbufferv4_update_valhi4_tbl_table_modify_with_set_and_get_valhi4_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi4_tbl_table_modify_with_set_and_get_valhi4_by_match_spec", bytes);
  }

  netbufferv4_update_valhi4_tbl_table_modify_with_set_and_get_valhi4_by_match_spec_result result;
  try {
    iface_->update_valhi4_tbl_table_modify_with_set_and_get_valhi4_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi4_tbl_table_modify_with_set_and_get_valhi4_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi4_tbl_table_modify_with_set_and_get_valhi4_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi4_tbl_table_modify_with_set_and_get_valhi4_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi4_tbl_table_modify_with_set_and_get_valhi4_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi4_tbl_table_modify_with_set_and_get_valhi4_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi4_tbl_table_modify_with_reset_and_get_valhi4(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi4_tbl_table_modify_with_reset_and_get_valhi4", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi4_tbl_table_modify_with_reset_and_get_valhi4");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi4_tbl_table_modify_with_reset_and_get_valhi4");
  }

  netbufferv4_update_valhi4_tbl_table_modify_with_reset_and_get_valhi4_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi4_tbl_table_modify_with_reset_and_get_valhi4", bytes);
  }

  netbufferv4_update_valhi4_tbl_table_modify_with_reset_and_get_valhi4_result result;
  try {
    iface_->update_valhi4_tbl_table_modify_with_reset_and_get_valhi4(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi4_tbl_table_modify_with_reset_and_get_valhi4");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi4_tbl_table_modify_with_reset_and_get_valhi4", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi4_tbl_table_modify_with_reset_and_get_valhi4");
  }

  oprot->writeMessageBegin("update_valhi4_tbl_table_modify_with_reset_and_get_valhi4", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi4_tbl_table_modify_with_reset_and_get_valhi4", bytes);
  }
}

void netbufferv4Processor::process_update_valhi4_tbl_table_modify_with_reset_and_get_valhi4_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi4_tbl_table_modify_with_reset_and_get_valhi4_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi4_tbl_table_modify_with_reset_and_get_valhi4_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi4_tbl_table_modify_with_reset_and_get_valhi4_by_match_spec");
  }

  netbufferv4_update_valhi4_tbl_table_modify_with_reset_and_get_valhi4_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi4_tbl_table_modify_with_reset_and_get_valhi4_by_match_spec", bytes);
  }

  netbufferv4_update_valhi4_tbl_table_modify_with_reset_and_get_valhi4_by_match_spec_result result;
  try {
    iface_->update_valhi4_tbl_table_modify_with_reset_and_get_valhi4_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi4_tbl_table_modify_with_reset_and_get_valhi4_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi4_tbl_table_modify_with_reset_and_get_valhi4_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi4_tbl_table_modify_with_reset_and_get_valhi4_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi4_tbl_table_modify_with_reset_and_get_valhi4_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi4_tbl_table_modify_with_reset_and_get_valhi4_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi4_tbl_table_modify_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi4_tbl_table_modify_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi4_tbl_table_modify_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi4_tbl_table_modify_with_nop");
  }

  netbufferv4_update_valhi4_tbl_table_modify_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi4_tbl_table_modify_with_nop", bytes);
  }

  netbufferv4_update_valhi4_tbl_table_modify_with_nop_result result;
  try {
    iface_->update_valhi4_tbl_table_modify_with_nop(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi4_tbl_table_modify_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi4_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi4_tbl_table_modify_with_nop");
  }

  oprot->writeMessageBegin("update_valhi4_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi4_tbl_table_modify_with_nop", bytes);
  }
}

void netbufferv4Processor::process_update_valhi4_tbl_table_modify_with_nop_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi4_tbl_table_modify_with_nop_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi4_tbl_table_modify_with_nop_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi4_tbl_table_modify_with_nop_by_match_spec");
  }

  netbufferv4_update_valhi4_tbl_table_modify_with_nop_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi4_tbl_table_modify_with_nop_by_match_spec", bytes);
  }

  netbufferv4_update_valhi4_tbl_table_modify_with_nop_by_match_spec_result result;
  try {
    iface_->update_valhi4_tbl_table_modify_with_nop_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi4_tbl_table_modify_with_nop_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi4_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi4_tbl_table_modify_with_nop_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi4_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi4_tbl_table_modify_with_nop_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi5_tbl_table_modify_with_get_valhi5(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi5_tbl_table_modify_with_get_valhi5", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi5_tbl_table_modify_with_get_valhi5");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi5_tbl_table_modify_with_get_valhi5");
  }

  netbufferv4_update_valhi5_tbl_table_modify_with_get_valhi5_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi5_tbl_table_modify_with_get_valhi5", bytes);
  }

  netbufferv4_update_valhi5_tbl_table_modify_with_get_valhi5_result result;
  try {
    iface_->update_valhi5_tbl_table_modify_with_get_valhi5(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi5_tbl_table_modify_with_get_valhi5");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi5_tbl_table_modify_with_get_valhi5", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi5_tbl_table_modify_with_get_valhi5");
  }

  oprot->writeMessageBegin("update_valhi5_tbl_table_modify_with_get_valhi5", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi5_tbl_table_modify_with_get_valhi5", bytes);
  }
}

void netbufferv4Processor::process_update_valhi5_tbl_table_modify_with_get_valhi5_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi5_tbl_table_modify_with_get_valhi5_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi5_tbl_table_modify_with_get_valhi5_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi5_tbl_table_modify_with_get_valhi5_by_match_spec");
  }

  netbufferv4_update_valhi5_tbl_table_modify_with_get_valhi5_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi5_tbl_table_modify_with_get_valhi5_by_match_spec", bytes);
  }

  netbufferv4_update_valhi5_tbl_table_modify_with_get_valhi5_by_match_spec_result result;
  try {
    iface_->update_valhi5_tbl_table_modify_with_get_valhi5_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi5_tbl_table_modify_with_get_valhi5_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi5_tbl_table_modify_with_get_valhi5_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi5_tbl_table_modify_with_get_valhi5_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi5_tbl_table_modify_with_get_valhi5_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi5_tbl_table_modify_with_get_valhi5_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi5_tbl_table_modify_with_set_and_get_valhi5(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi5_tbl_table_modify_with_set_and_get_valhi5", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi5_tbl_table_modify_with_set_and_get_valhi5");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi5_tbl_table_modify_with_set_and_get_valhi5");
  }

  netbufferv4_update_valhi5_tbl_table_modify_with_set_and_get_valhi5_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi5_tbl_table_modify_with_set_and_get_valhi5", bytes);
  }

  netbufferv4_update_valhi5_tbl_table_modify_with_set_and_get_valhi5_result result;
  try {
    iface_->update_valhi5_tbl_table_modify_with_set_and_get_valhi5(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi5_tbl_table_modify_with_set_and_get_valhi5");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi5_tbl_table_modify_with_set_and_get_valhi5", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi5_tbl_table_modify_with_set_and_get_valhi5");
  }

  oprot->writeMessageBegin("update_valhi5_tbl_table_modify_with_set_and_get_valhi5", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi5_tbl_table_modify_with_set_and_get_valhi5", bytes);
  }
}

void netbufferv4Processor::process_update_valhi5_tbl_table_modify_with_set_and_get_valhi5_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi5_tbl_table_modify_with_set_and_get_valhi5_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi5_tbl_table_modify_with_set_and_get_valhi5_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi5_tbl_table_modify_with_set_and_get_valhi5_by_match_spec");
  }

  netbufferv4_update_valhi5_tbl_table_modify_with_set_and_get_valhi5_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi5_tbl_table_modify_with_set_and_get_valhi5_by_match_spec", bytes);
  }

  netbufferv4_update_valhi5_tbl_table_modify_with_set_and_get_valhi5_by_match_spec_result result;
  try {
    iface_->update_valhi5_tbl_table_modify_with_set_and_get_valhi5_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi5_tbl_table_modify_with_set_and_get_valhi5_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi5_tbl_table_modify_with_set_and_get_valhi5_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi5_tbl_table_modify_with_set_and_get_valhi5_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi5_tbl_table_modify_with_set_and_get_valhi5_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi5_tbl_table_modify_with_set_and_get_valhi5_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi5_tbl_table_modify_with_reset_and_get_valhi5(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi5_tbl_table_modify_with_reset_and_get_valhi5", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi5_tbl_table_modify_with_reset_and_get_valhi5");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi5_tbl_table_modify_with_reset_and_get_valhi5");
  }

  netbufferv4_update_valhi5_tbl_table_modify_with_reset_and_get_valhi5_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi5_tbl_table_modify_with_reset_and_get_valhi5", bytes);
  }

  netbufferv4_update_valhi5_tbl_table_modify_with_reset_and_get_valhi5_result result;
  try {
    iface_->update_valhi5_tbl_table_modify_with_reset_and_get_valhi5(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi5_tbl_table_modify_with_reset_and_get_valhi5");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi5_tbl_table_modify_with_reset_and_get_valhi5", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi5_tbl_table_modify_with_reset_and_get_valhi5");
  }

  oprot->writeMessageBegin("update_valhi5_tbl_table_modify_with_reset_and_get_valhi5", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi5_tbl_table_modify_with_reset_and_get_valhi5", bytes);
  }
}

void netbufferv4Processor::process_update_valhi5_tbl_table_modify_with_reset_and_get_valhi5_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi5_tbl_table_modify_with_reset_and_get_valhi5_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi5_tbl_table_modify_with_reset_and_get_valhi5_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi5_tbl_table_modify_with_reset_and_get_valhi5_by_match_spec");
  }

  netbufferv4_update_valhi5_tbl_table_modify_with_reset_and_get_valhi5_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi5_tbl_table_modify_with_reset_and_get_valhi5_by_match_spec", bytes);
  }

  netbufferv4_update_valhi5_tbl_table_modify_with_reset_and_get_valhi5_by_match_spec_result result;
  try {
    iface_->update_valhi5_tbl_table_modify_with_reset_and_get_valhi5_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi5_tbl_table_modify_with_reset_and_get_valhi5_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi5_tbl_table_modify_with_reset_and_get_valhi5_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi5_tbl_table_modify_with_reset_and_get_valhi5_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi5_tbl_table_modify_with_reset_and_get_valhi5_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi5_tbl_table_modify_with_reset_and_get_valhi5_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi5_tbl_table_modify_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi5_tbl_table_modify_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi5_tbl_table_modify_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi5_tbl_table_modify_with_nop");
  }

  netbufferv4_update_valhi5_tbl_table_modify_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi5_tbl_table_modify_with_nop", bytes);
  }

  netbufferv4_update_valhi5_tbl_table_modify_with_nop_result result;
  try {
    iface_->update_valhi5_tbl_table_modify_with_nop(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi5_tbl_table_modify_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi5_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi5_tbl_table_modify_with_nop");
  }

  oprot->writeMessageBegin("update_valhi5_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi5_tbl_table_modify_with_nop", bytes);
  }
}

void netbufferv4Processor::process_update_valhi5_tbl_table_modify_with_nop_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi5_tbl_table_modify_with_nop_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi5_tbl_table_modify_with_nop_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi5_tbl_table_modify_with_nop_by_match_spec");
  }

  netbufferv4_update_valhi5_tbl_table_modify_with_nop_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi5_tbl_table_modify_with_nop_by_match_spec", bytes);
  }

  netbufferv4_update_valhi5_tbl_table_modify_with_nop_by_match_spec_result result;
  try {
    iface_->update_valhi5_tbl_table_modify_with_nop_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi5_tbl_table_modify_with_nop_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi5_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi5_tbl_table_modify_with_nop_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi5_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi5_tbl_table_modify_with_nop_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi6_tbl_table_modify_with_get_valhi6(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi6_tbl_table_modify_with_get_valhi6", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi6_tbl_table_modify_with_get_valhi6");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi6_tbl_table_modify_with_get_valhi6");
  }

  netbufferv4_update_valhi6_tbl_table_modify_with_get_valhi6_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi6_tbl_table_modify_with_get_valhi6", bytes);
  }

  netbufferv4_update_valhi6_tbl_table_modify_with_get_valhi6_result result;
  try {
    iface_->update_valhi6_tbl_table_modify_with_get_valhi6(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi6_tbl_table_modify_with_get_valhi6");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi6_tbl_table_modify_with_get_valhi6", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi6_tbl_table_modify_with_get_valhi6");
  }

  oprot->writeMessageBegin("update_valhi6_tbl_table_modify_with_get_valhi6", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi6_tbl_table_modify_with_get_valhi6", bytes);
  }
}

void netbufferv4Processor::process_update_valhi6_tbl_table_modify_with_get_valhi6_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi6_tbl_table_modify_with_get_valhi6_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi6_tbl_table_modify_with_get_valhi6_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi6_tbl_table_modify_with_get_valhi6_by_match_spec");
  }

  netbufferv4_update_valhi6_tbl_table_modify_with_get_valhi6_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi6_tbl_table_modify_with_get_valhi6_by_match_spec", bytes);
  }

  netbufferv4_update_valhi6_tbl_table_modify_with_get_valhi6_by_match_spec_result result;
  try {
    iface_->update_valhi6_tbl_table_modify_with_get_valhi6_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi6_tbl_table_modify_with_get_valhi6_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi6_tbl_table_modify_with_get_valhi6_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi6_tbl_table_modify_with_get_valhi6_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi6_tbl_table_modify_with_get_valhi6_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi6_tbl_table_modify_with_get_valhi6_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi6_tbl_table_modify_with_set_and_get_valhi6(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi6_tbl_table_modify_with_set_and_get_valhi6", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi6_tbl_table_modify_with_set_and_get_valhi6");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi6_tbl_table_modify_with_set_and_get_valhi6");
  }

  netbufferv4_update_valhi6_tbl_table_modify_with_set_and_get_valhi6_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi6_tbl_table_modify_with_set_and_get_valhi6", bytes);
  }

  netbufferv4_update_valhi6_tbl_table_modify_with_set_and_get_valhi6_result result;
  try {
    iface_->update_valhi6_tbl_table_modify_with_set_and_get_valhi6(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi6_tbl_table_modify_with_set_and_get_valhi6");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi6_tbl_table_modify_with_set_and_get_valhi6", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi6_tbl_table_modify_with_set_and_get_valhi6");
  }

  oprot->writeMessageBegin("update_valhi6_tbl_table_modify_with_set_and_get_valhi6", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi6_tbl_table_modify_with_set_and_get_valhi6", bytes);
  }
}

void netbufferv4Processor::process_update_valhi6_tbl_table_modify_with_set_and_get_valhi6_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi6_tbl_table_modify_with_set_and_get_valhi6_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi6_tbl_table_modify_with_set_and_get_valhi6_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi6_tbl_table_modify_with_set_and_get_valhi6_by_match_spec");
  }

  netbufferv4_update_valhi6_tbl_table_modify_with_set_and_get_valhi6_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi6_tbl_table_modify_with_set_and_get_valhi6_by_match_spec", bytes);
  }

  netbufferv4_update_valhi6_tbl_table_modify_with_set_and_get_valhi6_by_match_spec_result result;
  try {
    iface_->update_valhi6_tbl_table_modify_with_set_and_get_valhi6_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi6_tbl_table_modify_with_set_and_get_valhi6_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi6_tbl_table_modify_with_set_and_get_valhi6_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi6_tbl_table_modify_with_set_and_get_valhi6_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi6_tbl_table_modify_with_set_and_get_valhi6_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi6_tbl_table_modify_with_set_and_get_valhi6_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi6_tbl_table_modify_with_reset_and_get_valhi6(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi6_tbl_table_modify_with_reset_and_get_valhi6", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi6_tbl_table_modify_with_reset_and_get_valhi6");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi6_tbl_table_modify_with_reset_and_get_valhi6");
  }

  netbufferv4_update_valhi6_tbl_table_modify_with_reset_and_get_valhi6_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi6_tbl_table_modify_with_reset_and_get_valhi6", bytes);
  }

  netbufferv4_update_valhi6_tbl_table_modify_with_reset_and_get_valhi6_result result;
  try {
    iface_->update_valhi6_tbl_table_modify_with_reset_and_get_valhi6(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi6_tbl_table_modify_with_reset_and_get_valhi6");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi6_tbl_table_modify_with_reset_and_get_valhi6", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi6_tbl_table_modify_with_reset_and_get_valhi6");
  }

  oprot->writeMessageBegin("update_valhi6_tbl_table_modify_with_reset_and_get_valhi6", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi6_tbl_table_modify_with_reset_and_get_valhi6", bytes);
  }
}

void netbufferv4Processor::process_update_valhi6_tbl_table_modify_with_reset_and_get_valhi6_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi6_tbl_table_modify_with_reset_and_get_valhi6_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi6_tbl_table_modify_with_reset_and_get_valhi6_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi6_tbl_table_modify_with_reset_and_get_valhi6_by_match_spec");
  }

  netbufferv4_update_valhi6_tbl_table_modify_with_reset_and_get_valhi6_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi6_tbl_table_modify_with_reset_and_get_valhi6_by_match_spec", bytes);
  }

  netbufferv4_update_valhi6_tbl_table_modify_with_reset_and_get_valhi6_by_match_spec_result result;
  try {
    iface_->update_valhi6_tbl_table_modify_with_reset_and_get_valhi6_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi6_tbl_table_modify_with_reset_and_get_valhi6_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi6_tbl_table_modify_with_reset_and_get_valhi6_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi6_tbl_table_modify_with_reset_and_get_valhi6_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi6_tbl_table_modify_with_reset_and_get_valhi6_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi6_tbl_table_modify_with_reset_and_get_valhi6_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi6_tbl_table_modify_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi6_tbl_table_modify_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi6_tbl_table_modify_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi6_tbl_table_modify_with_nop");
  }

  netbufferv4_update_valhi6_tbl_table_modify_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi6_tbl_table_modify_with_nop", bytes);
  }

  netbufferv4_update_valhi6_tbl_table_modify_with_nop_result result;
  try {
    iface_->update_valhi6_tbl_table_modify_with_nop(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi6_tbl_table_modify_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi6_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi6_tbl_table_modify_with_nop");
  }

  oprot->writeMessageBegin("update_valhi6_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi6_tbl_table_modify_with_nop", bytes);
  }
}

void netbufferv4Processor::process_update_valhi6_tbl_table_modify_with_nop_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi6_tbl_table_modify_with_nop_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi6_tbl_table_modify_with_nop_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi6_tbl_table_modify_with_nop_by_match_spec");
  }

  netbufferv4_update_valhi6_tbl_table_modify_with_nop_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi6_tbl_table_modify_with_nop_by_match_spec", bytes);
  }

  netbufferv4_update_valhi6_tbl_table_modify_with_nop_by_match_spec_result result;
  try {
    iface_->update_valhi6_tbl_table_modify_with_nop_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi6_tbl_table_modify_with_nop_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi6_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi6_tbl_table_modify_with_nop_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi6_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi6_tbl_table_modify_with_nop_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi7_tbl_table_modify_with_get_valhi7(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi7_tbl_table_modify_with_get_valhi7", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi7_tbl_table_modify_with_get_valhi7");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi7_tbl_table_modify_with_get_valhi7");
  }

  netbufferv4_update_valhi7_tbl_table_modify_with_get_valhi7_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi7_tbl_table_modify_with_get_valhi7", bytes);
  }

  netbufferv4_update_valhi7_tbl_table_modify_with_get_valhi7_result result;
  try {
    iface_->update_valhi7_tbl_table_modify_with_get_valhi7(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi7_tbl_table_modify_with_get_valhi7");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi7_tbl_table_modify_with_get_valhi7", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi7_tbl_table_modify_with_get_valhi7");
  }

  oprot->writeMessageBegin("update_valhi7_tbl_table_modify_with_get_valhi7", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi7_tbl_table_modify_with_get_valhi7", bytes);
  }
}

void netbufferv4Processor::process_update_valhi7_tbl_table_modify_with_get_valhi7_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi7_tbl_table_modify_with_get_valhi7_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi7_tbl_table_modify_with_get_valhi7_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi7_tbl_table_modify_with_get_valhi7_by_match_spec");
  }

  netbufferv4_update_valhi7_tbl_table_modify_with_get_valhi7_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi7_tbl_table_modify_with_get_valhi7_by_match_spec", bytes);
  }

  netbufferv4_update_valhi7_tbl_table_modify_with_get_valhi7_by_match_spec_result result;
  try {
    iface_->update_valhi7_tbl_table_modify_with_get_valhi7_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi7_tbl_table_modify_with_get_valhi7_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi7_tbl_table_modify_with_get_valhi7_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi7_tbl_table_modify_with_get_valhi7_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi7_tbl_table_modify_with_get_valhi7_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi7_tbl_table_modify_with_get_valhi7_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi7_tbl_table_modify_with_set_and_get_valhi7(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi7_tbl_table_modify_with_set_and_get_valhi7", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi7_tbl_table_modify_with_set_and_get_valhi7");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi7_tbl_table_modify_with_set_and_get_valhi7");
  }

  netbufferv4_update_valhi7_tbl_table_modify_with_set_and_get_valhi7_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi7_tbl_table_modify_with_set_and_get_valhi7", bytes);
  }

  netbufferv4_update_valhi7_tbl_table_modify_with_set_and_get_valhi7_result result;
  try {
    iface_->update_valhi7_tbl_table_modify_with_set_and_get_valhi7(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi7_tbl_table_modify_with_set_and_get_valhi7");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi7_tbl_table_modify_with_set_and_get_valhi7", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi7_tbl_table_modify_with_set_and_get_valhi7");
  }

  oprot->writeMessageBegin("update_valhi7_tbl_table_modify_with_set_and_get_valhi7", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi7_tbl_table_modify_with_set_and_get_valhi7", bytes);
  }
}

void netbufferv4Processor::process_update_valhi7_tbl_table_modify_with_set_and_get_valhi7_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi7_tbl_table_modify_with_set_and_get_valhi7_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi7_tbl_table_modify_with_set_and_get_valhi7_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi7_tbl_table_modify_with_set_and_get_valhi7_by_match_spec");
  }

  netbufferv4_update_valhi7_tbl_table_modify_with_set_and_get_valhi7_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi7_tbl_table_modify_with_set_and_get_valhi7_by_match_spec", bytes);
  }

  netbufferv4_update_valhi7_tbl_table_modify_with_set_and_get_valhi7_by_match_spec_result result;
  try {
    iface_->update_valhi7_tbl_table_modify_with_set_and_get_valhi7_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi7_tbl_table_modify_with_set_and_get_valhi7_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi7_tbl_table_modify_with_set_and_get_valhi7_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi7_tbl_table_modify_with_set_and_get_valhi7_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi7_tbl_table_modify_with_set_and_get_valhi7_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi7_tbl_table_modify_with_set_and_get_valhi7_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi7_tbl_table_modify_with_reset_and_get_valhi7(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi7_tbl_table_modify_with_reset_and_get_valhi7", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi7_tbl_table_modify_with_reset_and_get_valhi7");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi7_tbl_table_modify_with_reset_and_get_valhi7");
  }

  netbufferv4_update_valhi7_tbl_table_modify_with_reset_and_get_valhi7_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi7_tbl_table_modify_with_reset_and_get_valhi7", bytes);
  }

  netbufferv4_update_valhi7_tbl_table_modify_with_reset_and_get_valhi7_result result;
  try {
    iface_->update_valhi7_tbl_table_modify_with_reset_and_get_valhi7(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi7_tbl_table_modify_with_reset_and_get_valhi7");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi7_tbl_table_modify_with_reset_and_get_valhi7", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi7_tbl_table_modify_with_reset_and_get_valhi7");
  }

  oprot->writeMessageBegin("update_valhi7_tbl_table_modify_with_reset_and_get_valhi7", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi7_tbl_table_modify_with_reset_and_get_valhi7", bytes);
  }
}

void netbufferv4Processor::process_update_valhi7_tbl_table_modify_with_reset_and_get_valhi7_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi7_tbl_table_modify_with_reset_and_get_valhi7_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi7_tbl_table_modify_with_reset_and_get_valhi7_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi7_tbl_table_modify_with_reset_and_get_valhi7_by_match_spec");
  }

  netbufferv4_update_valhi7_tbl_table_modify_with_reset_and_get_valhi7_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi7_tbl_table_modify_with_reset_and_get_valhi7_by_match_spec", bytes);
  }

  netbufferv4_update_valhi7_tbl_table_modify_with_reset_and_get_valhi7_by_match_spec_result result;
  try {
    iface_->update_valhi7_tbl_table_modify_with_reset_and_get_valhi7_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi7_tbl_table_modify_with_reset_and_get_valhi7_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi7_tbl_table_modify_with_reset_and_get_valhi7_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi7_tbl_table_modify_with_reset_and_get_valhi7_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi7_tbl_table_modify_with_reset_and_get_valhi7_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi7_tbl_table_modify_with_reset_and_get_valhi7_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi7_tbl_table_modify_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi7_tbl_table_modify_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi7_tbl_table_modify_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi7_tbl_table_modify_with_nop");
  }

  netbufferv4_update_valhi7_tbl_table_modify_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi7_tbl_table_modify_with_nop", bytes);
  }

  netbufferv4_update_valhi7_tbl_table_modify_with_nop_result result;
  try {
    iface_->update_valhi7_tbl_table_modify_with_nop(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi7_tbl_table_modify_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi7_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi7_tbl_table_modify_with_nop");
  }

  oprot->writeMessageBegin("update_valhi7_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi7_tbl_table_modify_with_nop", bytes);
  }
}

void netbufferv4Processor::process_update_valhi7_tbl_table_modify_with_nop_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi7_tbl_table_modify_with_nop_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi7_tbl_table_modify_with_nop_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi7_tbl_table_modify_with_nop_by_match_spec");
  }

  netbufferv4_update_valhi7_tbl_table_modify_with_nop_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi7_tbl_table_modify_with_nop_by_match_spec", bytes);
  }

  netbufferv4_update_valhi7_tbl_table_modify_with_nop_by_match_spec_result result;
  try {
    iface_->update_valhi7_tbl_table_modify_with_nop_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi7_tbl_table_modify_with_nop_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi7_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi7_tbl_table_modify_with_nop_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi7_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi7_tbl_table_modify_with_nop_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi8_tbl_table_modify_with_get_valhi8(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi8_tbl_table_modify_with_get_valhi8", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi8_tbl_table_modify_with_get_valhi8");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi8_tbl_table_modify_with_get_valhi8");
  }

  netbufferv4_update_valhi8_tbl_table_modify_with_get_valhi8_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi8_tbl_table_modify_with_get_valhi8", bytes);
  }

  netbufferv4_update_valhi8_tbl_table_modify_with_get_valhi8_result result;
  try {
    iface_->update_valhi8_tbl_table_modify_with_get_valhi8(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi8_tbl_table_modify_with_get_valhi8");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi8_tbl_table_modify_with_get_valhi8", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi8_tbl_table_modify_with_get_valhi8");
  }

  oprot->writeMessageBegin("update_valhi8_tbl_table_modify_with_get_valhi8", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi8_tbl_table_modify_with_get_valhi8", bytes);
  }
}

void netbufferv4Processor::process_update_valhi8_tbl_table_modify_with_get_valhi8_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi8_tbl_table_modify_with_get_valhi8_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi8_tbl_table_modify_with_get_valhi8_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi8_tbl_table_modify_with_get_valhi8_by_match_spec");
  }

  netbufferv4_update_valhi8_tbl_table_modify_with_get_valhi8_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi8_tbl_table_modify_with_get_valhi8_by_match_spec", bytes);
  }

  netbufferv4_update_valhi8_tbl_table_modify_with_get_valhi8_by_match_spec_result result;
  try {
    iface_->update_valhi8_tbl_table_modify_with_get_valhi8_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi8_tbl_table_modify_with_get_valhi8_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi8_tbl_table_modify_with_get_valhi8_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi8_tbl_table_modify_with_get_valhi8_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi8_tbl_table_modify_with_get_valhi8_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi8_tbl_table_modify_with_get_valhi8_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi8_tbl_table_modify_with_set_and_get_valhi8(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi8_tbl_table_modify_with_set_and_get_valhi8", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi8_tbl_table_modify_with_set_and_get_valhi8");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi8_tbl_table_modify_with_set_and_get_valhi8");
  }

  netbufferv4_update_valhi8_tbl_table_modify_with_set_and_get_valhi8_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi8_tbl_table_modify_with_set_and_get_valhi8", bytes);
  }

  netbufferv4_update_valhi8_tbl_table_modify_with_set_and_get_valhi8_result result;
  try {
    iface_->update_valhi8_tbl_table_modify_with_set_and_get_valhi8(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi8_tbl_table_modify_with_set_and_get_valhi8");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi8_tbl_table_modify_with_set_and_get_valhi8", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi8_tbl_table_modify_with_set_and_get_valhi8");
  }

  oprot->writeMessageBegin("update_valhi8_tbl_table_modify_with_set_and_get_valhi8", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi8_tbl_table_modify_with_set_and_get_valhi8", bytes);
  }
}

void netbufferv4Processor::process_update_valhi8_tbl_table_modify_with_set_and_get_valhi8_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi8_tbl_table_modify_with_set_and_get_valhi8_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi8_tbl_table_modify_with_set_and_get_valhi8_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi8_tbl_table_modify_with_set_and_get_valhi8_by_match_spec");
  }

  netbufferv4_update_valhi8_tbl_table_modify_with_set_and_get_valhi8_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi8_tbl_table_modify_with_set_and_get_valhi8_by_match_spec", bytes);
  }

  netbufferv4_update_valhi8_tbl_table_modify_with_set_and_get_valhi8_by_match_spec_result result;
  try {
    iface_->update_valhi8_tbl_table_modify_with_set_and_get_valhi8_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi8_tbl_table_modify_with_set_and_get_valhi8_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi8_tbl_table_modify_with_set_and_get_valhi8_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi8_tbl_table_modify_with_set_and_get_valhi8_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi8_tbl_table_modify_with_set_and_get_valhi8_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi8_tbl_table_modify_with_set_and_get_valhi8_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi8_tbl_table_modify_with_reset_and_get_valhi8(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi8_tbl_table_modify_with_reset_and_get_valhi8", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi8_tbl_table_modify_with_reset_and_get_valhi8");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi8_tbl_table_modify_with_reset_and_get_valhi8");
  }

  netbufferv4_update_valhi8_tbl_table_modify_with_reset_and_get_valhi8_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi8_tbl_table_modify_with_reset_and_get_valhi8", bytes);
  }

  netbufferv4_update_valhi8_tbl_table_modify_with_reset_and_get_valhi8_result result;
  try {
    iface_->update_valhi8_tbl_table_modify_with_reset_and_get_valhi8(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi8_tbl_table_modify_with_reset_and_get_valhi8");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi8_tbl_table_modify_with_reset_and_get_valhi8", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi8_tbl_table_modify_with_reset_and_get_valhi8");
  }

  oprot->writeMessageBegin("update_valhi8_tbl_table_modify_with_reset_and_get_valhi8", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi8_tbl_table_modify_with_reset_and_get_valhi8", bytes);
  }
}

void netbufferv4Processor::process_update_valhi8_tbl_table_modify_with_reset_and_get_valhi8_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi8_tbl_table_modify_with_reset_and_get_valhi8_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi8_tbl_table_modify_with_reset_and_get_valhi8_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi8_tbl_table_modify_with_reset_and_get_valhi8_by_match_spec");
  }

  netbufferv4_update_valhi8_tbl_table_modify_with_reset_and_get_valhi8_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi8_tbl_table_modify_with_reset_and_get_valhi8_by_match_spec", bytes);
  }

  netbufferv4_update_valhi8_tbl_table_modify_with_reset_and_get_valhi8_by_match_spec_result result;
  try {
    iface_->update_valhi8_tbl_table_modify_with_reset_and_get_valhi8_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi8_tbl_table_modify_with_reset_and_get_valhi8_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi8_tbl_table_modify_with_reset_and_get_valhi8_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi8_tbl_table_modify_with_reset_and_get_valhi8_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi8_tbl_table_modify_with_reset_and_get_valhi8_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi8_tbl_table_modify_with_reset_and_get_valhi8_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi8_tbl_table_modify_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi8_tbl_table_modify_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi8_tbl_table_modify_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi8_tbl_table_modify_with_nop");
  }

  netbufferv4_update_valhi8_tbl_table_modify_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi8_tbl_table_modify_with_nop", bytes);
  }

  netbufferv4_update_valhi8_tbl_table_modify_with_nop_result result;
  try {
    iface_->update_valhi8_tbl_table_modify_with_nop(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi8_tbl_table_modify_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi8_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi8_tbl_table_modify_with_nop");
  }

  oprot->writeMessageBegin("update_valhi8_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi8_tbl_table_modify_with_nop", bytes);
  }
}

void netbufferv4Processor::process_update_valhi8_tbl_table_modify_with_nop_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi8_tbl_table_modify_with_nop_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi8_tbl_table_modify_with_nop_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi8_tbl_table_modify_with_nop_by_match_spec");
  }

  netbufferv4_update_valhi8_tbl_table_modify_with_nop_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi8_tbl_table_modify_with_nop_by_match_spec", bytes);
  }

  netbufferv4_update_valhi8_tbl_table_modify_with_nop_by_match_spec_result result;
  try {
    iface_->update_valhi8_tbl_table_modify_with_nop_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi8_tbl_table_modify_with_nop_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi8_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi8_tbl_table_modify_with_nop_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi8_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi8_tbl_table_modify_with_nop_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi9_tbl_table_modify_with_get_valhi9(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi9_tbl_table_modify_with_get_valhi9", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi9_tbl_table_modify_with_get_valhi9");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi9_tbl_table_modify_with_get_valhi9");
  }

  netbufferv4_update_valhi9_tbl_table_modify_with_get_valhi9_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi9_tbl_table_modify_with_get_valhi9", bytes);
  }

  netbufferv4_update_valhi9_tbl_table_modify_with_get_valhi9_result result;
  try {
    iface_->update_valhi9_tbl_table_modify_with_get_valhi9(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi9_tbl_table_modify_with_get_valhi9");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi9_tbl_table_modify_with_get_valhi9", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi9_tbl_table_modify_with_get_valhi9");
  }

  oprot->writeMessageBegin("update_valhi9_tbl_table_modify_with_get_valhi9", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi9_tbl_table_modify_with_get_valhi9", bytes);
  }
}

void netbufferv4Processor::process_update_valhi9_tbl_table_modify_with_get_valhi9_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi9_tbl_table_modify_with_get_valhi9_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi9_tbl_table_modify_with_get_valhi9_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi9_tbl_table_modify_with_get_valhi9_by_match_spec");
  }

  netbufferv4_update_valhi9_tbl_table_modify_with_get_valhi9_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi9_tbl_table_modify_with_get_valhi9_by_match_spec", bytes);
  }

  netbufferv4_update_valhi9_tbl_table_modify_with_get_valhi9_by_match_spec_result result;
  try {
    iface_->update_valhi9_tbl_table_modify_with_get_valhi9_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi9_tbl_table_modify_with_get_valhi9_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi9_tbl_table_modify_with_get_valhi9_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi9_tbl_table_modify_with_get_valhi9_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi9_tbl_table_modify_with_get_valhi9_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi9_tbl_table_modify_with_get_valhi9_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi9_tbl_table_modify_with_set_and_get_valhi9(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi9_tbl_table_modify_with_set_and_get_valhi9", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi9_tbl_table_modify_with_set_and_get_valhi9");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi9_tbl_table_modify_with_set_and_get_valhi9");
  }

  netbufferv4_update_valhi9_tbl_table_modify_with_set_and_get_valhi9_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi9_tbl_table_modify_with_set_and_get_valhi9", bytes);
  }

  netbufferv4_update_valhi9_tbl_table_modify_with_set_and_get_valhi9_result result;
  try {
    iface_->update_valhi9_tbl_table_modify_with_set_and_get_valhi9(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi9_tbl_table_modify_with_set_and_get_valhi9");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi9_tbl_table_modify_with_set_and_get_valhi9", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi9_tbl_table_modify_with_set_and_get_valhi9");
  }

  oprot->writeMessageBegin("update_valhi9_tbl_table_modify_with_set_and_get_valhi9", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi9_tbl_table_modify_with_set_and_get_valhi9", bytes);
  }
}

void netbufferv4Processor::process_update_valhi9_tbl_table_modify_with_set_and_get_valhi9_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi9_tbl_table_modify_with_set_and_get_valhi9_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi9_tbl_table_modify_with_set_and_get_valhi9_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi9_tbl_table_modify_with_set_and_get_valhi9_by_match_spec");
  }

  netbufferv4_update_valhi9_tbl_table_modify_with_set_and_get_valhi9_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi9_tbl_table_modify_with_set_and_get_valhi9_by_match_spec", bytes);
  }

  netbufferv4_update_valhi9_tbl_table_modify_with_set_and_get_valhi9_by_match_spec_result result;
  try {
    iface_->update_valhi9_tbl_table_modify_with_set_and_get_valhi9_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi9_tbl_table_modify_with_set_and_get_valhi9_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi9_tbl_table_modify_with_set_and_get_valhi9_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi9_tbl_table_modify_with_set_and_get_valhi9_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi9_tbl_table_modify_with_set_and_get_valhi9_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi9_tbl_table_modify_with_set_and_get_valhi9_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi9_tbl_table_modify_with_reset_and_get_valhi9(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi9_tbl_table_modify_with_reset_and_get_valhi9", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi9_tbl_table_modify_with_reset_and_get_valhi9");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi9_tbl_table_modify_with_reset_and_get_valhi9");
  }

  netbufferv4_update_valhi9_tbl_table_modify_with_reset_and_get_valhi9_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi9_tbl_table_modify_with_reset_and_get_valhi9", bytes);
  }

  netbufferv4_update_valhi9_tbl_table_modify_with_reset_and_get_valhi9_result result;
  try {
    iface_->update_valhi9_tbl_table_modify_with_reset_and_get_valhi9(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi9_tbl_table_modify_with_reset_and_get_valhi9");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi9_tbl_table_modify_with_reset_and_get_valhi9", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi9_tbl_table_modify_with_reset_and_get_valhi9");
  }

  oprot->writeMessageBegin("update_valhi9_tbl_table_modify_with_reset_and_get_valhi9", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi9_tbl_table_modify_with_reset_and_get_valhi9", bytes);
  }
}

void netbufferv4Processor::process_update_valhi9_tbl_table_modify_with_reset_and_get_valhi9_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi9_tbl_table_modify_with_reset_and_get_valhi9_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi9_tbl_table_modify_with_reset_and_get_valhi9_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi9_tbl_table_modify_with_reset_and_get_valhi9_by_match_spec");
  }

  netbufferv4_update_valhi9_tbl_table_modify_with_reset_and_get_valhi9_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi9_tbl_table_modify_with_reset_and_get_valhi9_by_match_spec", bytes);
  }

  netbufferv4_update_valhi9_tbl_table_modify_with_reset_and_get_valhi9_by_match_spec_result result;
  try {
    iface_->update_valhi9_tbl_table_modify_with_reset_and_get_valhi9_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi9_tbl_table_modify_with_reset_and_get_valhi9_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi9_tbl_table_modify_with_reset_and_get_valhi9_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi9_tbl_table_modify_with_reset_and_get_valhi9_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi9_tbl_table_modify_with_reset_and_get_valhi9_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi9_tbl_table_modify_with_reset_and_get_valhi9_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi9_tbl_table_modify_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi9_tbl_table_modify_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi9_tbl_table_modify_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi9_tbl_table_modify_with_nop");
  }

  netbufferv4_update_valhi9_tbl_table_modify_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi9_tbl_table_modify_with_nop", bytes);
  }

  netbufferv4_update_valhi9_tbl_table_modify_with_nop_result result;
  try {
    iface_->update_valhi9_tbl_table_modify_with_nop(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi9_tbl_table_modify_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi9_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi9_tbl_table_modify_with_nop");
  }

  oprot->writeMessageBegin("update_valhi9_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi9_tbl_table_modify_with_nop", bytes);
  }
}

void netbufferv4Processor::process_update_valhi9_tbl_table_modify_with_nop_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi9_tbl_table_modify_with_nop_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi9_tbl_table_modify_with_nop_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi9_tbl_table_modify_with_nop_by_match_spec");
  }

  netbufferv4_update_valhi9_tbl_table_modify_with_nop_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi9_tbl_table_modify_with_nop_by_match_spec", bytes);
  }

  netbufferv4_update_valhi9_tbl_table_modify_with_nop_by_match_spec_result result;
  try {
    iface_->update_valhi9_tbl_table_modify_with_nop_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi9_tbl_table_modify_with_nop_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi9_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi9_tbl_table_modify_with_nop_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi9_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi9_tbl_table_modify_with_nop_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallen_tbl_table_modify_with_get_vallen(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallen_tbl_table_modify_with_get_vallen", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallen_tbl_table_modify_with_get_vallen");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallen_tbl_table_modify_with_get_vallen");
  }

  netbufferv4_update_vallen_tbl_table_modify_with_get_vallen_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallen_tbl_table_modify_with_get_vallen", bytes);
  }

  netbufferv4_update_vallen_tbl_table_modify_with_get_vallen_result result;
  try {
    iface_->update_vallen_tbl_table_modify_with_get_vallen(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallen_tbl_table_modify_with_get_vallen");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallen_tbl_table_modify_with_get_vallen", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallen_tbl_table_modify_with_get_vallen");
  }

  oprot->writeMessageBegin("update_vallen_tbl_table_modify_with_get_vallen", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallen_tbl_table_modify_with_get_vallen", bytes);
  }
}

void netbufferv4Processor::process_update_vallen_tbl_table_modify_with_get_vallen_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallen_tbl_table_modify_with_get_vallen_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallen_tbl_table_modify_with_get_vallen_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallen_tbl_table_modify_with_get_vallen_by_match_spec");
  }

  netbufferv4_update_vallen_tbl_table_modify_with_get_vallen_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallen_tbl_table_modify_with_get_vallen_by_match_spec", bytes);
  }

  netbufferv4_update_vallen_tbl_table_modify_with_get_vallen_by_match_spec_result result;
  try {
    iface_->update_vallen_tbl_table_modify_with_get_vallen_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallen_tbl_table_modify_with_get_vallen_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallen_tbl_table_modify_with_get_vallen_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallen_tbl_table_modify_with_get_vallen_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallen_tbl_table_modify_with_get_vallen_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallen_tbl_table_modify_with_get_vallen_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallen_tbl_table_modify_with_set_and_get_vallen(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallen_tbl_table_modify_with_set_and_get_vallen", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallen_tbl_table_modify_with_set_and_get_vallen");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallen_tbl_table_modify_with_set_and_get_vallen");
  }

  netbufferv4_update_vallen_tbl_table_modify_with_set_and_get_vallen_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallen_tbl_table_modify_with_set_and_get_vallen", bytes);
  }

  netbufferv4_update_vallen_tbl_table_modify_with_set_and_get_vallen_result result;
  try {
    iface_->update_vallen_tbl_table_modify_with_set_and_get_vallen(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallen_tbl_table_modify_with_set_and_get_vallen");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallen_tbl_table_modify_with_set_and_get_vallen", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallen_tbl_table_modify_with_set_and_get_vallen");
  }

  oprot->writeMessageBegin("update_vallen_tbl_table_modify_with_set_and_get_vallen", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallen_tbl_table_modify_with_set_and_get_vallen", bytes);
  }
}

void netbufferv4Processor::process_update_vallen_tbl_table_modify_with_set_and_get_vallen_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallen_tbl_table_modify_with_set_and_get_vallen_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallen_tbl_table_modify_with_set_and_get_vallen_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallen_tbl_table_modify_with_set_and_get_vallen_by_match_spec");
  }

  netbufferv4_update_vallen_tbl_table_modify_with_set_and_get_vallen_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallen_tbl_table_modify_with_set_and_get_vallen_by_match_spec", bytes);
  }

  netbufferv4_update_vallen_tbl_table_modify_with_set_and_get_vallen_by_match_spec_result result;
  try {
    iface_->update_vallen_tbl_table_modify_with_set_and_get_vallen_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallen_tbl_table_modify_with_set_and_get_vallen_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallen_tbl_table_modify_with_set_and_get_vallen_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallen_tbl_table_modify_with_set_and_get_vallen_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallen_tbl_table_modify_with_set_and_get_vallen_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallen_tbl_table_modify_with_set_and_get_vallen_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallen_tbl_table_modify_with_reset_and_get_vallen(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallen_tbl_table_modify_with_reset_and_get_vallen", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallen_tbl_table_modify_with_reset_and_get_vallen");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallen_tbl_table_modify_with_reset_and_get_vallen");
  }

  netbufferv4_update_vallen_tbl_table_modify_with_reset_and_get_vallen_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallen_tbl_table_modify_with_reset_and_get_vallen", bytes);
  }

  netbufferv4_update_vallen_tbl_table_modify_with_reset_and_get_vallen_result result;
  try {
    iface_->update_vallen_tbl_table_modify_with_reset_and_get_vallen(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallen_tbl_table_modify_with_reset_and_get_vallen");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallen_tbl_table_modify_with_reset_and_get_vallen", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallen_tbl_table_modify_with_reset_and_get_vallen");
  }

  oprot->writeMessageBegin("update_vallen_tbl_table_modify_with_reset_and_get_vallen", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallen_tbl_table_modify_with_reset_and_get_vallen", bytes);
  }
}

void netbufferv4Processor::process_update_vallen_tbl_table_modify_with_reset_and_get_vallen_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallen_tbl_table_modify_with_reset_and_get_vallen_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallen_tbl_table_modify_with_reset_and_get_vallen_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallen_tbl_table_modify_with_reset_and_get_vallen_by_match_spec");
  }

  netbufferv4_update_vallen_tbl_table_modify_with_reset_and_get_vallen_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallen_tbl_table_modify_with_reset_and_get_vallen_by_match_spec", bytes);
  }

  netbufferv4_update_vallen_tbl_table_modify_with_reset_and_get_vallen_by_match_spec_result result;
  try {
    iface_->update_vallen_tbl_table_modify_with_reset_and_get_vallen_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallen_tbl_table_modify_with_reset_and_get_vallen_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallen_tbl_table_modify_with_reset_and_get_vallen_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallen_tbl_table_modify_with_reset_and_get_vallen_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallen_tbl_table_modify_with_reset_and_get_vallen_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallen_tbl_table_modify_with_reset_and_get_vallen_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallen_tbl_table_modify_with_reset_access_val_mode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallen_tbl_table_modify_with_reset_access_val_mode", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallen_tbl_table_modify_with_reset_access_val_mode");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallen_tbl_table_modify_with_reset_access_val_mode");
  }

  netbufferv4_update_vallen_tbl_table_modify_with_reset_access_val_mode_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallen_tbl_table_modify_with_reset_access_val_mode", bytes);
  }

  netbufferv4_update_vallen_tbl_table_modify_with_reset_access_val_mode_result result;
  try {
    iface_->update_vallen_tbl_table_modify_with_reset_access_val_mode(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallen_tbl_table_modify_with_reset_access_val_mode");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallen_tbl_table_modify_with_reset_access_val_mode", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallen_tbl_table_modify_with_reset_access_val_mode");
  }

  oprot->writeMessageBegin("update_vallen_tbl_table_modify_with_reset_access_val_mode", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallen_tbl_table_modify_with_reset_access_val_mode", bytes);
  }
}

void netbufferv4Processor::process_update_vallen_tbl_table_modify_with_reset_access_val_mode_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallen_tbl_table_modify_with_reset_access_val_mode_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallen_tbl_table_modify_with_reset_access_val_mode_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallen_tbl_table_modify_with_reset_access_val_mode_by_match_spec");
  }

  netbufferv4_update_vallen_tbl_table_modify_with_reset_access_val_mode_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallen_tbl_table_modify_with_reset_access_val_mode_by_match_spec", bytes);
  }

  netbufferv4_update_vallen_tbl_table_modify_with_reset_access_val_mode_by_match_spec_result result;
  try {
    iface_->update_vallen_tbl_table_modify_with_reset_access_val_mode_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallen_tbl_table_modify_with_reset_access_val_mode_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallen_tbl_table_modify_with_reset_access_val_mode_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallen_tbl_table_modify_with_reset_access_val_mode_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallen_tbl_table_modify_with_reset_access_val_mode_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallen_tbl_table_modify_with_reset_access_val_mode_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallen_tbl_table_modify_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallen_tbl_table_modify_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallen_tbl_table_modify_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallen_tbl_table_modify_with_nop");
  }

  netbufferv4_update_vallen_tbl_table_modify_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallen_tbl_table_modify_with_nop", bytes);
  }

  netbufferv4_update_vallen_tbl_table_modify_with_nop_result result;
  try {
    iface_->update_vallen_tbl_table_modify_with_nop(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallen_tbl_table_modify_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallen_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallen_tbl_table_modify_with_nop");
  }

  oprot->writeMessageBegin("update_vallen_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallen_tbl_table_modify_with_nop", bytes);
  }
}

void netbufferv4Processor::process_update_vallen_tbl_table_modify_with_nop_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallen_tbl_table_modify_with_nop_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallen_tbl_table_modify_with_nop_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallen_tbl_table_modify_with_nop_by_match_spec");
  }

  netbufferv4_update_vallen_tbl_table_modify_with_nop_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallen_tbl_table_modify_with_nop_by_match_spec", bytes);
  }

  netbufferv4_update_vallen_tbl_table_modify_with_nop_by_match_spec_result result;
  try {
    iface_->update_vallen_tbl_table_modify_with_nop_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallen_tbl_table_modify_with_nop_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallen_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallen_tbl_table_modify_with_nop_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallen_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallen_tbl_table_modify_with_nop_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo10_tbl_table_modify_with_get_vallo10(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo10_tbl_table_modify_with_get_vallo10", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo10_tbl_table_modify_with_get_vallo10");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo10_tbl_table_modify_with_get_vallo10");
  }

  netbufferv4_update_vallo10_tbl_table_modify_with_get_vallo10_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo10_tbl_table_modify_with_get_vallo10", bytes);
  }

  netbufferv4_update_vallo10_tbl_table_modify_with_get_vallo10_result result;
  try {
    iface_->update_vallo10_tbl_table_modify_with_get_vallo10(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo10_tbl_table_modify_with_get_vallo10");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo10_tbl_table_modify_with_get_vallo10", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo10_tbl_table_modify_with_get_vallo10");
  }

  oprot->writeMessageBegin("update_vallo10_tbl_table_modify_with_get_vallo10", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo10_tbl_table_modify_with_get_vallo10", bytes);
  }
}

void netbufferv4Processor::process_update_vallo10_tbl_table_modify_with_get_vallo10_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo10_tbl_table_modify_with_get_vallo10_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo10_tbl_table_modify_with_get_vallo10_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo10_tbl_table_modify_with_get_vallo10_by_match_spec");
  }

  netbufferv4_update_vallo10_tbl_table_modify_with_get_vallo10_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo10_tbl_table_modify_with_get_vallo10_by_match_spec", bytes);
  }

  netbufferv4_update_vallo10_tbl_table_modify_with_get_vallo10_by_match_spec_result result;
  try {
    iface_->update_vallo10_tbl_table_modify_with_get_vallo10_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo10_tbl_table_modify_with_get_vallo10_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo10_tbl_table_modify_with_get_vallo10_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo10_tbl_table_modify_with_get_vallo10_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo10_tbl_table_modify_with_get_vallo10_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo10_tbl_table_modify_with_get_vallo10_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo10_tbl_table_modify_with_set_and_get_vallo10(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo10_tbl_table_modify_with_set_and_get_vallo10", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo10_tbl_table_modify_with_set_and_get_vallo10");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo10_tbl_table_modify_with_set_and_get_vallo10");
  }

  netbufferv4_update_vallo10_tbl_table_modify_with_set_and_get_vallo10_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo10_tbl_table_modify_with_set_and_get_vallo10", bytes);
  }

  netbufferv4_update_vallo10_tbl_table_modify_with_set_and_get_vallo10_result result;
  try {
    iface_->update_vallo10_tbl_table_modify_with_set_and_get_vallo10(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo10_tbl_table_modify_with_set_and_get_vallo10");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo10_tbl_table_modify_with_set_and_get_vallo10", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo10_tbl_table_modify_with_set_and_get_vallo10");
  }

  oprot->writeMessageBegin("update_vallo10_tbl_table_modify_with_set_and_get_vallo10", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo10_tbl_table_modify_with_set_and_get_vallo10", bytes);
  }
}

void netbufferv4Processor::process_update_vallo10_tbl_table_modify_with_set_and_get_vallo10_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo10_tbl_table_modify_with_set_and_get_vallo10_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo10_tbl_table_modify_with_set_and_get_vallo10_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo10_tbl_table_modify_with_set_and_get_vallo10_by_match_spec");
  }

  netbufferv4_update_vallo10_tbl_table_modify_with_set_and_get_vallo10_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo10_tbl_table_modify_with_set_and_get_vallo10_by_match_spec", bytes);
  }

  netbufferv4_update_vallo10_tbl_table_modify_with_set_and_get_vallo10_by_match_spec_result result;
  try {
    iface_->update_vallo10_tbl_table_modify_with_set_and_get_vallo10_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo10_tbl_table_modify_with_set_and_get_vallo10_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo10_tbl_table_modify_with_set_and_get_vallo10_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo10_tbl_table_modify_with_set_and_get_vallo10_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo10_tbl_table_modify_with_set_and_get_vallo10_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo10_tbl_table_modify_with_set_and_get_vallo10_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo10_tbl_table_modify_with_reset_and_get_vallo10(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo10_tbl_table_modify_with_reset_and_get_vallo10", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo10_tbl_table_modify_with_reset_and_get_vallo10");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo10_tbl_table_modify_with_reset_and_get_vallo10");
  }

  netbufferv4_update_vallo10_tbl_table_modify_with_reset_and_get_vallo10_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo10_tbl_table_modify_with_reset_and_get_vallo10", bytes);
  }

  netbufferv4_update_vallo10_tbl_table_modify_with_reset_and_get_vallo10_result result;
  try {
    iface_->update_vallo10_tbl_table_modify_with_reset_and_get_vallo10(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo10_tbl_table_modify_with_reset_and_get_vallo10");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo10_tbl_table_modify_with_reset_and_get_vallo10", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo10_tbl_table_modify_with_reset_and_get_vallo10");
  }

  oprot->writeMessageBegin("update_vallo10_tbl_table_modify_with_reset_and_get_vallo10", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo10_tbl_table_modify_with_reset_and_get_vallo10", bytes);
  }
}

void netbufferv4Processor::process_update_vallo10_tbl_table_modify_with_reset_and_get_vallo10_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo10_tbl_table_modify_with_reset_and_get_vallo10_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo10_tbl_table_modify_with_reset_and_get_vallo10_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo10_tbl_table_modify_with_reset_and_get_vallo10_by_match_spec");
  }

  netbufferv4_update_vallo10_tbl_table_modify_with_reset_and_get_vallo10_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo10_tbl_table_modify_with_reset_and_get_vallo10_by_match_spec", bytes);
  }

  netbufferv4_update_vallo10_tbl_table_modify_with_reset_and_get_vallo10_by_match_spec_result result;
  try {
    iface_->update_vallo10_tbl_table_modify_with_reset_and_get_vallo10_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo10_tbl_table_modify_with_reset_and_get_vallo10_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo10_tbl_table_modify_with_reset_and_get_vallo10_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo10_tbl_table_modify_with_reset_and_get_vallo10_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo10_tbl_table_modify_with_reset_and_get_vallo10_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo10_tbl_table_modify_with_reset_and_get_vallo10_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo10_tbl_table_modify_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo10_tbl_table_modify_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo10_tbl_table_modify_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo10_tbl_table_modify_with_nop");
  }

  netbufferv4_update_vallo10_tbl_table_modify_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo10_tbl_table_modify_with_nop", bytes);
  }

  netbufferv4_update_vallo10_tbl_table_modify_with_nop_result result;
  try {
    iface_->update_vallo10_tbl_table_modify_with_nop(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo10_tbl_table_modify_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo10_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo10_tbl_table_modify_with_nop");
  }

  oprot->writeMessageBegin("update_vallo10_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo10_tbl_table_modify_with_nop", bytes);
  }
}

void netbufferv4Processor::process_update_vallo10_tbl_table_modify_with_nop_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo10_tbl_table_modify_with_nop_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo10_tbl_table_modify_with_nop_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo10_tbl_table_modify_with_nop_by_match_spec");
  }

  netbufferv4_update_vallo10_tbl_table_modify_with_nop_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo10_tbl_table_modify_with_nop_by_match_spec", bytes);
  }

  netbufferv4_update_vallo10_tbl_table_modify_with_nop_by_match_spec_result result;
  try {
    iface_->update_vallo10_tbl_table_modify_with_nop_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo10_tbl_table_modify_with_nop_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo10_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo10_tbl_table_modify_with_nop_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo10_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo10_tbl_table_modify_with_nop_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo11_tbl_table_modify_with_get_vallo11(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo11_tbl_table_modify_with_get_vallo11", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo11_tbl_table_modify_with_get_vallo11");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo11_tbl_table_modify_with_get_vallo11");
  }

  netbufferv4_update_vallo11_tbl_table_modify_with_get_vallo11_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo11_tbl_table_modify_with_get_vallo11", bytes);
  }

  netbufferv4_update_vallo11_tbl_table_modify_with_get_vallo11_result result;
  try {
    iface_->update_vallo11_tbl_table_modify_with_get_vallo11(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo11_tbl_table_modify_with_get_vallo11");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo11_tbl_table_modify_with_get_vallo11", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo11_tbl_table_modify_with_get_vallo11");
  }

  oprot->writeMessageBegin("update_vallo11_tbl_table_modify_with_get_vallo11", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo11_tbl_table_modify_with_get_vallo11", bytes);
  }
}

void netbufferv4Processor::process_update_vallo11_tbl_table_modify_with_get_vallo11_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo11_tbl_table_modify_with_get_vallo11_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo11_tbl_table_modify_with_get_vallo11_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo11_tbl_table_modify_with_get_vallo11_by_match_spec");
  }

  netbufferv4_update_vallo11_tbl_table_modify_with_get_vallo11_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo11_tbl_table_modify_with_get_vallo11_by_match_spec", bytes);
  }

  netbufferv4_update_vallo11_tbl_table_modify_with_get_vallo11_by_match_spec_result result;
  try {
    iface_->update_vallo11_tbl_table_modify_with_get_vallo11_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo11_tbl_table_modify_with_get_vallo11_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo11_tbl_table_modify_with_get_vallo11_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo11_tbl_table_modify_with_get_vallo11_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo11_tbl_table_modify_with_get_vallo11_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo11_tbl_table_modify_with_get_vallo11_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo11_tbl_table_modify_with_set_and_get_vallo11(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo11_tbl_table_modify_with_set_and_get_vallo11", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo11_tbl_table_modify_with_set_and_get_vallo11");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo11_tbl_table_modify_with_set_and_get_vallo11");
  }

  netbufferv4_update_vallo11_tbl_table_modify_with_set_and_get_vallo11_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo11_tbl_table_modify_with_set_and_get_vallo11", bytes);
  }

  netbufferv4_update_vallo11_tbl_table_modify_with_set_and_get_vallo11_result result;
  try {
    iface_->update_vallo11_tbl_table_modify_with_set_and_get_vallo11(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo11_tbl_table_modify_with_set_and_get_vallo11");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo11_tbl_table_modify_with_set_and_get_vallo11", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo11_tbl_table_modify_with_set_and_get_vallo11");
  }

  oprot->writeMessageBegin("update_vallo11_tbl_table_modify_with_set_and_get_vallo11", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo11_tbl_table_modify_with_set_and_get_vallo11", bytes);
  }
}

void netbufferv4Processor::process_update_vallo11_tbl_table_modify_with_set_and_get_vallo11_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo11_tbl_table_modify_with_set_and_get_vallo11_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo11_tbl_table_modify_with_set_and_get_vallo11_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo11_tbl_table_modify_with_set_and_get_vallo11_by_match_spec");
  }

  netbufferv4_update_vallo11_tbl_table_modify_with_set_and_get_vallo11_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo11_tbl_table_modify_with_set_and_get_vallo11_by_match_spec", bytes);
  }

  netbufferv4_update_vallo11_tbl_table_modify_with_set_and_get_vallo11_by_match_spec_result result;
  try {
    iface_->update_vallo11_tbl_table_modify_with_set_and_get_vallo11_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo11_tbl_table_modify_with_set_and_get_vallo11_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo11_tbl_table_modify_with_set_and_get_vallo11_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo11_tbl_table_modify_with_set_and_get_vallo11_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo11_tbl_table_modify_with_set_and_get_vallo11_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo11_tbl_table_modify_with_set_and_get_vallo11_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo11_tbl_table_modify_with_reset_and_get_vallo11(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo11_tbl_table_modify_with_reset_and_get_vallo11", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo11_tbl_table_modify_with_reset_and_get_vallo11");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo11_tbl_table_modify_with_reset_and_get_vallo11");
  }

  netbufferv4_update_vallo11_tbl_table_modify_with_reset_and_get_vallo11_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo11_tbl_table_modify_with_reset_and_get_vallo11", bytes);
  }

  netbufferv4_update_vallo11_tbl_table_modify_with_reset_and_get_vallo11_result result;
  try {
    iface_->update_vallo11_tbl_table_modify_with_reset_and_get_vallo11(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo11_tbl_table_modify_with_reset_and_get_vallo11");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo11_tbl_table_modify_with_reset_and_get_vallo11", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo11_tbl_table_modify_with_reset_and_get_vallo11");
  }

  oprot->writeMessageBegin("update_vallo11_tbl_table_modify_with_reset_and_get_vallo11", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo11_tbl_table_modify_with_reset_and_get_vallo11", bytes);
  }
}

void netbufferv4Processor::process_update_vallo11_tbl_table_modify_with_reset_and_get_vallo11_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo11_tbl_table_modify_with_reset_and_get_vallo11_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo11_tbl_table_modify_with_reset_and_get_vallo11_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo11_tbl_table_modify_with_reset_and_get_vallo11_by_match_spec");
  }

  netbufferv4_update_vallo11_tbl_table_modify_with_reset_and_get_vallo11_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo11_tbl_table_modify_with_reset_and_get_vallo11_by_match_spec", bytes);
  }

  netbufferv4_update_vallo11_tbl_table_modify_with_reset_and_get_vallo11_by_match_spec_result result;
  try {
    iface_->update_vallo11_tbl_table_modify_with_reset_and_get_vallo11_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo11_tbl_table_modify_with_reset_and_get_vallo11_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo11_tbl_table_modify_with_reset_and_get_vallo11_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo11_tbl_table_modify_with_reset_and_get_vallo11_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo11_tbl_table_modify_with_reset_and_get_vallo11_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo11_tbl_table_modify_with_reset_and_get_vallo11_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo11_tbl_table_modify_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo11_tbl_table_modify_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo11_tbl_table_modify_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo11_tbl_table_modify_with_nop");
  }

  netbufferv4_update_vallo11_tbl_table_modify_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo11_tbl_table_modify_with_nop", bytes);
  }

  netbufferv4_update_vallo11_tbl_table_modify_with_nop_result result;
  try {
    iface_->update_vallo11_tbl_table_modify_with_nop(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo11_tbl_table_modify_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo11_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo11_tbl_table_modify_with_nop");
  }

  oprot->writeMessageBegin("update_vallo11_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo11_tbl_table_modify_with_nop", bytes);
  }
}

void netbufferv4Processor::process_update_vallo11_tbl_table_modify_with_nop_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo11_tbl_table_modify_with_nop_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo11_tbl_table_modify_with_nop_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo11_tbl_table_modify_with_nop_by_match_spec");
  }

  netbufferv4_update_vallo11_tbl_table_modify_with_nop_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo11_tbl_table_modify_with_nop_by_match_spec", bytes);
  }

  netbufferv4_update_vallo11_tbl_table_modify_with_nop_by_match_spec_result result;
  try {
    iface_->update_vallo11_tbl_table_modify_with_nop_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo11_tbl_table_modify_with_nop_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo11_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo11_tbl_table_modify_with_nop_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo11_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo11_tbl_table_modify_with_nop_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo12_tbl_table_modify_with_get_vallo12(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo12_tbl_table_modify_with_get_vallo12", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo12_tbl_table_modify_with_get_vallo12");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo12_tbl_table_modify_with_get_vallo12");
  }

  netbufferv4_update_vallo12_tbl_table_modify_with_get_vallo12_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo12_tbl_table_modify_with_get_vallo12", bytes);
  }

  netbufferv4_update_vallo12_tbl_table_modify_with_get_vallo12_result result;
  try {
    iface_->update_vallo12_tbl_table_modify_with_get_vallo12(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo12_tbl_table_modify_with_get_vallo12");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo12_tbl_table_modify_with_get_vallo12", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo12_tbl_table_modify_with_get_vallo12");
  }

  oprot->writeMessageBegin("update_vallo12_tbl_table_modify_with_get_vallo12", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo12_tbl_table_modify_with_get_vallo12", bytes);
  }
}

void netbufferv4Processor::process_update_vallo12_tbl_table_modify_with_get_vallo12_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo12_tbl_table_modify_with_get_vallo12_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo12_tbl_table_modify_with_get_vallo12_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo12_tbl_table_modify_with_get_vallo12_by_match_spec");
  }

  netbufferv4_update_vallo12_tbl_table_modify_with_get_vallo12_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo12_tbl_table_modify_with_get_vallo12_by_match_spec", bytes);
  }

  netbufferv4_update_vallo12_tbl_table_modify_with_get_vallo12_by_match_spec_result result;
  try {
    iface_->update_vallo12_tbl_table_modify_with_get_vallo12_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo12_tbl_table_modify_with_get_vallo12_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo12_tbl_table_modify_with_get_vallo12_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo12_tbl_table_modify_with_get_vallo12_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo12_tbl_table_modify_with_get_vallo12_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo12_tbl_table_modify_with_get_vallo12_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo12_tbl_table_modify_with_set_and_get_vallo12(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo12_tbl_table_modify_with_set_and_get_vallo12", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo12_tbl_table_modify_with_set_and_get_vallo12");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo12_tbl_table_modify_with_set_and_get_vallo12");
  }

  netbufferv4_update_vallo12_tbl_table_modify_with_set_and_get_vallo12_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo12_tbl_table_modify_with_set_and_get_vallo12", bytes);
  }

  netbufferv4_update_vallo12_tbl_table_modify_with_set_and_get_vallo12_result result;
  try {
    iface_->update_vallo12_tbl_table_modify_with_set_and_get_vallo12(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo12_tbl_table_modify_with_set_and_get_vallo12");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo12_tbl_table_modify_with_set_and_get_vallo12", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo12_tbl_table_modify_with_set_and_get_vallo12");
  }

  oprot->writeMessageBegin("update_vallo12_tbl_table_modify_with_set_and_get_vallo12", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo12_tbl_table_modify_with_set_and_get_vallo12", bytes);
  }
}

void netbufferv4Processor::process_update_vallo12_tbl_table_modify_with_set_and_get_vallo12_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo12_tbl_table_modify_with_set_and_get_vallo12_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo12_tbl_table_modify_with_set_and_get_vallo12_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo12_tbl_table_modify_with_set_and_get_vallo12_by_match_spec");
  }

  netbufferv4_update_vallo12_tbl_table_modify_with_set_and_get_vallo12_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo12_tbl_table_modify_with_set_and_get_vallo12_by_match_spec", bytes);
  }

  netbufferv4_update_vallo12_tbl_table_modify_with_set_and_get_vallo12_by_match_spec_result result;
  try {
    iface_->update_vallo12_tbl_table_modify_with_set_and_get_vallo12_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo12_tbl_table_modify_with_set_and_get_vallo12_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo12_tbl_table_modify_with_set_and_get_vallo12_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo12_tbl_table_modify_with_set_and_get_vallo12_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo12_tbl_table_modify_with_set_and_get_vallo12_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo12_tbl_table_modify_with_set_and_get_vallo12_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo12_tbl_table_modify_with_reset_and_get_vallo12(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo12_tbl_table_modify_with_reset_and_get_vallo12", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo12_tbl_table_modify_with_reset_and_get_vallo12");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo12_tbl_table_modify_with_reset_and_get_vallo12");
  }

  netbufferv4_update_vallo12_tbl_table_modify_with_reset_and_get_vallo12_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo12_tbl_table_modify_with_reset_and_get_vallo12", bytes);
  }

  netbufferv4_update_vallo12_tbl_table_modify_with_reset_and_get_vallo12_result result;
  try {
    iface_->update_vallo12_tbl_table_modify_with_reset_and_get_vallo12(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo12_tbl_table_modify_with_reset_and_get_vallo12");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo12_tbl_table_modify_with_reset_and_get_vallo12", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo12_tbl_table_modify_with_reset_and_get_vallo12");
  }

  oprot->writeMessageBegin("update_vallo12_tbl_table_modify_with_reset_and_get_vallo12", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo12_tbl_table_modify_with_reset_and_get_vallo12", bytes);
  }
}

void netbufferv4Processor::process_update_vallo12_tbl_table_modify_with_reset_and_get_vallo12_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo12_tbl_table_modify_with_reset_and_get_vallo12_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo12_tbl_table_modify_with_reset_and_get_vallo12_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo12_tbl_table_modify_with_reset_and_get_vallo12_by_match_spec");
  }

  netbufferv4_update_vallo12_tbl_table_modify_with_reset_and_get_vallo12_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo12_tbl_table_modify_with_reset_and_get_vallo12_by_match_spec", bytes);
  }

  netbufferv4_update_vallo12_tbl_table_modify_with_reset_and_get_vallo12_by_match_spec_result result;
  try {
    iface_->update_vallo12_tbl_table_modify_with_reset_and_get_vallo12_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo12_tbl_table_modify_with_reset_and_get_vallo12_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo12_tbl_table_modify_with_reset_and_get_vallo12_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo12_tbl_table_modify_with_reset_and_get_vallo12_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo12_tbl_table_modify_with_reset_and_get_vallo12_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo12_tbl_table_modify_with_reset_and_get_vallo12_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo12_tbl_table_modify_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo12_tbl_table_modify_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo12_tbl_table_modify_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo12_tbl_table_modify_with_nop");
  }

  netbufferv4_update_vallo12_tbl_table_modify_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo12_tbl_table_modify_with_nop", bytes);
  }

  netbufferv4_update_vallo12_tbl_table_modify_with_nop_result result;
  try {
    iface_->update_vallo12_tbl_table_modify_with_nop(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo12_tbl_table_modify_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo12_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo12_tbl_table_modify_with_nop");
  }

  oprot->writeMessageBegin("update_vallo12_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo12_tbl_table_modify_with_nop", bytes);
  }
}

void netbufferv4Processor::process_update_vallo12_tbl_table_modify_with_nop_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo12_tbl_table_modify_with_nop_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo12_tbl_table_modify_with_nop_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo12_tbl_table_modify_with_nop_by_match_spec");
  }

  netbufferv4_update_vallo12_tbl_table_modify_with_nop_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo12_tbl_table_modify_with_nop_by_match_spec", bytes);
  }

  netbufferv4_update_vallo12_tbl_table_modify_with_nop_by_match_spec_result result;
  try {
    iface_->update_vallo12_tbl_table_modify_with_nop_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo12_tbl_table_modify_with_nop_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo12_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo12_tbl_table_modify_with_nop_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo12_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo12_tbl_table_modify_with_nop_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo13_tbl_table_modify_with_get_vallo13(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo13_tbl_table_modify_with_get_vallo13", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo13_tbl_table_modify_with_get_vallo13");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo13_tbl_table_modify_with_get_vallo13");
  }

  netbufferv4_update_vallo13_tbl_table_modify_with_get_vallo13_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo13_tbl_table_modify_with_get_vallo13", bytes);
  }

  netbufferv4_update_vallo13_tbl_table_modify_with_get_vallo13_result result;
  try {
    iface_->update_vallo13_tbl_table_modify_with_get_vallo13(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo13_tbl_table_modify_with_get_vallo13");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo13_tbl_table_modify_with_get_vallo13", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo13_tbl_table_modify_with_get_vallo13");
  }

  oprot->writeMessageBegin("update_vallo13_tbl_table_modify_with_get_vallo13", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo13_tbl_table_modify_with_get_vallo13", bytes);
  }
}

void netbufferv4Processor::process_update_vallo13_tbl_table_modify_with_get_vallo13_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo13_tbl_table_modify_with_get_vallo13_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo13_tbl_table_modify_with_get_vallo13_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo13_tbl_table_modify_with_get_vallo13_by_match_spec");
  }

  netbufferv4_update_vallo13_tbl_table_modify_with_get_vallo13_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo13_tbl_table_modify_with_get_vallo13_by_match_spec", bytes);
  }

  netbufferv4_update_vallo13_tbl_table_modify_with_get_vallo13_by_match_spec_result result;
  try {
    iface_->update_vallo13_tbl_table_modify_with_get_vallo13_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo13_tbl_table_modify_with_get_vallo13_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo13_tbl_table_modify_with_get_vallo13_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo13_tbl_table_modify_with_get_vallo13_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo13_tbl_table_modify_with_get_vallo13_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo13_tbl_table_modify_with_get_vallo13_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo13_tbl_table_modify_with_set_and_get_vallo13(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo13_tbl_table_modify_with_set_and_get_vallo13", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo13_tbl_table_modify_with_set_and_get_vallo13");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo13_tbl_table_modify_with_set_and_get_vallo13");
  }

  netbufferv4_update_vallo13_tbl_table_modify_with_set_and_get_vallo13_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo13_tbl_table_modify_with_set_and_get_vallo13", bytes);
  }

  netbufferv4_update_vallo13_tbl_table_modify_with_set_and_get_vallo13_result result;
  try {
    iface_->update_vallo13_tbl_table_modify_with_set_and_get_vallo13(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo13_tbl_table_modify_with_set_and_get_vallo13");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo13_tbl_table_modify_with_set_and_get_vallo13", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo13_tbl_table_modify_with_set_and_get_vallo13");
  }

  oprot->writeMessageBegin("update_vallo13_tbl_table_modify_with_set_and_get_vallo13", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo13_tbl_table_modify_with_set_and_get_vallo13", bytes);
  }
}

void netbufferv4Processor::process_update_vallo13_tbl_table_modify_with_set_and_get_vallo13_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo13_tbl_table_modify_with_set_and_get_vallo13_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo13_tbl_table_modify_with_set_and_get_vallo13_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo13_tbl_table_modify_with_set_and_get_vallo13_by_match_spec");
  }

  netbufferv4_update_vallo13_tbl_table_modify_with_set_and_get_vallo13_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo13_tbl_table_modify_with_set_and_get_vallo13_by_match_spec", bytes);
  }

  netbufferv4_update_vallo13_tbl_table_modify_with_set_and_get_vallo13_by_match_spec_result result;
  try {
    iface_->update_vallo13_tbl_table_modify_with_set_and_get_vallo13_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo13_tbl_table_modify_with_set_and_get_vallo13_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo13_tbl_table_modify_with_set_and_get_vallo13_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo13_tbl_table_modify_with_set_and_get_vallo13_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo13_tbl_table_modify_with_set_and_get_vallo13_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo13_tbl_table_modify_with_set_and_get_vallo13_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo13_tbl_table_modify_with_reset_and_get_vallo13(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo13_tbl_table_modify_with_reset_and_get_vallo13", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo13_tbl_table_modify_with_reset_and_get_vallo13");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo13_tbl_table_modify_with_reset_and_get_vallo13");
  }

  netbufferv4_update_vallo13_tbl_table_modify_with_reset_and_get_vallo13_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo13_tbl_table_modify_with_reset_and_get_vallo13", bytes);
  }

  netbufferv4_update_vallo13_tbl_table_modify_with_reset_and_get_vallo13_result result;
  try {
    iface_->update_vallo13_tbl_table_modify_with_reset_and_get_vallo13(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo13_tbl_table_modify_with_reset_and_get_vallo13");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo13_tbl_table_modify_with_reset_and_get_vallo13", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo13_tbl_table_modify_with_reset_and_get_vallo13");
  }

  oprot->writeMessageBegin("update_vallo13_tbl_table_modify_with_reset_and_get_vallo13", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo13_tbl_table_modify_with_reset_and_get_vallo13", bytes);
  }
}

void netbufferv4Processor::process_update_vallo13_tbl_table_modify_with_reset_and_get_vallo13_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo13_tbl_table_modify_with_reset_and_get_vallo13_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo13_tbl_table_modify_with_reset_and_get_vallo13_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo13_tbl_table_modify_with_reset_and_get_vallo13_by_match_spec");
  }

  netbufferv4_update_vallo13_tbl_table_modify_with_reset_and_get_vallo13_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo13_tbl_table_modify_with_reset_and_get_vallo13_by_match_spec", bytes);
  }

  netbufferv4_update_vallo13_tbl_table_modify_with_reset_and_get_vallo13_by_match_spec_result result;
  try {
    iface_->update_vallo13_tbl_table_modify_with_reset_and_get_vallo13_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo13_tbl_table_modify_with_reset_and_get_vallo13_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo13_tbl_table_modify_with_reset_and_get_vallo13_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo13_tbl_table_modify_with_reset_and_get_vallo13_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo13_tbl_table_modify_with_reset_and_get_vallo13_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo13_tbl_table_modify_with_reset_and_get_vallo13_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo13_tbl_table_modify_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo13_tbl_table_modify_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo13_tbl_table_modify_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo13_tbl_table_modify_with_nop");
  }

  netbufferv4_update_vallo13_tbl_table_modify_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo13_tbl_table_modify_with_nop", bytes);
  }

  netbufferv4_update_vallo13_tbl_table_modify_with_nop_result result;
  try {
    iface_->update_vallo13_tbl_table_modify_with_nop(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo13_tbl_table_modify_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo13_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo13_tbl_table_modify_with_nop");
  }

  oprot->writeMessageBegin("update_vallo13_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo13_tbl_table_modify_with_nop", bytes);
  }
}

void netbufferv4Processor::process_update_vallo13_tbl_table_modify_with_nop_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo13_tbl_table_modify_with_nop_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo13_tbl_table_modify_with_nop_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo13_tbl_table_modify_with_nop_by_match_spec");
  }

  netbufferv4_update_vallo13_tbl_table_modify_with_nop_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo13_tbl_table_modify_with_nop_by_match_spec", bytes);
  }

  netbufferv4_update_vallo13_tbl_table_modify_with_nop_by_match_spec_result result;
  try {
    iface_->update_vallo13_tbl_table_modify_with_nop_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo13_tbl_table_modify_with_nop_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo13_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo13_tbl_table_modify_with_nop_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo13_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo13_tbl_table_modify_with_nop_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo14_tbl_table_modify_with_get_vallo14(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo14_tbl_table_modify_with_get_vallo14", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo14_tbl_table_modify_with_get_vallo14");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo14_tbl_table_modify_with_get_vallo14");
  }

  netbufferv4_update_vallo14_tbl_table_modify_with_get_vallo14_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo14_tbl_table_modify_with_get_vallo14", bytes);
  }

  netbufferv4_update_vallo14_tbl_table_modify_with_get_vallo14_result result;
  try {
    iface_->update_vallo14_tbl_table_modify_with_get_vallo14(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo14_tbl_table_modify_with_get_vallo14");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo14_tbl_table_modify_with_get_vallo14", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo14_tbl_table_modify_with_get_vallo14");
  }

  oprot->writeMessageBegin("update_vallo14_tbl_table_modify_with_get_vallo14", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo14_tbl_table_modify_with_get_vallo14", bytes);
  }
}

void netbufferv4Processor::process_update_vallo14_tbl_table_modify_with_get_vallo14_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo14_tbl_table_modify_with_get_vallo14_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo14_tbl_table_modify_with_get_vallo14_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo14_tbl_table_modify_with_get_vallo14_by_match_spec");
  }

  netbufferv4_update_vallo14_tbl_table_modify_with_get_vallo14_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo14_tbl_table_modify_with_get_vallo14_by_match_spec", bytes);
  }

  netbufferv4_update_vallo14_tbl_table_modify_with_get_vallo14_by_match_spec_result result;
  try {
    iface_->update_vallo14_tbl_table_modify_with_get_vallo14_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo14_tbl_table_modify_with_get_vallo14_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo14_tbl_table_modify_with_get_vallo14_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo14_tbl_table_modify_with_get_vallo14_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo14_tbl_table_modify_with_get_vallo14_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo14_tbl_table_modify_with_get_vallo14_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo14_tbl_table_modify_with_set_and_get_vallo14(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo14_tbl_table_modify_with_set_and_get_vallo14", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo14_tbl_table_modify_with_set_and_get_vallo14");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo14_tbl_table_modify_with_set_and_get_vallo14");
  }

  netbufferv4_update_vallo14_tbl_table_modify_with_set_and_get_vallo14_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo14_tbl_table_modify_with_set_and_get_vallo14", bytes);
  }

  netbufferv4_update_vallo14_tbl_table_modify_with_set_and_get_vallo14_result result;
  try {
    iface_->update_vallo14_tbl_table_modify_with_set_and_get_vallo14(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo14_tbl_table_modify_with_set_and_get_vallo14");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo14_tbl_table_modify_with_set_and_get_vallo14", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo14_tbl_table_modify_with_set_and_get_vallo14");
  }

  oprot->writeMessageBegin("update_vallo14_tbl_table_modify_with_set_and_get_vallo14", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo14_tbl_table_modify_with_set_and_get_vallo14", bytes);
  }
}

void netbufferv4Processor::process_update_vallo14_tbl_table_modify_with_set_and_get_vallo14_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo14_tbl_table_modify_with_set_and_get_vallo14_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo14_tbl_table_modify_with_set_and_get_vallo14_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo14_tbl_table_modify_with_set_and_get_vallo14_by_match_spec");
  }

  netbufferv4_update_vallo14_tbl_table_modify_with_set_and_get_vallo14_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo14_tbl_table_modify_with_set_and_get_vallo14_by_match_spec", bytes);
  }

  netbufferv4_update_vallo14_tbl_table_modify_with_set_and_get_vallo14_by_match_spec_result result;
  try {
    iface_->update_vallo14_tbl_table_modify_with_set_and_get_vallo14_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo14_tbl_table_modify_with_set_and_get_vallo14_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo14_tbl_table_modify_with_set_and_get_vallo14_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo14_tbl_table_modify_with_set_and_get_vallo14_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo14_tbl_table_modify_with_set_and_get_vallo14_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo14_tbl_table_modify_with_set_and_get_vallo14_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo14_tbl_table_modify_with_reset_and_get_vallo14(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo14_tbl_table_modify_with_reset_and_get_vallo14", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo14_tbl_table_modify_with_reset_and_get_vallo14");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo14_tbl_table_modify_with_reset_and_get_vallo14");
  }

  netbufferv4_update_vallo14_tbl_table_modify_with_reset_and_get_vallo14_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo14_tbl_table_modify_with_reset_and_get_vallo14", bytes);
  }

  netbufferv4_update_vallo14_tbl_table_modify_with_reset_and_get_vallo14_result result;
  try {
    iface_->update_vallo14_tbl_table_modify_with_reset_and_get_vallo14(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo14_tbl_table_modify_with_reset_and_get_vallo14");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo14_tbl_table_modify_with_reset_and_get_vallo14", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo14_tbl_table_modify_with_reset_and_get_vallo14");
  }

  oprot->writeMessageBegin("update_vallo14_tbl_table_modify_with_reset_and_get_vallo14", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo14_tbl_table_modify_with_reset_and_get_vallo14", bytes);
  }
}

void netbufferv4Processor::process_update_vallo14_tbl_table_modify_with_reset_and_get_vallo14_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo14_tbl_table_modify_with_reset_and_get_vallo14_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo14_tbl_table_modify_with_reset_and_get_vallo14_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo14_tbl_table_modify_with_reset_and_get_vallo14_by_match_spec");
  }

  netbufferv4_update_vallo14_tbl_table_modify_with_reset_and_get_vallo14_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo14_tbl_table_modify_with_reset_and_get_vallo14_by_match_spec", bytes);
  }

  netbufferv4_update_vallo14_tbl_table_modify_with_reset_and_get_vallo14_by_match_spec_result result;
  try {
    iface_->update_vallo14_tbl_table_modify_with_reset_and_get_vallo14_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo14_tbl_table_modify_with_reset_and_get_vallo14_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo14_tbl_table_modify_with_reset_and_get_vallo14_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo14_tbl_table_modify_with_reset_and_get_vallo14_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo14_tbl_table_modify_with_reset_and_get_vallo14_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo14_tbl_table_modify_with_reset_and_get_vallo14_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo14_tbl_table_modify_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo14_tbl_table_modify_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo14_tbl_table_modify_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo14_tbl_table_modify_with_nop");
  }

  netbufferv4_update_vallo14_tbl_table_modify_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo14_tbl_table_modify_with_nop", bytes);
  }

  netbufferv4_update_vallo14_tbl_table_modify_with_nop_result result;
  try {
    iface_->update_vallo14_tbl_table_modify_with_nop(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo14_tbl_table_modify_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo14_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo14_tbl_table_modify_with_nop");
  }

  oprot->writeMessageBegin("update_vallo14_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo14_tbl_table_modify_with_nop", bytes);
  }
}

void netbufferv4Processor::process_update_vallo14_tbl_table_modify_with_nop_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo14_tbl_table_modify_with_nop_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo14_tbl_table_modify_with_nop_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo14_tbl_table_modify_with_nop_by_match_spec");
  }

  netbufferv4_update_vallo14_tbl_table_modify_with_nop_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo14_tbl_table_modify_with_nop_by_match_spec", bytes);
  }

  netbufferv4_update_vallo14_tbl_table_modify_with_nop_by_match_spec_result result;
  try {
    iface_->update_vallo14_tbl_table_modify_with_nop_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo14_tbl_table_modify_with_nop_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo14_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo14_tbl_table_modify_with_nop_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo14_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo14_tbl_table_modify_with_nop_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo15_tbl_table_modify_with_get_vallo15(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo15_tbl_table_modify_with_get_vallo15", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo15_tbl_table_modify_with_get_vallo15");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo15_tbl_table_modify_with_get_vallo15");
  }

  netbufferv4_update_vallo15_tbl_table_modify_with_get_vallo15_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo15_tbl_table_modify_with_get_vallo15", bytes);
  }

  netbufferv4_update_vallo15_tbl_table_modify_with_get_vallo15_result result;
  try {
    iface_->update_vallo15_tbl_table_modify_with_get_vallo15(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo15_tbl_table_modify_with_get_vallo15");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo15_tbl_table_modify_with_get_vallo15", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo15_tbl_table_modify_with_get_vallo15");
  }

  oprot->writeMessageBegin("update_vallo15_tbl_table_modify_with_get_vallo15", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo15_tbl_table_modify_with_get_vallo15", bytes);
  }
}

void netbufferv4Processor::process_update_vallo15_tbl_table_modify_with_get_vallo15_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo15_tbl_table_modify_with_get_vallo15_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo15_tbl_table_modify_with_get_vallo15_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo15_tbl_table_modify_with_get_vallo15_by_match_spec");
  }

  netbufferv4_update_vallo15_tbl_table_modify_with_get_vallo15_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo15_tbl_table_modify_with_get_vallo15_by_match_spec", bytes);
  }

  netbufferv4_update_vallo15_tbl_table_modify_with_get_vallo15_by_match_spec_result result;
  try {
    iface_->update_vallo15_tbl_table_modify_with_get_vallo15_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo15_tbl_table_modify_with_get_vallo15_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo15_tbl_table_modify_with_get_vallo15_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo15_tbl_table_modify_with_get_vallo15_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo15_tbl_table_modify_with_get_vallo15_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo15_tbl_table_modify_with_get_vallo15_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo15_tbl_table_modify_with_set_and_get_vallo15(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo15_tbl_table_modify_with_set_and_get_vallo15", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo15_tbl_table_modify_with_set_and_get_vallo15");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo15_tbl_table_modify_with_set_and_get_vallo15");
  }

  netbufferv4_update_vallo15_tbl_table_modify_with_set_and_get_vallo15_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo15_tbl_table_modify_with_set_and_get_vallo15", bytes);
  }

  netbufferv4_update_vallo15_tbl_table_modify_with_set_and_get_vallo15_result result;
  try {
    iface_->update_vallo15_tbl_table_modify_with_set_and_get_vallo15(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo15_tbl_table_modify_with_set_and_get_vallo15");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo15_tbl_table_modify_with_set_and_get_vallo15", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo15_tbl_table_modify_with_set_and_get_vallo15");
  }

  oprot->writeMessageBegin("update_vallo15_tbl_table_modify_with_set_and_get_vallo15", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo15_tbl_table_modify_with_set_and_get_vallo15", bytes);
  }
}

void netbufferv4Processor::process_update_vallo15_tbl_table_modify_with_set_and_get_vallo15_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo15_tbl_table_modify_with_set_and_get_vallo15_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo15_tbl_table_modify_with_set_and_get_vallo15_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo15_tbl_table_modify_with_set_and_get_vallo15_by_match_spec");
  }

  netbufferv4_update_vallo15_tbl_table_modify_with_set_and_get_vallo15_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo15_tbl_table_modify_with_set_and_get_vallo15_by_match_spec", bytes);
  }

  netbufferv4_update_vallo15_tbl_table_modify_with_set_and_get_vallo15_by_match_spec_result result;
  try {
    iface_->update_vallo15_tbl_table_modify_with_set_and_get_vallo15_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo15_tbl_table_modify_with_set_and_get_vallo15_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo15_tbl_table_modify_with_set_and_get_vallo15_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo15_tbl_table_modify_with_set_and_get_vallo15_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo15_tbl_table_modify_with_set_and_get_vallo15_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo15_tbl_table_modify_with_set_and_get_vallo15_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo15_tbl_table_modify_with_reset_and_get_vallo15(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo15_tbl_table_modify_with_reset_and_get_vallo15", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo15_tbl_table_modify_with_reset_and_get_vallo15");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo15_tbl_table_modify_with_reset_and_get_vallo15");
  }

  netbufferv4_update_vallo15_tbl_table_modify_with_reset_and_get_vallo15_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo15_tbl_table_modify_with_reset_and_get_vallo15", bytes);
  }

  netbufferv4_update_vallo15_tbl_table_modify_with_reset_and_get_vallo15_result result;
  try {
    iface_->update_vallo15_tbl_table_modify_with_reset_and_get_vallo15(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo15_tbl_table_modify_with_reset_and_get_vallo15");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo15_tbl_table_modify_with_reset_and_get_vallo15", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo15_tbl_table_modify_with_reset_and_get_vallo15");
  }

  oprot->writeMessageBegin("update_vallo15_tbl_table_modify_with_reset_and_get_vallo15", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo15_tbl_table_modify_with_reset_and_get_vallo15", bytes);
  }
}

void netbufferv4Processor::process_update_vallo15_tbl_table_modify_with_reset_and_get_vallo15_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo15_tbl_table_modify_with_reset_and_get_vallo15_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo15_tbl_table_modify_with_reset_and_get_vallo15_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo15_tbl_table_modify_with_reset_and_get_vallo15_by_match_spec");
  }

  netbufferv4_update_vallo15_tbl_table_modify_with_reset_and_get_vallo15_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo15_tbl_table_modify_with_reset_and_get_vallo15_by_match_spec", bytes);
  }

  netbufferv4_update_vallo15_tbl_table_modify_with_reset_and_get_vallo15_by_match_spec_result result;
  try {
    iface_->update_vallo15_tbl_table_modify_with_reset_and_get_vallo15_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo15_tbl_table_modify_with_reset_and_get_vallo15_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo15_tbl_table_modify_with_reset_and_get_vallo15_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo15_tbl_table_modify_with_reset_and_get_vallo15_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo15_tbl_table_modify_with_reset_and_get_vallo15_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo15_tbl_table_modify_with_reset_and_get_vallo15_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo15_tbl_table_modify_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo15_tbl_table_modify_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo15_tbl_table_modify_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo15_tbl_table_modify_with_nop");
  }

  netbufferv4_update_vallo15_tbl_table_modify_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo15_tbl_table_modify_with_nop", bytes);
  }

  netbufferv4_update_vallo15_tbl_table_modify_with_nop_result result;
  try {
    iface_->update_vallo15_tbl_table_modify_with_nop(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo15_tbl_table_modify_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo15_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo15_tbl_table_modify_with_nop");
  }

  oprot->writeMessageBegin("update_vallo15_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo15_tbl_table_modify_with_nop", bytes);
  }
}

void netbufferv4Processor::process_update_vallo15_tbl_table_modify_with_nop_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo15_tbl_table_modify_with_nop_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo15_tbl_table_modify_with_nop_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo15_tbl_table_modify_with_nop_by_match_spec");
  }

  netbufferv4_update_vallo15_tbl_table_modify_with_nop_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo15_tbl_table_modify_with_nop_by_match_spec", bytes);
  }

  netbufferv4_update_vallo15_tbl_table_modify_with_nop_by_match_spec_result result;
  try {
    iface_->update_vallo15_tbl_table_modify_with_nop_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo15_tbl_table_modify_with_nop_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo15_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo15_tbl_table_modify_with_nop_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo15_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo15_tbl_table_modify_with_nop_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo16_tbl_table_modify_with_get_vallo16(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo16_tbl_table_modify_with_get_vallo16", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo16_tbl_table_modify_with_get_vallo16");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo16_tbl_table_modify_with_get_vallo16");
  }

  netbufferv4_update_vallo16_tbl_table_modify_with_get_vallo16_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo16_tbl_table_modify_with_get_vallo16", bytes);
  }

  netbufferv4_update_vallo16_tbl_table_modify_with_get_vallo16_result result;
  try {
    iface_->update_vallo16_tbl_table_modify_with_get_vallo16(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo16_tbl_table_modify_with_get_vallo16");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo16_tbl_table_modify_with_get_vallo16", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo16_tbl_table_modify_with_get_vallo16");
  }

  oprot->writeMessageBegin("update_vallo16_tbl_table_modify_with_get_vallo16", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo16_tbl_table_modify_with_get_vallo16", bytes);
  }
}

void netbufferv4Processor::process_update_vallo16_tbl_table_modify_with_get_vallo16_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo16_tbl_table_modify_with_get_vallo16_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo16_tbl_table_modify_with_get_vallo16_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo16_tbl_table_modify_with_get_vallo16_by_match_spec");
  }

  netbufferv4_update_vallo16_tbl_table_modify_with_get_vallo16_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo16_tbl_table_modify_with_get_vallo16_by_match_spec", bytes);
  }

  netbufferv4_update_vallo16_tbl_table_modify_with_get_vallo16_by_match_spec_result result;
  try {
    iface_->update_vallo16_tbl_table_modify_with_get_vallo16_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo16_tbl_table_modify_with_get_vallo16_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo16_tbl_table_modify_with_get_vallo16_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo16_tbl_table_modify_with_get_vallo16_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo16_tbl_table_modify_with_get_vallo16_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo16_tbl_table_modify_with_get_vallo16_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo16_tbl_table_modify_with_set_and_get_vallo16(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo16_tbl_table_modify_with_set_and_get_vallo16", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo16_tbl_table_modify_with_set_and_get_vallo16");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo16_tbl_table_modify_with_set_and_get_vallo16");
  }

  netbufferv4_update_vallo16_tbl_table_modify_with_set_and_get_vallo16_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo16_tbl_table_modify_with_set_and_get_vallo16", bytes);
  }

  netbufferv4_update_vallo16_tbl_table_modify_with_set_and_get_vallo16_result result;
  try {
    iface_->update_vallo16_tbl_table_modify_with_set_and_get_vallo16(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo16_tbl_table_modify_with_set_and_get_vallo16");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo16_tbl_table_modify_with_set_and_get_vallo16", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo16_tbl_table_modify_with_set_and_get_vallo16");
  }

  oprot->writeMessageBegin("update_vallo16_tbl_table_modify_with_set_and_get_vallo16", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo16_tbl_table_modify_with_set_and_get_vallo16", bytes);
  }
}

void netbufferv4Processor::process_update_vallo16_tbl_table_modify_with_set_and_get_vallo16_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo16_tbl_table_modify_with_set_and_get_vallo16_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo16_tbl_table_modify_with_set_and_get_vallo16_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo16_tbl_table_modify_with_set_and_get_vallo16_by_match_spec");
  }

  netbufferv4_update_vallo16_tbl_table_modify_with_set_and_get_vallo16_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo16_tbl_table_modify_with_set_and_get_vallo16_by_match_spec", bytes);
  }

  netbufferv4_update_vallo16_tbl_table_modify_with_set_and_get_vallo16_by_match_spec_result result;
  try {
    iface_->update_vallo16_tbl_table_modify_with_set_and_get_vallo16_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo16_tbl_table_modify_with_set_and_get_vallo16_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo16_tbl_table_modify_with_set_and_get_vallo16_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo16_tbl_table_modify_with_set_and_get_vallo16_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo16_tbl_table_modify_with_set_and_get_vallo16_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo16_tbl_table_modify_with_set_and_get_vallo16_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo16_tbl_table_modify_with_reset_and_get_vallo16(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo16_tbl_table_modify_with_reset_and_get_vallo16", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo16_tbl_table_modify_with_reset_and_get_vallo16");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo16_tbl_table_modify_with_reset_and_get_vallo16");
  }

  netbufferv4_update_vallo16_tbl_table_modify_with_reset_and_get_vallo16_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo16_tbl_table_modify_with_reset_and_get_vallo16", bytes);
  }

  netbufferv4_update_vallo16_tbl_table_modify_with_reset_and_get_vallo16_result result;
  try {
    iface_->update_vallo16_tbl_table_modify_with_reset_and_get_vallo16(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo16_tbl_table_modify_with_reset_and_get_vallo16");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo16_tbl_table_modify_with_reset_and_get_vallo16", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo16_tbl_table_modify_with_reset_and_get_vallo16");
  }

  oprot->writeMessageBegin("update_vallo16_tbl_table_modify_with_reset_and_get_vallo16", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo16_tbl_table_modify_with_reset_and_get_vallo16", bytes);
  }
}

void netbufferv4Processor::process_update_vallo16_tbl_table_modify_with_reset_and_get_vallo16_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo16_tbl_table_modify_with_reset_and_get_vallo16_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo16_tbl_table_modify_with_reset_and_get_vallo16_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo16_tbl_table_modify_with_reset_and_get_vallo16_by_match_spec");
  }

  netbufferv4_update_vallo16_tbl_table_modify_with_reset_and_get_vallo16_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo16_tbl_table_modify_with_reset_and_get_vallo16_by_match_spec", bytes);
  }

  netbufferv4_update_vallo16_tbl_table_modify_with_reset_and_get_vallo16_by_match_spec_result result;
  try {
    iface_->update_vallo16_tbl_table_modify_with_reset_and_get_vallo16_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo16_tbl_table_modify_with_reset_and_get_vallo16_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo16_tbl_table_modify_with_reset_and_get_vallo16_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo16_tbl_table_modify_with_reset_and_get_vallo16_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo16_tbl_table_modify_with_reset_and_get_vallo16_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo16_tbl_table_modify_with_reset_and_get_vallo16_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo16_tbl_table_modify_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo16_tbl_table_modify_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo16_tbl_table_modify_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo16_tbl_table_modify_with_nop");
  }

  netbufferv4_update_vallo16_tbl_table_modify_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo16_tbl_table_modify_with_nop", bytes);
  }

  netbufferv4_update_vallo16_tbl_table_modify_with_nop_result result;
  try {
    iface_->update_vallo16_tbl_table_modify_with_nop(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo16_tbl_table_modify_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo16_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo16_tbl_table_modify_with_nop");
  }

  oprot->writeMessageBegin("update_vallo16_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo16_tbl_table_modify_with_nop", bytes);
  }
}

void netbufferv4Processor::process_update_vallo16_tbl_table_modify_with_nop_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo16_tbl_table_modify_with_nop_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo16_tbl_table_modify_with_nop_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo16_tbl_table_modify_with_nop_by_match_spec");
  }

  netbufferv4_update_vallo16_tbl_table_modify_with_nop_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo16_tbl_table_modify_with_nop_by_match_spec", bytes);
  }

  netbufferv4_update_vallo16_tbl_table_modify_with_nop_by_match_spec_result result;
  try {
    iface_->update_vallo16_tbl_table_modify_with_nop_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo16_tbl_table_modify_with_nop_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo16_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo16_tbl_table_modify_with_nop_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo16_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo16_tbl_table_modify_with_nop_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo1_tbl_table_modify_with_get_vallo1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo1_tbl_table_modify_with_get_vallo1", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo1_tbl_table_modify_with_get_vallo1");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo1_tbl_table_modify_with_get_vallo1");
  }

  netbufferv4_update_vallo1_tbl_table_modify_with_get_vallo1_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo1_tbl_table_modify_with_get_vallo1", bytes);
  }

  netbufferv4_update_vallo1_tbl_table_modify_with_get_vallo1_result result;
  try {
    iface_->update_vallo1_tbl_table_modify_with_get_vallo1(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo1_tbl_table_modify_with_get_vallo1");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo1_tbl_table_modify_with_get_vallo1", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo1_tbl_table_modify_with_get_vallo1");
  }

  oprot->writeMessageBegin("update_vallo1_tbl_table_modify_with_get_vallo1", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo1_tbl_table_modify_with_get_vallo1", bytes);
  }
}

void netbufferv4Processor::process_update_vallo1_tbl_table_modify_with_get_vallo1_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo1_tbl_table_modify_with_get_vallo1_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo1_tbl_table_modify_with_get_vallo1_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo1_tbl_table_modify_with_get_vallo1_by_match_spec");
  }

  netbufferv4_update_vallo1_tbl_table_modify_with_get_vallo1_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo1_tbl_table_modify_with_get_vallo1_by_match_spec", bytes);
  }

  netbufferv4_update_vallo1_tbl_table_modify_with_get_vallo1_by_match_spec_result result;
  try {
    iface_->update_vallo1_tbl_table_modify_with_get_vallo1_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo1_tbl_table_modify_with_get_vallo1_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo1_tbl_table_modify_with_get_vallo1_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo1_tbl_table_modify_with_get_vallo1_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo1_tbl_table_modify_with_get_vallo1_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo1_tbl_table_modify_with_get_vallo1_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo1_tbl_table_modify_with_set_and_get_vallo1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo1_tbl_table_modify_with_set_and_get_vallo1", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo1_tbl_table_modify_with_set_and_get_vallo1");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo1_tbl_table_modify_with_set_and_get_vallo1");
  }

  netbufferv4_update_vallo1_tbl_table_modify_with_set_and_get_vallo1_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo1_tbl_table_modify_with_set_and_get_vallo1", bytes);
  }

  netbufferv4_update_vallo1_tbl_table_modify_with_set_and_get_vallo1_result result;
  try {
    iface_->update_vallo1_tbl_table_modify_with_set_and_get_vallo1(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo1_tbl_table_modify_with_set_and_get_vallo1");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo1_tbl_table_modify_with_set_and_get_vallo1", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo1_tbl_table_modify_with_set_and_get_vallo1");
  }

  oprot->writeMessageBegin("update_vallo1_tbl_table_modify_with_set_and_get_vallo1", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo1_tbl_table_modify_with_set_and_get_vallo1", bytes);
  }
}

void netbufferv4Processor::process_update_vallo1_tbl_table_modify_with_set_and_get_vallo1_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo1_tbl_table_modify_with_set_and_get_vallo1_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo1_tbl_table_modify_with_set_and_get_vallo1_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo1_tbl_table_modify_with_set_and_get_vallo1_by_match_spec");
  }

  netbufferv4_update_vallo1_tbl_table_modify_with_set_and_get_vallo1_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo1_tbl_table_modify_with_set_and_get_vallo1_by_match_spec", bytes);
  }

  netbufferv4_update_vallo1_tbl_table_modify_with_set_and_get_vallo1_by_match_spec_result result;
  try {
    iface_->update_vallo1_tbl_table_modify_with_set_and_get_vallo1_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo1_tbl_table_modify_with_set_and_get_vallo1_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo1_tbl_table_modify_with_set_and_get_vallo1_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo1_tbl_table_modify_with_set_and_get_vallo1_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo1_tbl_table_modify_with_set_and_get_vallo1_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo1_tbl_table_modify_with_set_and_get_vallo1_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo1_tbl_table_modify_with_reset_and_get_vallo1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo1_tbl_table_modify_with_reset_and_get_vallo1", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo1_tbl_table_modify_with_reset_and_get_vallo1");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo1_tbl_table_modify_with_reset_and_get_vallo1");
  }

  netbufferv4_update_vallo1_tbl_table_modify_with_reset_and_get_vallo1_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo1_tbl_table_modify_with_reset_and_get_vallo1", bytes);
  }

  netbufferv4_update_vallo1_tbl_table_modify_with_reset_and_get_vallo1_result result;
  try {
    iface_->update_vallo1_tbl_table_modify_with_reset_and_get_vallo1(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo1_tbl_table_modify_with_reset_and_get_vallo1");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo1_tbl_table_modify_with_reset_and_get_vallo1", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo1_tbl_table_modify_with_reset_and_get_vallo1");
  }

  oprot->writeMessageBegin("update_vallo1_tbl_table_modify_with_reset_and_get_vallo1", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo1_tbl_table_modify_with_reset_and_get_vallo1", bytes);
  }
}

void netbufferv4Processor::process_update_vallo1_tbl_table_modify_with_reset_and_get_vallo1_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo1_tbl_table_modify_with_reset_and_get_vallo1_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo1_tbl_table_modify_with_reset_and_get_vallo1_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo1_tbl_table_modify_with_reset_and_get_vallo1_by_match_spec");
  }

  netbufferv4_update_vallo1_tbl_table_modify_with_reset_and_get_vallo1_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo1_tbl_table_modify_with_reset_and_get_vallo1_by_match_spec", bytes);
  }

  netbufferv4_update_vallo1_tbl_table_modify_with_reset_and_get_vallo1_by_match_spec_result result;
  try {
    iface_->update_vallo1_tbl_table_modify_with_reset_and_get_vallo1_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo1_tbl_table_modify_with_reset_and_get_vallo1_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo1_tbl_table_modify_with_reset_and_get_vallo1_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo1_tbl_table_modify_with_reset_and_get_vallo1_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo1_tbl_table_modify_with_reset_and_get_vallo1_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo1_tbl_table_modify_with_reset_and_get_vallo1_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo1_tbl_table_modify_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo1_tbl_table_modify_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo1_tbl_table_modify_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo1_tbl_table_modify_with_nop");
  }

  netbufferv4_update_vallo1_tbl_table_modify_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo1_tbl_table_modify_with_nop", bytes);
  }

  netbufferv4_update_vallo1_tbl_table_modify_with_nop_result result;
  try {
    iface_->update_vallo1_tbl_table_modify_with_nop(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo1_tbl_table_modify_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo1_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo1_tbl_table_modify_with_nop");
  }

  oprot->writeMessageBegin("update_vallo1_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo1_tbl_table_modify_with_nop", bytes);
  }
}

void netbufferv4Processor::process_update_vallo1_tbl_table_modify_with_nop_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo1_tbl_table_modify_with_nop_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo1_tbl_table_modify_with_nop_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo1_tbl_table_modify_with_nop_by_match_spec");
  }

  netbufferv4_update_vallo1_tbl_table_modify_with_nop_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo1_tbl_table_modify_with_nop_by_match_spec", bytes);
  }

  netbufferv4_update_vallo1_tbl_table_modify_with_nop_by_match_spec_result result;
  try {
    iface_->update_vallo1_tbl_table_modify_with_nop_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo1_tbl_table_modify_with_nop_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo1_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo1_tbl_table_modify_with_nop_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo1_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo1_tbl_table_modify_with_nop_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo2_tbl_table_modify_with_get_vallo2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo2_tbl_table_modify_with_get_vallo2", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo2_tbl_table_modify_with_get_vallo2");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo2_tbl_table_modify_with_get_vallo2");
  }

  netbufferv4_update_vallo2_tbl_table_modify_with_get_vallo2_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo2_tbl_table_modify_with_get_vallo2", bytes);
  }

  netbufferv4_update_vallo2_tbl_table_modify_with_get_vallo2_result result;
  try {
    iface_->update_vallo2_tbl_table_modify_with_get_vallo2(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo2_tbl_table_modify_with_get_vallo2");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo2_tbl_table_modify_with_get_vallo2", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo2_tbl_table_modify_with_get_vallo2");
  }

  oprot->writeMessageBegin("update_vallo2_tbl_table_modify_with_get_vallo2", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo2_tbl_table_modify_with_get_vallo2", bytes);
  }
}

void netbufferv4Processor::process_update_vallo2_tbl_table_modify_with_get_vallo2_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo2_tbl_table_modify_with_get_vallo2_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo2_tbl_table_modify_with_get_vallo2_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo2_tbl_table_modify_with_get_vallo2_by_match_spec");
  }

  netbufferv4_update_vallo2_tbl_table_modify_with_get_vallo2_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo2_tbl_table_modify_with_get_vallo2_by_match_spec", bytes);
  }

  netbufferv4_update_vallo2_tbl_table_modify_with_get_vallo2_by_match_spec_result result;
  try {
    iface_->update_vallo2_tbl_table_modify_with_get_vallo2_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo2_tbl_table_modify_with_get_vallo2_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo2_tbl_table_modify_with_get_vallo2_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo2_tbl_table_modify_with_get_vallo2_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo2_tbl_table_modify_with_get_vallo2_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo2_tbl_table_modify_with_get_vallo2_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo2_tbl_table_modify_with_set_and_get_vallo2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo2_tbl_table_modify_with_set_and_get_vallo2", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo2_tbl_table_modify_with_set_and_get_vallo2");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo2_tbl_table_modify_with_set_and_get_vallo2");
  }

  netbufferv4_update_vallo2_tbl_table_modify_with_set_and_get_vallo2_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo2_tbl_table_modify_with_set_and_get_vallo2", bytes);
  }

  netbufferv4_update_vallo2_tbl_table_modify_with_set_and_get_vallo2_result result;
  try {
    iface_->update_vallo2_tbl_table_modify_with_set_and_get_vallo2(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo2_tbl_table_modify_with_set_and_get_vallo2");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo2_tbl_table_modify_with_set_and_get_vallo2", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo2_tbl_table_modify_with_set_and_get_vallo2");
  }

  oprot->writeMessageBegin("update_vallo2_tbl_table_modify_with_set_and_get_vallo2", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo2_tbl_table_modify_with_set_and_get_vallo2", bytes);
  }
}

void netbufferv4Processor::process_update_vallo2_tbl_table_modify_with_set_and_get_vallo2_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo2_tbl_table_modify_with_set_and_get_vallo2_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo2_tbl_table_modify_with_set_and_get_vallo2_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo2_tbl_table_modify_with_set_and_get_vallo2_by_match_spec");
  }

  netbufferv4_update_vallo2_tbl_table_modify_with_set_and_get_vallo2_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo2_tbl_table_modify_with_set_and_get_vallo2_by_match_spec", bytes);
  }

  netbufferv4_update_vallo2_tbl_table_modify_with_set_and_get_vallo2_by_match_spec_result result;
  try {
    iface_->update_vallo2_tbl_table_modify_with_set_and_get_vallo2_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo2_tbl_table_modify_with_set_and_get_vallo2_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo2_tbl_table_modify_with_set_and_get_vallo2_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo2_tbl_table_modify_with_set_and_get_vallo2_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo2_tbl_table_modify_with_set_and_get_vallo2_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo2_tbl_table_modify_with_set_and_get_vallo2_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo2_tbl_table_modify_with_reset_and_get_vallo2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo2_tbl_table_modify_with_reset_and_get_vallo2", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo2_tbl_table_modify_with_reset_and_get_vallo2");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo2_tbl_table_modify_with_reset_and_get_vallo2");
  }

  netbufferv4_update_vallo2_tbl_table_modify_with_reset_and_get_vallo2_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo2_tbl_table_modify_with_reset_and_get_vallo2", bytes);
  }

  netbufferv4_update_vallo2_tbl_table_modify_with_reset_and_get_vallo2_result result;
  try {
    iface_->update_vallo2_tbl_table_modify_with_reset_and_get_vallo2(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo2_tbl_table_modify_with_reset_and_get_vallo2");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo2_tbl_table_modify_with_reset_and_get_vallo2", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo2_tbl_table_modify_with_reset_and_get_vallo2");
  }

  oprot->writeMessageBegin("update_vallo2_tbl_table_modify_with_reset_and_get_vallo2", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo2_tbl_table_modify_with_reset_and_get_vallo2", bytes);
  }
}

void netbufferv4Processor::process_update_vallo2_tbl_table_modify_with_reset_and_get_vallo2_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo2_tbl_table_modify_with_reset_and_get_vallo2_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo2_tbl_table_modify_with_reset_and_get_vallo2_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo2_tbl_table_modify_with_reset_and_get_vallo2_by_match_spec");
  }

  netbufferv4_update_vallo2_tbl_table_modify_with_reset_and_get_vallo2_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo2_tbl_table_modify_with_reset_and_get_vallo2_by_match_spec", bytes);
  }

  netbufferv4_update_vallo2_tbl_table_modify_with_reset_and_get_vallo2_by_match_spec_result result;
  try {
    iface_->update_vallo2_tbl_table_modify_with_reset_and_get_vallo2_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo2_tbl_table_modify_with_reset_and_get_vallo2_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo2_tbl_table_modify_with_reset_and_get_vallo2_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo2_tbl_table_modify_with_reset_and_get_vallo2_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo2_tbl_table_modify_with_reset_and_get_vallo2_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo2_tbl_table_modify_with_reset_and_get_vallo2_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo2_tbl_table_modify_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo2_tbl_table_modify_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo2_tbl_table_modify_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo2_tbl_table_modify_with_nop");
  }

  netbufferv4_update_vallo2_tbl_table_modify_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo2_tbl_table_modify_with_nop", bytes);
  }

  netbufferv4_update_vallo2_tbl_table_modify_with_nop_result result;
  try {
    iface_->update_vallo2_tbl_table_modify_with_nop(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo2_tbl_table_modify_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo2_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo2_tbl_table_modify_with_nop");
  }

  oprot->writeMessageBegin("update_vallo2_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo2_tbl_table_modify_with_nop", bytes);
  }
}

void netbufferv4Processor::process_update_vallo2_tbl_table_modify_with_nop_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo2_tbl_table_modify_with_nop_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo2_tbl_table_modify_with_nop_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo2_tbl_table_modify_with_nop_by_match_spec");
  }

  netbufferv4_update_vallo2_tbl_table_modify_with_nop_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo2_tbl_table_modify_with_nop_by_match_spec", bytes);
  }

  netbufferv4_update_vallo2_tbl_table_modify_with_nop_by_match_spec_result result;
  try {
    iface_->update_vallo2_tbl_table_modify_with_nop_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo2_tbl_table_modify_with_nop_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo2_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo2_tbl_table_modify_with_nop_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo2_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo2_tbl_table_modify_with_nop_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo3_tbl_table_modify_with_get_vallo3(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo3_tbl_table_modify_with_get_vallo3", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo3_tbl_table_modify_with_get_vallo3");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo3_tbl_table_modify_with_get_vallo3");
  }

  netbufferv4_update_vallo3_tbl_table_modify_with_get_vallo3_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo3_tbl_table_modify_with_get_vallo3", bytes);
  }

  netbufferv4_update_vallo3_tbl_table_modify_with_get_vallo3_result result;
  try {
    iface_->update_vallo3_tbl_table_modify_with_get_vallo3(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo3_tbl_table_modify_with_get_vallo3");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo3_tbl_table_modify_with_get_vallo3", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo3_tbl_table_modify_with_get_vallo3");
  }

  oprot->writeMessageBegin("update_vallo3_tbl_table_modify_with_get_vallo3", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo3_tbl_table_modify_with_get_vallo3", bytes);
  }
}

void netbufferv4Processor::process_update_vallo3_tbl_table_modify_with_get_vallo3_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo3_tbl_table_modify_with_get_vallo3_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo3_tbl_table_modify_with_get_vallo3_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo3_tbl_table_modify_with_get_vallo3_by_match_spec");
  }

  netbufferv4_update_vallo3_tbl_table_modify_with_get_vallo3_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo3_tbl_table_modify_with_get_vallo3_by_match_spec", bytes);
  }

  netbufferv4_update_vallo3_tbl_table_modify_with_get_vallo3_by_match_spec_result result;
  try {
    iface_->update_vallo3_tbl_table_modify_with_get_vallo3_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo3_tbl_table_modify_with_get_vallo3_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo3_tbl_table_modify_with_get_vallo3_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo3_tbl_table_modify_with_get_vallo3_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo3_tbl_table_modify_with_get_vallo3_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo3_tbl_table_modify_with_get_vallo3_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo3_tbl_table_modify_with_set_and_get_vallo3(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo3_tbl_table_modify_with_set_and_get_vallo3", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo3_tbl_table_modify_with_set_and_get_vallo3");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo3_tbl_table_modify_with_set_and_get_vallo3");
  }

  netbufferv4_update_vallo3_tbl_table_modify_with_set_and_get_vallo3_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo3_tbl_table_modify_with_set_and_get_vallo3", bytes);
  }

  netbufferv4_update_vallo3_tbl_table_modify_with_set_and_get_vallo3_result result;
  try {
    iface_->update_vallo3_tbl_table_modify_with_set_and_get_vallo3(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo3_tbl_table_modify_with_set_and_get_vallo3");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo3_tbl_table_modify_with_set_and_get_vallo3", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo3_tbl_table_modify_with_set_and_get_vallo3");
  }

  oprot->writeMessageBegin("update_vallo3_tbl_table_modify_with_set_and_get_vallo3", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo3_tbl_table_modify_with_set_and_get_vallo3", bytes);
  }
}

void netbufferv4Processor::process_update_vallo3_tbl_table_modify_with_set_and_get_vallo3_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo3_tbl_table_modify_with_set_and_get_vallo3_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo3_tbl_table_modify_with_set_and_get_vallo3_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo3_tbl_table_modify_with_set_and_get_vallo3_by_match_spec");
  }

  netbufferv4_update_vallo3_tbl_table_modify_with_set_and_get_vallo3_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo3_tbl_table_modify_with_set_and_get_vallo3_by_match_spec", bytes);
  }

  netbufferv4_update_vallo3_tbl_table_modify_with_set_and_get_vallo3_by_match_spec_result result;
  try {
    iface_->update_vallo3_tbl_table_modify_with_set_and_get_vallo3_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo3_tbl_table_modify_with_set_and_get_vallo3_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo3_tbl_table_modify_with_set_and_get_vallo3_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo3_tbl_table_modify_with_set_and_get_vallo3_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo3_tbl_table_modify_with_set_and_get_vallo3_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo3_tbl_table_modify_with_set_and_get_vallo3_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo3_tbl_table_modify_with_reset_and_get_vallo3(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo3_tbl_table_modify_with_reset_and_get_vallo3", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo3_tbl_table_modify_with_reset_and_get_vallo3");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo3_tbl_table_modify_with_reset_and_get_vallo3");
  }

  netbufferv4_update_vallo3_tbl_table_modify_with_reset_and_get_vallo3_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo3_tbl_table_modify_with_reset_and_get_vallo3", bytes);
  }

  netbufferv4_update_vallo3_tbl_table_modify_with_reset_and_get_vallo3_result result;
  try {
    iface_->update_vallo3_tbl_table_modify_with_reset_and_get_vallo3(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo3_tbl_table_modify_with_reset_and_get_vallo3");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo3_tbl_table_modify_with_reset_and_get_vallo3", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo3_tbl_table_modify_with_reset_and_get_vallo3");
  }

  oprot->writeMessageBegin("update_vallo3_tbl_table_modify_with_reset_and_get_vallo3", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo3_tbl_table_modify_with_reset_and_get_vallo3", bytes);
  }
}

void netbufferv4Processor::process_update_vallo3_tbl_table_modify_with_reset_and_get_vallo3_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo3_tbl_table_modify_with_reset_and_get_vallo3_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo3_tbl_table_modify_with_reset_and_get_vallo3_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo3_tbl_table_modify_with_reset_and_get_vallo3_by_match_spec");
  }

  netbufferv4_update_vallo3_tbl_table_modify_with_reset_and_get_vallo3_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo3_tbl_table_modify_with_reset_and_get_vallo3_by_match_spec", bytes);
  }

  netbufferv4_update_vallo3_tbl_table_modify_with_reset_and_get_vallo3_by_match_spec_result result;
  try {
    iface_->update_vallo3_tbl_table_modify_with_reset_and_get_vallo3_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo3_tbl_table_modify_with_reset_and_get_vallo3_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo3_tbl_table_modify_with_reset_and_get_vallo3_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo3_tbl_table_modify_with_reset_and_get_vallo3_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo3_tbl_table_modify_with_reset_and_get_vallo3_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo3_tbl_table_modify_with_reset_and_get_vallo3_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo3_tbl_table_modify_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo3_tbl_table_modify_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo3_tbl_table_modify_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo3_tbl_table_modify_with_nop");
  }

  netbufferv4_update_vallo3_tbl_table_modify_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo3_tbl_table_modify_with_nop", bytes);
  }

  netbufferv4_update_vallo3_tbl_table_modify_with_nop_result result;
  try {
    iface_->update_vallo3_tbl_table_modify_with_nop(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo3_tbl_table_modify_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo3_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo3_tbl_table_modify_with_nop");
  }

  oprot->writeMessageBegin("update_vallo3_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo3_tbl_table_modify_with_nop", bytes);
  }
}

void netbufferv4Processor::process_update_vallo3_tbl_table_modify_with_nop_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo3_tbl_table_modify_with_nop_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo3_tbl_table_modify_with_nop_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo3_tbl_table_modify_with_nop_by_match_spec");
  }

  netbufferv4_update_vallo3_tbl_table_modify_with_nop_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo3_tbl_table_modify_with_nop_by_match_spec", bytes);
  }

  netbufferv4_update_vallo3_tbl_table_modify_with_nop_by_match_spec_result result;
  try {
    iface_->update_vallo3_tbl_table_modify_with_nop_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo3_tbl_table_modify_with_nop_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo3_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo3_tbl_table_modify_with_nop_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo3_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo3_tbl_table_modify_with_nop_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo4_tbl_table_modify_with_get_vallo4(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo4_tbl_table_modify_with_get_vallo4", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo4_tbl_table_modify_with_get_vallo4");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo4_tbl_table_modify_with_get_vallo4");
  }

  netbufferv4_update_vallo4_tbl_table_modify_with_get_vallo4_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo4_tbl_table_modify_with_get_vallo4", bytes);
  }

  netbufferv4_update_vallo4_tbl_table_modify_with_get_vallo4_result result;
  try {
    iface_->update_vallo4_tbl_table_modify_with_get_vallo4(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo4_tbl_table_modify_with_get_vallo4");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo4_tbl_table_modify_with_get_vallo4", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo4_tbl_table_modify_with_get_vallo4");
  }

  oprot->writeMessageBegin("update_vallo4_tbl_table_modify_with_get_vallo4", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo4_tbl_table_modify_with_get_vallo4", bytes);
  }
}

void netbufferv4Processor::process_update_vallo4_tbl_table_modify_with_get_vallo4_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo4_tbl_table_modify_with_get_vallo4_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo4_tbl_table_modify_with_get_vallo4_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo4_tbl_table_modify_with_get_vallo4_by_match_spec");
  }

  netbufferv4_update_vallo4_tbl_table_modify_with_get_vallo4_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo4_tbl_table_modify_with_get_vallo4_by_match_spec", bytes);
  }

  netbufferv4_update_vallo4_tbl_table_modify_with_get_vallo4_by_match_spec_result result;
  try {
    iface_->update_vallo4_tbl_table_modify_with_get_vallo4_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo4_tbl_table_modify_with_get_vallo4_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo4_tbl_table_modify_with_get_vallo4_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo4_tbl_table_modify_with_get_vallo4_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo4_tbl_table_modify_with_get_vallo4_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo4_tbl_table_modify_with_get_vallo4_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo4_tbl_table_modify_with_set_and_get_vallo4(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo4_tbl_table_modify_with_set_and_get_vallo4", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo4_tbl_table_modify_with_set_and_get_vallo4");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo4_tbl_table_modify_with_set_and_get_vallo4");
  }

  netbufferv4_update_vallo4_tbl_table_modify_with_set_and_get_vallo4_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo4_tbl_table_modify_with_set_and_get_vallo4", bytes);
  }

  netbufferv4_update_vallo4_tbl_table_modify_with_set_and_get_vallo4_result result;
  try {
    iface_->update_vallo4_tbl_table_modify_with_set_and_get_vallo4(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo4_tbl_table_modify_with_set_and_get_vallo4");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo4_tbl_table_modify_with_set_and_get_vallo4", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo4_tbl_table_modify_with_set_and_get_vallo4");
  }

  oprot->writeMessageBegin("update_vallo4_tbl_table_modify_with_set_and_get_vallo4", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo4_tbl_table_modify_with_set_and_get_vallo4", bytes);
  }
}

void netbufferv4Processor::process_update_vallo4_tbl_table_modify_with_set_and_get_vallo4_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo4_tbl_table_modify_with_set_and_get_vallo4_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo4_tbl_table_modify_with_set_and_get_vallo4_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo4_tbl_table_modify_with_set_and_get_vallo4_by_match_spec");
  }

  netbufferv4_update_vallo4_tbl_table_modify_with_set_and_get_vallo4_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo4_tbl_table_modify_with_set_and_get_vallo4_by_match_spec", bytes);
  }

  netbufferv4_update_vallo4_tbl_table_modify_with_set_and_get_vallo4_by_match_spec_result result;
  try {
    iface_->update_vallo4_tbl_table_modify_with_set_and_get_vallo4_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo4_tbl_table_modify_with_set_and_get_vallo4_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo4_tbl_table_modify_with_set_and_get_vallo4_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo4_tbl_table_modify_with_set_and_get_vallo4_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo4_tbl_table_modify_with_set_and_get_vallo4_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo4_tbl_table_modify_with_set_and_get_vallo4_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo4_tbl_table_modify_with_reset_and_get_vallo4(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo4_tbl_table_modify_with_reset_and_get_vallo4", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo4_tbl_table_modify_with_reset_and_get_vallo4");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo4_tbl_table_modify_with_reset_and_get_vallo4");
  }

  netbufferv4_update_vallo4_tbl_table_modify_with_reset_and_get_vallo4_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo4_tbl_table_modify_with_reset_and_get_vallo4", bytes);
  }

  netbufferv4_update_vallo4_tbl_table_modify_with_reset_and_get_vallo4_result result;
  try {
    iface_->update_vallo4_tbl_table_modify_with_reset_and_get_vallo4(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo4_tbl_table_modify_with_reset_and_get_vallo4");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo4_tbl_table_modify_with_reset_and_get_vallo4", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo4_tbl_table_modify_with_reset_and_get_vallo4");
  }

  oprot->writeMessageBegin("update_vallo4_tbl_table_modify_with_reset_and_get_vallo4", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo4_tbl_table_modify_with_reset_and_get_vallo4", bytes);
  }
}

void netbufferv4Processor::process_update_vallo4_tbl_table_modify_with_reset_and_get_vallo4_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo4_tbl_table_modify_with_reset_and_get_vallo4_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo4_tbl_table_modify_with_reset_and_get_vallo4_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo4_tbl_table_modify_with_reset_and_get_vallo4_by_match_spec");
  }

  netbufferv4_update_vallo4_tbl_table_modify_with_reset_and_get_vallo4_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo4_tbl_table_modify_with_reset_and_get_vallo4_by_match_spec", bytes);
  }

  netbufferv4_update_vallo4_tbl_table_modify_with_reset_and_get_vallo4_by_match_spec_result result;
  try {
    iface_->update_vallo4_tbl_table_modify_with_reset_and_get_vallo4_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo4_tbl_table_modify_with_reset_and_get_vallo4_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo4_tbl_table_modify_with_reset_and_get_vallo4_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo4_tbl_table_modify_with_reset_and_get_vallo4_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo4_tbl_table_modify_with_reset_and_get_vallo4_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo4_tbl_table_modify_with_reset_and_get_vallo4_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo4_tbl_table_modify_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo4_tbl_table_modify_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo4_tbl_table_modify_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo4_tbl_table_modify_with_nop");
  }

  netbufferv4_update_vallo4_tbl_table_modify_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo4_tbl_table_modify_with_nop", bytes);
  }

  netbufferv4_update_vallo4_tbl_table_modify_with_nop_result result;
  try {
    iface_->update_vallo4_tbl_table_modify_with_nop(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo4_tbl_table_modify_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo4_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo4_tbl_table_modify_with_nop");
  }

  oprot->writeMessageBegin("update_vallo4_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo4_tbl_table_modify_with_nop", bytes);
  }
}

void netbufferv4Processor::process_update_vallo4_tbl_table_modify_with_nop_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo4_tbl_table_modify_with_nop_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo4_tbl_table_modify_with_nop_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo4_tbl_table_modify_with_nop_by_match_spec");
  }

  netbufferv4_update_vallo4_tbl_table_modify_with_nop_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo4_tbl_table_modify_with_nop_by_match_spec", bytes);
  }

  netbufferv4_update_vallo4_tbl_table_modify_with_nop_by_match_spec_result result;
  try {
    iface_->update_vallo4_tbl_table_modify_with_nop_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo4_tbl_table_modify_with_nop_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo4_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo4_tbl_table_modify_with_nop_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo4_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo4_tbl_table_modify_with_nop_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo5_tbl_table_modify_with_get_vallo5(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo5_tbl_table_modify_with_get_vallo5", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo5_tbl_table_modify_with_get_vallo5");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo5_tbl_table_modify_with_get_vallo5");
  }

  netbufferv4_update_vallo5_tbl_table_modify_with_get_vallo5_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo5_tbl_table_modify_with_get_vallo5", bytes);
  }

  netbufferv4_update_vallo5_tbl_table_modify_with_get_vallo5_result result;
  try {
    iface_->update_vallo5_tbl_table_modify_with_get_vallo5(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo5_tbl_table_modify_with_get_vallo5");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo5_tbl_table_modify_with_get_vallo5", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo5_tbl_table_modify_with_get_vallo5");
  }

  oprot->writeMessageBegin("update_vallo5_tbl_table_modify_with_get_vallo5", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo5_tbl_table_modify_with_get_vallo5", bytes);
  }
}

void netbufferv4Processor::process_update_vallo5_tbl_table_modify_with_get_vallo5_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo5_tbl_table_modify_with_get_vallo5_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo5_tbl_table_modify_with_get_vallo5_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo5_tbl_table_modify_with_get_vallo5_by_match_spec");
  }

  netbufferv4_update_vallo5_tbl_table_modify_with_get_vallo5_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo5_tbl_table_modify_with_get_vallo5_by_match_spec", bytes);
  }

  netbufferv4_update_vallo5_tbl_table_modify_with_get_vallo5_by_match_spec_result result;
  try {
    iface_->update_vallo5_tbl_table_modify_with_get_vallo5_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo5_tbl_table_modify_with_get_vallo5_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo5_tbl_table_modify_with_get_vallo5_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo5_tbl_table_modify_with_get_vallo5_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo5_tbl_table_modify_with_get_vallo5_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo5_tbl_table_modify_with_get_vallo5_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo5_tbl_table_modify_with_set_and_get_vallo5(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo5_tbl_table_modify_with_set_and_get_vallo5", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo5_tbl_table_modify_with_set_and_get_vallo5");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo5_tbl_table_modify_with_set_and_get_vallo5");
  }

  netbufferv4_update_vallo5_tbl_table_modify_with_set_and_get_vallo5_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo5_tbl_table_modify_with_set_and_get_vallo5", bytes);
  }

  netbufferv4_update_vallo5_tbl_table_modify_with_set_and_get_vallo5_result result;
  try {
    iface_->update_vallo5_tbl_table_modify_with_set_and_get_vallo5(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo5_tbl_table_modify_with_set_and_get_vallo5");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo5_tbl_table_modify_with_set_and_get_vallo5", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo5_tbl_table_modify_with_set_and_get_vallo5");
  }

  oprot->writeMessageBegin("update_vallo5_tbl_table_modify_with_set_and_get_vallo5", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo5_tbl_table_modify_with_set_and_get_vallo5", bytes);
  }
}

void netbufferv4Processor::process_update_vallo5_tbl_table_modify_with_set_and_get_vallo5_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo5_tbl_table_modify_with_set_and_get_vallo5_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo5_tbl_table_modify_with_set_and_get_vallo5_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo5_tbl_table_modify_with_set_and_get_vallo5_by_match_spec");
  }

  netbufferv4_update_vallo5_tbl_table_modify_with_set_and_get_vallo5_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo5_tbl_table_modify_with_set_and_get_vallo5_by_match_spec", bytes);
  }

  netbufferv4_update_vallo5_tbl_table_modify_with_set_and_get_vallo5_by_match_spec_result result;
  try {
    iface_->update_vallo5_tbl_table_modify_with_set_and_get_vallo5_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo5_tbl_table_modify_with_set_and_get_vallo5_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo5_tbl_table_modify_with_set_and_get_vallo5_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo5_tbl_table_modify_with_set_and_get_vallo5_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo5_tbl_table_modify_with_set_and_get_vallo5_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo5_tbl_table_modify_with_set_and_get_vallo5_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo5_tbl_table_modify_with_reset_and_get_vallo5(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo5_tbl_table_modify_with_reset_and_get_vallo5", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo5_tbl_table_modify_with_reset_and_get_vallo5");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo5_tbl_table_modify_with_reset_and_get_vallo5");
  }

  netbufferv4_update_vallo5_tbl_table_modify_with_reset_and_get_vallo5_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo5_tbl_table_modify_with_reset_and_get_vallo5", bytes);
  }

  netbufferv4_update_vallo5_tbl_table_modify_with_reset_and_get_vallo5_result result;
  try {
    iface_->update_vallo5_tbl_table_modify_with_reset_and_get_vallo5(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo5_tbl_table_modify_with_reset_and_get_vallo5");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo5_tbl_table_modify_with_reset_and_get_vallo5", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo5_tbl_table_modify_with_reset_and_get_vallo5");
  }

  oprot->writeMessageBegin("update_vallo5_tbl_table_modify_with_reset_and_get_vallo5", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo5_tbl_table_modify_with_reset_and_get_vallo5", bytes);
  }
}

void netbufferv4Processor::process_update_vallo5_tbl_table_modify_with_reset_and_get_vallo5_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo5_tbl_table_modify_with_reset_and_get_vallo5_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo5_tbl_table_modify_with_reset_and_get_vallo5_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo5_tbl_table_modify_with_reset_and_get_vallo5_by_match_spec");
  }

  netbufferv4_update_vallo5_tbl_table_modify_with_reset_and_get_vallo5_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo5_tbl_table_modify_with_reset_and_get_vallo5_by_match_spec", bytes);
  }

  netbufferv4_update_vallo5_tbl_table_modify_with_reset_and_get_vallo5_by_match_spec_result result;
  try {
    iface_->update_vallo5_tbl_table_modify_with_reset_and_get_vallo5_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo5_tbl_table_modify_with_reset_and_get_vallo5_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo5_tbl_table_modify_with_reset_and_get_vallo5_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo5_tbl_table_modify_with_reset_and_get_vallo5_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo5_tbl_table_modify_with_reset_and_get_vallo5_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo5_tbl_table_modify_with_reset_and_get_vallo5_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo5_tbl_table_modify_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo5_tbl_table_modify_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo5_tbl_table_modify_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo5_tbl_table_modify_with_nop");
  }

  netbufferv4_update_vallo5_tbl_table_modify_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo5_tbl_table_modify_with_nop", bytes);
  }

  netbufferv4_update_vallo5_tbl_table_modify_with_nop_result result;
  try {
    iface_->update_vallo5_tbl_table_modify_with_nop(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo5_tbl_table_modify_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo5_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo5_tbl_table_modify_with_nop");
  }

  oprot->writeMessageBegin("update_vallo5_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo5_tbl_table_modify_with_nop", bytes);
  }
}

void netbufferv4Processor::process_update_vallo5_tbl_table_modify_with_nop_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo5_tbl_table_modify_with_nop_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo5_tbl_table_modify_with_nop_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo5_tbl_table_modify_with_nop_by_match_spec");
  }

  netbufferv4_update_vallo5_tbl_table_modify_with_nop_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo5_tbl_table_modify_with_nop_by_match_spec", bytes);
  }

  netbufferv4_update_vallo5_tbl_table_modify_with_nop_by_match_spec_result result;
  try {
    iface_->update_vallo5_tbl_table_modify_with_nop_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo5_tbl_table_modify_with_nop_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo5_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo5_tbl_table_modify_with_nop_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo5_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo5_tbl_table_modify_with_nop_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo6_tbl_table_modify_with_get_vallo6(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo6_tbl_table_modify_with_get_vallo6", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo6_tbl_table_modify_with_get_vallo6");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo6_tbl_table_modify_with_get_vallo6");
  }

  netbufferv4_update_vallo6_tbl_table_modify_with_get_vallo6_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo6_tbl_table_modify_with_get_vallo6", bytes);
  }

  netbufferv4_update_vallo6_tbl_table_modify_with_get_vallo6_result result;
  try {
    iface_->update_vallo6_tbl_table_modify_with_get_vallo6(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo6_tbl_table_modify_with_get_vallo6");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo6_tbl_table_modify_with_get_vallo6", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo6_tbl_table_modify_with_get_vallo6");
  }

  oprot->writeMessageBegin("update_vallo6_tbl_table_modify_with_get_vallo6", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo6_tbl_table_modify_with_get_vallo6", bytes);
  }
}

void netbufferv4Processor::process_update_vallo6_tbl_table_modify_with_get_vallo6_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo6_tbl_table_modify_with_get_vallo6_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo6_tbl_table_modify_with_get_vallo6_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo6_tbl_table_modify_with_get_vallo6_by_match_spec");
  }

  netbufferv4_update_vallo6_tbl_table_modify_with_get_vallo6_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo6_tbl_table_modify_with_get_vallo6_by_match_spec", bytes);
  }

  netbufferv4_update_vallo6_tbl_table_modify_with_get_vallo6_by_match_spec_result result;
  try {
    iface_->update_vallo6_tbl_table_modify_with_get_vallo6_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo6_tbl_table_modify_with_get_vallo6_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo6_tbl_table_modify_with_get_vallo6_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo6_tbl_table_modify_with_get_vallo6_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo6_tbl_table_modify_with_get_vallo6_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo6_tbl_table_modify_with_get_vallo6_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo6_tbl_table_modify_with_set_and_get_vallo6(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo6_tbl_table_modify_with_set_and_get_vallo6", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo6_tbl_table_modify_with_set_and_get_vallo6");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo6_tbl_table_modify_with_set_and_get_vallo6");
  }

  netbufferv4_update_vallo6_tbl_table_modify_with_set_and_get_vallo6_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo6_tbl_table_modify_with_set_and_get_vallo6", bytes);
  }

  netbufferv4_update_vallo6_tbl_table_modify_with_set_and_get_vallo6_result result;
  try {
    iface_->update_vallo6_tbl_table_modify_with_set_and_get_vallo6(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo6_tbl_table_modify_with_set_and_get_vallo6");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo6_tbl_table_modify_with_set_and_get_vallo6", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo6_tbl_table_modify_with_set_and_get_vallo6");
  }

  oprot->writeMessageBegin("update_vallo6_tbl_table_modify_with_set_and_get_vallo6", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo6_tbl_table_modify_with_set_and_get_vallo6", bytes);
  }
}

void netbufferv4Processor::process_update_vallo6_tbl_table_modify_with_set_and_get_vallo6_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo6_tbl_table_modify_with_set_and_get_vallo6_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo6_tbl_table_modify_with_set_and_get_vallo6_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo6_tbl_table_modify_with_set_and_get_vallo6_by_match_spec");
  }

  netbufferv4_update_vallo6_tbl_table_modify_with_set_and_get_vallo6_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo6_tbl_table_modify_with_set_and_get_vallo6_by_match_spec", bytes);
  }

  netbufferv4_update_vallo6_tbl_table_modify_with_set_and_get_vallo6_by_match_spec_result result;
  try {
    iface_->update_vallo6_tbl_table_modify_with_set_and_get_vallo6_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo6_tbl_table_modify_with_set_and_get_vallo6_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo6_tbl_table_modify_with_set_and_get_vallo6_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo6_tbl_table_modify_with_set_and_get_vallo6_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo6_tbl_table_modify_with_set_and_get_vallo6_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo6_tbl_table_modify_with_set_and_get_vallo6_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo6_tbl_table_modify_with_reset_and_get_vallo6(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo6_tbl_table_modify_with_reset_and_get_vallo6", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo6_tbl_table_modify_with_reset_and_get_vallo6");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo6_tbl_table_modify_with_reset_and_get_vallo6");
  }

  netbufferv4_update_vallo6_tbl_table_modify_with_reset_and_get_vallo6_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo6_tbl_table_modify_with_reset_and_get_vallo6", bytes);
  }

  netbufferv4_update_vallo6_tbl_table_modify_with_reset_and_get_vallo6_result result;
  try {
    iface_->update_vallo6_tbl_table_modify_with_reset_and_get_vallo6(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo6_tbl_table_modify_with_reset_and_get_vallo6");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo6_tbl_table_modify_with_reset_and_get_vallo6", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo6_tbl_table_modify_with_reset_and_get_vallo6");
  }

  oprot->writeMessageBegin("update_vallo6_tbl_table_modify_with_reset_and_get_vallo6", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo6_tbl_table_modify_with_reset_and_get_vallo6", bytes);
  }
}

void netbufferv4Processor::process_update_vallo6_tbl_table_modify_with_reset_and_get_vallo6_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo6_tbl_table_modify_with_reset_and_get_vallo6_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo6_tbl_table_modify_with_reset_and_get_vallo6_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo6_tbl_table_modify_with_reset_and_get_vallo6_by_match_spec");
  }

  netbufferv4_update_vallo6_tbl_table_modify_with_reset_and_get_vallo6_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo6_tbl_table_modify_with_reset_and_get_vallo6_by_match_spec", bytes);
  }

  netbufferv4_update_vallo6_tbl_table_modify_with_reset_and_get_vallo6_by_match_spec_result result;
  try {
    iface_->update_vallo6_tbl_table_modify_with_reset_and_get_vallo6_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo6_tbl_table_modify_with_reset_and_get_vallo6_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo6_tbl_table_modify_with_reset_and_get_vallo6_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo6_tbl_table_modify_with_reset_and_get_vallo6_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo6_tbl_table_modify_with_reset_and_get_vallo6_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo6_tbl_table_modify_with_reset_and_get_vallo6_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo6_tbl_table_modify_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo6_tbl_table_modify_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo6_tbl_table_modify_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo6_tbl_table_modify_with_nop");
  }

  netbufferv4_update_vallo6_tbl_table_modify_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo6_tbl_table_modify_with_nop", bytes);
  }

  netbufferv4_update_vallo6_tbl_table_modify_with_nop_result result;
  try {
    iface_->update_vallo6_tbl_table_modify_with_nop(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo6_tbl_table_modify_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo6_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo6_tbl_table_modify_with_nop");
  }

  oprot->writeMessageBegin("update_vallo6_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo6_tbl_table_modify_with_nop", bytes);
  }
}

void netbufferv4Processor::process_update_vallo6_tbl_table_modify_with_nop_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo6_tbl_table_modify_with_nop_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo6_tbl_table_modify_with_nop_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo6_tbl_table_modify_with_nop_by_match_spec");
  }

  netbufferv4_update_vallo6_tbl_table_modify_with_nop_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo6_tbl_table_modify_with_nop_by_match_spec", bytes);
  }

  netbufferv4_update_vallo6_tbl_table_modify_with_nop_by_match_spec_result result;
  try {
    iface_->update_vallo6_tbl_table_modify_with_nop_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo6_tbl_table_modify_with_nop_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo6_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo6_tbl_table_modify_with_nop_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo6_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo6_tbl_table_modify_with_nop_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo7_tbl_table_modify_with_get_vallo7(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo7_tbl_table_modify_with_get_vallo7", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo7_tbl_table_modify_with_get_vallo7");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo7_tbl_table_modify_with_get_vallo7");
  }

  netbufferv4_update_vallo7_tbl_table_modify_with_get_vallo7_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo7_tbl_table_modify_with_get_vallo7", bytes);
  }

  netbufferv4_update_vallo7_tbl_table_modify_with_get_vallo7_result result;
  try {
    iface_->update_vallo7_tbl_table_modify_with_get_vallo7(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo7_tbl_table_modify_with_get_vallo7");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo7_tbl_table_modify_with_get_vallo7", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo7_tbl_table_modify_with_get_vallo7");
  }

  oprot->writeMessageBegin("update_vallo7_tbl_table_modify_with_get_vallo7", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo7_tbl_table_modify_with_get_vallo7", bytes);
  }
}

void netbufferv4Processor::process_update_vallo7_tbl_table_modify_with_get_vallo7_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo7_tbl_table_modify_with_get_vallo7_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo7_tbl_table_modify_with_get_vallo7_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo7_tbl_table_modify_with_get_vallo7_by_match_spec");
  }

  netbufferv4_update_vallo7_tbl_table_modify_with_get_vallo7_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo7_tbl_table_modify_with_get_vallo7_by_match_spec", bytes);
  }

  netbufferv4_update_vallo7_tbl_table_modify_with_get_vallo7_by_match_spec_result result;
  try {
    iface_->update_vallo7_tbl_table_modify_with_get_vallo7_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo7_tbl_table_modify_with_get_vallo7_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo7_tbl_table_modify_with_get_vallo7_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo7_tbl_table_modify_with_get_vallo7_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo7_tbl_table_modify_with_get_vallo7_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo7_tbl_table_modify_with_get_vallo7_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo7_tbl_table_modify_with_set_and_get_vallo7(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo7_tbl_table_modify_with_set_and_get_vallo7", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo7_tbl_table_modify_with_set_and_get_vallo7");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo7_tbl_table_modify_with_set_and_get_vallo7");
  }

  netbufferv4_update_vallo7_tbl_table_modify_with_set_and_get_vallo7_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo7_tbl_table_modify_with_set_and_get_vallo7", bytes);
  }

  netbufferv4_update_vallo7_tbl_table_modify_with_set_and_get_vallo7_result result;
  try {
    iface_->update_vallo7_tbl_table_modify_with_set_and_get_vallo7(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo7_tbl_table_modify_with_set_and_get_vallo7");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo7_tbl_table_modify_with_set_and_get_vallo7", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo7_tbl_table_modify_with_set_and_get_vallo7");
  }

  oprot->writeMessageBegin("update_vallo7_tbl_table_modify_with_set_and_get_vallo7", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo7_tbl_table_modify_with_set_and_get_vallo7", bytes);
  }
}

void netbufferv4Processor::process_update_vallo7_tbl_table_modify_with_set_and_get_vallo7_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo7_tbl_table_modify_with_set_and_get_vallo7_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo7_tbl_table_modify_with_set_and_get_vallo7_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo7_tbl_table_modify_with_set_and_get_vallo7_by_match_spec");
  }

  netbufferv4_update_vallo7_tbl_table_modify_with_set_and_get_vallo7_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo7_tbl_table_modify_with_set_and_get_vallo7_by_match_spec", bytes);
  }

  netbufferv4_update_vallo7_tbl_table_modify_with_set_and_get_vallo7_by_match_spec_result result;
  try {
    iface_->update_vallo7_tbl_table_modify_with_set_and_get_vallo7_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo7_tbl_table_modify_with_set_and_get_vallo7_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo7_tbl_table_modify_with_set_and_get_vallo7_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo7_tbl_table_modify_with_set_and_get_vallo7_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo7_tbl_table_modify_with_set_and_get_vallo7_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo7_tbl_table_modify_with_set_and_get_vallo7_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo7_tbl_table_modify_with_reset_and_get_vallo7(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo7_tbl_table_modify_with_reset_and_get_vallo7", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo7_tbl_table_modify_with_reset_and_get_vallo7");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo7_tbl_table_modify_with_reset_and_get_vallo7");
  }

  netbufferv4_update_vallo7_tbl_table_modify_with_reset_and_get_vallo7_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo7_tbl_table_modify_with_reset_and_get_vallo7", bytes);
  }

  netbufferv4_update_vallo7_tbl_table_modify_with_reset_and_get_vallo7_result result;
  try {
    iface_->update_vallo7_tbl_table_modify_with_reset_and_get_vallo7(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo7_tbl_table_modify_with_reset_and_get_vallo7");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo7_tbl_table_modify_with_reset_and_get_vallo7", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo7_tbl_table_modify_with_reset_and_get_vallo7");
  }

  oprot->writeMessageBegin("update_vallo7_tbl_table_modify_with_reset_and_get_vallo7", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo7_tbl_table_modify_with_reset_and_get_vallo7", bytes);
  }
}

void netbufferv4Processor::process_update_vallo7_tbl_table_modify_with_reset_and_get_vallo7_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo7_tbl_table_modify_with_reset_and_get_vallo7_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo7_tbl_table_modify_with_reset_and_get_vallo7_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo7_tbl_table_modify_with_reset_and_get_vallo7_by_match_spec");
  }

  netbufferv4_update_vallo7_tbl_table_modify_with_reset_and_get_vallo7_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo7_tbl_table_modify_with_reset_and_get_vallo7_by_match_spec", bytes);
  }

  netbufferv4_update_vallo7_tbl_table_modify_with_reset_and_get_vallo7_by_match_spec_result result;
  try {
    iface_->update_vallo7_tbl_table_modify_with_reset_and_get_vallo7_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo7_tbl_table_modify_with_reset_and_get_vallo7_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo7_tbl_table_modify_with_reset_and_get_vallo7_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo7_tbl_table_modify_with_reset_and_get_vallo7_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo7_tbl_table_modify_with_reset_and_get_vallo7_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo7_tbl_table_modify_with_reset_and_get_vallo7_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo7_tbl_table_modify_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo7_tbl_table_modify_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo7_tbl_table_modify_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo7_tbl_table_modify_with_nop");
  }

  netbufferv4_update_vallo7_tbl_table_modify_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo7_tbl_table_modify_with_nop", bytes);
  }

  netbufferv4_update_vallo7_tbl_table_modify_with_nop_result result;
  try {
    iface_->update_vallo7_tbl_table_modify_with_nop(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo7_tbl_table_modify_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo7_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo7_tbl_table_modify_with_nop");
  }

  oprot->writeMessageBegin("update_vallo7_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo7_tbl_table_modify_with_nop", bytes);
  }
}

void netbufferv4Processor::process_update_vallo7_tbl_table_modify_with_nop_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo7_tbl_table_modify_with_nop_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo7_tbl_table_modify_with_nop_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo7_tbl_table_modify_with_nop_by_match_spec");
  }

  netbufferv4_update_vallo7_tbl_table_modify_with_nop_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo7_tbl_table_modify_with_nop_by_match_spec", bytes);
  }

  netbufferv4_update_vallo7_tbl_table_modify_with_nop_by_match_spec_result result;
  try {
    iface_->update_vallo7_tbl_table_modify_with_nop_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo7_tbl_table_modify_with_nop_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo7_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo7_tbl_table_modify_with_nop_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo7_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo7_tbl_table_modify_with_nop_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo8_tbl_table_modify_with_get_vallo8(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo8_tbl_table_modify_with_get_vallo8", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo8_tbl_table_modify_with_get_vallo8");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo8_tbl_table_modify_with_get_vallo8");
  }

  netbufferv4_update_vallo8_tbl_table_modify_with_get_vallo8_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo8_tbl_table_modify_with_get_vallo8", bytes);
  }

  netbufferv4_update_vallo8_tbl_table_modify_with_get_vallo8_result result;
  try {
    iface_->update_vallo8_tbl_table_modify_with_get_vallo8(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo8_tbl_table_modify_with_get_vallo8");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo8_tbl_table_modify_with_get_vallo8", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo8_tbl_table_modify_with_get_vallo8");
  }

  oprot->writeMessageBegin("update_vallo8_tbl_table_modify_with_get_vallo8", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo8_tbl_table_modify_with_get_vallo8", bytes);
  }
}

void netbufferv4Processor::process_update_vallo8_tbl_table_modify_with_get_vallo8_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo8_tbl_table_modify_with_get_vallo8_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo8_tbl_table_modify_with_get_vallo8_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo8_tbl_table_modify_with_get_vallo8_by_match_spec");
  }

  netbufferv4_update_vallo8_tbl_table_modify_with_get_vallo8_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo8_tbl_table_modify_with_get_vallo8_by_match_spec", bytes);
  }

  netbufferv4_update_vallo8_tbl_table_modify_with_get_vallo8_by_match_spec_result result;
  try {
    iface_->update_vallo8_tbl_table_modify_with_get_vallo8_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo8_tbl_table_modify_with_get_vallo8_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo8_tbl_table_modify_with_get_vallo8_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo8_tbl_table_modify_with_get_vallo8_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo8_tbl_table_modify_with_get_vallo8_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo8_tbl_table_modify_with_get_vallo8_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo8_tbl_table_modify_with_set_and_get_vallo8(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo8_tbl_table_modify_with_set_and_get_vallo8", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo8_tbl_table_modify_with_set_and_get_vallo8");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo8_tbl_table_modify_with_set_and_get_vallo8");
  }

  netbufferv4_update_vallo8_tbl_table_modify_with_set_and_get_vallo8_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo8_tbl_table_modify_with_set_and_get_vallo8", bytes);
  }

  netbufferv4_update_vallo8_tbl_table_modify_with_set_and_get_vallo8_result result;
  try {
    iface_->update_vallo8_tbl_table_modify_with_set_and_get_vallo8(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo8_tbl_table_modify_with_set_and_get_vallo8");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo8_tbl_table_modify_with_set_and_get_vallo8", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo8_tbl_table_modify_with_set_and_get_vallo8");
  }

  oprot->writeMessageBegin("update_vallo8_tbl_table_modify_with_set_and_get_vallo8", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo8_tbl_table_modify_with_set_and_get_vallo8", bytes);
  }
}

void netbufferv4Processor::process_update_vallo8_tbl_table_modify_with_set_and_get_vallo8_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo8_tbl_table_modify_with_set_and_get_vallo8_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo8_tbl_table_modify_with_set_and_get_vallo8_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo8_tbl_table_modify_with_set_and_get_vallo8_by_match_spec");
  }

  netbufferv4_update_vallo8_tbl_table_modify_with_set_and_get_vallo8_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo8_tbl_table_modify_with_set_and_get_vallo8_by_match_spec", bytes);
  }

  netbufferv4_update_vallo8_tbl_table_modify_with_set_and_get_vallo8_by_match_spec_result result;
  try {
    iface_->update_vallo8_tbl_table_modify_with_set_and_get_vallo8_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo8_tbl_table_modify_with_set_and_get_vallo8_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo8_tbl_table_modify_with_set_and_get_vallo8_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo8_tbl_table_modify_with_set_and_get_vallo8_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo8_tbl_table_modify_with_set_and_get_vallo8_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo8_tbl_table_modify_with_set_and_get_vallo8_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo8_tbl_table_modify_with_reset_and_get_vallo8(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo8_tbl_table_modify_with_reset_and_get_vallo8", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo8_tbl_table_modify_with_reset_and_get_vallo8");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo8_tbl_table_modify_with_reset_and_get_vallo8");
  }

  netbufferv4_update_vallo8_tbl_table_modify_with_reset_and_get_vallo8_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo8_tbl_table_modify_with_reset_and_get_vallo8", bytes);
  }

  netbufferv4_update_vallo8_tbl_table_modify_with_reset_and_get_vallo8_result result;
  try {
    iface_->update_vallo8_tbl_table_modify_with_reset_and_get_vallo8(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo8_tbl_table_modify_with_reset_and_get_vallo8");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo8_tbl_table_modify_with_reset_and_get_vallo8", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo8_tbl_table_modify_with_reset_and_get_vallo8");
  }

  oprot->writeMessageBegin("update_vallo8_tbl_table_modify_with_reset_and_get_vallo8", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo8_tbl_table_modify_with_reset_and_get_vallo8", bytes);
  }
}

void netbufferv4Processor::process_update_vallo8_tbl_table_modify_with_reset_and_get_vallo8_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo8_tbl_table_modify_with_reset_and_get_vallo8_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo8_tbl_table_modify_with_reset_and_get_vallo8_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo8_tbl_table_modify_with_reset_and_get_vallo8_by_match_spec");
  }

  netbufferv4_update_vallo8_tbl_table_modify_with_reset_and_get_vallo8_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo8_tbl_table_modify_with_reset_and_get_vallo8_by_match_spec", bytes);
  }

  netbufferv4_update_vallo8_tbl_table_modify_with_reset_and_get_vallo8_by_match_spec_result result;
  try {
    iface_->update_vallo8_tbl_table_modify_with_reset_and_get_vallo8_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo8_tbl_table_modify_with_reset_and_get_vallo8_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo8_tbl_table_modify_with_reset_and_get_vallo8_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo8_tbl_table_modify_with_reset_and_get_vallo8_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo8_tbl_table_modify_with_reset_and_get_vallo8_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo8_tbl_table_modify_with_reset_and_get_vallo8_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo8_tbl_table_modify_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo8_tbl_table_modify_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo8_tbl_table_modify_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo8_tbl_table_modify_with_nop");
  }

  netbufferv4_update_vallo8_tbl_table_modify_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo8_tbl_table_modify_with_nop", bytes);
  }

  netbufferv4_update_vallo8_tbl_table_modify_with_nop_result result;
  try {
    iface_->update_vallo8_tbl_table_modify_with_nop(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo8_tbl_table_modify_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo8_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo8_tbl_table_modify_with_nop");
  }

  oprot->writeMessageBegin("update_vallo8_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo8_tbl_table_modify_with_nop", bytes);
  }
}

void netbufferv4Processor::process_update_vallo8_tbl_table_modify_with_nop_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo8_tbl_table_modify_with_nop_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo8_tbl_table_modify_with_nop_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo8_tbl_table_modify_with_nop_by_match_spec");
  }

  netbufferv4_update_vallo8_tbl_table_modify_with_nop_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo8_tbl_table_modify_with_nop_by_match_spec", bytes);
  }

  netbufferv4_update_vallo8_tbl_table_modify_with_nop_by_match_spec_result result;
  try {
    iface_->update_vallo8_tbl_table_modify_with_nop_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo8_tbl_table_modify_with_nop_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo8_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo8_tbl_table_modify_with_nop_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo8_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo8_tbl_table_modify_with_nop_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo9_tbl_table_modify_with_get_vallo9(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo9_tbl_table_modify_with_get_vallo9", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo9_tbl_table_modify_with_get_vallo9");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo9_tbl_table_modify_with_get_vallo9");
  }

  netbufferv4_update_vallo9_tbl_table_modify_with_get_vallo9_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo9_tbl_table_modify_with_get_vallo9", bytes);
  }

  netbufferv4_update_vallo9_tbl_table_modify_with_get_vallo9_result result;
  try {
    iface_->update_vallo9_tbl_table_modify_with_get_vallo9(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo9_tbl_table_modify_with_get_vallo9");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo9_tbl_table_modify_with_get_vallo9", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo9_tbl_table_modify_with_get_vallo9");
  }

  oprot->writeMessageBegin("update_vallo9_tbl_table_modify_with_get_vallo9", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo9_tbl_table_modify_with_get_vallo9", bytes);
  }
}

void netbufferv4Processor::process_update_vallo9_tbl_table_modify_with_get_vallo9_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo9_tbl_table_modify_with_get_vallo9_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo9_tbl_table_modify_with_get_vallo9_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo9_tbl_table_modify_with_get_vallo9_by_match_spec");
  }

  netbufferv4_update_vallo9_tbl_table_modify_with_get_vallo9_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo9_tbl_table_modify_with_get_vallo9_by_match_spec", bytes);
  }

  netbufferv4_update_vallo9_tbl_table_modify_with_get_vallo9_by_match_spec_result result;
  try {
    iface_->update_vallo9_tbl_table_modify_with_get_vallo9_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo9_tbl_table_modify_with_get_vallo9_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo9_tbl_table_modify_with_get_vallo9_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo9_tbl_table_modify_with_get_vallo9_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo9_tbl_table_modify_with_get_vallo9_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo9_tbl_table_modify_with_get_vallo9_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo9_tbl_table_modify_with_set_and_get_vallo9(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo9_tbl_table_modify_with_set_and_get_vallo9", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo9_tbl_table_modify_with_set_and_get_vallo9");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo9_tbl_table_modify_with_set_and_get_vallo9");
  }

  netbufferv4_update_vallo9_tbl_table_modify_with_set_and_get_vallo9_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo9_tbl_table_modify_with_set_and_get_vallo9", bytes);
  }

  netbufferv4_update_vallo9_tbl_table_modify_with_set_and_get_vallo9_result result;
  try {
    iface_->update_vallo9_tbl_table_modify_with_set_and_get_vallo9(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo9_tbl_table_modify_with_set_and_get_vallo9");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo9_tbl_table_modify_with_set_and_get_vallo9", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo9_tbl_table_modify_with_set_and_get_vallo9");
  }

  oprot->writeMessageBegin("update_vallo9_tbl_table_modify_with_set_and_get_vallo9", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo9_tbl_table_modify_with_set_and_get_vallo9", bytes);
  }
}

void netbufferv4Processor::process_update_vallo9_tbl_table_modify_with_set_and_get_vallo9_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo9_tbl_table_modify_with_set_and_get_vallo9_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo9_tbl_table_modify_with_set_and_get_vallo9_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo9_tbl_table_modify_with_set_and_get_vallo9_by_match_spec");
  }

  netbufferv4_update_vallo9_tbl_table_modify_with_set_and_get_vallo9_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo9_tbl_table_modify_with_set_and_get_vallo9_by_match_spec", bytes);
  }

  netbufferv4_update_vallo9_tbl_table_modify_with_set_and_get_vallo9_by_match_spec_result result;
  try {
    iface_->update_vallo9_tbl_table_modify_with_set_and_get_vallo9_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo9_tbl_table_modify_with_set_and_get_vallo9_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo9_tbl_table_modify_with_set_and_get_vallo9_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo9_tbl_table_modify_with_set_and_get_vallo9_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo9_tbl_table_modify_with_set_and_get_vallo9_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo9_tbl_table_modify_with_set_and_get_vallo9_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo9_tbl_table_modify_with_reset_and_get_vallo9(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo9_tbl_table_modify_with_reset_and_get_vallo9", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo9_tbl_table_modify_with_reset_and_get_vallo9");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo9_tbl_table_modify_with_reset_and_get_vallo9");
  }

  netbufferv4_update_vallo9_tbl_table_modify_with_reset_and_get_vallo9_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo9_tbl_table_modify_with_reset_and_get_vallo9", bytes);
  }

  netbufferv4_update_vallo9_tbl_table_modify_with_reset_and_get_vallo9_result result;
  try {
    iface_->update_vallo9_tbl_table_modify_with_reset_and_get_vallo9(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo9_tbl_table_modify_with_reset_and_get_vallo9");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo9_tbl_table_modify_with_reset_and_get_vallo9", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo9_tbl_table_modify_with_reset_and_get_vallo9");
  }

  oprot->writeMessageBegin("update_vallo9_tbl_table_modify_with_reset_and_get_vallo9", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo9_tbl_table_modify_with_reset_and_get_vallo9", bytes);
  }
}

void netbufferv4Processor::process_update_vallo9_tbl_table_modify_with_reset_and_get_vallo9_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo9_tbl_table_modify_with_reset_and_get_vallo9_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo9_tbl_table_modify_with_reset_and_get_vallo9_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo9_tbl_table_modify_with_reset_and_get_vallo9_by_match_spec");
  }

  netbufferv4_update_vallo9_tbl_table_modify_with_reset_and_get_vallo9_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo9_tbl_table_modify_with_reset_and_get_vallo9_by_match_spec", bytes);
  }

  netbufferv4_update_vallo9_tbl_table_modify_with_reset_and_get_vallo9_by_match_spec_result result;
  try {
    iface_->update_vallo9_tbl_table_modify_with_reset_and_get_vallo9_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo9_tbl_table_modify_with_reset_and_get_vallo9_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo9_tbl_table_modify_with_reset_and_get_vallo9_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo9_tbl_table_modify_with_reset_and_get_vallo9_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo9_tbl_table_modify_with_reset_and_get_vallo9_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo9_tbl_table_modify_with_reset_and_get_vallo9_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo9_tbl_table_modify_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo9_tbl_table_modify_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo9_tbl_table_modify_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo9_tbl_table_modify_with_nop");
  }

  netbufferv4_update_vallo9_tbl_table_modify_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo9_tbl_table_modify_with_nop", bytes);
  }

  netbufferv4_update_vallo9_tbl_table_modify_with_nop_result result;
  try {
    iface_->update_vallo9_tbl_table_modify_with_nop(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo9_tbl_table_modify_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo9_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo9_tbl_table_modify_with_nop");
  }

  oprot->writeMessageBegin("update_vallo9_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo9_tbl_table_modify_with_nop", bytes);
  }
}

void netbufferv4Processor::process_update_vallo9_tbl_table_modify_with_nop_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo9_tbl_table_modify_with_nop_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo9_tbl_table_modify_with_nop_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo9_tbl_table_modify_with_nop_by_match_spec");
  }

  netbufferv4_update_vallo9_tbl_table_modify_with_nop_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo9_tbl_table_modify_with_nop_by_match_spec", bytes);
  }

  netbufferv4_update_vallo9_tbl_table_modify_with_nop_by_match_spec_result result;
  try {
    iface_->update_vallo9_tbl_table_modify_with_nop_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo9_tbl_table_modify_with_nop_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo9_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo9_tbl_table_modify_with_nop_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo9_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo9_tbl_table_modify_with_nop_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_access_cache_frequency_tbl_table_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cache_frequency_tbl_table_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cache_frequency_tbl_table_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cache_frequency_tbl_table_delete");
  }

  netbufferv4_access_cache_frequency_tbl_table_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cache_frequency_tbl_table_delete", bytes);
  }

  netbufferv4_access_cache_frequency_tbl_table_delete_result result;
  try {
    iface_->access_cache_frequency_tbl_table_delete(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cache_frequency_tbl_table_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cache_frequency_tbl_table_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cache_frequency_tbl_table_delete");
  }

  oprot->writeMessageBegin("access_cache_frequency_tbl_table_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cache_frequency_tbl_table_delete", bytes);
  }
}

void netbufferv4Processor::process_access_cache_frequency_tbl_table_delete_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cache_frequency_tbl_table_delete_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cache_frequency_tbl_table_delete_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cache_frequency_tbl_table_delete_by_match_spec");
  }

  netbufferv4_access_cache_frequency_tbl_table_delete_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cache_frequency_tbl_table_delete_by_match_spec", bytes);
  }

  netbufferv4_access_cache_frequency_tbl_table_delete_by_match_spec_result result;
  try {
    iface_->access_cache_frequency_tbl_table_delete_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cache_frequency_tbl_table_delete_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cache_frequency_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cache_frequency_tbl_table_delete_by_match_spec");
  }

  oprot->writeMessageBegin("access_cache_frequency_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cache_frequency_tbl_table_delete_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_access_case1_tbl_table_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_case1_tbl_table_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_case1_tbl_table_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_case1_tbl_table_delete");
  }

  netbufferv4_access_case1_tbl_table_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_case1_tbl_table_delete", bytes);
  }

  netbufferv4_access_case1_tbl_table_delete_result result;
  try {
    iface_->access_case1_tbl_table_delete(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_case1_tbl_table_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_case1_tbl_table_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_case1_tbl_table_delete");
  }

  oprot->writeMessageBegin("access_case1_tbl_table_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_case1_tbl_table_delete", bytes);
  }
}

void netbufferv4Processor::process_access_case1_tbl_table_delete_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_case1_tbl_table_delete_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_case1_tbl_table_delete_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_case1_tbl_table_delete_by_match_spec");
  }

  netbufferv4_access_case1_tbl_table_delete_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_case1_tbl_table_delete_by_match_spec", bytes);
  }

  netbufferv4_access_case1_tbl_table_delete_by_match_spec_result result;
  try {
    iface_->access_case1_tbl_table_delete_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_case1_tbl_table_delete_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_case1_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_case1_tbl_table_delete_by_match_spec");
  }

  oprot->writeMessageBegin("access_case1_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_case1_tbl_table_delete_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_access_cm1_tbl_table_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm1_tbl_table_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm1_tbl_table_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm1_tbl_table_delete");
  }

  netbufferv4_access_cm1_tbl_table_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm1_tbl_table_delete", bytes);
  }

  netbufferv4_access_cm1_tbl_table_delete_result result;
  try {
    iface_->access_cm1_tbl_table_delete(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm1_tbl_table_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm1_tbl_table_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm1_tbl_table_delete");
  }

  oprot->writeMessageBegin("access_cm1_tbl_table_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm1_tbl_table_delete", bytes);
  }
}

void netbufferv4Processor::process_access_cm1_tbl_table_delete_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm1_tbl_table_delete_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm1_tbl_table_delete_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm1_tbl_table_delete_by_match_spec");
  }

  netbufferv4_access_cm1_tbl_table_delete_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm1_tbl_table_delete_by_match_spec", bytes);
  }

  netbufferv4_access_cm1_tbl_table_delete_by_match_spec_result result;
  try {
    iface_->access_cm1_tbl_table_delete_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm1_tbl_table_delete_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm1_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm1_tbl_table_delete_by_match_spec");
  }

  oprot->writeMessageBegin("access_cm1_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm1_tbl_table_delete_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_access_cm2_tbl_table_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm2_tbl_table_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm2_tbl_table_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm2_tbl_table_delete");
  }

  netbufferv4_access_cm2_tbl_table_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm2_tbl_table_delete", bytes);
  }

  netbufferv4_access_cm2_tbl_table_delete_result result;
  try {
    iface_->access_cm2_tbl_table_delete(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm2_tbl_table_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm2_tbl_table_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm2_tbl_table_delete");
  }

  oprot->writeMessageBegin("access_cm2_tbl_table_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm2_tbl_table_delete", bytes);
  }
}

void netbufferv4Processor::process_access_cm2_tbl_table_delete_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm2_tbl_table_delete_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm2_tbl_table_delete_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm2_tbl_table_delete_by_match_spec");
  }

  netbufferv4_access_cm2_tbl_table_delete_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm2_tbl_table_delete_by_match_spec", bytes);
  }

  netbufferv4_access_cm2_tbl_table_delete_by_match_spec_result result;
  try {
    iface_->access_cm2_tbl_table_delete_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm2_tbl_table_delete_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm2_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm2_tbl_table_delete_by_match_spec");
  }

  oprot->writeMessageBegin("access_cm2_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm2_tbl_table_delete_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_access_cm3_tbl_table_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm3_tbl_table_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm3_tbl_table_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm3_tbl_table_delete");
  }

  netbufferv4_access_cm3_tbl_table_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm3_tbl_table_delete", bytes);
  }

  netbufferv4_access_cm3_tbl_table_delete_result result;
  try {
    iface_->access_cm3_tbl_table_delete(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm3_tbl_table_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm3_tbl_table_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm3_tbl_table_delete");
  }

  oprot->writeMessageBegin("access_cm3_tbl_table_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm3_tbl_table_delete", bytes);
  }
}

void netbufferv4Processor::process_access_cm3_tbl_table_delete_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm3_tbl_table_delete_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm3_tbl_table_delete_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm3_tbl_table_delete_by_match_spec");
  }

  netbufferv4_access_cm3_tbl_table_delete_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm3_tbl_table_delete_by_match_spec", bytes);
  }

  netbufferv4_access_cm3_tbl_table_delete_by_match_spec_result result;
  try {
    iface_->access_cm3_tbl_table_delete_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm3_tbl_table_delete_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm3_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm3_tbl_table_delete_by_match_spec");
  }

  oprot->writeMessageBegin("access_cm3_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm3_tbl_table_delete_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_access_cm4_tbl_table_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm4_tbl_table_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm4_tbl_table_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm4_tbl_table_delete");
  }

  netbufferv4_access_cm4_tbl_table_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm4_tbl_table_delete", bytes);
  }

  netbufferv4_access_cm4_tbl_table_delete_result result;
  try {
    iface_->access_cm4_tbl_table_delete(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm4_tbl_table_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm4_tbl_table_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm4_tbl_table_delete");
  }

  oprot->writeMessageBegin("access_cm4_tbl_table_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm4_tbl_table_delete", bytes);
  }
}

void netbufferv4Processor::process_access_cm4_tbl_table_delete_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm4_tbl_table_delete_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm4_tbl_table_delete_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm4_tbl_table_delete_by_match_spec");
  }

  netbufferv4_access_cm4_tbl_table_delete_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm4_tbl_table_delete_by_match_spec", bytes);
  }

  netbufferv4_access_cm4_tbl_table_delete_by_match_spec_result result;
  try {
    iface_->access_cm4_tbl_table_delete_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm4_tbl_table_delete_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm4_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm4_tbl_table_delete_by_match_spec");
  }

  oprot->writeMessageBegin("access_cm4_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm4_tbl_table_delete_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_access_deleted_tbl_table_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_deleted_tbl_table_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_deleted_tbl_table_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_deleted_tbl_table_delete");
  }

  netbufferv4_access_deleted_tbl_table_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_deleted_tbl_table_delete", bytes);
  }

  netbufferv4_access_deleted_tbl_table_delete_result result;
  try {
    iface_->access_deleted_tbl_table_delete(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_deleted_tbl_table_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_deleted_tbl_table_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_deleted_tbl_table_delete");
  }

  oprot->writeMessageBegin("access_deleted_tbl_table_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_deleted_tbl_table_delete", bytes);
  }
}

void netbufferv4Processor::process_access_deleted_tbl_table_delete_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_deleted_tbl_table_delete_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_deleted_tbl_table_delete_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_deleted_tbl_table_delete_by_match_spec");
  }

  netbufferv4_access_deleted_tbl_table_delete_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_deleted_tbl_table_delete_by_match_spec", bytes);
  }

  netbufferv4_access_deleted_tbl_table_delete_by_match_spec_result result;
  try {
    iface_->access_deleted_tbl_table_delete_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_deleted_tbl_table_delete_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_deleted_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_deleted_tbl_table_delete_by_match_spec");
  }

  oprot->writeMessageBegin("access_deleted_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_deleted_tbl_table_delete_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_access_latest_tbl_table_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_latest_tbl_table_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_latest_tbl_table_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_latest_tbl_table_delete");
  }

  netbufferv4_access_latest_tbl_table_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_latest_tbl_table_delete", bytes);
  }

  netbufferv4_access_latest_tbl_table_delete_result result;
  try {
    iface_->access_latest_tbl_table_delete(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_latest_tbl_table_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_latest_tbl_table_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_latest_tbl_table_delete");
  }

  oprot->writeMessageBegin("access_latest_tbl_table_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_latest_tbl_table_delete", bytes);
  }
}

void netbufferv4Processor::process_access_latest_tbl_table_delete_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_latest_tbl_table_delete_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_latest_tbl_table_delete_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_latest_tbl_table_delete_by_match_spec");
  }

  netbufferv4_access_latest_tbl_table_delete_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_latest_tbl_table_delete_by_match_spec", bytes);
  }

  netbufferv4_access_latest_tbl_table_delete_by_match_spec_result result;
  try {
    iface_->access_latest_tbl_table_delete_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_latest_tbl_table_delete_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_latest_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_latest_tbl_table_delete_by_match_spec");
  }

  oprot->writeMessageBegin("access_latest_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_latest_tbl_table_delete_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_access_savedseq_tbl_table_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_savedseq_tbl_table_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_savedseq_tbl_table_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_savedseq_tbl_table_delete");
  }

  netbufferv4_access_savedseq_tbl_table_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_savedseq_tbl_table_delete", bytes);
  }

  netbufferv4_access_savedseq_tbl_table_delete_result result;
  try {
    iface_->access_savedseq_tbl_table_delete(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_savedseq_tbl_table_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_savedseq_tbl_table_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_savedseq_tbl_table_delete");
  }

  oprot->writeMessageBegin("access_savedseq_tbl_table_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_savedseq_tbl_table_delete", bytes);
  }
}

void netbufferv4Processor::process_access_savedseq_tbl_table_delete_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_savedseq_tbl_table_delete_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_savedseq_tbl_table_delete_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_savedseq_tbl_table_delete_by_match_spec");
  }

  netbufferv4_access_savedseq_tbl_table_delete_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_savedseq_tbl_table_delete_by_match_spec", bytes);
  }

  netbufferv4_access_savedseq_tbl_table_delete_by_match_spec_result result;
  try {
    iface_->access_savedseq_tbl_table_delete_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_savedseq_tbl_table_delete_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_savedseq_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_savedseq_tbl_table_delete_by_match_spec");
  }

  oprot->writeMessageBegin("access_savedseq_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_savedseq_tbl_table_delete_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_access_seq_tbl_table_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_seq_tbl_table_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_seq_tbl_table_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_seq_tbl_table_delete");
  }

  netbufferv4_access_seq_tbl_table_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_seq_tbl_table_delete", bytes);
  }

  netbufferv4_access_seq_tbl_table_delete_result result;
  try {
    iface_->access_seq_tbl_table_delete(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_seq_tbl_table_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_seq_tbl_table_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_seq_tbl_table_delete");
  }

  oprot->writeMessageBegin("access_seq_tbl_table_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_seq_tbl_table_delete", bytes);
  }
}

void netbufferv4Processor::process_access_seq_tbl_table_delete_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_seq_tbl_table_delete_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_seq_tbl_table_delete_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_seq_tbl_table_delete_by_match_spec");
  }

  netbufferv4_access_seq_tbl_table_delete_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_seq_tbl_table_delete_by_match_spec", bytes);
  }

  netbufferv4_access_seq_tbl_table_delete_by_match_spec_result result;
  try {
    iface_->access_seq_tbl_table_delete_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_seq_tbl_table_delete_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_seq_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_seq_tbl_table_delete_by_match_spec");
  }

  oprot->writeMessageBegin("access_seq_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_seq_tbl_table_delete_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_access_validvalue_tbl_table_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_validvalue_tbl_table_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_validvalue_tbl_table_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_validvalue_tbl_table_delete");
  }

  netbufferv4_access_validvalue_tbl_table_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_validvalue_tbl_table_delete", bytes);
  }

  netbufferv4_access_validvalue_tbl_table_delete_result result;
  try {
    iface_->access_validvalue_tbl_table_delete(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_validvalue_tbl_table_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_validvalue_tbl_table_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_validvalue_tbl_table_delete");
  }

  oprot->writeMessageBegin("access_validvalue_tbl_table_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_validvalue_tbl_table_delete", bytes);
  }
}

void netbufferv4Processor::process_access_validvalue_tbl_table_delete_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_validvalue_tbl_table_delete_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_validvalue_tbl_table_delete_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_validvalue_tbl_table_delete_by_match_spec");
  }

  netbufferv4_access_validvalue_tbl_table_delete_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_validvalue_tbl_table_delete_by_match_spec", bytes);
  }

  netbufferv4_access_validvalue_tbl_table_delete_by_match_spec_result result;
  try {
    iface_->access_validvalue_tbl_table_delete_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_validvalue_tbl_table_delete_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_validvalue_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_validvalue_tbl_table_delete_by_match_spec");
  }

  oprot->writeMessageBegin("access_validvalue_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_validvalue_tbl_table_delete_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_add_and_remove_value_header_tbl_table_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.add_and_remove_value_header_tbl_table_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.add_and_remove_value_header_tbl_table_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_delete");
  }

  netbufferv4_add_and_remove_value_header_tbl_table_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_delete", bytes);
  }

  netbufferv4_add_and_remove_value_header_tbl_table_delete_result result;
  try {
    iface_->add_and_remove_value_header_tbl_table_delete(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_delete");
  }

  oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_delete", bytes);
  }
}

void netbufferv4Processor::process_add_and_remove_value_header_tbl_table_delete_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.add_and_remove_value_header_tbl_table_delete_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.add_and_remove_value_header_tbl_table_delete_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_delete_by_match_spec");
  }

  netbufferv4_add_and_remove_value_header_tbl_table_delete_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_delete_by_match_spec", bytes);
  }

  netbufferv4_add_and_remove_value_header_tbl_table_delete_by_match_spec_result result;
  try {
    iface_->add_and_remove_value_header_tbl_table_delete_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec, args.priority);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_delete_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_delete_by_match_spec");
  }

  oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_delete_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_cache_lookup_tbl_table_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.cache_lookup_tbl_table_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.cache_lookup_tbl_table_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.cache_lookup_tbl_table_delete");
  }

  netbufferv4_cache_lookup_tbl_table_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.cache_lookup_tbl_table_delete", bytes);
  }

  netbufferv4_cache_lookup_tbl_table_delete_result result;
  try {
    iface_->cache_lookup_tbl_table_delete(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.cache_lookup_tbl_table_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("cache_lookup_tbl_table_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.cache_lookup_tbl_table_delete");
  }

  oprot->writeMessageBegin("cache_lookup_tbl_table_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.cache_lookup_tbl_table_delete", bytes);
  }
}

void netbufferv4Processor::process_cache_lookup_tbl_table_delete_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.cache_lookup_tbl_table_delete_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.cache_lookup_tbl_table_delete_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.cache_lookup_tbl_table_delete_by_match_spec");
  }

  netbufferv4_cache_lookup_tbl_table_delete_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.cache_lookup_tbl_table_delete_by_match_spec", bytes);
  }

  netbufferv4_cache_lookup_tbl_table_delete_by_match_spec_result result;
  try {
    iface_->cache_lookup_tbl_table_delete_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.cache_lookup_tbl_table_delete_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("cache_lookup_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.cache_lookup_tbl_table_delete_by_match_spec");
  }

  oprot->writeMessageBegin("cache_lookup_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.cache_lookup_tbl_table_delete_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_drop_tbl_table_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.drop_tbl_table_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.drop_tbl_table_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.drop_tbl_table_delete");
  }

  netbufferv4_drop_tbl_table_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.drop_tbl_table_delete", bytes);
  }

  netbufferv4_drop_tbl_table_delete_result result;
  try {
    iface_->drop_tbl_table_delete(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.drop_tbl_table_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("drop_tbl_table_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.drop_tbl_table_delete");
  }

  oprot->writeMessageBegin("drop_tbl_table_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.drop_tbl_table_delete", bytes);
  }
}

void netbufferv4Processor::process_drop_tbl_table_delete_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.drop_tbl_table_delete_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.drop_tbl_table_delete_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.drop_tbl_table_delete_by_match_spec");
  }

  netbufferv4_drop_tbl_table_delete_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.drop_tbl_table_delete_by_match_spec", bytes);
  }

  netbufferv4_drop_tbl_table_delete_by_match_spec_result result;
  try {
    iface_->drop_tbl_table_delete_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.drop_tbl_table_delete_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("drop_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.drop_tbl_table_delete_by_match_spec");
  }

  oprot->writeMessageBegin("drop_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.drop_tbl_table_delete_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_delete");
  }

  netbufferv4_eg_port_forward_tbl_table_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_delete", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_delete_result result;
  try {
    iface_->eg_port_forward_tbl_table_delete(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_delete");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_delete", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_delete_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_delete_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_delete_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_delete_by_match_spec");
  }

  netbufferv4_eg_port_forward_tbl_table_delete_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_delete_by_match_spec", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_delete_by_match_spec_result result;
  try {
    iface_->eg_port_forward_tbl_table_delete_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_delete_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_delete_by_match_spec");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_delete_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm1_tbl_table_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm1_tbl_table_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm1_tbl_table_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm1_tbl_table_delete");
  }

  netbufferv4_hash_for_cm1_tbl_table_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm1_tbl_table_delete", bytes);
  }

  netbufferv4_hash_for_cm1_tbl_table_delete_result result;
  try {
    iface_->hash_for_cm1_tbl_table_delete(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm1_tbl_table_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm1_tbl_table_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm1_tbl_table_delete");
  }

  oprot->writeMessageBegin("hash_for_cm1_tbl_table_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm1_tbl_table_delete", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm1_tbl_table_delete_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm1_tbl_table_delete_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm1_tbl_table_delete_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm1_tbl_table_delete_by_match_spec");
  }

  netbufferv4_hash_for_cm1_tbl_table_delete_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm1_tbl_table_delete_by_match_spec", bytes);
  }

  netbufferv4_hash_for_cm1_tbl_table_delete_by_match_spec_result result;
  try {
    iface_->hash_for_cm1_tbl_table_delete_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm1_tbl_table_delete_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm1_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm1_tbl_table_delete_by_match_spec");
  }

  oprot->writeMessageBegin("hash_for_cm1_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm1_tbl_table_delete_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm2_tbl_table_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm2_tbl_table_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm2_tbl_table_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm2_tbl_table_delete");
  }

  netbufferv4_hash_for_cm2_tbl_table_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm2_tbl_table_delete", bytes);
  }

  netbufferv4_hash_for_cm2_tbl_table_delete_result result;
  try {
    iface_->hash_for_cm2_tbl_table_delete(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm2_tbl_table_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm2_tbl_table_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm2_tbl_table_delete");
  }

  oprot->writeMessageBegin("hash_for_cm2_tbl_table_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm2_tbl_table_delete", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm2_tbl_table_delete_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm2_tbl_table_delete_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm2_tbl_table_delete_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm2_tbl_table_delete_by_match_spec");
  }

  netbufferv4_hash_for_cm2_tbl_table_delete_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm2_tbl_table_delete_by_match_spec", bytes);
  }

  netbufferv4_hash_for_cm2_tbl_table_delete_by_match_spec_result result;
  try {
    iface_->hash_for_cm2_tbl_table_delete_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm2_tbl_table_delete_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm2_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm2_tbl_table_delete_by_match_spec");
  }

  oprot->writeMessageBegin("hash_for_cm2_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm2_tbl_table_delete_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm3_tbl_table_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm3_tbl_table_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm3_tbl_table_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm3_tbl_table_delete");
  }

  netbufferv4_hash_for_cm3_tbl_table_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm3_tbl_table_delete", bytes);
  }

  netbufferv4_hash_for_cm3_tbl_table_delete_result result;
  try {
    iface_->hash_for_cm3_tbl_table_delete(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm3_tbl_table_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm3_tbl_table_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm3_tbl_table_delete");
  }

  oprot->writeMessageBegin("hash_for_cm3_tbl_table_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm3_tbl_table_delete", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm3_tbl_table_delete_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm3_tbl_table_delete_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm3_tbl_table_delete_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm3_tbl_table_delete_by_match_spec");
  }

  netbufferv4_hash_for_cm3_tbl_table_delete_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm3_tbl_table_delete_by_match_spec", bytes);
  }

  netbufferv4_hash_for_cm3_tbl_table_delete_by_match_spec_result result;
  try {
    iface_->hash_for_cm3_tbl_table_delete_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm3_tbl_table_delete_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm3_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm3_tbl_table_delete_by_match_spec");
  }

  oprot->writeMessageBegin("hash_for_cm3_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm3_tbl_table_delete_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm4_tbl_table_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm4_tbl_table_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm4_tbl_table_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm4_tbl_table_delete");
  }

  netbufferv4_hash_for_cm4_tbl_table_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm4_tbl_table_delete", bytes);
  }

  netbufferv4_hash_for_cm4_tbl_table_delete_result result;
  try {
    iface_->hash_for_cm4_tbl_table_delete(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm4_tbl_table_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm4_tbl_table_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm4_tbl_table_delete");
  }

  oprot->writeMessageBegin("hash_for_cm4_tbl_table_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm4_tbl_table_delete", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm4_tbl_table_delete_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm4_tbl_table_delete_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm4_tbl_table_delete_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm4_tbl_table_delete_by_match_spec");
  }

  netbufferv4_hash_for_cm4_tbl_table_delete_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm4_tbl_table_delete_by_match_spec", bytes);
  }

  netbufferv4_hash_for_cm4_tbl_table_delete_by_match_spec_result result;
  try {
    iface_->hash_for_cm4_tbl_table_delete_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm4_tbl_table_delete_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm4_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm4_tbl_table_delete_by_match_spec");
  }

  oprot->writeMessageBegin("hash_for_cm4_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm4_tbl_table_delete_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_hash_for_seq_tbl_table_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_seq_tbl_table_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_seq_tbl_table_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_seq_tbl_table_delete");
  }

  netbufferv4_hash_for_seq_tbl_table_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_seq_tbl_table_delete", bytes);
  }

  netbufferv4_hash_for_seq_tbl_table_delete_result result;
  try {
    iface_->hash_for_seq_tbl_table_delete(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_seq_tbl_table_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_seq_tbl_table_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_seq_tbl_table_delete");
  }

  oprot->writeMessageBegin("hash_for_seq_tbl_table_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_seq_tbl_table_delete", bytes);
  }
}

void netbufferv4Processor::process_hash_for_seq_tbl_table_delete_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_seq_tbl_table_delete_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_seq_tbl_table_delete_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_seq_tbl_table_delete_by_match_spec");
  }

  netbufferv4_hash_for_seq_tbl_table_delete_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_seq_tbl_table_delete_by_match_spec", bytes);
  }

  netbufferv4_hash_for_seq_tbl_table_delete_by_match_spec_result result;
  try {
    iface_->hash_for_seq_tbl_table_delete_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_seq_tbl_table_delete_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_seq_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_seq_tbl_table_delete_by_match_spec");
  }

  oprot->writeMessageBegin("hash_for_seq_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_seq_tbl_table_delete_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_ig_port_forward_tbl_table_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.ig_port_forward_tbl_table_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.ig_port_forward_tbl_table_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.ig_port_forward_tbl_table_delete");
  }

  netbufferv4_ig_port_forward_tbl_table_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.ig_port_forward_tbl_table_delete", bytes);
  }

  netbufferv4_ig_port_forward_tbl_table_delete_result result;
  try {
    iface_->ig_port_forward_tbl_table_delete(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.ig_port_forward_tbl_table_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ig_port_forward_tbl_table_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.ig_port_forward_tbl_table_delete");
  }

  oprot->writeMessageBegin("ig_port_forward_tbl_table_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.ig_port_forward_tbl_table_delete", bytes);
  }
}

void netbufferv4Processor::process_ig_port_forward_tbl_table_delete_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.ig_port_forward_tbl_table_delete_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.ig_port_forward_tbl_table_delete_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.ig_port_forward_tbl_table_delete_by_match_spec");
  }

  netbufferv4_ig_port_forward_tbl_table_delete_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.ig_port_forward_tbl_table_delete_by_match_spec", bytes);
  }

  netbufferv4_ig_port_forward_tbl_table_delete_by_match_spec_result result;
  try {
    iface_->ig_port_forward_tbl_table_delete_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.ig_port_forward_tbl_table_delete_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ig_port_forward_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.ig_port_forward_tbl_table_delete_by_match_spec");
  }

  oprot->writeMessageBegin("ig_port_forward_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.ig_port_forward_tbl_table_delete_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_ipv4_forward_tbl_table_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.ipv4_forward_tbl_table_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.ipv4_forward_tbl_table_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.ipv4_forward_tbl_table_delete");
  }

  netbufferv4_ipv4_forward_tbl_table_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.ipv4_forward_tbl_table_delete", bytes);
  }

  netbufferv4_ipv4_forward_tbl_table_delete_result result;
  try {
    iface_->ipv4_forward_tbl_table_delete(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.ipv4_forward_tbl_table_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ipv4_forward_tbl_table_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.ipv4_forward_tbl_table_delete");
  }

  oprot->writeMessageBegin("ipv4_forward_tbl_table_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.ipv4_forward_tbl_table_delete", bytes);
  }
}

void netbufferv4Processor::process_ipv4_forward_tbl_table_delete_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.ipv4_forward_tbl_table_delete_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.ipv4_forward_tbl_table_delete_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.ipv4_forward_tbl_table_delete_by_match_spec");
  }

  netbufferv4_ipv4_forward_tbl_table_delete_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.ipv4_forward_tbl_table_delete_by_match_spec", bytes);
  }

  netbufferv4_ipv4_forward_tbl_table_delete_by_match_spec_result result;
  try {
    iface_->ipv4_forward_tbl_table_delete_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.ipv4_forward_tbl_table_delete_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ipv4_forward_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.ipv4_forward_tbl_table_delete_by_match_spec");
  }

  oprot->writeMessageBegin("ipv4_forward_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.ipv4_forward_tbl_table_delete_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_is_hot_tbl_table_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.is_hot_tbl_table_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.is_hot_tbl_table_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.is_hot_tbl_table_delete");
  }

  netbufferv4_is_hot_tbl_table_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.is_hot_tbl_table_delete", bytes);
  }

  netbufferv4_is_hot_tbl_table_delete_result result;
  try {
    iface_->is_hot_tbl_table_delete(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.is_hot_tbl_table_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("is_hot_tbl_table_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.is_hot_tbl_table_delete");
  }

  oprot->writeMessageBegin("is_hot_tbl_table_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.is_hot_tbl_table_delete", bytes);
  }
}

void netbufferv4Processor::process_is_hot_tbl_table_delete_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.is_hot_tbl_table_delete_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.is_hot_tbl_table_delete_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.is_hot_tbl_table_delete_by_match_spec");
  }

  netbufferv4_is_hot_tbl_table_delete_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.is_hot_tbl_table_delete_by_match_spec", bytes);
  }

  netbufferv4_is_hot_tbl_table_delete_by_match_spec_result result;
  try {
    iface_->is_hot_tbl_table_delete_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.is_hot_tbl_table_delete_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("is_hot_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.is_hot_tbl_table_delete_by_match_spec");
  }

  oprot->writeMessageBegin("is_hot_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.is_hot_tbl_table_delete_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_lastclone_lastscansplit_tbl_table_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.lastclone_lastscansplit_tbl_table_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_delete");
  }

  netbufferv4_lastclone_lastscansplit_tbl_table_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_delete", bytes);
  }

  netbufferv4_lastclone_lastscansplit_tbl_table_delete_result result;
  try {
    iface_->lastclone_lastscansplit_tbl_table_delete(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("lastclone_lastscansplit_tbl_table_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_delete");
  }

  oprot->writeMessageBegin("lastclone_lastscansplit_tbl_table_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_delete", bytes);
  }
}

void netbufferv4Processor::process_lastclone_lastscansplit_tbl_table_delete_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.lastclone_lastscansplit_tbl_table_delete_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_delete_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_delete_by_match_spec");
  }

  netbufferv4_lastclone_lastscansplit_tbl_table_delete_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_delete_by_match_spec", bytes);
  }

  netbufferv4_lastclone_lastscansplit_tbl_table_delete_by_match_spec_result result;
  try {
    iface_->lastclone_lastscansplit_tbl_table_delete_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_delete_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("lastclone_lastscansplit_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_delete_by_match_spec");
  }

  oprot->writeMessageBegin("lastclone_lastscansplit_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_delete_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_need_recirculate_tbl_table_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.need_recirculate_tbl_table_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.need_recirculate_tbl_table_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.need_recirculate_tbl_table_delete");
  }

  netbufferv4_need_recirculate_tbl_table_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.need_recirculate_tbl_table_delete", bytes);
  }

  netbufferv4_need_recirculate_tbl_table_delete_result result;
  try {
    iface_->need_recirculate_tbl_table_delete(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.need_recirculate_tbl_table_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("need_recirculate_tbl_table_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.need_recirculate_tbl_table_delete");
  }

  oprot->writeMessageBegin("need_recirculate_tbl_table_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.need_recirculate_tbl_table_delete", bytes);
  }
}

void netbufferv4Processor::process_need_recirculate_tbl_table_delete_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.need_recirculate_tbl_table_delete_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.need_recirculate_tbl_table_delete_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.need_recirculate_tbl_table_delete_by_match_spec");
  }

  netbufferv4_need_recirculate_tbl_table_delete_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.need_recirculate_tbl_table_delete_by_match_spec", bytes);
  }

  netbufferv4_need_recirculate_tbl_table_delete_by_match_spec_result result;
  try {
    iface_->need_recirculate_tbl_table_delete_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.need_recirculate_tbl_table_delete_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("need_recirculate_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.need_recirculate_tbl_table_delete_by_match_spec");
  }

  oprot->writeMessageBegin("need_recirculate_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.need_recirculate_tbl_table_delete_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_prepare_for_cachehit_tbl_table_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.prepare_for_cachehit_tbl_table_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.prepare_for_cachehit_tbl_table_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.prepare_for_cachehit_tbl_table_delete");
  }

  netbufferv4_prepare_for_cachehit_tbl_table_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.prepare_for_cachehit_tbl_table_delete", bytes);
  }

  netbufferv4_prepare_for_cachehit_tbl_table_delete_result result;
  try {
    iface_->prepare_for_cachehit_tbl_table_delete(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.prepare_for_cachehit_tbl_table_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("prepare_for_cachehit_tbl_table_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.prepare_for_cachehit_tbl_table_delete");
  }

  oprot->writeMessageBegin("prepare_for_cachehit_tbl_table_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.prepare_for_cachehit_tbl_table_delete", bytes);
  }
}

void netbufferv4Processor::process_prepare_for_cachehit_tbl_table_delete_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.prepare_for_cachehit_tbl_table_delete_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.prepare_for_cachehit_tbl_table_delete_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.prepare_for_cachehit_tbl_table_delete_by_match_spec");
  }

  netbufferv4_prepare_for_cachehit_tbl_table_delete_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.prepare_for_cachehit_tbl_table_delete_by_match_spec", bytes);
  }

  netbufferv4_prepare_for_cachehit_tbl_table_delete_by_match_spec_result result;
  try {
    iface_->prepare_for_cachehit_tbl_table_delete_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.prepare_for_cachehit_tbl_table_delete_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("prepare_for_cachehit_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.prepare_for_cachehit_tbl_table_delete_by_match_spec");
  }

  oprot->writeMessageBegin("prepare_for_cachehit_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.prepare_for_cachehit_tbl_table_delete_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_process_scanreq_split_tbl_table_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.process_scanreq_split_tbl_table_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.process_scanreq_split_tbl_table_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.process_scanreq_split_tbl_table_delete");
  }

  netbufferv4_process_scanreq_split_tbl_table_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.process_scanreq_split_tbl_table_delete", bytes);
  }

  netbufferv4_process_scanreq_split_tbl_table_delete_result result;
  try {
    iface_->process_scanreq_split_tbl_table_delete(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.process_scanreq_split_tbl_table_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("process_scanreq_split_tbl_table_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.process_scanreq_split_tbl_table_delete");
  }

  oprot->writeMessageBegin("process_scanreq_split_tbl_table_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.process_scanreq_split_tbl_table_delete", bytes);
  }
}

void netbufferv4Processor::process_process_scanreq_split_tbl_table_delete_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.process_scanreq_split_tbl_table_delete_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.process_scanreq_split_tbl_table_delete_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.process_scanreq_split_tbl_table_delete_by_match_spec");
  }

  netbufferv4_process_scanreq_split_tbl_table_delete_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.process_scanreq_split_tbl_table_delete_by_match_spec", bytes);
  }

  netbufferv4_process_scanreq_split_tbl_table_delete_by_match_spec_result result;
  try {
    iface_->process_scanreq_split_tbl_table_delete_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.process_scanreq_split_tbl_table_delete_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("process_scanreq_split_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.process_scanreq_split_tbl_table_delete_by_match_spec");
  }

  oprot->writeMessageBegin("process_scanreq_split_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.process_scanreq_split_tbl_table_delete_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_range_partition_for_scan_endkey_tbl_table_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.range_partition_for_scan_endkey_tbl_table_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_table_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_table_delete");
  }

  netbufferv4_range_partition_for_scan_endkey_tbl_table_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_table_delete", bytes);
  }

  netbufferv4_range_partition_for_scan_endkey_tbl_table_delete_result result;
  try {
    iface_->range_partition_for_scan_endkey_tbl_table_delete(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_table_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("range_partition_for_scan_endkey_tbl_table_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_table_delete");
  }

  oprot->writeMessageBegin("range_partition_for_scan_endkey_tbl_table_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_table_delete", bytes);
  }
}

void netbufferv4Processor::process_range_partition_for_scan_endkey_tbl_table_delete_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.range_partition_for_scan_endkey_tbl_table_delete_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_table_delete_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_table_delete_by_match_spec");
  }

  netbufferv4_range_partition_for_scan_endkey_tbl_table_delete_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_table_delete_by_match_spec", bytes);
  }

  netbufferv4_range_partition_for_scan_endkey_tbl_table_delete_by_match_spec_result result;
  try {
    iface_->range_partition_for_scan_endkey_tbl_table_delete_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec, args.priority);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_table_delete_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("range_partition_for_scan_endkey_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_table_delete_by_match_spec");
  }

  oprot->writeMessageBegin("range_partition_for_scan_endkey_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_table_delete_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_range_partition_tbl_table_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.range_partition_tbl_table_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.range_partition_tbl_table_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.range_partition_tbl_table_delete");
  }

  netbufferv4_range_partition_tbl_table_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.range_partition_tbl_table_delete", bytes);
  }

  netbufferv4_range_partition_tbl_table_delete_result result;
  try {
    iface_->range_partition_tbl_table_delete(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.range_partition_tbl_table_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("range_partition_tbl_table_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.range_partition_tbl_table_delete");
  }

  oprot->writeMessageBegin("range_partition_tbl_table_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.range_partition_tbl_table_delete", bytes);
  }
}

void netbufferv4Processor::process_range_partition_tbl_table_delete_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.range_partition_tbl_table_delete_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.range_partition_tbl_table_delete_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.range_partition_tbl_table_delete_by_match_spec");
  }

  netbufferv4_range_partition_tbl_table_delete_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.range_partition_tbl_table_delete_by_match_spec", bytes);
  }

  netbufferv4_range_partition_tbl_table_delete_by_match_spec_result result;
  try {
    iface_->range_partition_tbl_table_delete_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec, args.priority);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.range_partition_tbl_table_delete_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("range_partition_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.range_partition_tbl_table_delete_by_match_spec");
  }

  oprot->writeMessageBegin("range_partition_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.range_partition_tbl_table_delete_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_recirculate_tbl_table_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.recirculate_tbl_table_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.recirculate_tbl_table_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.recirculate_tbl_table_delete");
  }

  netbufferv4_recirculate_tbl_table_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.recirculate_tbl_table_delete", bytes);
  }

  netbufferv4_recirculate_tbl_table_delete_result result;
  try {
    iface_->recirculate_tbl_table_delete(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.recirculate_tbl_table_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("recirculate_tbl_table_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.recirculate_tbl_table_delete");
  }

  oprot->writeMessageBegin("recirculate_tbl_table_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.recirculate_tbl_table_delete", bytes);
  }
}

void netbufferv4Processor::process_recirculate_tbl_table_delete_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.recirculate_tbl_table_delete_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.recirculate_tbl_table_delete_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.recirculate_tbl_table_delete_by_match_spec");
  }

  netbufferv4_recirculate_tbl_table_delete_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.recirculate_tbl_table_delete_by_match_spec", bytes);
  }

  netbufferv4_recirculate_tbl_table_delete_by_match_spec_result result;
  try {
    iface_->recirculate_tbl_table_delete_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.recirculate_tbl_table_delete_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("recirculate_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.recirculate_tbl_table_delete_by_match_spec");
  }

  oprot->writeMessageBegin("recirculate_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.recirculate_tbl_table_delete_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_sample_tbl_table_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.sample_tbl_table_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.sample_tbl_table_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.sample_tbl_table_delete");
  }

  netbufferv4_sample_tbl_table_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.sample_tbl_table_delete", bytes);
  }

  netbufferv4_sample_tbl_table_delete_result result;
  try {
    iface_->sample_tbl_table_delete(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.sample_tbl_table_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sample_tbl_table_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.sample_tbl_table_delete");
  }

  oprot->writeMessageBegin("sample_tbl_table_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.sample_tbl_table_delete", bytes);
  }
}

void netbufferv4Processor::process_sample_tbl_table_delete_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.sample_tbl_table_delete_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.sample_tbl_table_delete_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.sample_tbl_table_delete_by_match_spec");
  }

  netbufferv4_sample_tbl_table_delete_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.sample_tbl_table_delete_by_match_spec", bytes);
  }

  netbufferv4_sample_tbl_table_delete_by_match_spec_result result;
  try {
    iface_->sample_tbl_table_delete_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.sample_tbl_table_delete_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sample_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.sample_tbl_table_delete_by_match_spec");
  }

  oprot->writeMessageBegin("sample_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.sample_tbl_table_delete_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_save_client_udpport_tbl_table_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.save_client_udpport_tbl_table_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.save_client_udpport_tbl_table_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.save_client_udpport_tbl_table_delete");
  }

  netbufferv4_save_client_udpport_tbl_table_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.save_client_udpport_tbl_table_delete", bytes);
  }

  netbufferv4_save_client_udpport_tbl_table_delete_result result;
  try {
    iface_->save_client_udpport_tbl_table_delete(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.save_client_udpport_tbl_table_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("save_client_udpport_tbl_table_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.save_client_udpport_tbl_table_delete");
  }

  oprot->writeMessageBegin("save_client_udpport_tbl_table_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.save_client_udpport_tbl_table_delete", bytes);
  }
}

void netbufferv4Processor::process_save_client_udpport_tbl_table_delete_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.save_client_udpport_tbl_table_delete_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.save_client_udpport_tbl_table_delete_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.save_client_udpport_tbl_table_delete_by_match_spec");
  }

  netbufferv4_save_client_udpport_tbl_table_delete_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.save_client_udpport_tbl_table_delete_by_match_spec", bytes);
  }

  netbufferv4_save_client_udpport_tbl_table_delete_by_match_spec_result result;
  try {
    iface_->save_client_udpport_tbl_table_delete_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.save_client_udpport_tbl_table_delete_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("save_client_udpport_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.save_client_udpport_tbl_table_delete_by_match_spec");
  }

  oprot->writeMessageBegin("save_client_udpport_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.save_client_udpport_tbl_table_delete_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_snapshot_flag_tbl_table_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.snapshot_flag_tbl_table_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.snapshot_flag_tbl_table_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.snapshot_flag_tbl_table_delete");
  }

  netbufferv4_snapshot_flag_tbl_table_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.snapshot_flag_tbl_table_delete", bytes);
  }

  netbufferv4_snapshot_flag_tbl_table_delete_result result;
  try {
    iface_->snapshot_flag_tbl_table_delete(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.snapshot_flag_tbl_table_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("snapshot_flag_tbl_table_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.snapshot_flag_tbl_table_delete");
  }

  oprot->writeMessageBegin("snapshot_flag_tbl_table_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.snapshot_flag_tbl_table_delete", bytes);
  }
}

void netbufferv4Processor::process_snapshot_flag_tbl_table_delete_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.snapshot_flag_tbl_table_delete_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.snapshot_flag_tbl_table_delete_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.snapshot_flag_tbl_table_delete_by_match_spec");
  }

  netbufferv4_snapshot_flag_tbl_table_delete_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.snapshot_flag_tbl_table_delete_by_match_spec", bytes);
  }

  netbufferv4_snapshot_flag_tbl_table_delete_by_match_spec_result result;
  try {
    iface_->snapshot_flag_tbl_table_delete_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.snapshot_flag_tbl_table_delete_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("snapshot_flag_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.snapshot_flag_tbl_table_delete_by_match_spec");
  }

  oprot->writeMessageBegin("snapshot_flag_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.snapshot_flag_tbl_table_delete_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_ipmac_srcport_tbl_table_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_ipmac_srcport_tbl_table_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_ipmac_srcport_tbl_table_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_delete");
  }

  netbufferv4_update_ipmac_srcport_tbl_table_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_delete", bytes);
  }

  netbufferv4_update_ipmac_srcport_tbl_table_delete_result result;
  try {
    iface_->update_ipmac_srcport_tbl_table_delete(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_ipmac_srcport_tbl_table_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_delete");
  }

  oprot->writeMessageBegin("update_ipmac_srcport_tbl_table_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_delete", bytes);
  }
}

void netbufferv4Processor::process_update_ipmac_srcport_tbl_table_delete_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_ipmac_srcport_tbl_table_delete_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_ipmac_srcport_tbl_table_delete_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_delete_by_match_spec");
  }

  netbufferv4_update_ipmac_srcport_tbl_table_delete_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_delete_by_match_spec", bytes);
  }

  netbufferv4_update_ipmac_srcport_tbl_table_delete_by_match_spec_result result;
  try {
    iface_->update_ipmac_srcport_tbl_table_delete_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_delete_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_ipmac_srcport_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_delete_by_match_spec");
  }

  oprot->writeMessageBegin("update_ipmac_srcport_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_delete_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_pktlen_tbl_table_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_pktlen_tbl_table_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_pktlen_tbl_table_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_pktlen_tbl_table_delete");
  }

  netbufferv4_update_pktlen_tbl_table_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_pktlen_tbl_table_delete", bytes);
  }

  netbufferv4_update_pktlen_tbl_table_delete_result result;
  try {
    iface_->update_pktlen_tbl_table_delete(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_pktlen_tbl_table_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_pktlen_tbl_table_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_pktlen_tbl_table_delete");
  }

  oprot->writeMessageBegin("update_pktlen_tbl_table_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_pktlen_tbl_table_delete", bytes);
  }
}

void netbufferv4Processor::process_update_pktlen_tbl_table_delete_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_pktlen_tbl_table_delete_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_pktlen_tbl_table_delete_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_pktlen_tbl_table_delete_by_match_spec");
  }

  netbufferv4_update_pktlen_tbl_table_delete_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_pktlen_tbl_table_delete_by_match_spec", bytes);
  }

  netbufferv4_update_pktlen_tbl_table_delete_by_match_spec_result result;
  try {
    iface_->update_pktlen_tbl_table_delete_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec, args.priority);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_pktlen_tbl_table_delete_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_pktlen_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_pktlen_tbl_table_delete_by_match_spec");
  }

  oprot->writeMessageBegin("update_pktlen_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_pktlen_tbl_table_delete_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi10_tbl_table_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi10_tbl_table_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi10_tbl_table_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi10_tbl_table_delete");
  }

  netbufferv4_update_valhi10_tbl_table_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi10_tbl_table_delete", bytes);
  }

  netbufferv4_update_valhi10_tbl_table_delete_result result;
  try {
    iface_->update_valhi10_tbl_table_delete(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi10_tbl_table_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi10_tbl_table_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi10_tbl_table_delete");
  }

  oprot->writeMessageBegin("update_valhi10_tbl_table_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi10_tbl_table_delete", bytes);
  }
}

void netbufferv4Processor::process_update_valhi10_tbl_table_delete_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi10_tbl_table_delete_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi10_tbl_table_delete_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi10_tbl_table_delete_by_match_spec");
  }

  netbufferv4_update_valhi10_tbl_table_delete_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi10_tbl_table_delete_by_match_spec", bytes);
  }

  netbufferv4_update_valhi10_tbl_table_delete_by_match_spec_result result;
  try {
    iface_->update_valhi10_tbl_table_delete_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi10_tbl_table_delete_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi10_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi10_tbl_table_delete_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi10_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi10_tbl_table_delete_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi11_tbl_table_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi11_tbl_table_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi11_tbl_table_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi11_tbl_table_delete");
  }

  netbufferv4_update_valhi11_tbl_table_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi11_tbl_table_delete", bytes);
  }

  netbufferv4_update_valhi11_tbl_table_delete_result result;
  try {
    iface_->update_valhi11_tbl_table_delete(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi11_tbl_table_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi11_tbl_table_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi11_tbl_table_delete");
  }

  oprot->writeMessageBegin("update_valhi11_tbl_table_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi11_tbl_table_delete", bytes);
  }
}

void netbufferv4Processor::process_update_valhi11_tbl_table_delete_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi11_tbl_table_delete_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi11_tbl_table_delete_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi11_tbl_table_delete_by_match_spec");
  }

  netbufferv4_update_valhi11_tbl_table_delete_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi11_tbl_table_delete_by_match_spec", bytes);
  }

  netbufferv4_update_valhi11_tbl_table_delete_by_match_spec_result result;
  try {
    iface_->update_valhi11_tbl_table_delete_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi11_tbl_table_delete_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi11_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi11_tbl_table_delete_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi11_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi11_tbl_table_delete_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi12_tbl_table_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi12_tbl_table_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi12_tbl_table_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi12_tbl_table_delete");
  }

  netbufferv4_update_valhi12_tbl_table_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi12_tbl_table_delete", bytes);
  }

  netbufferv4_update_valhi12_tbl_table_delete_result result;
  try {
    iface_->update_valhi12_tbl_table_delete(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi12_tbl_table_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi12_tbl_table_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi12_tbl_table_delete");
  }

  oprot->writeMessageBegin("update_valhi12_tbl_table_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi12_tbl_table_delete", bytes);
  }
}

void netbufferv4Processor::process_update_valhi12_tbl_table_delete_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi12_tbl_table_delete_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi12_tbl_table_delete_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi12_tbl_table_delete_by_match_spec");
  }

  netbufferv4_update_valhi12_tbl_table_delete_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi12_tbl_table_delete_by_match_spec", bytes);
  }

  netbufferv4_update_valhi12_tbl_table_delete_by_match_spec_result result;
  try {
    iface_->update_valhi12_tbl_table_delete_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi12_tbl_table_delete_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi12_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi12_tbl_table_delete_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi12_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi12_tbl_table_delete_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi13_tbl_table_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi13_tbl_table_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi13_tbl_table_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi13_tbl_table_delete");
  }

  netbufferv4_update_valhi13_tbl_table_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi13_tbl_table_delete", bytes);
  }

  netbufferv4_update_valhi13_tbl_table_delete_result result;
  try {
    iface_->update_valhi13_tbl_table_delete(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi13_tbl_table_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi13_tbl_table_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi13_tbl_table_delete");
  }

  oprot->writeMessageBegin("update_valhi13_tbl_table_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi13_tbl_table_delete", bytes);
  }
}

void netbufferv4Processor::process_update_valhi13_tbl_table_delete_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi13_tbl_table_delete_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi13_tbl_table_delete_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi13_tbl_table_delete_by_match_spec");
  }

  netbufferv4_update_valhi13_tbl_table_delete_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi13_tbl_table_delete_by_match_spec", bytes);
  }

  netbufferv4_update_valhi13_tbl_table_delete_by_match_spec_result result;
  try {
    iface_->update_valhi13_tbl_table_delete_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi13_tbl_table_delete_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi13_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi13_tbl_table_delete_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi13_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi13_tbl_table_delete_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi14_tbl_table_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi14_tbl_table_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi14_tbl_table_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi14_tbl_table_delete");
  }

  netbufferv4_update_valhi14_tbl_table_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi14_tbl_table_delete", bytes);
  }

  netbufferv4_update_valhi14_tbl_table_delete_result result;
  try {
    iface_->update_valhi14_tbl_table_delete(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi14_tbl_table_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi14_tbl_table_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi14_tbl_table_delete");
  }

  oprot->writeMessageBegin("update_valhi14_tbl_table_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi14_tbl_table_delete", bytes);
  }
}

void netbufferv4Processor::process_update_valhi14_tbl_table_delete_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi14_tbl_table_delete_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi14_tbl_table_delete_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi14_tbl_table_delete_by_match_spec");
  }

  netbufferv4_update_valhi14_tbl_table_delete_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi14_tbl_table_delete_by_match_spec", bytes);
  }

  netbufferv4_update_valhi14_tbl_table_delete_by_match_spec_result result;
  try {
    iface_->update_valhi14_tbl_table_delete_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi14_tbl_table_delete_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi14_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi14_tbl_table_delete_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi14_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi14_tbl_table_delete_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi15_tbl_table_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi15_tbl_table_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi15_tbl_table_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi15_tbl_table_delete");
  }

  netbufferv4_update_valhi15_tbl_table_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi15_tbl_table_delete", bytes);
  }

  netbufferv4_update_valhi15_tbl_table_delete_result result;
  try {
    iface_->update_valhi15_tbl_table_delete(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi15_tbl_table_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi15_tbl_table_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi15_tbl_table_delete");
  }

  oprot->writeMessageBegin("update_valhi15_tbl_table_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi15_tbl_table_delete", bytes);
  }
}

void netbufferv4Processor::process_update_valhi15_tbl_table_delete_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi15_tbl_table_delete_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi15_tbl_table_delete_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi15_tbl_table_delete_by_match_spec");
  }

  netbufferv4_update_valhi15_tbl_table_delete_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi15_tbl_table_delete_by_match_spec", bytes);
  }

  netbufferv4_update_valhi15_tbl_table_delete_by_match_spec_result result;
  try {
    iface_->update_valhi15_tbl_table_delete_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi15_tbl_table_delete_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi15_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi15_tbl_table_delete_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi15_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi15_tbl_table_delete_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi16_tbl_table_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi16_tbl_table_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi16_tbl_table_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi16_tbl_table_delete");
  }

  netbufferv4_update_valhi16_tbl_table_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi16_tbl_table_delete", bytes);
  }

  netbufferv4_update_valhi16_tbl_table_delete_result result;
  try {
    iface_->update_valhi16_tbl_table_delete(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi16_tbl_table_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi16_tbl_table_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi16_tbl_table_delete");
  }

  oprot->writeMessageBegin("update_valhi16_tbl_table_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi16_tbl_table_delete", bytes);
  }
}

void netbufferv4Processor::process_update_valhi16_tbl_table_delete_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi16_tbl_table_delete_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi16_tbl_table_delete_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi16_tbl_table_delete_by_match_spec");
  }

  netbufferv4_update_valhi16_tbl_table_delete_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi16_tbl_table_delete_by_match_spec", bytes);
  }

  netbufferv4_update_valhi16_tbl_table_delete_by_match_spec_result result;
  try {
    iface_->update_valhi16_tbl_table_delete_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi16_tbl_table_delete_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi16_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi16_tbl_table_delete_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi16_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi16_tbl_table_delete_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi1_tbl_table_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi1_tbl_table_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi1_tbl_table_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi1_tbl_table_delete");
  }

  netbufferv4_update_valhi1_tbl_table_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi1_tbl_table_delete", bytes);
  }

  netbufferv4_update_valhi1_tbl_table_delete_result result;
  try {
    iface_->update_valhi1_tbl_table_delete(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi1_tbl_table_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi1_tbl_table_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi1_tbl_table_delete");
  }

  oprot->writeMessageBegin("update_valhi1_tbl_table_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi1_tbl_table_delete", bytes);
  }
}

void netbufferv4Processor::process_update_valhi1_tbl_table_delete_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi1_tbl_table_delete_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi1_tbl_table_delete_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi1_tbl_table_delete_by_match_spec");
  }

  netbufferv4_update_valhi1_tbl_table_delete_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi1_tbl_table_delete_by_match_spec", bytes);
  }

  netbufferv4_update_valhi1_tbl_table_delete_by_match_spec_result result;
  try {
    iface_->update_valhi1_tbl_table_delete_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi1_tbl_table_delete_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi1_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi1_tbl_table_delete_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi1_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi1_tbl_table_delete_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi2_tbl_table_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi2_tbl_table_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi2_tbl_table_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi2_tbl_table_delete");
  }

  netbufferv4_update_valhi2_tbl_table_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi2_tbl_table_delete", bytes);
  }

  netbufferv4_update_valhi2_tbl_table_delete_result result;
  try {
    iface_->update_valhi2_tbl_table_delete(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi2_tbl_table_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi2_tbl_table_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi2_tbl_table_delete");
  }

  oprot->writeMessageBegin("update_valhi2_tbl_table_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi2_tbl_table_delete", bytes);
  }
}

void netbufferv4Processor::process_update_valhi2_tbl_table_delete_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi2_tbl_table_delete_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi2_tbl_table_delete_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi2_tbl_table_delete_by_match_spec");
  }

  netbufferv4_update_valhi2_tbl_table_delete_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi2_tbl_table_delete_by_match_spec", bytes);
  }

  netbufferv4_update_valhi2_tbl_table_delete_by_match_spec_result result;
  try {
    iface_->update_valhi2_tbl_table_delete_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi2_tbl_table_delete_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi2_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi2_tbl_table_delete_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi2_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi2_tbl_table_delete_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi3_tbl_table_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi3_tbl_table_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi3_tbl_table_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi3_tbl_table_delete");
  }

  netbufferv4_update_valhi3_tbl_table_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi3_tbl_table_delete", bytes);
  }

  netbufferv4_update_valhi3_tbl_table_delete_result result;
  try {
    iface_->update_valhi3_tbl_table_delete(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi3_tbl_table_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi3_tbl_table_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi3_tbl_table_delete");
  }

  oprot->writeMessageBegin("update_valhi3_tbl_table_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi3_tbl_table_delete", bytes);
  }
}

void netbufferv4Processor::process_update_valhi3_tbl_table_delete_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi3_tbl_table_delete_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi3_tbl_table_delete_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi3_tbl_table_delete_by_match_spec");
  }

  netbufferv4_update_valhi3_tbl_table_delete_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi3_tbl_table_delete_by_match_spec", bytes);
  }

  netbufferv4_update_valhi3_tbl_table_delete_by_match_spec_result result;
  try {
    iface_->update_valhi3_tbl_table_delete_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi3_tbl_table_delete_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi3_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi3_tbl_table_delete_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi3_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi3_tbl_table_delete_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi4_tbl_table_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi4_tbl_table_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi4_tbl_table_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi4_tbl_table_delete");
  }

  netbufferv4_update_valhi4_tbl_table_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi4_tbl_table_delete", bytes);
  }

  netbufferv4_update_valhi4_tbl_table_delete_result result;
  try {
    iface_->update_valhi4_tbl_table_delete(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi4_tbl_table_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi4_tbl_table_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi4_tbl_table_delete");
  }

  oprot->writeMessageBegin("update_valhi4_tbl_table_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi4_tbl_table_delete", bytes);
  }
}

void netbufferv4Processor::process_update_valhi4_tbl_table_delete_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi4_tbl_table_delete_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi4_tbl_table_delete_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi4_tbl_table_delete_by_match_spec");
  }

  netbufferv4_update_valhi4_tbl_table_delete_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi4_tbl_table_delete_by_match_spec", bytes);
  }

  netbufferv4_update_valhi4_tbl_table_delete_by_match_spec_result result;
  try {
    iface_->update_valhi4_tbl_table_delete_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi4_tbl_table_delete_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi4_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi4_tbl_table_delete_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi4_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi4_tbl_table_delete_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi5_tbl_table_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi5_tbl_table_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi5_tbl_table_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi5_tbl_table_delete");
  }

  netbufferv4_update_valhi5_tbl_table_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi5_tbl_table_delete", bytes);
  }

  netbufferv4_update_valhi5_tbl_table_delete_result result;
  try {
    iface_->update_valhi5_tbl_table_delete(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi5_tbl_table_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi5_tbl_table_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi5_tbl_table_delete");
  }

  oprot->writeMessageBegin("update_valhi5_tbl_table_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi5_tbl_table_delete", bytes);
  }
}

void netbufferv4Processor::process_update_valhi5_tbl_table_delete_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi5_tbl_table_delete_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi5_tbl_table_delete_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi5_tbl_table_delete_by_match_spec");
  }

  netbufferv4_update_valhi5_tbl_table_delete_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi5_tbl_table_delete_by_match_spec", bytes);
  }

  netbufferv4_update_valhi5_tbl_table_delete_by_match_spec_result result;
  try {
    iface_->update_valhi5_tbl_table_delete_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi5_tbl_table_delete_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi5_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi5_tbl_table_delete_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi5_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi5_tbl_table_delete_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi6_tbl_table_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi6_tbl_table_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi6_tbl_table_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi6_tbl_table_delete");
  }

  netbufferv4_update_valhi6_tbl_table_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi6_tbl_table_delete", bytes);
  }

  netbufferv4_update_valhi6_tbl_table_delete_result result;
  try {
    iface_->update_valhi6_tbl_table_delete(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi6_tbl_table_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi6_tbl_table_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi6_tbl_table_delete");
  }

  oprot->writeMessageBegin("update_valhi6_tbl_table_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi6_tbl_table_delete", bytes);
  }
}

void netbufferv4Processor::process_update_valhi6_tbl_table_delete_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi6_tbl_table_delete_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi6_tbl_table_delete_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi6_tbl_table_delete_by_match_spec");
  }

  netbufferv4_update_valhi6_tbl_table_delete_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi6_tbl_table_delete_by_match_spec", bytes);
  }

  netbufferv4_update_valhi6_tbl_table_delete_by_match_spec_result result;
  try {
    iface_->update_valhi6_tbl_table_delete_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi6_tbl_table_delete_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi6_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi6_tbl_table_delete_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi6_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi6_tbl_table_delete_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi7_tbl_table_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi7_tbl_table_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi7_tbl_table_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi7_tbl_table_delete");
  }

  netbufferv4_update_valhi7_tbl_table_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi7_tbl_table_delete", bytes);
  }

  netbufferv4_update_valhi7_tbl_table_delete_result result;
  try {
    iface_->update_valhi7_tbl_table_delete(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi7_tbl_table_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi7_tbl_table_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi7_tbl_table_delete");
  }

  oprot->writeMessageBegin("update_valhi7_tbl_table_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi7_tbl_table_delete", bytes);
  }
}

void netbufferv4Processor::process_update_valhi7_tbl_table_delete_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi7_tbl_table_delete_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi7_tbl_table_delete_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi7_tbl_table_delete_by_match_spec");
  }

  netbufferv4_update_valhi7_tbl_table_delete_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi7_tbl_table_delete_by_match_spec", bytes);
  }

  netbufferv4_update_valhi7_tbl_table_delete_by_match_spec_result result;
  try {
    iface_->update_valhi7_tbl_table_delete_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi7_tbl_table_delete_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi7_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi7_tbl_table_delete_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi7_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi7_tbl_table_delete_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi8_tbl_table_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi8_tbl_table_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi8_tbl_table_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi8_tbl_table_delete");
  }

  netbufferv4_update_valhi8_tbl_table_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi8_tbl_table_delete", bytes);
  }

  netbufferv4_update_valhi8_tbl_table_delete_result result;
  try {
    iface_->update_valhi8_tbl_table_delete(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi8_tbl_table_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi8_tbl_table_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi8_tbl_table_delete");
  }

  oprot->writeMessageBegin("update_valhi8_tbl_table_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi8_tbl_table_delete", bytes);
  }
}

void netbufferv4Processor::process_update_valhi8_tbl_table_delete_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi8_tbl_table_delete_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi8_tbl_table_delete_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi8_tbl_table_delete_by_match_spec");
  }

  netbufferv4_update_valhi8_tbl_table_delete_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi8_tbl_table_delete_by_match_spec", bytes);
  }

  netbufferv4_update_valhi8_tbl_table_delete_by_match_spec_result result;
  try {
    iface_->update_valhi8_tbl_table_delete_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi8_tbl_table_delete_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi8_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi8_tbl_table_delete_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi8_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi8_tbl_table_delete_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_valhi9_tbl_table_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi9_tbl_table_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi9_tbl_table_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi9_tbl_table_delete");
  }

  netbufferv4_update_valhi9_tbl_table_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi9_tbl_table_delete", bytes);
  }

  netbufferv4_update_valhi9_tbl_table_delete_result result;
  try {
    iface_->update_valhi9_tbl_table_delete(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi9_tbl_table_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi9_tbl_table_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi9_tbl_table_delete");
  }

  oprot->writeMessageBegin("update_valhi9_tbl_table_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi9_tbl_table_delete", bytes);
  }
}

void netbufferv4Processor::process_update_valhi9_tbl_table_delete_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi9_tbl_table_delete_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi9_tbl_table_delete_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi9_tbl_table_delete_by_match_spec");
  }

  netbufferv4_update_valhi9_tbl_table_delete_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi9_tbl_table_delete_by_match_spec", bytes);
  }

  netbufferv4_update_valhi9_tbl_table_delete_by_match_spec_result result;
  try {
    iface_->update_valhi9_tbl_table_delete_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi9_tbl_table_delete_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi9_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi9_tbl_table_delete_by_match_spec");
  }

  oprot->writeMessageBegin("update_valhi9_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi9_tbl_table_delete_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallen_tbl_table_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallen_tbl_table_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallen_tbl_table_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallen_tbl_table_delete");
  }

  netbufferv4_update_vallen_tbl_table_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallen_tbl_table_delete", bytes);
  }

  netbufferv4_update_vallen_tbl_table_delete_result result;
  try {
    iface_->update_vallen_tbl_table_delete(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallen_tbl_table_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallen_tbl_table_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallen_tbl_table_delete");
  }

  oprot->writeMessageBegin("update_vallen_tbl_table_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallen_tbl_table_delete", bytes);
  }
}

void netbufferv4Processor::process_update_vallen_tbl_table_delete_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallen_tbl_table_delete_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallen_tbl_table_delete_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallen_tbl_table_delete_by_match_spec");
  }

  netbufferv4_update_vallen_tbl_table_delete_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallen_tbl_table_delete_by_match_spec", bytes);
  }

  netbufferv4_update_vallen_tbl_table_delete_by_match_spec_result result;
  try {
    iface_->update_vallen_tbl_table_delete_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallen_tbl_table_delete_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallen_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallen_tbl_table_delete_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallen_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallen_tbl_table_delete_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo10_tbl_table_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo10_tbl_table_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo10_tbl_table_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo10_tbl_table_delete");
  }

  netbufferv4_update_vallo10_tbl_table_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo10_tbl_table_delete", bytes);
  }

  netbufferv4_update_vallo10_tbl_table_delete_result result;
  try {
    iface_->update_vallo10_tbl_table_delete(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo10_tbl_table_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo10_tbl_table_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo10_tbl_table_delete");
  }

  oprot->writeMessageBegin("update_vallo10_tbl_table_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo10_tbl_table_delete", bytes);
  }
}

void netbufferv4Processor::process_update_vallo10_tbl_table_delete_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo10_tbl_table_delete_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo10_tbl_table_delete_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo10_tbl_table_delete_by_match_spec");
  }

  netbufferv4_update_vallo10_tbl_table_delete_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo10_tbl_table_delete_by_match_spec", bytes);
  }

  netbufferv4_update_vallo10_tbl_table_delete_by_match_spec_result result;
  try {
    iface_->update_vallo10_tbl_table_delete_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo10_tbl_table_delete_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo10_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo10_tbl_table_delete_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo10_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo10_tbl_table_delete_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo11_tbl_table_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo11_tbl_table_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo11_tbl_table_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo11_tbl_table_delete");
  }

  netbufferv4_update_vallo11_tbl_table_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo11_tbl_table_delete", bytes);
  }

  netbufferv4_update_vallo11_tbl_table_delete_result result;
  try {
    iface_->update_vallo11_tbl_table_delete(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo11_tbl_table_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo11_tbl_table_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo11_tbl_table_delete");
  }

  oprot->writeMessageBegin("update_vallo11_tbl_table_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo11_tbl_table_delete", bytes);
  }
}

void netbufferv4Processor::process_update_vallo11_tbl_table_delete_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo11_tbl_table_delete_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo11_tbl_table_delete_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo11_tbl_table_delete_by_match_spec");
  }

  netbufferv4_update_vallo11_tbl_table_delete_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo11_tbl_table_delete_by_match_spec", bytes);
  }

  netbufferv4_update_vallo11_tbl_table_delete_by_match_spec_result result;
  try {
    iface_->update_vallo11_tbl_table_delete_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo11_tbl_table_delete_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo11_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo11_tbl_table_delete_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo11_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo11_tbl_table_delete_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo12_tbl_table_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo12_tbl_table_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo12_tbl_table_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo12_tbl_table_delete");
  }

  netbufferv4_update_vallo12_tbl_table_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo12_tbl_table_delete", bytes);
  }

  netbufferv4_update_vallo12_tbl_table_delete_result result;
  try {
    iface_->update_vallo12_tbl_table_delete(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo12_tbl_table_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo12_tbl_table_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo12_tbl_table_delete");
  }

  oprot->writeMessageBegin("update_vallo12_tbl_table_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo12_tbl_table_delete", bytes);
  }
}

void netbufferv4Processor::process_update_vallo12_tbl_table_delete_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo12_tbl_table_delete_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo12_tbl_table_delete_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo12_tbl_table_delete_by_match_spec");
  }

  netbufferv4_update_vallo12_tbl_table_delete_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo12_tbl_table_delete_by_match_spec", bytes);
  }

  netbufferv4_update_vallo12_tbl_table_delete_by_match_spec_result result;
  try {
    iface_->update_vallo12_tbl_table_delete_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo12_tbl_table_delete_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo12_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo12_tbl_table_delete_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo12_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo12_tbl_table_delete_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo13_tbl_table_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo13_tbl_table_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo13_tbl_table_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo13_tbl_table_delete");
  }

  netbufferv4_update_vallo13_tbl_table_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo13_tbl_table_delete", bytes);
  }

  netbufferv4_update_vallo13_tbl_table_delete_result result;
  try {
    iface_->update_vallo13_tbl_table_delete(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo13_tbl_table_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo13_tbl_table_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo13_tbl_table_delete");
  }

  oprot->writeMessageBegin("update_vallo13_tbl_table_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo13_tbl_table_delete", bytes);
  }
}

void netbufferv4Processor::process_update_vallo13_tbl_table_delete_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo13_tbl_table_delete_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo13_tbl_table_delete_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo13_tbl_table_delete_by_match_spec");
  }

  netbufferv4_update_vallo13_tbl_table_delete_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo13_tbl_table_delete_by_match_spec", bytes);
  }

  netbufferv4_update_vallo13_tbl_table_delete_by_match_spec_result result;
  try {
    iface_->update_vallo13_tbl_table_delete_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo13_tbl_table_delete_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo13_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo13_tbl_table_delete_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo13_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo13_tbl_table_delete_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo14_tbl_table_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo14_tbl_table_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo14_tbl_table_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo14_tbl_table_delete");
  }

  netbufferv4_update_vallo14_tbl_table_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo14_tbl_table_delete", bytes);
  }

  netbufferv4_update_vallo14_tbl_table_delete_result result;
  try {
    iface_->update_vallo14_tbl_table_delete(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo14_tbl_table_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo14_tbl_table_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo14_tbl_table_delete");
  }

  oprot->writeMessageBegin("update_vallo14_tbl_table_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo14_tbl_table_delete", bytes);
  }
}

void netbufferv4Processor::process_update_vallo14_tbl_table_delete_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo14_tbl_table_delete_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo14_tbl_table_delete_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo14_tbl_table_delete_by_match_spec");
  }

  netbufferv4_update_vallo14_tbl_table_delete_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo14_tbl_table_delete_by_match_spec", bytes);
  }

  netbufferv4_update_vallo14_tbl_table_delete_by_match_spec_result result;
  try {
    iface_->update_vallo14_tbl_table_delete_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo14_tbl_table_delete_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo14_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo14_tbl_table_delete_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo14_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo14_tbl_table_delete_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo15_tbl_table_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo15_tbl_table_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo15_tbl_table_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo15_tbl_table_delete");
  }

  netbufferv4_update_vallo15_tbl_table_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo15_tbl_table_delete", bytes);
  }

  netbufferv4_update_vallo15_tbl_table_delete_result result;
  try {
    iface_->update_vallo15_tbl_table_delete(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo15_tbl_table_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo15_tbl_table_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo15_tbl_table_delete");
  }

  oprot->writeMessageBegin("update_vallo15_tbl_table_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo15_tbl_table_delete", bytes);
  }
}

void netbufferv4Processor::process_update_vallo15_tbl_table_delete_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo15_tbl_table_delete_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo15_tbl_table_delete_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo15_tbl_table_delete_by_match_spec");
  }

  netbufferv4_update_vallo15_tbl_table_delete_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo15_tbl_table_delete_by_match_spec", bytes);
  }

  netbufferv4_update_vallo15_tbl_table_delete_by_match_spec_result result;
  try {
    iface_->update_vallo15_tbl_table_delete_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo15_tbl_table_delete_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo15_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo15_tbl_table_delete_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo15_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo15_tbl_table_delete_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo16_tbl_table_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo16_tbl_table_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo16_tbl_table_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo16_tbl_table_delete");
  }

  netbufferv4_update_vallo16_tbl_table_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo16_tbl_table_delete", bytes);
  }

  netbufferv4_update_vallo16_tbl_table_delete_result result;
  try {
    iface_->update_vallo16_tbl_table_delete(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo16_tbl_table_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo16_tbl_table_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo16_tbl_table_delete");
  }

  oprot->writeMessageBegin("update_vallo16_tbl_table_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo16_tbl_table_delete", bytes);
  }
}

void netbufferv4Processor::process_update_vallo16_tbl_table_delete_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo16_tbl_table_delete_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo16_tbl_table_delete_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo16_tbl_table_delete_by_match_spec");
  }

  netbufferv4_update_vallo16_tbl_table_delete_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo16_tbl_table_delete_by_match_spec", bytes);
  }

  netbufferv4_update_vallo16_tbl_table_delete_by_match_spec_result result;
  try {
    iface_->update_vallo16_tbl_table_delete_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo16_tbl_table_delete_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo16_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo16_tbl_table_delete_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo16_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo16_tbl_table_delete_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo1_tbl_table_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo1_tbl_table_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo1_tbl_table_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo1_tbl_table_delete");
  }

  netbufferv4_update_vallo1_tbl_table_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo1_tbl_table_delete", bytes);
  }

  netbufferv4_update_vallo1_tbl_table_delete_result result;
  try {
    iface_->update_vallo1_tbl_table_delete(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo1_tbl_table_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo1_tbl_table_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo1_tbl_table_delete");
  }

  oprot->writeMessageBegin("update_vallo1_tbl_table_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo1_tbl_table_delete", bytes);
  }
}

void netbufferv4Processor::process_update_vallo1_tbl_table_delete_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo1_tbl_table_delete_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo1_tbl_table_delete_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo1_tbl_table_delete_by_match_spec");
  }

  netbufferv4_update_vallo1_tbl_table_delete_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo1_tbl_table_delete_by_match_spec", bytes);
  }

  netbufferv4_update_vallo1_tbl_table_delete_by_match_spec_result result;
  try {
    iface_->update_vallo1_tbl_table_delete_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo1_tbl_table_delete_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo1_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo1_tbl_table_delete_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo1_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo1_tbl_table_delete_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo2_tbl_table_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo2_tbl_table_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo2_tbl_table_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo2_tbl_table_delete");
  }

  netbufferv4_update_vallo2_tbl_table_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo2_tbl_table_delete", bytes);
  }

  netbufferv4_update_vallo2_tbl_table_delete_result result;
  try {
    iface_->update_vallo2_tbl_table_delete(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo2_tbl_table_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo2_tbl_table_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo2_tbl_table_delete");
  }

  oprot->writeMessageBegin("update_vallo2_tbl_table_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo2_tbl_table_delete", bytes);
  }
}

void netbufferv4Processor::process_update_vallo2_tbl_table_delete_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo2_tbl_table_delete_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo2_tbl_table_delete_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo2_tbl_table_delete_by_match_spec");
  }

  netbufferv4_update_vallo2_tbl_table_delete_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo2_tbl_table_delete_by_match_spec", bytes);
  }

  netbufferv4_update_vallo2_tbl_table_delete_by_match_spec_result result;
  try {
    iface_->update_vallo2_tbl_table_delete_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo2_tbl_table_delete_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo2_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo2_tbl_table_delete_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo2_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo2_tbl_table_delete_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo3_tbl_table_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo3_tbl_table_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo3_tbl_table_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo3_tbl_table_delete");
  }

  netbufferv4_update_vallo3_tbl_table_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo3_tbl_table_delete", bytes);
  }

  netbufferv4_update_vallo3_tbl_table_delete_result result;
  try {
    iface_->update_vallo3_tbl_table_delete(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo3_tbl_table_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo3_tbl_table_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo3_tbl_table_delete");
  }

  oprot->writeMessageBegin("update_vallo3_tbl_table_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo3_tbl_table_delete", bytes);
  }
}

void netbufferv4Processor::process_update_vallo3_tbl_table_delete_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo3_tbl_table_delete_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo3_tbl_table_delete_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo3_tbl_table_delete_by_match_spec");
  }

  netbufferv4_update_vallo3_tbl_table_delete_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo3_tbl_table_delete_by_match_spec", bytes);
  }

  netbufferv4_update_vallo3_tbl_table_delete_by_match_spec_result result;
  try {
    iface_->update_vallo3_tbl_table_delete_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo3_tbl_table_delete_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo3_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo3_tbl_table_delete_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo3_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo3_tbl_table_delete_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo4_tbl_table_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo4_tbl_table_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo4_tbl_table_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo4_tbl_table_delete");
  }

  netbufferv4_update_vallo4_tbl_table_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo4_tbl_table_delete", bytes);
  }

  netbufferv4_update_vallo4_tbl_table_delete_result result;
  try {
    iface_->update_vallo4_tbl_table_delete(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo4_tbl_table_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo4_tbl_table_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo4_tbl_table_delete");
  }

  oprot->writeMessageBegin("update_vallo4_tbl_table_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo4_tbl_table_delete", bytes);
  }
}

void netbufferv4Processor::process_update_vallo4_tbl_table_delete_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo4_tbl_table_delete_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo4_tbl_table_delete_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo4_tbl_table_delete_by_match_spec");
  }

  netbufferv4_update_vallo4_tbl_table_delete_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo4_tbl_table_delete_by_match_spec", bytes);
  }

  netbufferv4_update_vallo4_tbl_table_delete_by_match_spec_result result;
  try {
    iface_->update_vallo4_tbl_table_delete_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo4_tbl_table_delete_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo4_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo4_tbl_table_delete_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo4_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo4_tbl_table_delete_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo5_tbl_table_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo5_tbl_table_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo5_tbl_table_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo5_tbl_table_delete");
  }

  netbufferv4_update_vallo5_tbl_table_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo5_tbl_table_delete", bytes);
  }

  netbufferv4_update_vallo5_tbl_table_delete_result result;
  try {
    iface_->update_vallo5_tbl_table_delete(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo5_tbl_table_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo5_tbl_table_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo5_tbl_table_delete");
  }

  oprot->writeMessageBegin("update_vallo5_tbl_table_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo5_tbl_table_delete", bytes);
  }
}

void netbufferv4Processor::process_update_vallo5_tbl_table_delete_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo5_tbl_table_delete_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo5_tbl_table_delete_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo5_tbl_table_delete_by_match_spec");
  }

  netbufferv4_update_vallo5_tbl_table_delete_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo5_tbl_table_delete_by_match_spec", bytes);
  }

  netbufferv4_update_vallo5_tbl_table_delete_by_match_spec_result result;
  try {
    iface_->update_vallo5_tbl_table_delete_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo5_tbl_table_delete_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo5_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo5_tbl_table_delete_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo5_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo5_tbl_table_delete_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo6_tbl_table_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo6_tbl_table_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo6_tbl_table_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo6_tbl_table_delete");
  }

  netbufferv4_update_vallo6_tbl_table_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo6_tbl_table_delete", bytes);
  }

  netbufferv4_update_vallo6_tbl_table_delete_result result;
  try {
    iface_->update_vallo6_tbl_table_delete(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo6_tbl_table_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo6_tbl_table_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo6_tbl_table_delete");
  }

  oprot->writeMessageBegin("update_vallo6_tbl_table_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo6_tbl_table_delete", bytes);
  }
}

void netbufferv4Processor::process_update_vallo6_tbl_table_delete_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo6_tbl_table_delete_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo6_tbl_table_delete_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo6_tbl_table_delete_by_match_spec");
  }

  netbufferv4_update_vallo6_tbl_table_delete_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo6_tbl_table_delete_by_match_spec", bytes);
  }

  netbufferv4_update_vallo6_tbl_table_delete_by_match_spec_result result;
  try {
    iface_->update_vallo6_tbl_table_delete_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo6_tbl_table_delete_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo6_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo6_tbl_table_delete_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo6_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo6_tbl_table_delete_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo7_tbl_table_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo7_tbl_table_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo7_tbl_table_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo7_tbl_table_delete");
  }

  netbufferv4_update_vallo7_tbl_table_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo7_tbl_table_delete", bytes);
  }

  netbufferv4_update_vallo7_tbl_table_delete_result result;
  try {
    iface_->update_vallo7_tbl_table_delete(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo7_tbl_table_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo7_tbl_table_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo7_tbl_table_delete");
  }

  oprot->writeMessageBegin("update_vallo7_tbl_table_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo7_tbl_table_delete", bytes);
  }
}

void netbufferv4Processor::process_update_vallo7_tbl_table_delete_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo7_tbl_table_delete_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo7_tbl_table_delete_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo7_tbl_table_delete_by_match_spec");
  }

  netbufferv4_update_vallo7_tbl_table_delete_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo7_tbl_table_delete_by_match_spec", bytes);
  }

  netbufferv4_update_vallo7_tbl_table_delete_by_match_spec_result result;
  try {
    iface_->update_vallo7_tbl_table_delete_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo7_tbl_table_delete_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo7_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo7_tbl_table_delete_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo7_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo7_tbl_table_delete_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo8_tbl_table_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo8_tbl_table_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo8_tbl_table_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo8_tbl_table_delete");
  }

  netbufferv4_update_vallo8_tbl_table_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo8_tbl_table_delete", bytes);
  }

  netbufferv4_update_vallo8_tbl_table_delete_result result;
  try {
    iface_->update_vallo8_tbl_table_delete(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo8_tbl_table_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo8_tbl_table_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo8_tbl_table_delete");
  }

  oprot->writeMessageBegin("update_vallo8_tbl_table_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo8_tbl_table_delete", bytes);
  }
}

void netbufferv4Processor::process_update_vallo8_tbl_table_delete_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo8_tbl_table_delete_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo8_tbl_table_delete_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo8_tbl_table_delete_by_match_spec");
  }

  netbufferv4_update_vallo8_tbl_table_delete_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo8_tbl_table_delete_by_match_spec", bytes);
  }

  netbufferv4_update_vallo8_tbl_table_delete_by_match_spec_result result;
  try {
    iface_->update_vallo8_tbl_table_delete_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo8_tbl_table_delete_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo8_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo8_tbl_table_delete_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo8_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo8_tbl_table_delete_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_update_vallo9_tbl_table_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo9_tbl_table_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo9_tbl_table_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo9_tbl_table_delete");
  }

  netbufferv4_update_vallo9_tbl_table_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo9_tbl_table_delete", bytes);
  }

  netbufferv4_update_vallo9_tbl_table_delete_result result;
  try {
    iface_->update_vallo9_tbl_table_delete(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo9_tbl_table_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo9_tbl_table_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo9_tbl_table_delete");
  }

  oprot->writeMessageBegin("update_vallo9_tbl_table_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo9_tbl_table_delete", bytes);
  }
}

void netbufferv4Processor::process_update_vallo9_tbl_table_delete_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo9_tbl_table_delete_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo9_tbl_table_delete_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo9_tbl_table_delete_by_match_spec");
  }

  netbufferv4_update_vallo9_tbl_table_delete_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo9_tbl_table_delete_by_match_spec", bytes);
  }

  netbufferv4_update_vallo9_tbl_table_delete_by_match_spec_result result;
  try {
    iface_->update_vallo9_tbl_table_delete_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo9_tbl_table_delete_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo9_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo9_tbl_table_delete_by_match_spec");
  }

  oprot->writeMessageBegin("update_vallo9_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo9_tbl_table_delete_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_access_cache_frequency_tbl_table_get_default_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cache_frequency_tbl_table_get_default_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cache_frequency_tbl_table_get_default_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cache_frequency_tbl_table_get_default_entry_handle");
  }

  netbufferv4_access_cache_frequency_tbl_table_get_default_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cache_frequency_tbl_table_get_default_entry_handle", bytes);
  }

  netbufferv4_access_cache_frequency_tbl_table_get_default_entry_handle_result result;
  try {
    result.success = iface_->access_cache_frequency_tbl_table_get_default_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cache_frequency_tbl_table_get_default_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cache_frequency_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cache_frequency_tbl_table_get_default_entry_handle");
  }

  oprot->writeMessageBegin("access_cache_frequency_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cache_frequency_tbl_table_get_default_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_access_cache_frequency_tbl_table_get_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cache_frequency_tbl_table_get_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cache_frequency_tbl_table_get_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cache_frequency_tbl_table_get_default_entry");
  }

  netbufferv4_access_cache_frequency_tbl_table_get_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cache_frequency_tbl_table_get_default_entry", bytes);
  }

  netbufferv4_access_cache_frequency_tbl_table_get_default_entry_result result;
  try {
    iface_->access_cache_frequency_tbl_table_get_default_entry(result.success, args.sess_hdl, args.dev_tgt, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cache_frequency_tbl_table_get_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cache_frequency_tbl_table_get_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cache_frequency_tbl_table_get_default_entry");
  }

  oprot->writeMessageBegin("access_cache_frequency_tbl_table_get_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cache_frequency_tbl_table_get_default_entry", bytes);
  }
}

void netbufferv4Processor::process_access_case1_tbl_table_get_default_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_case1_tbl_table_get_default_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_case1_tbl_table_get_default_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_case1_tbl_table_get_default_entry_handle");
  }

  netbufferv4_access_case1_tbl_table_get_default_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_case1_tbl_table_get_default_entry_handle", bytes);
  }

  netbufferv4_access_case1_tbl_table_get_default_entry_handle_result result;
  try {
    result.success = iface_->access_case1_tbl_table_get_default_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_case1_tbl_table_get_default_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_case1_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_case1_tbl_table_get_default_entry_handle");
  }

  oprot->writeMessageBegin("access_case1_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_case1_tbl_table_get_default_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_access_case1_tbl_table_get_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_case1_tbl_table_get_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_case1_tbl_table_get_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_case1_tbl_table_get_default_entry");
  }

  netbufferv4_access_case1_tbl_table_get_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_case1_tbl_table_get_default_entry", bytes);
  }

  netbufferv4_access_case1_tbl_table_get_default_entry_result result;
  try {
    iface_->access_case1_tbl_table_get_default_entry(result.success, args.sess_hdl, args.dev_tgt, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_case1_tbl_table_get_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_case1_tbl_table_get_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_case1_tbl_table_get_default_entry");
  }

  oprot->writeMessageBegin("access_case1_tbl_table_get_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_case1_tbl_table_get_default_entry", bytes);
  }
}

void netbufferv4Processor::process_access_cm1_tbl_table_get_default_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm1_tbl_table_get_default_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm1_tbl_table_get_default_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm1_tbl_table_get_default_entry_handle");
  }

  netbufferv4_access_cm1_tbl_table_get_default_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm1_tbl_table_get_default_entry_handle", bytes);
  }

  netbufferv4_access_cm1_tbl_table_get_default_entry_handle_result result;
  try {
    result.success = iface_->access_cm1_tbl_table_get_default_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm1_tbl_table_get_default_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm1_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm1_tbl_table_get_default_entry_handle");
  }

  oprot->writeMessageBegin("access_cm1_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm1_tbl_table_get_default_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_access_cm1_tbl_table_get_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm1_tbl_table_get_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm1_tbl_table_get_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm1_tbl_table_get_default_entry");
  }

  netbufferv4_access_cm1_tbl_table_get_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm1_tbl_table_get_default_entry", bytes);
  }

  netbufferv4_access_cm1_tbl_table_get_default_entry_result result;
  try {
    iface_->access_cm1_tbl_table_get_default_entry(result.success, args.sess_hdl, args.dev_tgt, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm1_tbl_table_get_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm1_tbl_table_get_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm1_tbl_table_get_default_entry");
  }

  oprot->writeMessageBegin("access_cm1_tbl_table_get_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm1_tbl_table_get_default_entry", bytes);
  }
}

void netbufferv4Processor::process_access_cm2_tbl_table_get_default_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm2_tbl_table_get_default_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm2_tbl_table_get_default_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm2_tbl_table_get_default_entry_handle");
  }

  netbufferv4_access_cm2_tbl_table_get_default_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm2_tbl_table_get_default_entry_handle", bytes);
  }

  netbufferv4_access_cm2_tbl_table_get_default_entry_handle_result result;
  try {
    result.success = iface_->access_cm2_tbl_table_get_default_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm2_tbl_table_get_default_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm2_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm2_tbl_table_get_default_entry_handle");
  }

  oprot->writeMessageBegin("access_cm2_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm2_tbl_table_get_default_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_access_cm2_tbl_table_get_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm2_tbl_table_get_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm2_tbl_table_get_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm2_tbl_table_get_default_entry");
  }

  netbufferv4_access_cm2_tbl_table_get_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm2_tbl_table_get_default_entry", bytes);
  }

  netbufferv4_access_cm2_tbl_table_get_default_entry_result result;
  try {
    iface_->access_cm2_tbl_table_get_default_entry(result.success, args.sess_hdl, args.dev_tgt, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm2_tbl_table_get_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm2_tbl_table_get_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm2_tbl_table_get_default_entry");
  }

  oprot->writeMessageBegin("access_cm2_tbl_table_get_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm2_tbl_table_get_default_entry", bytes);
  }
}

void netbufferv4Processor::process_access_cm3_tbl_table_get_default_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm3_tbl_table_get_default_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm3_tbl_table_get_default_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm3_tbl_table_get_default_entry_handle");
  }

  netbufferv4_access_cm3_tbl_table_get_default_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm3_tbl_table_get_default_entry_handle", bytes);
  }

  netbufferv4_access_cm3_tbl_table_get_default_entry_handle_result result;
  try {
    result.success = iface_->access_cm3_tbl_table_get_default_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm3_tbl_table_get_default_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm3_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm3_tbl_table_get_default_entry_handle");
  }

  oprot->writeMessageBegin("access_cm3_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm3_tbl_table_get_default_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_access_cm3_tbl_table_get_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm3_tbl_table_get_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm3_tbl_table_get_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm3_tbl_table_get_default_entry");
  }

  netbufferv4_access_cm3_tbl_table_get_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm3_tbl_table_get_default_entry", bytes);
  }

  netbufferv4_access_cm3_tbl_table_get_default_entry_result result;
  try {
    iface_->access_cm3_tbl_table_get_default_entry(result.success, args.sess_hdl, args.dev_tgt, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm3_tbl_table_get_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm3_tbl_table_get_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm3_tbl_table_get_default_entry");
  }

  oprot->writeMessageBegin("access_cm3_tbl_table_get_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm3_tbl_table_get_default_entry", bytes);
  }
}

void netbufferv4Processor::process_access_cm4_tbl_table_get_default_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm4_tbl_table_get_default_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm4_tbl_table_get_default_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm4_tbl_table_get_default_entry_handle");
  }

  netbufferv4_access_cm4_tbl_table_get_default_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm4_tbl_table_get_default_entry_handle", bytes);
  }

  netbufferv4_access_cm4_tbl_table_get_default_entry_handle_result result;
  try {
    result.success = iface_->access_cm4_tbl_table_get_default_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm4_tbl_table_get_default_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm4_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm4_tbl_table_get_default_entry_handle");
  }

  oprot->writeMessageBegin("access_cm4_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm4_tbl_table_get_default_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_access_cm4_tbl_table_get_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm4_tbl_table_get_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm4_tbl_table_get_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm4_tbl_table_get_default_entry");
  }

  netbufferv4_access_cm4_tbl_table_get_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm4_tbl_table_get_default_entry", bytes);
  }

  netbufferv4_access_cm4_tbl_table_get_default_entry_result result;
  try {
    iface_->access_cm4_tbl_table_get_default_entry(result.success, args.sess_hdl, args.dev_tgt, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm4_tbl_table_get_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm4_tbl_table_get_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm4_tbl_table_get_default_entry");
  }

  oprot->writeMessageBegin("access_cm4_tbl_table_get_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm4_tbl_table_get_default_entry", bytes);
  }
}

void netbufferv4Processor::process_access_deleted_tbl_table_get_default_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_deleted_tbl_table_get_default_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_deleted_tbl_table_get_default_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_deleted_tbl_table_get_default_entry_handle");
  }

  netbufferv4_access_deleted_tbl_table_get_default_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_deleted_tbl_table_get_default_entry_handle", bytes);
  }

  netbufferv4_access_deleted_tbl_table_get_default_entry_handle_result result;
  try {
    result.success = iface_->access_deleted_tbl_table_get_default_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_deleted_tbl_table_get_default_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_deleted_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_deleted_tbl_table_get_default_entry_handle");
  }

  oprot->writeMessageBegin("access_deleted_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_deleted_tbl_table_get_default_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_access_deleted_tbl_table_get_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_deleted_tbl_table_get_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_deleted_tbl_table_get_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_deleted_tbl_table_get_default_entry");
  }

  netbufferv4_access_deleted_tbl_table_get_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_deleted_tbl_table_get_default_entry", bytes);
  }

  netbufferv4_access_deleted_tbl_table_get_default_entry_result result;
  try {
    iface_->access_deleted_tbl_table_get_default_entry(result.success, args.sess_hdl, args.dev_tgt, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_deleted_tbl_table_get_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_deleted_tbl_table_get_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_deleted_tbl_table_get_default_entry");
  }

  oprot->writeMessageBegin("access_deleted_tbl_table_get_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_deleted_tbl_table_get_default_entry", bytes);
  }
}

void netbufferv4Processor::process_access_latest_tbl_table_get_default_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_latest_tbl_table_get_default_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_latest_tbl_table_get_default_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_latest_tbl_table_get_default_entry_handle");
  }

  netbufferv4_access_latest_tbl_table_get_default_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_latest_tbl_table_get_default_entry_handle", bytes);
  }

  netbufferv4_access_latest_tbl_table_get_default_entry_handle_result result;
  try {
    result.success = iface_->access_latest_tbl_table_get_default_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_latest_tbl_table_get_default_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_latest_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_latest_tbl_table_get_default_entry_handle");
  }

  oprot->writeMessageBegin("access_latest_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_latest_tbl_table_get_default_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_access_latest_tbl_table_get_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_latest_tbl_table_get_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_latest_tbl_table_get_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_latest_tbl_table_get_default_entry");
  }

  netbufferv4_access_latest_tbl_table_get_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_latest_tbl_table_get_default_entry", bytes);
  }

  netbufferv4_access_latest_tbl_table_get_default_entry_result result;
  try {
    iface_->access_latest_tbl_table_get_default_entry(result.success, args.sess_hdl, args.dev_tgt, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_latest_tbl_table_get_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_latest_tbl_table_get_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_latest_tbl_table_get_default_entry");
  }

  oprot->writeMessageBegin("access_latest_tbl_table_get_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_latest_tbl_table_get_default_entry", bytes);
  }
}

void netbufferv4Processor::process_access_savedseq_tbl_table_get_default_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_savedseq_tbl_table_get_default_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_savedseq_tbl_table_get_default_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_savedseq_tbl_table_get_default_entry_handle");
  }

  netbufferv4_access_savedseq_tbl_table_get_default_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_savedseq_tbl_table_get_default_entry_handle", bytes);
  }

  netbufferv4_access_savedseq_tbl_table_get_default_entry_handle_result result;
  try {
    result.success = iface_->access_savedseq_tbl_table_get_default_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_savedseq_tbl_table_get_default_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_savedseq_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_savedseq_tbl_table_get_default_entry_handle");
  }

  oprot->writeMessageBegin("access_savedseq_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_savedseq_tbl_table_get_default_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_access_savedseq_tbl_table_get_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_savedseq_tbl_table_get_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_savedseq_tbl_table_get_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_savedseq_tbl_table_get_default_entry");
  }

  netbufferv4_access_savedseq_tbl_table_get_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_savedseq_tbl_table_get_default_entry", bytes);
  }

  netbufferv4_access_savedseq_tbl_table_get_default_entry_result result;
  try {
    iface_->access_savedseq_tbl_table_get_default_entry(result.success, args.sess_hdl, args.dev_tgt, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_savedseq_tbl_table_get_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_savedseq_tbl_table_get_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_savedseq_tbl_table_get_default_entry");
  }

  oprot->writeMessageBegin("access_savedseq_tbl_table_get_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_savedseq_tbl_table_get_default_entry", bytes);
  }
}

void netbufferv4Processor::process_access_seq_tbl_table_get_default_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_seq_tbl_table_get_default_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_seq_tbl_table_get_default_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_seq_tbl_table_get_default_entry_handle");
  }

  netbufferv4_access_seq_tbl_table_get_default_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_seq_tbl_table_get_default_entry_handle", bytes);
  }

  netbufferv4_access_seq_tbl_table_get_default_entry_handle_result result;
  try {
    result.success = iface_->access_seq_tbl_table_get_default_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_seq_tbl_table_get_default_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_seq_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_seq_tbl_table_get_default_entry_handle");
  }

  oprot->writeMessageBegin("access_seq_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_seq_tbl_table_get_default_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_access_seq_tbl_table_get_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_seq_tbl_table_get_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_seq_tbl_table_get_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_seq_tbl_table_get_default_entry");
  }

  netbufferv4_access_seq_tbl_table_get_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_seq_tbl_table_get_default_entry", bytes);
  }

  netbufferv4_access_seq_tbl_table_get_default_entry_result result;
  try {
    iface_->access_seq_tbl_table_get_default_entry(result.success, args.sess_hdl, args.dev_tgt, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_seq_tbl_table_get_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_seq_tbl_table_get_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_seq_tbl_table_get_default_entry");
  }

  oprot->writeMessageBegin("access_seq_tbl_table_get_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_seq_tbl_table_get_default_entry", bytes);
  }
}

void netbufferv4Processor::process_access_validvalue_tbl_table_get_default_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_validvalue_tbl_table_get_default_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_validvalue_tbl_table_get_default_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_validvalue_tbl_table_get_default_entry_handle");
  }

  netbufferv4_access_validvalue_tbl_table_get_default_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_validvalue_tbl_table_get_default_entry_handle", bytes);
  }

  netbufferv4_access_validvalue_tbl_table_get_default_entry_handle_result result;
  try {
    result.success = iface_->access_validvalue_tbl_table_get_default_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_validvalue_tbl_table_get_default_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_validvalue_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_validvalue_tbl_table_get_default_entry_handle");
  }

  oprot->writeMessageBegin("access_validvalue_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_validvalue_tbl_table_get_default_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_access_validvalue_tbl_table_get_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_validvalue_tbl_table_get_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_validvalue_tbl_table_get_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_validvalue_tbl_table_get_default_entry");
  }

  netbufferv4_access_validvalue_tbl_table_get_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_validvalue_tbl_table_get_default_entry", bytes);
  }

  netbufferv4_access_validvalue_tbl_table_get_default_entry_result result;
  try {
    iface_->access_validvalue_tbl_table_get_default_entry(result.success, args.sess_hdl, args.dev_tgt, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_validvalue_tbl_table_get_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_validvalue_tbl_table_get_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_validvalue_tbl_table_get_default_entry");
  }

  oprot->writeMessageBegin("access_validvalue_tbl_table_get_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_validvalue_tbl_table_get_default_entry", bytes);
  }
}

void netbufferv4Processor::process_add_and_remove_value_header_tbl_table_get_default_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.add_and_remove_value_header_tbl_table_get_default_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.add_and_remove_value_header_tbl_table_get_default_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_get_default_entry_handle");
  }

  netbufferv4_add_and_remove_value_header_tbl_table_get_default_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_get_default_entry_handle", bytes);
  }

  netbufferv4_add_and_remove_value_header_tbl_table_get_default_entry_handle_result result;
  try {
    result.success = iface_->add_and_remove_value_header_tbl_table_get_default_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_get_default_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_get_default_entry_handle");
  }

  oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_get_default_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_add_and_remove_value_header_tbl_table_get_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.add_and_remove_value_header_tbl_table_get_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.add_and_remove_value_header_tbl_table_get_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_get_default_entry");
  }

  netbufferv4_add_and_remove_value_header_tbl_table_get_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_get_default_entry", bytes);
  }

  netbufferv4_add_and_remove_value_header_tbl_table_get_default_entry_result result;
  try {
    iface_->add_and_remove_value_header_tbl_table_get_default_entry(result.success, args.sess_hdl, args.dev_tgt, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_get_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_get_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_get_default_entry");
  }

  oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_get_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_get_default_entry", bytes);
  }
}

void netbufferv4Processor::process_cache_lookup_tbl_table_get_default_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.cache_lookup_tbl_table_get_default_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.cache_lookup_tbl_table_get_default_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.cache_lookup_tbl_table_get_default_entry_handle");
  }

  netbufferv4_cache_lookup_tbl_table_get_default_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.cache_lookup_tbl_table_get_default_entry_handle", bytes);
  }

  netbufferv4_cache_lookup_tbl_table_get_default_entry_handle_result result;
  try {
    result.success = iface_->cache_lookup_tbl_table_get_default_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.cache_lookup_tbl_table_get_default_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("cache_lookup_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.cache_lookup_tbl_table_get_default_entry_handle");
  }

  oprot->writeMessageBegin("cache_lookup_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.cache_lookup_tbl_table_get_default_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_cache_lookup_tbl_table_get_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.cache_lookup_tbl_table_get_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.cache_lookup_tbl_table_get_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.cache_lookup_tbl_table_get_default_entry");
  }

  netbufferv4_cache_lookup_tbl_table_get_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.cache_lookup_tbl_table_get_default_entry", bytes);
  }

  netbufferv4_cache_lookup_tbl_table_get_default_entry_result result;
  try {
    iface_->cache_lookup_tbl_table_get_default_entry(result.success, args.sess_hdl, args.dev_tgt, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.cache_lookup_tbl_table_get_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("cache_lookup_tbl_table_get_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.cache_lookup_tbl_table_get_default_entry");
  }

  oprot->writeMessageBegin("cache_lookup_tbl_table_get_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.cache_lookup_tbl_table_get_default_entry", bytes);
  }
}

void netbufferv4Processor::process_drop_tbl_table_get_default_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.drop_tbl_table_get_default_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.drop_tbl_table_get_default_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.drop_tbl_table_get_default_entry_handle");
  }

  netbufferv4_drop_tbl_table_get_default_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.drop_tbl_table_get_default_entry_handle", bytes);
  }

  netbufferv4_drop_tbl_table_get_default_entry_handle_result result;
  try {
    result.success = iface_->drop_tbl_table_get_default_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.drop_tbl_table_get_default_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("drop_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.drop_tbl_table_get_default_entry_handle");
  }

  oprot->writeMessageBegin("drop_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.drop_tbl_table_get_default_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_drop_tbl_table_get_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.drop_tbl_table_get_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.drop_tbl_table_get_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.drop_tbl_table_get_default_entry");
  }

  netbufferv4_drop_tbl_table_get_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.drop_tbl_table_get_default_entry", bytes);
  }

  netbufferv4_drop_tbl_table_get_default_entry_result result;
  try {
    iface_->drop_tbl_table_get_default_entry(result.success, args.sess_hdl, args.dev_tgt, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.drop_tbl_table_get_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("drop_tbl_table_get_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.drop_tbl_table_get_default_entry");
  }

  oprot->writeMessageBegin("drop_tbl_table_get_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.drop_tbl_table_get_default_entry", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_get_default_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_get_default_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_get_default_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_get_default_entry_handle");
  }

  netbufferv4_eg_port_forward_tbl_table_get_default_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_get_default_entry_handle", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_get_default_entry_handle_result result;
  try {
    result.success = iface_->eg_port_forward_tbl_table_get_default_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_get_default_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_get_default_entry_handle");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_get_default_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_get_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_get_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_get_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_get_default_entry");
  }

  netbufferv4_eg_port_forward_tbl_table_get_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_get_default_entry", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_get_default_entry_result result;
  try {
    iface_->eg_port_forward_tbl_table_get_default_entry(result.success, args.sess_hdl, args.dev_tgt, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_get_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_get_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_get_default_entry");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_get_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_get_default_entry", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm1_tbl_table_get_default_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm1_tbl_table_get_default_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm1_tbl_table_get_default_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm1_tbl_table_get_default_entry_handle");
  }

  netbufferv4_hash_for_cm1_tbl_table_get_default_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm1_tbl_table_get_default_entry_handle", bytes);
  }

  netbufferv4_hash_for_cm1_tbl_table_get_default_entry_handle_result result;
  try {
    result.success = iface_->hash_for_cm1_tbl_table_get_default_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm1_tbl_table_get_default_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm1_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm1_tbl_table_get_default_entry_handle");
  }

  oprot->writeMessageBegin("hash_for_cm1_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm1_tbl_table_get_default_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm1_tbl_table_get_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm1_tbl_table_get_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm1_tbl_table_get_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm1_tbl_table_get_default_entry");
  }

  netbufferv4_hash_for_cm1_tbl_table_get_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm1_tbl_table_get_default_entry", bytes);
  }

  netbufferv4_hash_for_cm1_tbl_table_get_default_entry_result result;
  try {
    iface_->hash_for_cm1_tbl_table_get_default_entry(result.success, args.sess_hdl, args.dev_tgt, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm1_tbl_table_get_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm1_tbl_table_get_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm1_tbl_table_get_default_entry");
  }

  oprot->writeMessageBegin("hash_for_cm1_tbl_table_get_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm1_tbl_table_get_default_entry", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm2_tbl_table_get_default_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm2_tbl_table_get_default_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm2_tbl_table_get_default_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm2_tbl_table_get_default_entry_handle");
  }

  netbufferv4_hash_for_cm2_tbl_table_get_default_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm2_tbl_table_get_default_entry_handle", bytes);
  }

  netbufferv4_hash_for_cm2_tbl_table_get_default_entry_handle_result result;
  try {
    result.success = iface_->hash_for_cm2_tbl_table_get_default_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm2_tbl_table_get_default_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm2_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm2_tbl_table_get_default_entry_handle");
  }

  oprot->writeMessageBegin("hash_for_cm2_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm2_tbl_table_get_default_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm2_tbl_table_get_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm2_tbl_table_get_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm2_tbl_table_get_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm2_tbl_table_get_default_entry");
  }

  netbufferv4_hash_for_cm2_tbl_table_get_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm2_tbl_table_get_default_entry", bytes);
  }

  netbufferv4_hash_for_cm2_tbl_table_get_default_entry_result result;
  try {
    iface_->hash_for_cm2_tbl_table_get_default_entry(result.success, args.sess_hdl, args.dev_tgt, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm2_tbl_table_get_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm2_tbl_table_get_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm2_tbl_table_get_default_entry");
  }

  oprot->writeMessageBegin("hash_for_cm2_tbl_table_get_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm2_tbl_table_get_default_entry", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm3_tbl_table_get_default_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm3_tbl_table_get_default_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm3_tbl_table_get_default_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm3_tbl_table_get_default_entry_handle");
  }

  netbufferv4_hash_for_cm3_tbl_table_get_default_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm3_tbl_table_get_default_entry_handle", bytes);
  }

  netbufferv4_hash_for_cm3_tbl_table_get_default_entry_handle_result result;
  try {
    result.success = iface_->hash_for_cm3_tbl_table_get_default_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm3_tbl_table_get_default_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm3_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm3_tbl_table_get_default_entry_handle");
  }

  oprot->writeMessageBegin("hash_for_cm3_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm3_tbl_table_get_default_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm3_tbl_table_get_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm3_tbl_table_get_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm3_tbl_table_get_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm3_tbl_table_get_default_entry");
  }

  netbufferv4_hash_for_cm3_tbl_table_get_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm3_tbl_table_get_default_entry", bytes);
  }

  netbufferv4_hash_for_cm3_tbl_table_get_default_entry_result result;
  try {
    iface_->hash_for_cm3_tbl_table_get_default_entry(result.success, args.sess_hdl, args.dev_tgt, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm3_tbl_table_get_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm3_tbl_table_get_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm3_tbl_table_get_default_entry");
  }

  oprot->writeMessageBegin("hash_for_cm3_tbl_table_get_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm3_tbl_table_get_default_entry", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm4_tbl_table_get_default_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm4_tbl_table_get_default_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm4_tbl_table_get_default_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm4_tbl_table_get_default_entry_handle");
  }

  netbufferv4_hash_for_cm4_tbl_table_get_default_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm4_tbl_table_get_default_entry_handle", bytes);
  }

  netbufferv4_hash_for_cm4_tbl_table_get_default_entry_handle_result result;
  try {
    result.success = iface_->hash_for_cm4_tbl_table_get_default_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm4_tbl_table_get_default_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm4_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm4_tbl_table_get_default_entry_handle");
  }

  oprot->writeMessageBegin("hash_for_cm4_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm4_tbl_table_get_default_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm4_tbl_table_get_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm4_tbl_table_get_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm4_tbl_table_get_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm4_tbl_table_get_default_entry");
  }

  netbufferv4_hash_for_cm4_tbl_table_get_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm4_tbl_table_get_default_entry", bytes);
  }

  netbufferv4_hash_for_cm4_tbl_table_get_default_entry_result result;
  try {
    iface_->hash_for_cm4_tbl_table_get_default_entry(result.success, args.sess_hdl, args.dev_tgt, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm4_tbl_table_get_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm4_tbl_table_get_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm4_tbl_table_get_default_entry");
  }

  oprot->writeMessageBegin("hash_for_cm4_tbl_table_get_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm4_tbl_table_get_default_entry", bytes);
  }
}

void netbufferv4Processor::process_hash_for_seq_tbl_table_get_default_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_seq_tbl_table_get_default_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_seq_tbl_table_get_default_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_seq_tbl_table_get_default_entry_handle");
  }

  netbufferv4_hash_for_seq_tbl_table_get_default_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_seq_tbl_table_get_default_entry_handle", bytes);
  }

  netbufferv4_hash_for_seq_tbl_table_get_default_entry_handle_result result;
  try {
    result.success = iface_->hash_for_seq_tbl_table_get_default_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_seq_tbl_table_get_default_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_seq_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_seq_tbl_table_get_default_entry_handle");
  }

  oprot->writeMessageBegin("hash_for_seq_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_seq_tbl_table_get_default_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_hash_for_seq_tbl_table_get_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_seq_tbl_table_get_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_seq_tbl_table_get_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_seq_tbl_table_get_default_entry");
  }

  netbufferv4_hash_for_seq_tbl_table_get_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_seq_tbl_table_get_default_entry", bytes);
  }

  netbufferv4_hash_for_seq_tbl_table_get_default_entry_result result;
  try {
    iface_->hash_for_seq_tbl_table_get_default_entry(result.success, args.sess_hdl, args.dev_tgt, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_seq_tbl_table_get_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_seq_tbl_table_get_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_seq_tbl_table_get_default_entry");
  }

  oprot->writeMessageBegin("hash_for_seq_tbl_table_get_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_seq_tbl_table_get_default_entry", bytes);
  }
}

void netbufferv4Processor::process_ig_port_forward_tbl_table_get_default_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.ig_port_forward_tbl_table_get_default_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.ig_port_forward_tbl_table_get_default_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.ig_port_forward_tbl_table_get_default_entry_handle");
  }

  netbufferv4_ig_port_forward_tbl_table_get_default_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.ig_port_forward_tbl_table_get_default_entry_handle", bytes);
  }

  netbufferv4_ig_port_forward_tbl_table_get_default_entry_handle_result result;
  try {
    result.success = iface_->ig_port_forward_tbl_table_get_default_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.ig_port_forward_tbl_table_get_default_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ig_port_forward_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.ig_port_forward_tbl_table_get_default_entry_handle");
  }

  oprot->writeMessageBegin("ig_port_forward_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.ig_port_forward_tbl_table_get_default_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_ig_port_forward_tbl_table_get_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.ig_port_forward_tbl_table_get_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.ig_port_forward_tbl_table_get_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.ig_port_forward_tbl_table_get_default_entry");
  }

  netbufferv4_ig_port_forward_tbl_table_get_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.ig_port_forward_tbl_table_get_default_entry", bytes);
  }

  netbufferv4_ig_port_forward_tbl_table_get_default_entry_result result;
  try {
    iface_->ig_port_forward_tbl_table_get_default_entry(result.success, args.sess_hdl, args.dev_tgt, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.ig_port_forward_tbl_table_get_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ig_port_forward_tbl_table_get_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.ig_port_forward_tbl_table_get_default_entry");
  }

  oprot->writeMessageBegin("ig_port_forward_tbl_table_get_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.ig_port_forward_tbl_table_get_default_entry", bytes);
  }
}

void netbufferv4Processor::process_ipv4_forward_tbl_table_get_default_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.ipv4_forward_tbl_table_get_default_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.ipv4_forward_tbl_table_get_default_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.ipv4_forward_tbl_table_get_default_entry_handle");
  }

  netbufferv4_ipv4_forward_tbl_table_get_default_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.ipv4_forward_tbl_table_get_default_entry_handle", bytes);
  }

  netbufferv4_ipv4_forward_tbl_table_get_default_entry_handle_result result;
  try {
    result.success = iface_->ipv4_forward_tbl_table_get_default_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.ipv4_forward_tbl_table_get_default_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ipv4_forward_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.ipv4_forward_tbl_table_get_default_entry_handle");
  }

  oprot->writeMessageBegin("ipv4_forward_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.ipv4_forward_tbl_table_get_default_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_ipv4_forward_tbl_table_get_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.ipv4_forward_tbl_table_get_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.ipv4_forward_tbl_table_get_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.ipv4_forward_tbl_table_get_default_entry");
  }

  netbufferv4_ipv4_forward_tbl_table_get_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.ipv4_forward_tbl_table_get_default_entry", bytes);
  }

  netbufferv4_ipv4_forward_tbl_table_get_default_entry_result result;
  try {
    iface_->ipv4_forward_tbl_table_get_default_entry(result.success, args.sess_hdl, args.dev_tgt, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.ipv4_forward_tbl_table_get_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ipv4_forward_tbl_table_get_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.ipv4_forward_tbl_table_get_default_entry");
  }

  oprot->writeMessageBegin("ipv4_forward_tbl_table_get_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.ipv4_forward_tbl_table_get_default_entry", bytes);
  }
}

void netbufferv4Processor::process_is_hot_tbl_table_get_default_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.is_hot_tbl_table_get_default_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.is_hot_tbl_table_get_default_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.is_hot_tbl_table_get_default_entry_handle");
  }

  netbufferv4_is_hot_tbl_table_get_default_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.is_hot_tbl_table_get_default_entry_handle", bytes);
  }

  netbufferv4_is_hot_tbl_table_get_default_entry_handle_result result;
  try {
    result.success = iface_->is_hot_tbl_table_get_default_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.is_hot_tbl_table_get_default_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("is_hot_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.is_hot_tbl_table_get_default_entry_handle");
  }

  oprot->writeMessageBegin("is_hot_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.is_hot_tbl_table_get_default_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_is_hot_tbl_table_get_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.is_hot_tbl_table_get_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.is_hot_tbl_table_get_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.is_hot_tbl_table_get_default_entry");
  }

  netbufferv4_is_hot_tbl_table_get_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.is_hot_tbl_table_get_default_entry", bytes);
  }

  netbufferv4_is_hot_tbl_table_get_default_entry_result result;
  try {
    iface_->is_hot_tbl_table_get_default_entry(result.success, args.sess_hdl, args.dev_tgt, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.is_hot_tbl_table_get_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("is_hot_tbl_table_get_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.is_hot_tbl_table_get_default_entry");
  }

  oprot->writeMessageBegin("is_hot_tbl_table_get_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.is_hot_tbl_table_get_default_entry", bytes);
  }
}

void netbufferv4Processor::process_lastclone_lastscansplit_tbl_table_get_default_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.lastclone_lastscansplit_tbl_table_get_default_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_get_default_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_get_default_entry_handle");
  }

  netbufferv4_lastclone_lastscansplit_tbl_table_get_default_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_get_default_entry_handle", bytes);
  }

  netbufferv4_lastclone_lastscansplit_tbl_table_get_default_entry_handle_result result;
  try {
    result.success = iface_->lastclone_lastscansplit_tbl_table_get_default_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_get_default_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("lastclone_lastscansplit_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_get_default_entry_handle");
  }

  oprot->writeMessageBegin("lastclone_lastscansplit_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_get_default_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_lastclone_lastscansplit_tbl_table_get_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.lastclone_lastscansplit_tbl_table_get_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_get_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_get_default_entry");
  }

  netbufferv4_lastclone_lastscansplit_tbl_table_get_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_get_default_entry", bytes);
  }

  netbufferv4_lastclone_lastscansplit_tbl_table_get_default_entry_result result;
  try {
    iface_->lastclone_lastscansplit_tbl_table_get_default_entry(result.success, args.sess_hdl, args.dev_tgt, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_get_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("lastclone_lastscansplit_tbl_table_get_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_get_default_entry");
  }

  oprot->writeMessageBegin("lastclone_lastscansplit_tbl_table_get_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_get_default_entry", bytes);
  }
}

void netbufferv4Processor::process_need_recirculate_tbl_table_get_default_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.need_recirculate_tbl_table_get_default_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.need_recirculate_tbl_table_get_default_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.need_recirculate_tbl_table_get_default_entry_handle");
  }

  netbufferv4_need_recirculate_tbl_table_get_default_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.need_recirculate_tbl_table_get_default_entry_handle", bytes);
  }

  netbufferv4_need_recirculate_tbl_table_get_default_entry_handle_result result;
  try {
    result.success = iface_->need_recirculate_tbl_table_get_default_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.need_recirculate_tbl_table_get_default_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("need_recirculate_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.need_recirculate_tbl_table_get_default_entry_handle");
  }

  oprot->writeMessageBegin("need_recirculate_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.need_recirculate_tbl_table_get_default_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_need_recirculate_tbl_table_get_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.need_recirculate_tbl_table_get_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.need_recirculate_tbl_table_get_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.need_recirculate_tbl_table_get_default_entry");
  }

  netbufferv4_need_recirculate_tbl_table_get_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.need_recirculate_tbl_table_get_default_entry", bytes);
  }

  netbufferv4_need_recirculate_tbl_table_get_default_entry_result result;
  try {
    iface_->need_recirculate_tbl_table_get_default_entry(result.success, args.sess_hdl, args.dev_tgt, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.need_recirculate_tbl_table_get_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("need_recirculate_tbl_table_get_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.need_recirculate_tbl_table_get_default_entry");
  }

  oprot->writeMessageBegin("need_recirculate_tbl_table_get_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.need_recirculate_tbl_table_get_default_entry", bytes);
  }
}

void netbufferv4Processor::process_prepare_for_cachehit_tbl_table_get_default_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.prepare_for_cachehit_tbl_table_get_default_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.prepare_for_cachehit_tbl_table_get_default_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.prepare_for_cachehit_tbl_table_get_default_entry_handle");
  }

  netbufferv4_prepare_for_cachehit_tbl_table_get_default_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.prepare_for_cachehit_tbl_table_get_default_entry_handle", bytes);
  }

  netbufferv4_prepare_for_cachehit_tbl_table_get_default_entry_handle_result result;
  try {
    result.success = iface_->prepare_for_cachehit_tbl_table_get_default_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.prepare_for_cachehit_tbl_table_get_default_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("prepare_for_cachehit_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.prepare_for_cachehit_tbl_table_get_default_entry_handle");
  }

  oprot->writeMessageBegin("prepare_for_cachehit_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.prepare_for_cachehit_tbl_table_get_default_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_prepare_for_cachehit_tbl_table_get_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.prepare_for_cachehit_tbl_table_get_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.prepare_for_cachehit_tbl_table_get_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.prepare_for_cachehit_tbl_table_get_default_entry");
  }

  netbufferv4_prepare_for_cachehit_tbl_table_get_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.prepare_for_cachehit_tbl_table_get_default_entry", bytes);
  }

  netbufferv4_prepare_for_cachehit_tbl_table_get_default_entry_result result;
  try {
    iface_->prepare_for_cachehit_tbl_table_get_default_entry(result.success, args.sess_hdl, args.dev_tgt, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.prepare_for_cachehit_tbl_table_get_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("prepare_for_cachehit_tbl_table_get_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.prepare_for_cachehit_tbl_table_get_default_entry");
  }

  oprot->writeMessageBegin("prepare_for_cachehit_tbl_table_get_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.prepare_for_cachehit_tbl_table_get_default_entry", bytes);
  }
}

void netbufferv4Processor::process_process_scanreq_split_tbl_table_get_default_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.process_scanreq_split_tbl_table_get_default_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.process_scanreq_split_tbl_table_get_default_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.process_scanreq_split_tbl_table_get_default_entry_handle");
  }

  netbufferv4_process_scanreq_split_tbl_table_get_default_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.process_scanreq_split_tbl_table_get_default_entry_handle", bytes);
  }

  netbufferv4_process_scanreq_split_tbl_table_get_default_entry_handle_result result;
  try {
    result.success = iface_->process_scanreq_split_tbl_table_get_default_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.process_scanreq_split_tbl_table_get_default_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("process_scanreq_split_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.process_scanreq_split_tbl_table_get_default_entry_handle");
  }

  oprot->writeMessageBegin("process_scanreq_split_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.process_scanreq_split_tbl_table_get_default_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_process_scanreq_split_tbl_table_get_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.process_scanreq_split_tbl_table_get_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.process_scanreq_split_tbl_table_get_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.process_scanreq_split_tbl_table_get_default_entry");
  }

  netbufferv4_process_scanreq_split_tbl_table_get_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.process_scanreq_split_tbl_table_get_default_entry", bytes);
  }

  netbufferv4_process_scanreq_split_tbl_table_get_default_entry_result result;
  try {
    iface_->process_scanreq_split_tbl_table_get_default_entry(result.success, args.sess_hdl, args.dev_tgt, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.process_scanreq_split_tbl_table_get_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("process_scanreq_split_tbl_table_get_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.process_scanreq_split_tbl_table_get_default_entry");
  }

  oprot->writeMessageBegin("process_scanreq_split_tbl_table_get_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.process_scanreq_split_tbl_table_get_default_entry", bytes);
  }
}

void netbufferv4Processor::process_range_partition_for_scan_endkey_tbl_table_get_default_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.range_partition_for_scan_endkey_tbl_table_get_default_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_table_get_default_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_table_get_default_entry_handle");
  }

  netbufferv4_range_partition_for_scan_endkey_tbl_table_get_default_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_table_get_default_entry_handle", bytes);
  }

  netbufferv4_range_partition_for_scan_endkey_tbl_table_get_default_entry_handle_result result;
  try {
    result.success = iface_->range_partition_for_scan_endkey_tbl_table_get_default_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_table_get_default_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("range_partition_for_scan_endkey_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_table_get_default_entry_handle");
  }

  oprot->writeMessageBegin("range_partition_for_scan_endkey_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_table_get_default_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_range_partition_for_scan_endkey_tbl_table_get_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.range_partition_for_scan_endkey_tbl_table_get_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_table_get_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_table_get_default_entry");
  }

  netbufferv4_range_partition_for_scan_endkey_tbl_table_get_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_table_get_default_entry", bytes);
  }

  netbufferv4_range_partition_for_scan_endkey_tbl_table_get_default_entry_result result;
  try {
    iface_->range_partition_for_scan_endkey_tbl_table_get_default_entry(result.success, args.sess_hdl, args.dev_tgt, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_table_get_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("range_partition_for_scan_endkey_tbl_table_get_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_table_get_default_entry");
  }

  oprot->writeMessageBegin("range_partition_for_scan_endkey_tbl_table_get_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_table_get_default_entry", bytes);
  }
}

void netbufferv4Processor::process_range_partition_tbl_table_get_default_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.range_partition_tbl_table_get_default_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.range_partition_tbl_table_get_default_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.range_partition_tbl_table_get_default_entry_handle");
  }

  netbufferv4_range_partition_tbl_table_get_default_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.range_partition_tbl_table_get_default_entry_handle", bytes);
  }

  netbufferv4_range_partition_tbl_table_get_default_entry_handle_result result;
  try {
    result.success = iface_->range_partition_tbl_table_get_default_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.range_partition_tbl_table_get_default_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("range_partition_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.range_partition_tbl_table_get_default_entry_handle");
  }

  oprot->writeMessageBegin("range_partition_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.range_partition_tbl_table_get_default_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_range_partition_tbl_table_get_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.range_partition_tbl_table_get_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.range_partition_tbl_table_get_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.range_partition_tbl_table_get_default_entry");
  }

  netbufferv4_range_partition_tbl_table_get_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.range_partition_tbl_table_get_default_entry", bytes);
  }

  netbufferv4_range_partition_tbl_table_get_default_entry_result result;
  try {
    iface_->range_partition_tbl_table_get_default_entry(result.success, args.sess_hdl, args.dev_tgt, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.range_partition_tbl_table_get_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("range_partition_tbl_table_get_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.range_partition_tbl_table_get_default_entry");
  }

  oprot->writeMessageBegin("range_partition_tbl_table_get_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.range_partition_tbl_table_get_default_entry", bytes);
  }
}

void netbufferv4Processor::process_recirculate_tbl_table_get_default_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.recirculate_tbl_table_get_default_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.recirculate_tbl_table_get_default_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.recirculate_tbl_table_get_default_entry_handle");
  }

  netbufferv4_recirculate_tbl_table_get_default_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.recirculate_tbl_table_get_default_entry_handle", bytes);
  }

  netbufferv4_recirculate_tbl_table_get_default_entry_handle_result result;
  try {
    result.success = iface_->recirculate_tbl_table_get_default_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.recirculate_tbl_table_get_default_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("recirculate_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.recirculate_tbl_table_get_default_entry_handle");
  }

  oprot->writeMessageBegin("recirculate_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.recirculate_tbl_table_get_default_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_recirculate_tbl_table_get_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.recirculate_tbl_table_get_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.recirculate_tbl_table_get_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.recirculate_tbl_table_get_default_entry");
  }

  netbufferv4_recirculate_tbl_table_get_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.recirculate_tbl_table_get_default_entry", bytes);
  }

  netbufferv4_recirculate_tbl_table_get_default_entry_result result;
  try {
    iface_->recirculate_tbl_table_get_default_entry(result.success, args.sess_hdl, args.dev_tgt, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.recirculate_tbl_table_get_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("recirculate_tbl_table_get_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.recirculate_tbl_table_get_default_entry");
  }

  oprot->writeMessageBegin("recirculate_tbl_table_get_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.recirculate_tbl_table_get_default_entry", bytes);
  }
}

void netbufferv4Processor::process_sample_tbl_table_get_default_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.sample_tbl_table_get_default_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.sample_tbl_table_get_default_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.sample_tbl_table_get_default_entry_handle");
  }

  netbufferv4_sample_tbl_table_get_default_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.sample_tbl_table_get_default_entry_handle", bytes);
  }

  netbufferv4_sample_tbl_table_get_default_entry_handle_result result;
  try {
    result.success = iface_->sample_tbl_table_get_default_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.sample_tbl_table_get_default_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sample_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.sample_tbl_table_get_default_entry_handle");
  }

  oprot->writeMessageBegin("sample_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.sample_tbl_table_get_default_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_sample_tbl_table_get_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.sample_tbl_table_get_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.sample_tbl_table_get_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.sample_tbl_table_get_default_entry");
  }

  netbufferv4_sample_tbl_table_get_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.sample_tbl_table_get_default_entry", bytes);
  }

  netbufferv4_sample_tbl_table_get_default_entry_result result;
  try {
    iface_->sample_tbl_table_get_default_entry(result.success, args.sess_hdl, args.dev_tgt, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.sample_tbl_table_get_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sample_tbl_table_get_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.sample_tbl_table_get_default_entry");
  }

  oprot->writeMessageBegin("sample_tbl_table_get_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.sample_tbl_table_get_default_entry", bytes);
  }
}

void netbufferv4Processor::process_save_client_udpport_tbl_table_get_default_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.save_client_udpport_tbl_table_get_default_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.save_client_udpport_tbl_table_get_default_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.save_client_udpport_tbl_table_get_default_entry_handle");
  }

  netbufferv4_save_client_udpport_tbl_table_get_default_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.save_client_udpport_tbl_table_get_default_entry_handle", bytes);
  }

  netbufferv4_save_client_udpport_tbl_table_get_default_entry_handle_result result;
  try {
    result.success = iface_->save_client_udpport_tbl_table_get_default_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.save_client_udpport_tbl_table_get_default_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("save_client_udpport_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.save_client_udpport_tbl_table_get_default_entry_handle");
  }

  oprot->writeMessageBegin("save_client_udpport_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.save_client_udpport_tbl_table_get_default_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_save_client_udpport_tbl_table_get_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.save_client_udpport_tbl_table_get_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.save_client_udpport_tbl_table_get_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.save_client_udpport_tbl_table_get_default_entry");
  }

  netbufferv4_save_client_udpport_tbl_table_get_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.save_client_udpport_tbl_table_get_default_entry", bytes);
  }

  netbufferv4_save_client_udpport_tbl_table_get_default_entry_result result;
  try {
    iface_->save_client_udpport_tbl_table_get_default_entry(result.success, args.sess_hdl, args.dev_tgt, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.save_client_udpport_tbl_table_get_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("save_client_udpport_tbl_table_get_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.save_client_udpport_tbl_table_get_default_entry");
  }

  oprot->writeMessageBegin("save_client_udpport_tbl_table_get_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.save_client_udpport_tbl_table_get_default_entry", bytes);
  }
}

void netbufferv4Processor::process_set_hot_threshold_tbl_table_get_default_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.set_hot_threshold_tbl_table_get_default_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.set_hot_threshold_tbl_table_get_default_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.set_hot_threshold_tbl_table_get_default_entry_handle");
  }

  netbufferv4_set_hot_threshold_tbl_table_get_default_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.set_hot_threshold_tbl_table_get_default_entry_handle", bytes);
  }

  netbufferv4_set_hot_threshold_tbl_table_get_default_entry_handle_result result;
  try {
    result.success = iface_->set_hot_threshold_tbl_table_get_default_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.set_hot_threshold_tbl_table_get_default_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("set_hot_threshold_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.set_hot_threshold_tbl_table_get_default_entry_handle");
  }

  oprot->writeMessageBegin("set_hot_threshold_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.set_hot_threshold_tbl_table_get_default_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_set_hot_threshold_tbl_table_get_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.set_hot_threshold_tbl_table_get_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.set_hot_threshold_tbl_table_get_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.set_hot_threshold_tbl_table_get_default_entry");
  }

  netbufferv4_set_hot_threshold_tbl_table_get_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.set_hot_threshold_tbl_table_get_default_entry", bytes);
  }

  netbufferv4_set_hot_threshold_tbl_table_get_default_entry_result result;
  try {
    iface_->set_hot_threshold_tbl_table_get_default_entry(result.success, args.sess_hdl, args.dev_tgt, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.set_hot_threshold_tbl_table_get_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("set_hot_threshold_tbl_table_get_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.set_hot_threshold_tbl_table_get_default_entry");
  }

  oprot->writeMessageBegin("set_hot_threshold_tbl_table_get_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.set_hot_threshold_tbl_table_get_default_entry", bytes);
  }
}

void netbufferv4Processor::process_snapshot_flag_tbl_table_get_default_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.snapshot_flag_tbl_table_get_default_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.snapshot_flag_tbl_table_get_default_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.snapshot_flag_tbl_table_get_default_entry_handle");
  }

  netbufferv4_snapshot_flag_tbl_table_get_default_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.snapshot_flag_tbl_table_get_default_entry_handle", bytes);
  }

  netbufferv4_snapshot_flag_tbl_table_get_default_entry_handle_result result;
  try {
    result.success = iface_->snapshot_flag_tbl_table_get_default_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.snapshot_flag_tbl_table_get_default_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("snapshot_flag_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.snapshot_flag_tbl_table_get_default_entry_handle");
  }

  oprot->writeMessageBegin("snapshot_flag_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.snapshot_flag_tbl_table_get_default_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_snapshot_flag_tbl_table_get_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.snapshot_flag_tbl_table_get_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.snapshot_flag_tbl_table_get_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.snapshot_flag_tbl_table_get_default_entry");
  }

  netbufferv4_snapshot_flag_tbl_table_get_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.snapshot_flag_tbl_table_get_default_entry", bytes);
  }

  netbufferv4_snapshot_flag_tbl_table_get_default_entry_result result;
  try {
    iface_->snapshot_flag_tbl_table_get_default_entry(result.success, args.sess_hdl, args.dev_tgt, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.snapshot_flag_tbl_table_get_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("snapshot_flag_tbl_table_get_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.snapshot_flag_tbl_table_get_default_entry");
  }

  oprot->writeMessageBegin("snapshot_flag_tbl_table_get_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.snapshot_flag_tbl_table_get_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_ipmac_srcport_tbl_table_get_default_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_ipmac_srcport_tbl_table_get_default_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_ipmac_srcport_tbl_table_get_default_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_get_default_entry_handle");
  }

  netbufferv4_update_ipmac_srcport_tbl_table_get_default_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_get_default_entry_handle", bytes);
  }

  netbufferv4_update_ipmac_srcport_tbl_table_get_default_entry_handle_result result;
  try {
    result.success = iface_->update_ipmac_srcport_tbl_table_get_default_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_get_default_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_ipmac_srcport_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_get_default_entry_handle");
  }

  oprot->writeMessageBegin("update_ipmac_srcport_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_get_default_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_ipmac_srcport_tbl_table_get_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_ipmac_srcport_tbl_table_get_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_ipmac_srcport_tbl_table_get_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_get_default_entry");
  }

  netbufferv4_update_ipmac_srcport_tbl_table_get_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_get_default_entry", bytes);
  }

  netbufferv4_update_ipmac_srcport_tbl_table_get_default_entry_result result;
  try {
    iface_->update_ipmac_srcport_tbl_table_get_default_entry(result.success, args.sess_hdl, args.dev_tgt, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_get_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_ipmac_srcport_tbl_table_get_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_get_default_entry");
  }

  oprot->writeMessageBegin("update_ipmac_srcport_tbl_table_get_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_get_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_pktlen_tbl_table_get_default_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_pktlen_tbl_table_get_default_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_pktlen_tbl_table_get_default_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_pktlen_tbl_table_get_default_entry_handle");
  }

  netbufferv4_update_pktlen_tbl_table_get_default_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_pktlen_tbl_table_get_default_entry_handle", bytes);
  }

  netbufferv4_update_pktlen_tbl_table_get_default_entry_handle_result result;
  try {
    result.success = iface_->update_pktlen_tbl_table_get_default_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_pktlen_tbl_table_get_default_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_pktlen_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_pktlen_tbl_table_get_default_entry_handle");
  }

  oprot->writeMessageBegin("update_pktlen_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_pktlen_tbl_table_get_default_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_pktlen_tbl_table_get_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_pktlen_tbl_table_get_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_pktlen_tbl_table_get_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_pktlen_tbl_table_get_default_entry");
  }

  netbufferv4_update_pktlen_tbl_table_get_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_pktlen_tbl_table_get_default_entry", bytes);
  }

  netbufferv4_update_pktlen_tbl_table_get_default_entry_result result;
  try {
    iface_->update_pktlen_tbl_table_get_default_entry(result.success, args.sess_hdl, args.dev_tgt, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_pktlen_tbl_table_get_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_pktlen_tbl_table_get_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_pktlen_tbl_table_get_default_entry");
  }

  oprot->writeMessageBegin("update_pktlen_tbl_table_get_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_pktlen_tbl_table_get_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_valhi10_tbl_table_get_default_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi10_tbl_table_get_default_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi10_tbl_table_get_default_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi10_tbl_table_get_default_entry_handle");
  }

  netbufferv4_update_valhi10_tbl_table_get_default_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi10_tbl_table_get_default_entry_handle", bytes);
  }

  netbufferv4_update_valhi10_tbl_table_get_default_entry_handle_result result;
  try {
    result.success = iface_->update_valhi10_tbl_table_get_default_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi10_tbl_table_get_default_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi10_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi10_tbl_table_get_default_entry_handle");
  }

  oprot->writeMessageBegin("update_valhi10_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi10_tbl_table_get_default_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_valhi10_tbl_table_get_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi10_tbl_table_get_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi10_tbl_table_get_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi10_tbl_table_get_default_entry");
  }

  netbufferv4_update_valhi10_tbl_table_get_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi10_tbl_table_get_default_entry", bytes);
  }

  netbufferv4_update_valhi10_tbl_table_get_default_entry_result result;
  try {
    iface_->update_valhi10_tbl_table_get_default_entry(result.success, args.sess_hdl, args.dev_tgt, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi10_tbl_table_get_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi10_tbl_table_get_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi10_tbl_table_get_default_entry");
  }

  oprot->writeMessageBegin("update_valhi10_tbl_table_get_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi10_tbl_table_get_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_valhi11_tbl_table_get_default_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi11_tbl_table_get_default_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi11_tbl_table_get_default_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi11_tbl_table_get_default_entry_handle");
  }

  netbufferv4_update_valhi11_tbl_table_get_default_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi11_tbl_table_get_default_entry_handle", bytes);
  }

  netbufferv4_update_valhi11_tbl_table_get_default_entry_handle_result result;
  try {
    result.success = iface_->update_valhi11_tbl_table_get_default_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi11_tbl_table_get_default_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi11_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi11_tbl_table_get_default_entry_handle");
  }

  oprot->writeMessageBegin("update_valhi11_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi11_tbl_table_get_default_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_valhi11_tbl_table_get_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi11_tbl_table_get_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi11_tbl_table_get_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi11_tbl_table_get_default_entry");
  }

  netbufferv4_update_valhi11_tbl_table_get_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi11_tbl_table_get_default_entry", bytes);
  }

  netbufferv4_update_valhi11_tbl_table_get_default_entry_result result;
  try {
    iface_->update_valhi11_tbl_table_get_default_entry(result.success, args.sess_hdl, args.dev_tgt, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi11_tbl_table_get_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi11_tbl_table_get_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi11_tbl_table_get_default_entry");
  }

  oprot->writeMessageBegin("update_valhi11_tbl_table_get_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi11_tbl_table_get_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_valhi12_tbl_table_get_default_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi12_tbl_table_get_default_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi12_tbl_table_get_default_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi12_tbl_table_get_default_entry_handle");
  }

  netbufferv4_update_valhi12_tbl_table_get_default_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi12_tbl_table_get_default_entry_handle", bytes);
  }

  netbufferv4_update_valhi12_tbl_table_get_default_entry_handle_result result;
  try {
    result.success = iface_->update_valhi12_tbl_table_get_default_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi12_tbl_table_get_default_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi12_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi12_tbl_table_get_default_entry_handle");
  }

  oprot->writeMessageBegin("update_valhi12_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi12_tbl_table_get_default_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_valhi12_tbl_table_get_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi12_tbl_table_get_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi12_tbl_table_get_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi12_tbl_table_get_default_entry");
  }

  netbufferv4_update_valhi12_tbl_table_get_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi12_tbl_table_get_default_entry", bytes);
  }

  netbufferv4_update_valhi12_tbl_table_get_default_entry_result result;
  try {
    iface_->update_valhi12_tbl_table_get_default_entry(result.success, args.sess_hdl, args.dev_tgt, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi12_tbl_table_get_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi12_tbl_table_get_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi12_tbl_table_get_default_entry");
  }

  oprot->writeMessageBegin("update_valhi12_tbl_table_get_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi12_tbl_table_get_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_valhi13_tbl_table_get_default_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi13_tbl_table_get_default_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi13_tbl_table_get_default_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi13_tbl_table_get_default_entry_handle");
  }

  netbufferv4_update_valhi13_tbl_table_get_default_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi13_tbl_table_get_default_entry_handle", bytes);
  }

  netbufferv4_update_valhi13_tbl_table_get_default_entry_handle_result result;
  try {
    result.success = iface_->update_valhi13_tbl_table_get_default_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi13_tbl_table_get_default_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi13_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi13_tbl_table_get_default_entry_handle");
  }

  oprot->writeMessageBegin("update_valhi13_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi13_tbl_table_get_default_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_valhi13_tbl_table_get_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi13_tbl_table_get_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi13_tbl_table_get_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi13_tbl_table_get_default_entry");
  }

  netbufferv4_update_valhi13_tbl_table_get_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi13_tbl_table_get_default_entry", bytes);
  }

  netbufferv4_update_valhi13_tbl_table_get_default_entry_result result;
  try {
    iface_->update_valhi13_tbl_table_get_default_entry(result.success, args.sess_hdl, args.dev_tgt, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi13_tbl_table_get_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi13_tbl_table_get_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi13_tbl_table_get_default_entry");
  }

  oprot->writeMessageBegin("update_valhi13_tbl_table_get_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi13_tbl_table_get_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_valhi14_tbl_table_get_default_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi14_tbl_table_get_default_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi14_tbl_table_get_default_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi14_tbl_table_get_default_entry_handle");
  }

  netbufferv4_update_valhi14_tbl_table_get_default_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi14_tbl_table_get_default_entry_handle", bytes);
  }

  netbufferv4_update_valhi14_tbl_table_get_default_entry_handle_result result;
  try {
    result.success = iface_->update_valhi14_tbl_table_get_default_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi14_tbl_table_get_default_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi14_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi14_tbl_table_get_default_entry_handle");
  }

  oprot->writeMessageBegin("update_valhi14_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi14_tbl_table_get_default_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_valhi14_tbl_table_get_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi14_tbl_table_get_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi14_tbl_table_get_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi14_tbl_table_get_default_entry");
  }

  netbufferv4_update_valhi14_tbl_table_get_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi14_tbl_table_get_default_entry", bytes);
  }

  netbufferv4_update_valhi14_tbl_table_get_default_entry_result result;
  try {
    iface_->update_valhi14_tbl_table_get_default_entry(result.success, args.sess_hdl, args.dev_tgt, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi14_tbl_table_get_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi14_tbl_table_get_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi14_tbl_table_get_default_entry");
  }

  oprot->writeMessageBegin("update_valhi14_tbl_table_get_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi14_tbl_table_get_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_valhi15_tbl_table_get_default_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi15_tbl_table_get_default_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi15_tbl_table_get_default_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi15_tbl_table_get_default_entry_handle");
  }

  netbufferv4_update_valhi15_tbl_table_get_default_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi15_tbl_table_get_default_entry_handle", bytes);
  }

  netbufferv4_update_valhi15_tbl_table_get_default_entry_handle_result result;
  try {
    result.success = iface_->update_valhi15_tbl_table_get_default_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi15_tbl_table_get_default_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi15_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi15_tbl_table_get_default_entry_handle");
  }

  oprot->writeMessageBegin("update_valhi15_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi15_tbl_table_get_default_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_valhi15_tbl_table_get_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi15_tbl_table_get_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi15_tbl_table_get_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi15_tbl_table_get_default_entry");
  }

  netbufferv4_update_valhi15_tbl_table_get_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi15_tbl_table_get_default_entry", bytes);
  }

  netbufferv4_update_valhi15_tbl_table_get_default_entry_result result;
  try {
    iface_->update_valhi15_tbl_table_get_default_entry(result.success, args.sess_hdl, args.dev_tgt, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi15_tbl_table_get_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi15_tbl_table_get_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi15_tbl_table_get_default_entry");
  }

  oprot->writeMessageBegin("update_valhi15_tbl_table_get_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi15_tbl_table_get_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_valhi16_tbl_table_get_default_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi16_tbl_table_get_default_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi16_tbl_table_get_default_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi16_tbl_table_get_default_entry_handle");
  }

  netbufferv4_update_valhi16_tbl_table_get_default_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi16_tbl_table_get_default_entry_handle", bytes);
  }

  netbufferv4_update_valhi16_tbl_table_get_default_entry_handle_result result;
  try {
    result.success = iface_->update_valhi16_tbl_table_get_default_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi16_tbl_table_get_default_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi16_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi16_tbl_table_get_default_entry_handle");
  }

  oprot->writeMessageBegin("update_valhi16_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi16_tbl_table_get_default_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_valhi16_tbl_table_get_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi16_tbl_table_get_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi16_tbl_table_get_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi16_tbl_table_get_default_entry");
  }

  netbufferv4_update_valhi16_tbl_table_get_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi16_tbl_table_get_default_entry", bytes);
  }

  netbufferv4_update_valhi16_tbl_table_get_default_entry_result result;
  try {
    iface_->update_valhi16_tbl_table_get_default_entry(result.success, args.sess_hdl, args.dev_tgt, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi16_tbl_table_get_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi16_tbl_table_get_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi16_tbl_table_get_default_entry");
  }

  oprot->writeMessageBegin("update_valhi16_tbl_table_get_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi16_tbl_table_get_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_valhi1_tbl_table_get_default_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi1_tbl_table_get_default_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi1_tbl_table_get_default_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi1_tbl_table_get_default_entry_handle");
  }

  netbufferv4_update_valhi1_tbl_table_get_default_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi1_tbl_table_get_default_entry_handle", bytes);
  }

  netbufferv4_update_valhi1_tbl_table_get_default_entry_handle_result result;
  try {
    result.success = iface_->update_valhi1_tbl_table_get_default_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi1_tbl_table_get_default_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi1_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi1_tbl_table_get_default_entry_handle");
  }

  oprot->writeMessageBegin("update_valhi1_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi1_tbl_table_get_default_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_valhi1_tbl_table_get_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi1_tbl_table_get_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi1_tbl_table_get_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi1_tbl_table_get_default_entry");
  }

  netbufferv4_update_valhi1_tbl_table_get_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi1_tbl_table_get_default_entry", bytes);
  }

  netbufferv4_update_valhi1_tbl_table_get_default_entry_result result;
  try {
    iface_->update_valhi1_tbl_table_get_default_entry(result.success, args.sess_hdl, args.dev_tgt, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi1_tbl_table_get_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi1_tbl_table_get_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi1_tbl_table_get_default_entry");
  }

  oprot->writeMessageBegin("update_valhi1_tbl_table_get_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi1_tbl_table_get_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_valhi2_tbl_table_get_default_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi2_tbl_table_get_default_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi2_tbl_table_get_default_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi2_tbl_table_get_default_entry_handle");
  }

  netbufferv4_update_valhi2_tbl_table_get_default_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi2_tbl_table_get_default_entry_handle", bytes);
  }

  netbufferv4_update_valhi2_tbl_table_get_default_entry_handle_result result;
  try {
    result.success = iface_->update_valhi2_tbl_table_get_default_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi2_tbl_table_get_default_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi2_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi2_tbl_table_get_default_entry_handle");
  }

  oprot->writeMessageBegin("update_valhi2_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi2_tbl_table_get_default_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_valhi2_tbl_table_get_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi2_tbl_table_get_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi2_tbl_table_get_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi2_tbl_table_get_default_entry");
  }

  netbufferv4_update_valhi2_tbl_table_get_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi2_tbl_table_get_default_entry", bytes);
  }

  netbufferv4_update_valhi2_tbl_table_get_default_entry_result result;
  try {
    iface_->update_valhi2_tbl_table_get_default_entry(result.success, args.sess_hdl, args.dev_tgt, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi2_tbl_table_get_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi2_tbl_table_get_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi2_tbl_table_get_default_entry");
  }

  oprot->writeMessageBegin("update_valhi2_tbl_table_get_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi2_tbl_table_get_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_valhi3_tbl_table_get_default_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi3_tbl_table_get_default_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi3_tbl_table_get_default_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi3_tbl_table_get_default_entry_handle");
  }

  netbufferv4_update_valhi3_tbl_table_get_default_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi3_tbl_table_get_default_entry_handle", bytes);
  }

  netbufferv4_update_valhi3_tbl_table_get_default_entry_handle_result result;
  try {
    result.success = iface_->update_valhi3_tbl_table_get_default_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi3_tbl_table_get_default_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi3_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi3_tbl_table_get_default_entry_handle");
  }

  oprot->writeMessageBegin("update_valhi3_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi3_tbl_table_get_default_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_valhi3_tbl_table_get_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi3_tbl_table_get_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi3_tbl_table_get_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi3_tbl_table_get_default_entry");
  }

  netbufferv4_update_valhi3_tbl_table_get_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi3_tbl_table_get_default_entry", bytes);
  }

  netbufferv4_update_valhi3_tbl_table_get_default_entry_result result;
  try {
    iface_->update_valhi3_tbl_table_get_default_entry(result.success, args.sess_hdl, args.dev_tgt, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi3_tbl_table_get_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi3_tbl_table_get_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi3_tbl_table_get_default_entry");
  }

  oprot->writeMessageBegin("update_valhi3_tbl_table_get_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi3_tbl_table_get_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_valhi4_tbl_table_get_default_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi4_tbl_table_get_default_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi4_tbl_table_get_default_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi4_tbl_table_get_default_entry_handle");
  }

  netbufferv4_update_valhi4_tbl_table_get_default_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi4_tbl_table_get_default_entry_handle", bytes);
  }

  netbufferv4_update_valhi4_tbl_table_get_default_entry_handle_result result;
  try {
    result.success = iface_->update_valhi4_tbl_table_get_default_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi4_tbl_table_get_default_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi4_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi4_tbl_table_get_default_entry_handle");
  }

  oprot->writeMessageBegin("update_valhi4_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi4_tbl_table_get_default_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_valhi4_tbl_table_get_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi4_tbl_table_get_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi4_tbl_table_get_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi4_tbl_table_get_default_entry");
  }

  netbufferv4_update_valhi4_tbl_table_get_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi4_tbl_table_get_default_entry", bytes);
  }

  netbufferv4_update_valhi4_tbl_table_get_default_entry_result result;
  try {
    iface_->update_valhi4_tbl_table_get_default_entry(result.success, args.sess_hdl, args.dev_tgt, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi4_tbl_table_get_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi4_tbl_table_get_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi4_tbl_table_get_default_entry");
  }

  oprot->writeMessageBegin("update_valhi4_tbl_table_get_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi4_tbl_table_get_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_valhi5_tbl_table_get_default_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi5_tbl_table_get_default_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi5_tbl_table_get_default_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi5_tbl_table_get_default_entry_handle");
  }

  netbufferv4_update_valhi5_tbl_table_get_default_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi5_tbl_table_get_default_entry_handle", bytes);
  }

  netbufferv4_update_valhi5_tbl_table_get_default_entry_handle_result result;
  try {
    result.success = iface_->update_valhi5_tbl_table_get_default_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi5_tbl_table_get_default_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi5_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi5_tbl_table_get_default_entry_handle");
  }

  oprot->writeMessageBegin("update_valhi5_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi5_tbl_table_get_default_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_valhi5_tbl_table_get_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi5_tbl_table_get_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi5_tbl_table_get_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi5_tbl_table_get_default_entry");
  }

  netbufferv4_update_valhi5_tbl_table_get_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi5_tbl_table_get_default_entry", bytes);
  }

  netbufferv4_update_valhi5_tbl_table_get_default_entry_result result;
  try {
    iface_->update_valhi5_tbl_table_get_default_entry(result.success, args.sess_hdl, args.dev_tgt, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi5_tbl_table_get_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi5_tbl_table_get_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi5_tbl_table_get_default_entry");
  }

  oprot->writeMessageBegin("update_valhi5_tbl_table_get_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi5_tbl_table_get_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_valhi6_tbl_table_get_default_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi6_tbl_table_get_default_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi6_tbl_table_get_default_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi6_tbl_table_get_default_entry_handle");
  }

  netbufferv4_update_valhi6_tbl_table_get_default_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi6_tbl_table_get_default_entry_handle", bytes);
  }

  netbufferv4_update_valhi6_tbl_table_get_default_entry_handle_result result;
  try {
    result.success = iface_->update_valhi6_tbl_table_get_default_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi6_tbl_table_get_default_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi6_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi6_tbl_table_get_default_entry_handle");
  }

  oprot->writeMessageBegin("update_valhi6_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi6_tbl_table_get_default_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_valhi6_tbl_table_get_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi6_tbl_table_get_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi6_tbl_table_get_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi6_tbl_table_get_default_entry");
  }

  netbufferv4_update_valhi6_tbl_table_get_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi6_tbl_table_get_default_entry", bytes);
  }

  netbufferv4_update_valhi6_tbl_table_get_default_entry_result result;
  try {
    iface_->update_valhi6_tbl_table_get_default_entry(result.success, args.sess_hdl, args.dev_tgt, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi6_tbl_table_get_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi6_tbl_table_get_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi6_tbl_table_get_default_entry");
  }

  oprot->writeMessageBegin("update_valhi6_tbl_table_get_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi6_tbl_table_get_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_valhi7_tbl_table_get_default_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi7_tbl_table_get_default_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi7_tbl_table_get_default_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi7_tbl_table_get_default_entry_handle");
  }

  netbufferv4_update_valhi7_tbl_table_get_default_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi7_tbl_table_get_default_entry_handle", bytes);
  }

  netbufferv4_update_valhi7_tbl_table_get_default_entry_handle_result result;
  try {
    result.success = iface_->update_valhi7_tbl_table_get_default_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi7_tbl_table_get_default_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi7_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi7_tbl_table_get_default_entry_handle");
  }

  oprot->writeMessageBegin("update_valhi7_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi7_tbl_table_get_default_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_valhi7_tbl_table_get_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi7_tbl_table_get_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi7_tbl_table_get_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi7_tbl_table_get_default_entry");
  }

  netbufferv4_update_valhi7_tbl_table_get_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi7_tbl_table_get_default_entry", bytes);
  }

  netbufferv4_update_valhi7_tbl_table_get_default_entry_result result;
  try {
    iface_->update_valhi7_tbl_table_get_default_entry(result.success, args.sess_hdl, args.dev_tgt, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi7_tbl_table_get_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi7_tbl_table_get_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi7_tbl_table_get_default_entry");
  }

  oprot->writeMessageBegin("update_valhi7_tbl_table_get_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi7_tbl_table_get_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_valhi8_tbl_table_get_default_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi8_tbl_table_get_default_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi8_tbl_table_get_default_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi8_tbl_table_get_default_entry_handle");
  }

  netbufferv4_update_valhi8_tbl_table_get_default_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi8_tbl_table_get_default_entry_handle", bytes);
  }

  netbufferv4_update_valhi8_tbl_table_get_default_entry_handle_result result;
  try {
    result.success = iface_->update_valhi8_tbl_table_get_default_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi8_tbl_table_get_default_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi8_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi8_tbl_table_get_default_entry_handle");
  }

  oprot->writeMessageBegin("update_valhi8_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi8_tbl_table_get_default_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_valhi8_tbl_table_get_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi8_tbl_table_get_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi8_tbl_table_get_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi8_tbl_table_get_default_entry");
  }

  netbufferv4_update_valhi8_tbl_table_get_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi8_tbl_table_get_default_entry", bytes);
  }

  netbufferv4_update_valhi8_tbl_table_get_default_entry_result result;
  try {
    iface_->update_valhi8_tbl_table_get_default_entry(result.success, args.sess_hdl, args.dev_tgt, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi8_tbl_table_get_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi8_tbl_table_get_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi8_tbl_table_get_default_entry");
  }

  oprot->writeMessageBegin("update_valhi8_tbl_table_get_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi8_tbl_table_get_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_valhi9_tbl_table_get_default_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi9_tbl_table_get_default_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi9_tbl_table_get_default_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi9_tbl_table_get_default_entry_handle");
  }

  netbufferv4_update_valhi9_tbl_table_get_default_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi9_tbl_table_get_default_entry_handle", bytes);
  }

  netbufferv4_update_valhi9_tbl_table_get_default_entry_handle_result result;
  try {
    result.success = iface_->update_valhi9_tbl_table_get_default_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi9_tbl_table_get_default_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi9_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi9_tbl_table_get_default_entry_handle");
  }

  oprot->writeMessageBegin("update_valhi9_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi9_tbl_table_get_default_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_valhi9_tbl_table_get_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi9_tbl_table_get_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi9_tbl_table_get_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi9_tbl_table_get_default_entry");
  }

  netbufferv4_update_valhi9_tbl_table_get_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi9_tbl_table_get_default_entry", bytes);
  }

  netbufferv4_update_valhi9_tbl_table_get_default_entry_result result;
  try {
    iface_->update_valhi9_tbl_table_get_default_entry(result.success, args.sess_hdl, args.dev_tgt, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi9_tbl_table_get_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi9_tbl_table_get_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi9_tbl_table_get_default_entry");
  }

  oprot->writeMessageBegin("update_valhi9_tbl_table_get_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi9_tbl_table_get_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_vallen_tbl_table_get_default_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallen_tbl_table_get_default_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallen_tbl_table_get_default_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallen_tbl_table_get_default_entry_handle");
  }

  netbufferv4_update_vallen_tbl_table_get_default_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallen_tbl_table_get_default_entry_handle", bytes);
  }

  netbufferv4_update_vallen_tbl_table_get_default_entry_handle_result result;
  try {
    result.success = iface_->update_vallen_tbl_table_get_default_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallen_tbl_table_get_default_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallen_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallen_tbl_table_get_default_entry_handle");
  }

  oprot->writeMessageBegin("update_vallen_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallen_tbl_table_get_default_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_vallen_tbl_table_get_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallen_tbl_table_get_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallen_tbl_table_get_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallen_tbl_table_get_default_entry");
  }

  netbufferv4_update_vallen_tbl_table_get_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallen_tbl_table_get_default_entry", bytes);
  }

  netbufferv4_update_vallen_tbl_table_get_default_entry_result result;
  try {
    iface_->update_vallen_tbl_table_get_default_entry(result.success, args.sess_hdl, args.dev_tgt, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallen_tbl_table_get_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallen_tbl_table_get_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallen_tbl_table_get_default_entry");
  }

  oprot->writeMessageBegin("update_vallen_tbl_table_get_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallen_tbl_table_get_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_vallo10_tbl_table_get_default_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo10_tbl_table_get_default_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo10_tbl_table_get_default_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo10_tbl_table_get_default_entry_handle");
  }

  netbufferv4_update_vallo10_tbl_table_get_default_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo10_tbl_table_get_default_entry_handle", bytes);
  }

  netbufferv4_update_vallo10_tbl_table_get_default_entry_handle_result result;
  try {
    result.success = iface_->update_vallo10_tbl_table_get_default_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo10_tbl_table_get_default_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo10_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo10_tbl_table_get_default_entry_handle");
  }

  oprot->writeMessageBegin("update_vallo10_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo10_tbl_table_get_default_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_vallo10_tbl_table_get_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo10_tbl_table_get_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo10_tbl_table_get_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo10_tbl_table_get_default_entry");
  }

  netbufferv4_update_vallo10_tbl_table_get_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo10_tbl_table_get_default_entry", bytes);
  }

  netbufferv4_update_vallo10_tbl_table_get_default_entry_result result;
  try {
    iface_->update_vallo10_tbl_table_get_default_entry(result.success, args.sess_hdl, args.dev_tgt, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo10_tbl_table_get_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo10_tbl_table_get_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo10_tbl_table_get_default_entry");
  }

  oprot->writeMessageBegin("update_vallo10_tbl_table_get_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo10_tbl_table_get_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_vallo11_tbl_table_get_default_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo11_tbl_table_get_default_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo11_tbl_table_get_default_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo11_tbl_table_get_default_entry_handle");
  }

  netbufferv4_update_vallo11_tbl_table_get_default_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo11_tbl_table_get_default_entry_handle", bytes);
  }

  netbufferv4_update_vallo11_tbl_table_get_default_entry_handle_result result;
  try {
    result.success = iface_->update_vallo11_tbl_table_get_default_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo11_tbl_table_get_default_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo11_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo11_tbl_table_get_default_entry_handle");
  }

  oprot->writeMessageBegin("update_vallo11_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo11_tbl_table_get_default_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_vallo11_tbl_table_get_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo11_tbl_table_get_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo11_tbl_table_get_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo11_tbl_table_get_default_entry");
  }

  netbufferv4_update_vallo11_tbl_table_get_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo11_tbl_table_get_default_entry", bytes);
  }

  netbufferv4_update_vallo11_tbl_table_get_default_entry_result result;
  try {
    iface_->update_vallo11_tbl_table_get_default_entry(result.success, args.sess_hdl, args.dev_tgt, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo11_tbl_table_get_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo11_tbl_table_get_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo11_tbl_table_get_default_entry");
  }

  oprot->writeMessageBegin("update_vallo11_tbl_table_get_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo11_tbl_table_get_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_vallo12_tbl_table_get_default_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo12_tbl_table_get_default_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo12_tbl_table_get_default_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo12_tbl_table_get_default_entry_handle");
  }

  netbufferv4_update_vallo12_tbl_table_get_default_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo12_tbl_table_get_default_entry_handle", bytes);
  }

  netbufferv4_update_vallo12_tbl_table_get_default_entry_handle_result result;
  try {
    result.success = iface_->update_vallo12_tbl_table_get_default_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo12_tbl_table_get_default_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo12_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo12_tbl_table_get_default_entry_handle");
  }

  oprot->writeMessageBegin("update_vallo12_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo12_tbl_table_get_default_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_vallo12_tbl_table_get_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo12_tbl_table_get_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo12_tbl_table_get_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo12_tbl_table_get_default_entry");
  }

  netbufferv4_update_vallo12_tbl_table_get_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo12_tbl_table_get_default_entry", bytes);
  }

  netbufferv4_update_vallo12_tbl_table_get_default_entry_result result;
  try {
    iface_->update_vallo12_tbl_table_get_default_entry(result.success, args.sess_hdl, args.dev_tgt, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo12_tbl_table_get_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo12_tbl_table_get_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo12_tbl_table_get_default_entry");
  }

  oprot->writeMessageBegin("update_vallo12_tbl_table_get_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo12_tbl_table_get_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_vallo13_tbl_table_get_default_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo13_tbl_table_get_default_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo13_tbl_table_get_default_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo13_tbl_table_get_default_entry_handle");
  }

  netbufferv4_update_vallo13_tbl_table_get_default_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo13_tbl_table_get_default_entry_handle", bytes);
  }

  netbufferv4_update_vallo13_tbl_table_get_default_entry_handle_result result;
  try {
    result.success = iface_->update_vallo13_tbl_table_get_default_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo13_tbl_table_get_default_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo13_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo13_tbl_table_get_default_entry_handle");
  }

  oprot->writeMessageBegin("update_vallo13_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo13_tbl_table_get_default_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_vallo13_tbl_table_get_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo13_tbl_table_get_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo13_tbl_table_get_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo13_tbl_table_get_default_entry");
  }

  netbufferv4_update_vallo13_tbl_table_get_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo13_tbl_table_get_default_entry", bytes);
  }

  netbufferv4_update_vallo13_tbl_table_get_default_entry_result result;
  try {
    iface_->update_vallo13_tbl_table_get_default_entry(result.success, args.sess_hdl, args.dev_tgt, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo13_tbl_table_get_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo13_tbl_table_get_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo13_tbl_table_get_default_entry");
  }

  oprot->writeMessageBegin("update_vallo13_tbl_table_get_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo13_tbl_table_get_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_vallo14_tbl_table_get_default_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo14_tbl_table_get_default_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo14_tbl_table_get_default_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo14_tbl_table_get_default_entry_handle");
  }

  netbufferv4_update_vallo14_tbl_table_get_default_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo14_tbl_table_get_default_entry_handle", bytes);
  }

  netbufferv4_update_vallo14_tbl_table_get_default_entry_handle_result result;
  try {
    result.success = iface_->update_vallo14_tbl_table_get_default_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo14_tbl_table_get_default_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo14_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo14_tbl_table_get_default_entry_handle");
  }

  oprot->writeMessageBegin("update_vallo14_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo14_tbl_table_get_default_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_vallo14_tbl_table_get_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo14_tbl_table_get_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo14_tbl_table_get_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo14_tbl_table_get_default_entry");
  }

  netbufferv4_update_vallo14_tbl_table_get_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo14_tbl_table_get_default_entry", bytes);
  }

  netbufferv4_update_vallo14_tbl_table_get_default_entry_result result;
  try {
    iface_->update_vallo14_tbl_table_get_default_entry(result.success, args.sess_hdl, args.dev_tgt, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo14_tbl_table_get_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo14_tbl_table_get_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo14_tbl_table_get_default_entry");
  }

  oprot->writeMessageBegin("update_vallo14_tbl_table_get_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo14_tbl_table_get_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_vallo15_tbl_table_get_default_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo15_tbl_table_get_default_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo15_tbl_table_get_default_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo15_tbl_table_get_default_entry_handle");
  }

  netbufferv4_update_vallo15_tbl_table_get_default_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo15_tbl_table_get_default_entry_handle", bytes);
  }

  netbufferv4_update_vallo15_tbl_table_get_default_entry_handle_result result;
  try {
    result.success = iface_->update_vallo15_tbl_table_get_default_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo15_tbl_table_get_default_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo15_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo15_tbl_table_get_default_entry_handle");
  }

  oprot->writeMessageBegin("update_vallo15_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo15_tbl_table_get_default_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_vallo15_tbl_table_get_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo15_tbl_table_get_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo15_tbl_table_get_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo15_tbl_table_get_default_entry");
  }

  netbufferv4_update_vallo15_tbl_table_get_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo15_tbl_table_get_default_entry", bytes);
  }

  netbufferv4_update_vallo15_tbl_table_get_default_entry_result result;
  try {
    iface_->update_vallo15_tbl_table_get_default_entry(result.success, args.sess_hdl, args.dev_tgt, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo15_tbl_table_get_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo15_tbl_table_get_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo15_tbl_table_get_default_entry");
  }

  oprot->writeMessageBegin("update_vallo15_tbl_table_get_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo15_tbl_table_get_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_vallo16_tbl_table_get_default_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo16_tbl_table_get_default_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo16_tbl_table_get_default_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo16_tbl_table_get_default_entry_handle");
  }

  netbufferv4_update_vallo16_tbl_table_get_default_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo16_tbl_table_get_default_entry_handle", bytes);
  }

  netbufferv4_update_vallo16_tbl_table_get_default_entry_handle_result result;
  try {
    result.success = iface_->update_vallo16_tbl_table_get_default_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo16_tbl_table_get_default_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo16_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo16_tbl_table_get_default_entry_handle");
  }

  oprot->writeMessageBegin("update_vallo16_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo16_tbl_table_get_default_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_vallo16_tbl_table_get_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo16_tbl_table_get_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo16_tbl_table_get_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo16_tbl_table_get_default_entry");
  }

  netbufferv4_update_vallo16_tbl_table_get_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo16_tbl_table_get_default_entry", bytes);
  }

  netbufferv4_update_vallo16_tbl_table_get_default_entry_result result;
  try {
    iface_->update_vallo16_tbl_table_get_default_entry(result.success, args.sess_hdl, args.dev_tgt, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo16_tbl_table_get_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo16_tbl_table_get_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo16_tbl_table_get_default_entry");
  }

  oprot->writeMessageBegin("update_vallo16_tbl_table_get_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo16_tbl_table_get_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_vallo1_tbl_table_get_default_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo1_tbl_table_get_default_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo1_tbl_table_get_default_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo1_tbl_table_get_default_entry_handle");
  }

  netbufferv4_update_vallo1_tbl_table_get_default_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo1_tbl_table_get_default_entry_handle", bytes);
  }

  netbufferv4_update_vallo1_tbl_table_get_default_entry_handle_result result;
  try {
    result.success = iface_->update_vallo1_tbl_table_get_default_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo1_tbl_table_get_default_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo1_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo1_tbl_table_get_default_entry_handle");
  }

  oprot->writeMessageBegin("update_vallo1_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo1_tbl_table_get_default_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_vallo1_tbl_table_get_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo1_tbl_table_get_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo1_tbl_table_get_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo1_tbl_table_get_default_entry");
  }

  netbufferv4_update_vallo1_tbl_table_get_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo1_tbl_table_get_default_entry", bytes);
  }

  netbufferv4_update_vallo1_tbl_table_get_default_entry_result result;
  try {
    iface_->update_vallo1_tbl_table_get_default_entry(result.success, args.sess_hdl, args.dev_tgt, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo1_tbl_table_get_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo1_tbl_table_get_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo1_tbl_table_get_default_entry");
  }

  oprot->writeMessageBegin("update_vallo1_tbl_table_get_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo1_tbl_table_get_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_vallo2_tbl_table_get_default_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo2_tbl_table_get_default_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo2_tbl_table_get_default_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo2_tbl_table_get_default_entry_handle");
  }

  netbufferv4_update_vallo2_tbl_table_get_default_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo2_tbl_table_get_default_entry_handle", bytes);
  }

  netbufferv4_update_vallo2_tbl_table_get_default_entry_handle_result result;
  try {
    result.success = iface_->update_vallo2_tbl_table_get_default_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo2_tbl_table_get_default_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo2_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo2_tbl_table_get_default_entry_handle");
  }

  oprot->writeMessageBegin("update_vallo2_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo2_tbl_table_get_default_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_vallo2_tbl_table_get_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo2_tbl_table_get_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo2_tbl_table_get_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo2_tbl_table_get_default_entry");
  }

  netbufferv4_update_vallo2_tbl_table_get_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo2_tbl_table_get_default_entry", bytes);
  }

  netbufferv4_update_vallo2_tbl_table_get_default_entry_result result;
  try {
    iface_->update_vallo2_tbl_table_get_default_entry(result.success, args.sess_hdl, args.dev_tgt, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo2_tbl_table_get_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo2_tbl_table_get_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo2_tbl_table_get_default_entry");
  }

  oprot->writeMessageBegin("update_vallo2_tbl_table_get_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo2_tbl_table_get_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_vallo3_tbl_table_get_default_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo3_tbl_table_get_default_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo3_tbl_table_get_default_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo3_tbl_table_get_default_entry_handle");
  }

  netbufferv4_update_vallo3_tbl_table_get_default_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo3_tbl_table_get_default_entry_handle", bytes);
  }

  netbufferv4_update_vallo3_tbl_table_get_default_entry_handle_result result;
  try {
    result.success = iface_->update_vallo3_tbl_table_get_default_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo3_tbl_table_get_default_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo3_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo3_tbl_table_get_default_entry_handle");
  }

  oprot->writeMessageBegin("update_vallo3_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo3_tbl_table_get_default_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_vallo3_tbl_table_get_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo3_tbl_table_get_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo3_tbl_table_get_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo3_tbl_table_get_default_entry");
  }

  netbufferv4_update_vallo3_tbl_table_get_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo3_tbl_table_get_default_entry", bytes);
  }

  netbufferv4_update_vallo3_tbl_table_get_default_entry_result result;
  try {
    iface_->update_vallo3_tbl_table_get_default_entry(result.success, args.sess_hdl, args.dev_tgt, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo3_tbl_table_get_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo3_tbl_table_get_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo3_tbl_table_get_default_entry");
  }

  oprot->writeMessageBegin("update_vallo3_tbl_table_get_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo3_tbl_table_get_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_vallo4_tbl_table_get_default_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo4_tbl_table_get_default_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo4_tbl_table_get_default_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo4_tbl_table_get_default_entry_handle");
  }

  netbufferv4_update_vallo4_tbl_table_get_default_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo4_tbl_table_get_default_entry_handle", bytes);
  }

  netbufferv4_update_vallo4_tbl_table_get_default_entry_handle_result result;
  try {
    result.success = iface_->update_vallo4_tbl_table_get_default_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo4_tbl_table_get_default_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo4_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo4_tbl_table_get_default_entry_handle");
  }

  oprot->writeMessageBegin("update_vallo4_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo4_tbl_table_get_default_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_vallo4_tbl_table_get_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo4_tbl_table_get_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo4_tbl_table_get_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo4_tbl_table_get_default_entry");
  }

  netbufferv4_update_vallo4_tbl_table_get_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo4_tbl_table_get_default_entry", bytes);
  }

  netbufferv4_update_vallo4_tbl_table_get_default_entry_result result;
  try {
    iface_->update_vallo4_tbl_table_get_default_entry(result.success, args.sess_hdl, args.dev_tgt, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo4_tbl_table_get_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo4_tbl_table_get_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo4_tbl_table_get_default_entry");
  }

  oprot->writeMessageBegin("update_vallo4_tbl_table_get_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo4_tbl_table_get_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_vallo5_tbl_table_get_default_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo5_tbl_table_get_default_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo5_tbl_table_get_default_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo5_tbl_table_get_default_entry_handle");
  }

  netbufferv4_update_vallo5_tbl_table_get_default_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo5_tbl_table_get_default_entry_handle", bytes);
  }

  netbufferv4_update_vallo5_tbl_table_get_default_entry_handle_result result;
  try {
    result.success = iface_->update_vallo5_tbl_table_get_default_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo5_tbl_table_get_default_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo5_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo5_tbl_table_get_default_entry_handle");
  }

  oprot->writeMessageBegin("update_vallo5_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo5_tbl_table_get_default_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_vallo5_tbl_table_get_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo5_tbl_table_get_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo5_tbl_table_get_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo5_tbl_table_get_default_entry");
  }

  netbufferv4_update_vallo5_tbl_table_get_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo5_tbl_table_get_default_entry", bytes);
  }

  netbufferv4_update_vallo5_tbl_table_get_default_entry_result result;
  try {
    iface_->update_vallo5_tbl_table_get_default_entry(result.success, args.sess_hdl, args.dev_tgt, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo5_tbl_table_get_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo5_tbl_table_get_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo5_tbl_table_get_default_entry");
  }

  oprot->writeMessageBegin("update_vallo5_tbl_table_get_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo5_tbl_table_get_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_vallo6_tbl_table_get_default_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo6_tbl_table_get_default_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo6_tbl_table_get_default_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo6_tbl_table_get_default_entry_handle");
  }

  netbufferv4_update_vallo6_tbl_table_get_default_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo6_tbl_table_get_default_entry_handle", bytes);
  }

  netbufferv4_update_vallo6_tbl_table_get_default_entry_handle_result result;
  try {
    result.success = iface_->update_vallo6_tbl_table_get_default_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo6_tbl_table_get_default_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo6_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo6_tbl_table_get_default_entry_handle");
  }

  oprot->writeMessageBegin("update_vallo6_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo6_tbl_table_get_default_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_vallo6_tbl_table_get_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo6_tbl_table_get_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo6_tbl_table_get_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo6_tbl_table_get_default_entry");
  }

  netbufferv4_update_vallo6_tbl_table_get_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo6_tbl_table_get_default_entry", bytes);
  }

  netbufferv4_update_vallo6_tbl_table_get_default_entry_result result;
  try {
    iface_->update_vallo6_tbl_table_get_default_entry(result.success, args.sess_hdl, args.dev_tgt, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo6_tbl_table_get_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo6_tbl_table_get_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo6_tbl_table_get_default_entry");
  }

  oprot->writeMessageBegin("update_vallo6_tbl_table_get_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo6_tbl_table_get_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_vallo7_tbl_table_get_default_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo7_tbl_table_get_default_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo7_tbl_table_get_default_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo7_tbl_table_get_default_entry_handle");
  }

  netbufferv4_update_vallo7_tbl_table_get_default_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo7_tbl_table_get_default_entry_handle", bytes);
  }

  netbufferv4_update_vallo7_tbl_table_get_default_entry_handle_result result;
  try {
    result.success = iface_->update_vallo7_tbl_table_get_default_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo7_tbl_table_get_default_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo7_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo7_tbl_table_get_default_entry_handle");
  }

  oprot->writeMessageBegin("update_vallo7_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo7_tbl_table_get_default_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_vallo7_tbl_table_get_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo7_tbl_table_get_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo7_tbl_table_get_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo7_tbl_table_get_default_entry");
  }

  netbufferv4_update_vallo7_tbl_table_get_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo7_tbl_table_get_default_entry", bytes);
  }

  netbufferv4_update_vallo7_tbl_table_get_default_entry_result result;
  try {
    iface_->update_vallo7_tbl_table_get_default_entry(result.success, args.sess_hdl, args.dev_tgt, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo7_tbl_table_get_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo7_tbl_table_get_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo7_tbl_table_get_default_entry");
  }

  oprot->writeMessageBegin("update_vallo7_tbl_table_get_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo7_tbl_table_get_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_vallo8_tbl_table_get_default_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo8_tbl_table_get_default_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo8_tbl_table_get_default_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo8_tbl_table_get_default_entry_handle");
  }

  netbufferv4_update_vallo8_tbl_table_get_default_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo8_tbl_table_get_default_entry_handle", bytes);
  }

  netbufferv4_update_vallo8_tbl_table_get_default_entry_handle_result result;
  try {
    result.success = iface_->update_vallo8_tbl_table_get_default_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo8_tbl_table_get_default_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo8_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo8_tbl_table_get_default_entry_handle");
  }

  oprot->writeMessageBegin("update_vallo8_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo8_tbl_table_get_default_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_vallo8_tbl_table_get_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo8_tbl_table_get_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo8_tbl_table_get_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo8_tbl_table_get_default_entry");
  }

  netbufferv4_update_vallo8_tbl_table_get_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo8_tbl_table_get_default_entry", bytes);
  }

  netbufferv4_update_vallo8_tbl_table_get_default_entry_result result;
  try {
    iface_->update_vallo8_tbl_table_get_default_entry(result.success, args.sess_hdl, args.dev_tgt, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo8_tbl_table_get_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo8_tbl_table_get_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo8_tbl_table_get_default_entry");
  }

  oprot->writeMessageBegin("update_vallo8_tbl_table_get_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo8_tbl_table_get_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_vallo9_tbl_table_get_default_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo9_tbl_table_get_default_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo9_tbl_table_get_default_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo9_tbl_table_get_default_entry_handle");
  }

  netbufferv4_update_vallo9_tbl_table_get_default_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo9_tbl_table_get_default_entry_handle", bytes);
  }

  netbufferv4_update_vallo9_tbl_table_get_default_entry_handle_result result;
  try {
    result.success = iface_->update_vallo9_tbl_table_get_default_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo9_tbl_table_get_default_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo9_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo9_tbl_table_get_default_entry_handle");
  }

  oprot->writeMessageBegin("update_vallo9_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo9_tbl_table_get_default_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_vallo9_tbl_table_get_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo9_tbl_table_get_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo9_tbl_table_get_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo9_tbl_table_get_default_entry");
  }

  netbufferv4_update_vallo9_tbl_table_get_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo9_tbl_table_get_default_entry", bytes);
  }

  netbufferv4_update_vallo9_tbl_table_get_default_entry_result result;
  try {
    iface_->update_vallo9_tbl_table_get_default_entry(result.success, args.sess_hdl, args.dev_tgt, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo9_tbl_table_get_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo9_tbl_table_get_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo9_tbl_table_get_default_entry");
  }

  oprot->writeMessageBegin("update_vallo9_tbl_table_get_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo9_tbl_table_get_default_entry", bytes);
  }
}

void netbufferv4Processor::process_access_cache_frequency_tbl_table_reset_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cache_frequency_tbl_table_reset_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cache_frequency_tbl_table_reset_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cache_frequency_tbl_table_reset_default_entry");
  }

  netbufferv4_access_cache_frequency_tbl_table_reset_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cache_frequency_tbl_table_reset_default_entry", bytes);
  }

  netbufferv4_access_cache_frequency_tbl_table_reset_default_entry_result result;
  try {
    iface_->access_cache_frequency_tbl_table_reset_default_entry(args.sess_hdl, args.dev_tgt);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cache_frequency_tbl_table_reset_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cache_frequency_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cache_frequency_tbl_table_reset_default_entry");
  }

  oprot->writeMessageBegin("access_cache_frequency_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cache_frequency_tbl_table_reset_default_entry", bytes);
  }
}

void netbufferv4Processor::process_access_case1_tbl_table_reset_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_case1_tbl_table_reset_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_case1_tbl_table_reset_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_case1_tbl_table_reset_default_entry");
  }

  netbufferv4_access_case1_tbl_table_reset_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_case1_tbl_table_reset_default_entry", bytes);
  }

  netbufferv4_access_case1_tbl_table_reset_default_entry_result result;
  try {
    iface_->access_case1_tbl_table_reset_default_entry(args.sess_hdl, args.dev_tgt);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_case1_tbl_table_reset_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_case1_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_case1_tbl_table_reset_default_entry");
  }

  oprot->writeMessageBegin("access_case1_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_case1_tbl_table_reset_default_entry", bytes);
  }
}

void netbufferv4Processor::process_access_cm1_tbl_table_reset_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm1_tbl_table_reset_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm1_tbl_table_reset_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm1_tbl_table_reset_default_entry");
  }

  netbufferv4_access_cm1_tbl_table_reset_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm1_tbl_table_reset_default_entry", bytes);
  }

  netbufferv4_access_cm1_tbl_table_reset_default_entry_result result;
  try {
    iface_->access_cm1_tbl_table_reset_default_entry(args.sess_hdl, args.dev_tgt);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm1_tbl_table_reset_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm1_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm1_tbl_table_reset_default_entry");
  }

  oprot->writeMessageBegin("access_cm1_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm1_tbl_table_reset_default_entry", bytes);
  }
}

void netbufferv4Processor::process_access_cm2_tbl_table_reset_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm2_tbl_table_reset_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm2_tbl_table_reset_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm2_tbl_table_reset_default_entry");
  }

  netbufferv4_access_cm2_tbl_table_reset_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm2_tbl_table_reset_default_entry", bytes);
  }

  netbufferv4_access_cm2_tbl_table_reset_default_entry_result result;
  try {
    iface_->access_cm2_tbl_table_reset_default_entry(args.sess_hdl, args.dev_tgt);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm2_tbl_table_reset_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm2_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm2_tbl_table_reset_default_entry");
  }

  oprot->writeMessageBegin("access_cm2_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm2_tbl_table_reset_default_entry", bytes);
  }
}

void netbufferv4Processor::process_access_cm3_tbl_table_reset_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm3_tbl_table_reset_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm3_tbl_table_reset_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm3_tbl_table_reset_default_entry");
  }

  netbufferv4_access_cm3_tbl_table_reset_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm3_tbl_table_reset_default_entry", bytes);
  }

  netbufferv4_access_cm3_tbl_table_reset_default_entry_result result;
  try {
    iface_->access_cm3_tbl_table_reset_default_entry(args.sess_hdl, args.dev_tgt);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm3_tbl_table_reset_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm3_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm3_tbl_table_reset_default_entry");
  }

  oprot->writeMessageBegin("access_cm3_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm3_tbl_table_reset_default_entry", bytes);
  }
}

void netbufferv4Processor::process_access_cm4_tbl_table_reset_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm4_tbl_table_reset_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm4_tbl_table_reset_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm4_tbl_table_reset_default_entry");
  }

  netbufferv4_access_cm4_tbl_table_reset_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm4_tbl_table_reset_default_entry", bytes);
  }

  netbufferv4_access_cm4_tbl_table_reset_default_entry_result result;
  try {
    iface_->access_cm4_tbl_table_reset_default_entry(args.sess_hdl, args.dev_tgt);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm4_tbl_table_reset_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm4_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm4_tbl_table_reset_default_entry");
  }

  oprot->writeMessageBegin("access_cm4_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm4_tbl_table_reset_default_entry", bytes);
  }
}

void netbufferv4Processor::process_access_deleted_tbl_table_reset_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_deleted_tbl_table_reset_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_deleted_tbl_table_reset_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_deleted_tbl_table_reset_default_entry");
  }

  netbufferv4_access_deleted_tbl_table_reset_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_deleted_tbl_table_reset_default_entry", bytes);
  }

  netbufferv4_access_deleted_tbl_table_reset_default_entry_result result;
  try {
    iface_->access_deleted_tbl_table_reset_default_entry(args.sess_hdl, args.dev_tgt);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_deleted_tbl_table_reset_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_deleted_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_deleted_tbl_table_reset_default_entry");
  }

  oprot->writeMessageBegin("access_deleted_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_deleted_tbl_table_reset_default_entry", bytes);
  }
}

void netbufferv4Processor::process_access_latest_tbl_table_reset_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_latest_tbl_table_reset_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_latest_tbl_table_reset_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_latest_tbl_table_reset_default_entry");
  }

  netbufferv4_access_latest_tbl_table_reset_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_latest_tbl_table_reset_default_entry", bytes);
  }

  netbufferv4_access_latest_tbl_table_reset_default_entry_result result;
  try {
    iface_->access_latest_tbl_table_reset_default_entry(args.sess_hdl, args.dev_tgt);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_latest_tbl_table_reset_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_latest_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_latest_tbl_table_reset_default_entry");
  }

  oprot->writeMessageBegin("access_latest_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_latest_tbl_table_reset_default_entry", bytes);
  }
}

void netbufferv4Processor::process_access_savedseq_tbl_table_reset_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_savedseq_tbl_table_reset_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_savedseq_tbl_table_reset_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_savedseq_tbl_table_reset_default_entry");
  }

  netbufferv4_access_savedseq_tbl_table_reset_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_savedseq_tbl_table_reset_default_entry", bytes);
  }

  netbufferv4_access_savedseq_tbl_table_reset_default_entry_result result;
  try {
    iface_->access_savedseq_tbl_table_reset_default_entry(args.sess_hdl, args.dev_tgt);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_savedseq_tbl_table_reset_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_savedseq_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_savedseq_tbl_table_reset_default_entry");
  }

  oprot->writeMessageBegin("access_savedseq_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_savedseq_tbl_table_reset_default_entry", bytes);
  }
}

void netbufferv4Processor::process_access_seq_tbl_table_reset_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_seq_tbl_table_reset_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_seq_tbl_table_reset_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_seq_tbl_table_reset_default_entry");
  }

  netbufferv4_access_seq_tbl_table_reset_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_seq_tbl_table_reset_default_entry", bytes);
  }

  netbufferv4_access_seq_tbl_table_reset_default_entry_result result;
  try {
    iface_->access_seq_tbl_table_reset_default_entry(args.sess_hdl, args.dev_tgt);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_seq_tbl_table_reset_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_seq_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_seq_tbl_table_reset_default_entry");
  }

  oprot->writeMessageBegin("access_seq_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_seq_tbl_table_reset_default_entry", bytes);
  }
}

void netbufferv4Processor::process_access_validvalue_tbl_table_reset_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_validvalue_tbl_table_reset_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_validvalue_tbl_table_reset_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_validvalue_tbl_table_reset_default_entry");
  }

  netbufferv4_access_validvalue_tbl_table_reset_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_validvalue_tbl_table_reset_default_entry", bytes);
  }

  netbufferv4_access_validvalue_tbl_table_reset_default_entry_result result;
  try {
    iface_->access_validvalue_tbl_table_reset_default_entry(args.sess_hdl, args.dev_tgt);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_validvalue_tbl_table_reset_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_validvalue_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_validvalue_tbl_table_reset_default_entry");
  }

  oprot->writeMessageBegin("access_validvalue_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_validvalue_tbl_table_reset_default_entry", bytes);
  }
}

void netbufferv4Processor::process_add_and_remove_value_header_tbl_table_reset_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.add_and_remove_value_header_tbl_table_reset_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.add_and_remove_value_header_tbl_table_reset_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_reset_default_entry");
  }

  netbufferv4_add_and_remove_value_header_tbl_table_reset_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_reset_default_entry", bytes);
  }

  netbufferv4_add_and_remove_value_header_tbl_table_reset_default_entry_result result;
  try {
    iface_->add_and_remove_value_header_tbl_table_reset_default_entry(args.sess_hdl, args.dev_tgt);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_reset_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_reset_default_entry");
  }

  oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_reset_default_entry", bytes);
  }
}

void netbufferv4Processor::process_cache_lookup_tbl_table_reset_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.cache_lookup_tbl_table_reset_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.cache_lookup_tbl_table_reset_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.cache_lookup_tbl_table_reset_default_entry");
  }

  netbufferv4_cache_lookup_tbl_table_reset_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.cache_lookup_tbl_table_reset_default_entry", bytes);
  }

  netbufferv4_cache_lookup_tbl_table_reset_default_entry_result result;
  try {
    iface_->cache_lookup_tbl_table_reset_default_entry(args.sess_hdl, args.dev_tgt);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.cache_lookup_tbl_table_reset_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("cache_lookup_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.cache_lookup_tbl_table_reset_default_entry");
  }

  oprot->writeMessageBegin("cache_lookup_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.cache_lookup_tbl_table_reset_default_entry", bytes);
  }
}

void netbufferv4Processor::process_drop_tbl_table_reset_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.drop_tbl_table_reset_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.drop_tbl_table_reset_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.drop_tbl_table_reset_default_entry");
  }

  netbufferv4_drop_tbl_table_reset_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.drop_tbl_table_reset_default_entry", bytes);
  }

  netbufferv4_drop_tbl_table_reset_default_entry_result result;
  try {
    iface_->drop_tbl_table_reset_default_entry(args.sess_hdl, args.dev_tgt);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.drop_tbl_table_reset_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("drop_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.drop_tbl_table_reset_default_entry");
  }

  oprot->writeMessageBegin("drop_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.drop_tbl_table_reset_default_entry", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_reset_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_reset_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_reset_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_reset_default_entry");
  }

  netbufferv4_eg_port_forward_tbl_table_reset_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_reset_default_entry", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_reset_default_entry_result result;
  try {
    iface_->eg_port_forward_tbl_table_reset_default_entry(args.sess_hdl, args.dev_tgt);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_reset_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_reset_default_entry");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_reset_default_entry", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm1_tbl_table_reset_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm1_tbl_table_reset_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm1_tbl_table_reset_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm1_tbl_table_reset_default_entry");
  }

  netbufferv4_hash_for_cm1_tbl_table_reset_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm1_tbl_table_reset_default_entry", bytes);
  }

  netbufferv4_hash_for_cm1_tbl_table_reset_default_entry_result result;
  try {
    iface_->hash_for_cm1_tbl_table_reset_default_entry(args.sess_hdl, args.dev_tgt);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm1_tbl_table_reset_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm1_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm1_tbl_table_reset_default_entry");
  }

  oprot->writeMessageBegin("hash_for_cm1_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm1_tbl_table_reset_default_entry", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm2_tbl_table_reset_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm2_tbl_table_reset_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm2_tbl_table_reset_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm2_tbl_table_reset_default_entry");
  }

  netbufferv4_hash_for_cm2_tbl_table_reset_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm2_tbl_table_reset_default_entry", bytes);
  }

  netbufferv4_hash_for_cm2_tbl_table_reset_default_entry_result result;
  try {
    iface_->hash_for_cm2_tbl_table_reset_default_entry(args.sess_hdl, args.dev_tgt);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm2_tbl_table_reset_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm2_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm2_tbl_table_reset_default_entry");
  }

  oprot->writeMessageBegin("hash_for_cm2_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm2_tbl_table_reset_default_entry", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm3_tbl_table_reset_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm3_tbl_table_reset_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm3_tbl_table_reset_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm3_tbl_table_reset_default_entry");
  }

  netbufferv4_hash_for_cm3_tbl_table_reset_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm3_tbl_table_reset_default_entry", bytes);
  }

  netbufferv4_hash_for_cm3_tbl_table_reset_default_entry_result result;
  try {
    iface_->hash_for_cm3_tbl_table_reset_default_entry(args.sess_hdl, args.dev_tgt);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm3_tbl_table_reset_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm3_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm3_tbl_table_reset_default_entry");
  }

  oprot->writeMessageBegin("hash_for_cm3_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm3_tbl_table_reset_default_entry", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm4_tbl_table_reset_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm4_tbl_table_reset_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm4_tbl_table_reset_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm4_tbl_table_reset_default_entry");
  }

  netbufferv4_hash_for_cm4_tbl_table_reset_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm4_tbl_table_reset_default_entry", bytes);
  }

  netbufferv4_hash_for_cm4_tbl_table_reset_default_entry_result result;
  try {
    iface_->hash_for_cm4_tbl_table_reset_default_entry(args.sess_hdl, args.dev_tgt);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm4_tbl_table_reset_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm4_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm4_tbl_table_reset_default_entry");
  }

  oprot->writeMessageBegin("hash_for_cm4_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm4_tbl_table_reset_default_entry", bytes);
  }
}

void netbufferv4Processor::process_hash_for_seq_tbl_table_reset_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_seq_tbl_table_reset_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_seq_tbl_table_reset_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_seq_tbl_table_reset_default_entry");
  }

  netbufferv4_hash_for_seq_tbl_table_reset_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_seq_tbl_table_reset_default_entry", bytes);
  }

  netbufferv4_hash_for_seq_tbl_table_reset_default_entry_result result;
  try {
    iface_->hash_for_seq_tbl_table_reset_default_entry(args.sess_hdl, args.dev_tgt);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_seq_tbl_table_reset_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_seq_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_seq_tbl_table_reset_default_entry");
  }

  oprot->writeMessageBegin("hash_for_seq_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_seq_tbl_table_reset_default_entry", bytes);
  }
}

void netbufferv4Processor::process_ig_port_forward_tbl_table_reset_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.ig_port_forward_tbl_table_reset_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.ig_port_forward_tbl_table_reset_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.ig_port_forward_tbl_table_reset_default_entry");
  }

  netbufferv4_ig_port_forward_tbl_table_reset_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.ig_port_forward_tbl_table_reset_default_entry", bytes);
  }

  netbufferv4_ig_port_forward_tbl_table_reset_default_entry_result result;
  try {
    iface_->ig_port_forward_tbl_table_reset_default_entry(args.sess_hdl, args.dev_tgt);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.ig_port_forward_tbl_table_reset_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ig_port_forward_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.ig_port_forward_tbl_table_reset_default_entry");
  }

  oprot->writeMessageBegin("ig_port_forward_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.ig_port_forward_tbl_table_reset_default_entry", bytes);
  }
}

void netbufferv4Processor::process_ipv4_forward_tbl_table_reset_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.ipv4_forward_tbl_table_reset_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.ipv4_forward_tbl_table_reset_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.ipv4_forward_tbl_table_reset_default_entry");
  }

  netbufferv4_ipv4_forward_tbl_table_reset_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.ipv4_forward_tbl_table_reset_default_entry", bytes);
  }

  netbufferv4_ipv4_forward_tbl_table_reset_default_entry_result result;
  try {
    iface_->ipv4_forward_tbl_table_reset_default_entry(args.sess_hdl, args.dev_tgt);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.ipv4_forward_tbl_table_reset_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ipv4_forward_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.ipv4_forward_tbl_table_reset_default_entry");
  }

  oprot->writeMessageBegin("ipv4_forward_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.ipv4_forward_tbl_table_reset_default_entry", bytes);
  }
}

void netbufferv4Processor::process_is_hot_tbl_table_reset_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.is_hot_tbl_table_reset_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.is_hot_tbl_table_reset_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.is_hot_tbl_table_reset_default_entry");
  }

  netbufferv4_is_hot_tbl_table_reset_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.is_hot_tbl_table_reset_default_entry", bytes);
  }

  netbufferv4_is_hot_tbl_table_reset_default_entry_result result;
  try {
    iface_->is_hot_tbl_table_reset_default_entry(args.sess_hdl, args.dev_tgt);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.is_hot_tbl_table_reset_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("is_hot_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.is_hot_tbl_table_reset_default_entry");
  }

  oprot->writeMessageBegin("is_hot_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.is_hot_tbl_table_reset_default_entry", bytes);
  }
}

void netbufferv4Processor::process_lastclone_lastscansplit_tbl_table_reset_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.lastclone_lastscansplit_tbl_table_reset_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_reset_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_reset_default_entry");
  }

  netbufferv4_lastclone_lastscansplit_tbl_table_reset_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_reset_default_entry", bytes);
  }

  netbufferv4_lastclone_lastscansplit_tbl_table_reset_default_entry_result result;
  try {
    iface_->lastclone_lastscansplit_tbl_table_reset_default_entry(args.sess_hdl, args.dev_tgt);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_reset_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("lastclone_lastscansplit_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_reset_default_entry");
  }

  oprot->writeMessageBegin("lastclone_lastscansplit_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_reset_default_entry", bytes);
  }
}

void netbufferv4Processor::process_need_recirculate_tbl_table_reset_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.need_recirculate_tbl_table_reset_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.need_recirculate_tbl_table_reset_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.need_recirculate_tbl_table_reset_default_entry");
  }

  netbufferv4_need_recirculate_tbl_table_reset_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.need_recirculate_tbl_table_reset_default_entry", bytes);
  }

  netbufferv4_need_recirculate_tbl_table_reset_default_entry_result result;
  try {
    iface_->need_recirculate_tbl_table_reset_default_entry(args.sess_hdl, args.dev_tgt);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.need_recirculate_tbl_table_reset_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("need_recirculate_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.need_recirculate_tbl_table_reset_default_entry");
  }

  oprot->writeMessageBegin("need_recirculate_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.need_recirculate_tbl_table_reset_default_entry", bytes);
  }
}

void netbufferv4Processor::process_prepare_for_cachehit_tbl_table_reset_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.prepare_for_cachehit_tbl_table_reset_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.prepare_for_cachehit_tbl_table_reset_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.prepare_for_cachehit_tbl_table_reset_default_entry");
  }

  netbufferv4_prepare_for_cachehit_tbl_table_reset_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.prepare_for_cachehit_tbl_table_reset_default_entry", bytes);
  }

  netbufferv4_prepare_for_cachehit_tbl_table_reset_default_entry_result result;
  try {
    iface_->prepare_for_cachehit_tbl_table_reset_default_entry(args.sess_hdl, args.dev_tgt);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.prepare_for_cachehit_tbl_table_reset_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("prepare_for_cachehit_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.prepare_for_cachehit_tbl_table_reset_default_entry");
  }

  oprot->writeMessageBegin("prepare_for_cachehit_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.prepare_for_cachehit_tbl_table_reset_default_entry", bytes);
  }
}

void netbufferv4Processor::process_process_scanreq_split_tbl_table_reset_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.process_scanreq_split_tbl_table_reset_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.process_scanreq_split_tbl_table_reset_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.process_scanreq_split_tbl_table_reset_default_entry");
  }

  netbufferv4_process_scanreq_split_tbl_table_reset_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.process_scanreq_split_tbl_table_reset_default_entry", bytes);
  }

  netbufferv4_process_scanreq_split_tbl_table_reset_default_entry_result result;
  try {
    iface_->process_scanreq_split_tbl_table_reset_default_entry(args.sess_hdl, args.dev_tgt);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.process_scanreq_split_tbl_table_reset_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("process_scanreq_split_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.process_scanreq_split_tbl_table_reset_default_entry");
  }

  oprot->writeMessageBegin("process_scanreq_split_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.process_scanreq_split_tbl_table_reset_default_entry", bytes);
  }
}

void netbufferv4Processor::process_range_partition_for_scan_endkey_tbl_table_reset_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.range_partition_for_scan_endkey_tbl_table_reset_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_table_reset_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_table_reset_default_entry");
  }

  netbufferv4_range_partition_for_scan_endkey_tbl_table_reset_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_table_reset_default_entry", bytes);
  }

  netbufferv4_range_partition_for_scan_endkey_tbl_table_reset_default_entry_result result;
  try {
    iface_->range_partition_for_scan_endkey_tbl_table_reset_default_entry(args.sess_hdl, args.dev_tgt);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_table_reset_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("range_partition_for_scan_endkey_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_table_reset_default_entry");
  }

  oprot->writeMessageBegin("range_partition_for_scan_endkey_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_table_reset_default_entry", bytes);
  }
}

void netbufferv4Processor::process_range_partition_tbl_table_reset_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.range_partition_tbl_table_reset_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.range_partition_tbl_table_reset_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.range_partition_tbl_table_reset_default_entry");
  }

  netbufferv4_range_partition_tbl_table_reset_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.range_partition_tbl_table_reset_default_entry", bytes);
  }

  netbufferv4_range_partition_tbl_table_reset_default_entry_result result;
  try {
    iface_->range_partition_tbl_table_reset_default_entry(args.sess_hdl, args.dev_tgt);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.range_partition_tbl_table_reset_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("range_partition_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.range_partition_tbl_table_reset_default_entry");
  }

  oprot->writeMessageBegin("range_partition_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.range_partition_tbl_table_reset_default_entry", bytes);
  }
}

void netbufferv4Processor::process_recirculate_tbl_table_reset_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.recirculate_tbl_table_reset_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.recirculate_tbl_table_reset_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.recirculate_tbl_table_reset_default_entry");
  }

  netbufferv4_recirculate_tbl_table_reset_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.recirculate_tbl_table_reset_default_entry", bytes);
  }

  netbufferv4_recirculate_tbl_table_reset_default_entry_result result;
  try {
    iface_->recirculate_tbl_table_reset_default_entry(args.sess_hdl, args.dev_tgt);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.recirculate_tbl_table_reset_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("recirculate_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.recirculate_tbl_table_reset_default_entry");
  }

  oprot->writeMessageBegin("recirculate_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.recirculate_tbl_table_reset_default_entry", bytes);
  }
}

void netbufferv4Processor::process_sample_tbl_table_reset_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.sample_tbl_table_reset_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.sample_tbl_table_reset_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.sample_tbl_table_reset_default_entry");
  }

  netbufferv4_sample_tbl_table_reset_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.sample_tbl_table_reset_default_entry", bytes);
  }

  netbufferv4_sample_tbl_table_reset_default_entry_result result;
  try {
    iface_->sample_tbl_table_reset_default_entry(args.sess_hdl, args.dev_tgt);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.sample_tbl_table_reset_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sample_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.sample_tbl_table_reset_default_entry");
  }

  oprot->writeMessageBegin("sample_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.sample_tbl_table_reset_default_entry", bytes);
  }
}

void netbufferv4Processor::process_save_client_udpport_tbl_table_reset_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.save_client_udpport_tbl_table_reset_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.save_client_udpport_tbl_table_reset_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.save_client_udpport_tbl_table_reset_default_entry");
  }

  netbufferv4_save_client_udpport_tbl_table_reset_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.save_client_udpport_tbl_table_reset_default_entry", bytes);
  }

  netbufferv4_save_client_udpport_tbl_table_reset_default_entry_result result;
  try {
    iface_->save_client_udpport_tbl_table_reset_default_entry(args.sess_hdl, args.dev_tgt);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.save_client_udpport_tbl_table_reset_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("save_client_udpport_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.save_client_udpport_tbl_table_reset_default_entry");
  }

  oprot->writeMessageBegin("save_client_udpport_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.save_client_udpport_tbl_table_reset_default_entry", bytes);
  }
}

void netbufferv4Processor::process_set_hot_threshold_tbl_table_reset_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.set_hot_threshold_tbl_table_reset_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.set_hot_threshold_tbl_table_reset_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.set_hot_threshold_tbl_table_reset_default_entry");
  }

  netbufferv4_set_hot_threshold_tbl_table_reset_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.set_hot_threshold_tbl_table_reset_default_entry", bytes);
  }

  netbufferv4_set_hot_threshold_tbl_table_reset_default_entry_result result;
  try {
    iface_->set_hot_threshold_tbl_table_reset_default_entry(args.sess_hdl, args.dev_tgt);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.set_hot_threshold_tbl_table_reset_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("set_hot_threshold_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.set_hot_threshold_tbl_table_reset_default_entry");
  }

  oprot->writeMessageBegin("set_hot_threshold_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.set_hot_threshold_tbl_table_reset_default_entry", bytes);
  }
}

void netbufferv4Processor::process_snapshot_flag_tbl_table_reset_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.snapshot_flag_tbl_table_reset_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.snapshot_flag_tbl_table_reset_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.snapshot_flag_tbl_table_reset_default_entry");
  }

  netbufferv4_snapshot_flag_tbl_table_reset_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.snapshot_flag_tbl_table_reset_default_entry", bytes);
  }

  netbufferv4_snapshot_flag_tbl_table_reset_default_entry_result result;
  try {
    iface_->snapshot_flag_tbl_table_reset_default_entry(args.sess_hdl, args.dev_tgt);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.snapshot_flag_tbl_table_reset_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("snapshot_flag_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.snapshot_flag_tbl_table_reset_default_entry");
  }

  oprot->writeMessageBegin("snapshot_flag_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.snapshot_flag_tbl_table_reset_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_ipmac_srcport_tbl_table_reset_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_ipmac_srcport_tbl_table_reset_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_ipmac_srcport_tbl_table_reset_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_reset_default_entry");
  }

  netbufferv4_update_ipmac_srcport_tbl_table_reset_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_reset_default_entry", bytes);
  }

  netbufferv4_update_ipmac_srcport_tbl_table_reset_default_entry_result result;
  try {
    iface_->update_ipmac_srcport_tbl_table_reset_default_entry(args.sess_hdl, args.dev_tgt);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_reset_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_ipmac_srcport_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_reset_default_entry");
  }

  oprot->writeMessageBegin("update_ipmac_srcport_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_reset_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_pktlen_tbl_table_reset_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_pktlen_tbl_table_reset_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_pktlen_tbl_table_reset_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_pktlen_tbl_table_reset_default_entry");
  }

  netbufferv4_update_pktlen_tbl_table_reset_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_pktlen_tbl_table_reset_default_entry", bytes);
  }

  netbufferv4_update_pktlen_tbl_table_reset_default_entry_result result;
  try {
    iface_->update_pktlen_tbl_table_reset_default_entry(args.sess_hdl, args.dev_tgt);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_pktlen_tbl_table_reset_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_pktlen_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_pktlen_tbl_table_reset_default_entry");
  }

  oprot->writeMessageBegin("update_pktlen_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_pktlen_tbl_table_reset_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_valhi10_tbl_table_reset_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi10_tbl_table_reset_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi10_tbl_table_reset_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi10_tbl_table_reset_default_entry");
  }

  netbufferv4_update_valhi10_tbl_table_reset_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi10_tbl_table_reset_default_entry", bytes);
  }

  netbufferv4_update_valhi10_tbl_table_reset_default_entry_result result;
  try {
    iface_->update_valhi10_tbl_table_reset_default_entry(args.sess_hdl, args.dev_tgt);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi10_tbl_table_reset_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi10_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi10_tbl_table_reset_default_entry");
  }

  oprot->writeMessageBegin("update_valhi10_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi10_tbl_table_reset_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_valhi11_tbl_table_reset_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi11_tbl_table_reset_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi11_tbl_table_reset_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi11_tbl_table_reset_default_entry");
  }

  netbufferv4_update_valhi11_tbl_table_reset_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi11_tbl_table_reset_default_entry", bytes);
  }

  netbufferv4_update_valhi11_tbl_table_reset_default_entry_result result;
  try {
    iface_->update_valhi11_tbl_table_reset_default_entry(args.sess_hdl, args.dev_tgt);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi11_tbl_table_reset_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi11_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi11_tbl_table_reset_default_entry");
  }

  oprot->writeMessageBegin("update_valhi11_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi11_tbl_table_reset_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_valhi12_tbl_table_reset_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi12_tbl_table_reset_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi12_tbl_table_reset_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi12_tbl_table_reset_default_entry");
  }

  netbufferv4_update_valhi12_tbl_table_reset_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi12_tbl_table_reset_default_entry", bytes);
  }

  netbufferv4_update_valhi12_tbl_table_reset_default_entry_result result;
  try {
    iface_->update_valhi12_tbl_table_reset_default_entry(args.sess_hdl, args.dev_tgt);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi12_tbl_table_reset_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi12_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi12_tbl_table_reset_default_entry");
  }

  oprot->writeMessageBegin("update_valhi12_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi12_tbl_table_reset_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_valhi13_tbl_table_reset_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi13_tbl_table_reset_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi13_tbl_table_reset_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi13_tbl_table_reset_default_entry");
  }

  netbufferv4_update_valhi13_tbl_table_reset_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi13_tbl_table_reset_default_entry", bytes);
  }

  netbufferv4_update_valhi13_tbl_table_reset_default_entry_result result;
  try {
    iface_->update_valhi13_tbl_table_reset_default_entry(args.sess_hdl, args.dev_tgt);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi13_tbl_table_reset_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi13_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi13_tbl_table_reset_default_entry");
  }

  oprot->writeMessageBegin("update_valhi13_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi13_tbl_table_reset_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_valhi14_tbl_table_reset_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi14_tbl_table_reset_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi14_tbl_table_reset_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi14_tbl_table_reset_default_entry");
  }

  netbufferv4_update_valhi14_tbl_table_reset_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi14_tbl_table_reset_default_entry", bytes);
  }

  netbufferv4_update_valhi14_tbl_table_reset_default_entry_result result;
  try {
    iface_->update_valhi14_tbl_table_reset_default_entry(args.sess_hdl, args.dev_tgt);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi14_tbl_table_reset_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi14_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi14_tbl_table_reset_default_entry");
  }

  oprot->writeMessageBegin("update_valhi14_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi14_tbl_table_reset_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_valhi15_tbl_table_reset_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi15_tbl_table_reset_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi15_tbl_table_reset_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi15_tbl_table_reset_default_entry");
  }

  netbufferv4_update_valhi15_tbl_table_reset_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi15_tbl_table_reset_default_entry", bytes);
  }

  netbufferv4_update_valhi15_tbl_table_reset_default_entry_result result;
  try {
    iface_->update_valhi15_tbl_table_reset_default_entry(args.sess_hdl, args.dev_tgt);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi15_tbl_table_reset_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi15_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi15_tbl_table_reset_default_entry");
  }

  oprot->writeMessageBegin("update_valhi15_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi15_tbl_table_reset_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_valhi16_tbl_table_reset_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi16_tbl_table_reset_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi16_tbl_table_reset_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi16_tbl_table_reset_default_entry");
  }

  netbufferv4_update_valhi16_tbl_table_reset_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi16_tbl_table_reset_default_entry", bytes);
  }

  netbufferv4_update_valhi16_tbl_table_reset_default_entry_result result;
  try {
    iface_->update_valhi16_tbl_table_reset_default_entry(args.sess_hdl, args.dev_tgt);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi16_tbl_table_reset_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi16_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi16_tbl_table_reset_default_entry");
  }

  oprot->writeMessageBegin("update_valhi16_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi16_tbl_table_reset_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_valhi1_tbl_table_reset_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi1_tbl_table_reset_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi1_tbl_table_reset_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi1_tbl_table_reset_default_entry");
  }

  netbufferv4_update_valhi1_tbl_table_reset_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi1_tbl_table_reset_default_entry", bytes);
  }

  netbufferv4_update_valhi1_tbl_table_reset_default_entry_result result;
  try {
    iface_->update_valhi1_tbl_table_reset_default_entry(args.sess_hdl, args.dev_tgt);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi1_tbl_table_reset_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi1_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi1_tbl_table_reset_default_entry");
  }

  oprot->writeMessageBegin("update_valhi1_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi1_tbl_table_reset_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_valhi2_tbl_table_reset_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi2_tbl_table_reset_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi2_tbl_table_reset_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi2_tbl_table_reset_default_entry");
  }

  netbufferv4_update_valhi2_tbl_table_reset_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi2_tbl_table_reset_default_entry", bytes);
  }

  netbufferv4_update_valhi2_tbl_table_reset_default_entry_result result;
  try {
    iface_->update_valhi2_tbl_table_reset_default_entry(args.sess_hdl, args.dev_tgt);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi2_tbl_table_reset_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi2_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi2_tbl_table_reset_default_entry");
  }

  oprot->writeMessageBegin("update_valhi2_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi2_tbl_table_reset_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_valhi3_tbl_table_reset_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi3_tbl_table_reset_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi3_tbl_table_reset_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi3_tbl_table_reset_default_entry");
  }

  netbufferv4_update_valhi3_tbl_table_reset_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi3_tbl_table_reset_default_entry", bytes);
  }

  netbufferv4_update_valhi3_tbl_table_reset_default_entry_result result;
  try {
    iface_->update_valhi3_tbl_table_reset_default_entry(args.sess_hdl, args.dev_tgt);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi3_tbl_table_reset_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi3_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi3_tbl_table_reset_default_entry");
  }

  oprot->writeMessageBegin("update_valhi3_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi3_tbl_table_reset_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_valhi4_tbl_table_reset_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi4_tbl_table_reset_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi4_tbl_table_reset_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi4_tbl_table_reset_default_entry");
  }

  netbufferv4_update_valhi4_tbl_table_reset_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi4_tbl_table_reset_default_entry", bytes);
  }

  netbufferv4_update_valhi4_tbl_table_reset_default_entry_result result;
  try {
    iface_->update_valhi4_tbl_table_reset_default_entry(args.sess_hdl, args.dev_tgt);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi4_tbl_table_reset_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi4_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi4_tbl_table_reset_default_entry");
  }

  oprot->writeMessageBegin("update_valhi4_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi4_tbl_table_reset_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_valhi5_tbl_table_reset_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi5_tbl_table_reset_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi5_tbl_table_reset_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi5_tbl_table_reset_default_entry");
  }

  netbufferv4_update_valhi5_tbl_table_reset_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi5_tbl_table_reset_default_entry", bytes);
  }

  netbufferv4_update_valhi5_tbl_table_reset_default_entry_result result;
  try {
    iface_->update_valhi5_tbl_table_reset_default_entry(args.sess_hdl, args.dev_tgt);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi5_tbl_table_reset_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi5_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi5_tbl_table_reset_default_entry");
  }

  oprot->writeMessageBegin("update_valhi5_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi5_tbl_table_reset_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_valhi6_tbl_table_reset_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi6_tbl_table_reset_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi6_tbl_table_reset_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi6_tbl_table_reset_default_entry");
  }

  netbufferv4_update_valhi6_tbl_table_reset_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi6_tbl_table_reset_default_entry", bytes);
  }

  netbufferv4_update_valhi6_tbl_table_reset_default_entry_result result;
  try {
    iface_->update_valhi6_tbl_table_reset_default_entry(args.sess_hdl, args.dev_tgt);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi6_tbl_table_reset_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi6_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi6_tbl_table_reset_default_entry");
  }

  oprot->writeMessageBegin("update_valhi6_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi6_tbl_table_reset_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_valhi7_tbl_table_reset_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi7_tbl_table_reset_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi7_tbl_table_reset_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi7_tbl_table_reset_default_entry");
  }

  netbufferv4_update_valhi7_tbl_table_reset_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi7_tbl_table_reset_default_entry", bytes);
  }

  netbufferv4_update_valhi7_tbl_table_reset_default_entry_result result;
  try {
    iface_->update_valhi7_tbl_table_reset_default_entry(args.sess_hdl, args.dev_tgt);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi7_tbl_table_reset_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi7_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi7_tbl_table_reset_default_entry");
  }

  oprot->writeMessageBegin("update_valhi7_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi7_tbl_table_reset_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_valhi8_tbl_table_reset_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi8_tbl_table_reset_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi8_tbl_table_reset_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi8_tbl_table_reset_default_entry");
  }

  netbufferv4_update_valhi8_tbl_table_reset_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi8_tbl_table_reset_default_entry", bytes);
  }

  netbufferv4_update_valhi8_tbl_table_reset_default_entry_result result;
  try {
    iface_->update_valhi8_tbl_table_reset_default_entry(args.sess_hdl, args.dev_tgt);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi8_tbl_table_reset_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi8_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi8_tbl_table_reset_default_entry");
  }

  oprot->writeMessageBegin("update_valhi8_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi8_tbl_table_reset_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_valhi9_tbl_table_reset_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi9_tbl_table_reset_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi9_tbl_table_reset_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi9_tbl_table_reset_default_entry");
  }

  netbufferv4_update_valhi9_tbl_table_reset_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi9_tbl_table_reset_default_entry", bytes);
  }

  netbufferv4_update_valhi9_tbl_table_reset_default_entry_result result;
  try {
    iface_->update_valhi9_tbl_table_reset_default_entry(args.sess_hdl, args.dev_tgt);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi9_tbl_table_reset_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi9_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi9_tbl_table_reset_default_entry");
  }

  oprot->writeMessageBegin("update_valhi9_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi9_tbl_table_reset_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_vallen_tbl_table_reset_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallen_tbl_table_reset_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallen_tbl_table_reset_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallen_tbl_table_reset_default_entry");
  }

  netbufferv4_update_vallen_tbl_table_reset_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallen_tbl_table_reset_default_entry", bytes);
  }

  netbufferv4_update_vallen_tbl_table_reset_default_entry_result result;
  try {
    iface_->update_vallen_tbl_table_reset_default_entry(args.sess_hdl, args.dev_tgt);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallen_tbl_table_reset_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallen_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallen_tbl_table_reset_default_entry");
  }

  oprot->writeMessageBegin("update_vallen_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallen_tbl_table_reset_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_vallo10_tbl_table_reset_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo10_tbl_table_reset_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo10_tbl_table_reset_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo10_tbl_table_reset_default_entry");
  }

  netbufferv4_update_vallo10_tbl_table_reset_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo10_tbl_table_reset_default_entry", bytes);
  }

  netbufferv4_update_vallo10_tbl_table_reset_default_entry_result result;
  try {
    iface_->update_vallo10_tbl_table_reset_default_entry(args.sess_hdl, args.dev_tgt);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo10_tbl_table_reset_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo10_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo10_tbl_table_reset_default_entry");
  }

  oprot->writeMessageBegin("update_vallo10_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo10_tbl_table_reset_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_vallo11_tbl_table_reset_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo11_tbl_table_reset_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo11_tbl_table_reset_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo11_tbl_table_reset_default_entry");
  }

  netbufferv4_update_vallo11_tbl_table_reset_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo11_tbl_table_reset_default_entry", bytes);
  }

  netbufferv4_update_vallo11_tbl_table_reset_default_entry_result result;
  try {
    iface_->update_vallo11_tbl_table_reset_default_entry(args.sess_hdl, args.dev_tgt);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo11_tbl_table_reset_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo11_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo11_tbl_table_reset_default_entry");
  }

  oprot->writeMessageBegin("update_vallo11_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo11_tbl_table_reset_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_vallo12_tbl_table_reset_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo12_tbl_table_reset_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo12_tbl_table_reset_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo12_tbl_table_reset_default_entry");
  }

  netbufferv4_update_vallo12_tbl_table_reset_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo12_tbl_table_reset_default_entry", bytes);
  }

  netbufferv4_update_vallo12_tbl_table_reset_default_entry_result result;
  try {
    iface_->update_vallo12_tbl_table_reset_default_entry(args.sess_hdl, args.dev_tgt);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo12_tbl_table_reset_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo12_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo12_tbl_table_reset_default_entry");
  }

  oprot->writeMessageBegin("update_vallo12_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo12_tbl_table_reset_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_vallo13_tbl_table_reset_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo13_tbl_table_reset_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo13_tbl_table_reset_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo13_tbl_table_reset_default_entry");
  }

  netbufferv4_update_vallo13_tbl_table_reset_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo13_tbl_table_reset_default_entry", bytes);
  }

  netbufferv4_update_vallo13_tbl_table_reset_default_entry_result result;
  try {
    iface_->update_vallo13_tbl_table_reset_default_entry(args.sess_hdl, args.dev_tgt);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo13_tbl_table_reset_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo13_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo13_tbl_table_reset_default_entry");
  }

  oprot->writeMessageBegin("update_vallo13_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo13_tbl_table_reset_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_vallo14_tbl_table_reset_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo14_tbl_table_reset_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo14_tbl_table_reset_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo14_tbl_table_reset_default_entry");
  }

  netbufferv4_update_vallo14_tbl_table_reset_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo14_tbl_table_reset_default_entry", bytes);
  }

  netbufferv4_update_vallo14_tbl_table_reset_default_entry_result result;
  try {
    iface_->update_vallo14_tbl_table_reset_default_entry(args.sess_hdl, args.dev_tgt);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo14_tbl_table_reset_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo14_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo14_tbl_table_reset_default_entry");
  }

  oprot->writeMessageBegin("update_vallo14_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo14_tbl_table_reset_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_vallo15_tbl_table_reset_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo15_tbl_table_reset_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo15_tbl_table_reset_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo15_tbl_table_reset_default_entry");
  }

  netbufferv4_update_vallo15_tbl_table_reset_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo15_tbl_table_reset_default_entry", bytes);
  }

  netbufferv4_update_vallo15_tbl_table_reset_default_entry_result result;
  try {
    iface_->update_vallo15_tbl_table_reset_default_entry(args.sess_hdl, args.dev_tgt);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo15_tbl_table_reset_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo15_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo15_tbl_table_reset_default_entry");
  }

  oprot->writeMessageBegin("update_vallo15_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo15_tbl_table_reset_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_vallo16_tbl_table_reset_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo16_tbl_table_reset_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo16_tbl_table_reset_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo16_tbl_table_reset_default_entry");
  }

  netbufferv4_update_vallo16_tbl_table_reset_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo16_tbl_table_reset_default_entry", bytes);
  }

  netbufferv4_update_vallo16_tbl_table_reset_default_entry_result result;
  try {
    iface_->update_vallo16_tbl_table_reset_default_entry(args.sess_hdl, args.dev_tgt);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo16_tbl_table_reset_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo16_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo16_tbl_table_reset_default_entry");
  }

  oprot->writeMessageBegin("update_vallo16_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo16_tbl_table_reset_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_vallo1_tbl_table_reset_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo1_tbl_table_reset_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo1_tbl_table_reset_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo1_tbl_table_reset_default_entry");
  }

  netbufferv4_update_vallo1_tbl_table_reset_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo1_tbl_table_reset_default_entry", bytes);
  }

  netbufferv4_update_vallo1_tbl_table_reset_default_entry_result result;
  try {
    iface_->update_vallo1_tbl_table_reset_default_entry(args.sess_hdl, args.dev_tgt);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo1_tbl_table_reset_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo1_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo1_tbl_table_reset_default_entry");
  }

  oprot->writeMessageBegin("update_vallo1_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo1_tbl_table_reset_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_vallo2_tbl_table_reset_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo2_tbl_table_reset_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo2_tbl_table_reset_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo2_tbl_table_reset_default_entry");
  }

  netbufferv4_update_vallo2_tbl_table_reset_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo2_tbl_table_reset_default_entry", bytes);
  }

  netbufferv4_update_vallo2_tbl_table_reset_default_entry_result result;
  try {
    iface_->update_vallo2_tbl_table_reset_default_entry(args.sess_hdl, args.dev_tgt);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo2_tbl_table_reset_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo2_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo2_tbl_table_reset_default_entry");
  }

  oprot->writeMessageBegin("update_vallo2_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo2_tbl_table_reset_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_vallo3_tbl_table_reset_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo3_tbl_table_reset_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo3_tbl_table_reset_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo3_tbl_table_reset_default_entry");
  }

  netbufferv4_update_vallo3_tbl_table_reset_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo3_tbl_table_reset_default_entry", bytes);
  }

  netbufferv4_update_vallo3_tbl_table_reset_default_entry_result result;
  try {
    iface_->update_vallo3_tbl_table_reset_default_entry(args.sess_hdl, args.dev_tgt);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo3_tbl_table_reset_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo3_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo3_tbl_table_reset_default_entry");
  }

  oprot->writeMessageBegin("update_vallo3_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo3_tbl_table_reset_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_vallo4_tbl_table_reset_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo4_tbl_table_reset_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo4_tbl_table_reset_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo4_tbl_table_reset_default_entry");
  }

  netbufferv4_update_vallo4_tbl_table_reset_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo4_tbl_table_reset_default_entry", bytes);
  }

  netbufferv4_update_vallo4_tbl_table_reset_default_entry_result result;
  try {
    iface_->update_vallo4_tbl_table_reset_default_entry(args.sess_hdl, args.dev_tgt);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo4_tbl_table_reset_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo4_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo4_tbl_table_reset_default_entry");
  }

  oprot->writeMessageBegin("update_vallo4_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo4_tbl_table_reset_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_vallo5_tbl_table_reset_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo5_tbl_table_reset_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo5_tbl_table_reset_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo5_tbl_table_reset_default_entry");
  }

  netbufferv4_update_vallo5_tbl_table_reset_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo5_tbl_table_reset_default_entry", bytes);
  }

  netbufferv4_update_vallo5_tbl_table_reset_default_entry_result result;
  try {
    iface_->update_vallo5_tbl_table_reset_default_entry(args.sess_hdl, args.dev_tgt);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo5_tbl_table_reset_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo5_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo5_tbl_table_reset_default_entry");
  }

  oprot->writeMessageBegin("update_vallo5_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo5_tbl_table_reset_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_vallo6_tbl_table_reset_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo6_tbl_table_reset_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo6_tbl_table_reset_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo6_tbl_table_reset_default_entry");
  }

  netbufferv4_update_vallo6_tbl_table_reset_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo6_tbl_table_reset_default_entry", bytes);
  }

  netbufferv4_update_vallo6_tbl_table_reset_default_entry_result result;
  try {
    iface_->update_vallo6_tbl_table_reset_default_entry(args.sess_hdl, args.dev_tgt);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo6_tbl_table_reset_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo6_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo6_tbl_table_reset_default_entry");
  }

  oprot->writeMessageBegin("update_vallo6_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo6_tbl_table_reset_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_vallo7_tbl_table_reset_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo7_tbl_table_reset_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo7_tbl_table_reset_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo7_tbl_table_reset_default_entry");
  }

  netbufferv4_update_vallo7_tbl_table_reset_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo7_tbl_table_reset_default_entry", bytes);
  }

  netbufferv4_update_vallo7_tbl_table_reset_default_entry_result result;
  try {
    iface_->update_vallo7_tbl_table_reset_default_entry(args.sess_hdl, args.dev_tgt);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo7_tbl_table_reset_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo7_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo7_tbl_table_reset_default_entry");
  }

  oprot->writeMessageBegin("update_vallo7_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo7_tbl_table_reset_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_vallo8_tbl_table_reset_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo8_tbl_table_reset_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo8_tbl_table_reset_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo8_tbl_table_reset_default_entry");
  }

  netbufferv4_update_vallo8_tbl_table_reset_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo8_tbl_table_reset_default_entry", bytes);
  }

  netbufferv4_update_vallo8_tbl_table_reset_default_entry_result result;
  try {
    iface_->update_vallo8_tbl_table_reset_default_entry(args.sess_hdl, args.dev_tgt);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo8_tbl_table_reset_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo8_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo8_tbl_table_reset_default_entry");
  }

  oprot->writeMessageBegin("update_vallo8_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo8_tbl_table_reset_default_entry", bytes);
  }
}

void netbufferv4Processor::process_update_vallo9_tbl_table_reset_default_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo9_tbl_table_reset_default_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo9_tbl_table_reset_default_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo9_tbl_table_reset_default_entry");
  }

  netbufferv4_update_vallo9_tbl_table_reset_default_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo9_tbl_table_reset_default_entry", bytes);
  }

  netbufferv4_update_vallo9_tbl_table_reset_default_entry_result result;
  try {
    iface_->update_vallo9_tbl_table_reset_default_entry(args.sess_hdl, args.dev_tgt);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo9_tbl_table_reset_default_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo9_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo9_tbl_table_reset_default_entry");
  }

  oprot->writeMessageBegin("update_vallo9_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo9_tbl_table_reset_default_entry", bytes);
  }
}

void netbufferv4Processor::process_access_cache_frequency_tbl_get_entry_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cache_frequency_tbl_get_entry_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cache_frequency_tbl_get_entry_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cache_frequency_tbl_get_entry_count");
  }

  netbufferv4_access_cache_frequency_tbl_get_entry_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cache_frequency_tbl_get_entry_count", bytes);
  }

  netbufferv4_access_cache_frequency_tbl_get_entry_count_result result;
  try {
    result.success = iface_->access_cache_frequency_tbl_get_entry_count(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cache_frequency_tbl_get_entry_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cache_frequency_tbl_get_entry_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cache_frequency_tbl_get_entry_count");
  }

  oprot->writeMessageBegin("access_cache_frequency_tbl_get_entry_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cache_frequency_tbl_get_entry_count", bytes);
  }
}

void netbufferv4Processor::process_access_case1_tbl_get_entry_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_case1_tbl_get_entry_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_case1_tbl_get_entry_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_case1_tbl_get_entry_count");
  }

  netbufferv4_access_case1_tbl_get_entry_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_case1_tbl_get_entry_count", bytes);
  }

  netbufferv4_access_case1_tbl_get_entry_count_result result;
  try {
    result.success = iface_->access_case1_tbl_get_entry_count(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_case1_tbl_get_entry_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_case1_tbl_get_entry_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_case1_tbl_get_entry_count");
  }

  oprot->writeMessageBegin("access_case1_tbl_get_entry_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_case1_tbl_get_entry_count", bytes);
  }
}

void netbufferv4Processor::process_access_cm1_tbl_get_entry_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm1_tbl_get_entry_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm1_tbl_get_entry_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm1_tbl_get_entry_count");
  }

  netbufferv4_access_cm1_tbl_get_entry_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm1_tbl_get_entry_count", bytes);
  }

  netbufferv4_access_cm1_tbl_get_entry_count_result result;
  try {
    result.success = iface_->access_cm1_tbl_get_entry_count(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm1_tbl_get_entry_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm1_tbl_get_entry_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm1_tbl_get_entry_count");
  }

  oprot->writeMessageBegin("access_cm1_tbl_get_entry_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm1_tbl_get_entry_count", bytes);
  }
}

void netbufferv4Processor::process_access_cm2_tbl_get_entry_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm2_tbl_get_entry_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm2_tbl_get_entry_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm2_tbl_get_entry_count");
  }

  netbufferv4_access_cm2_tbl_get_entry_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm2_tbl_get_entry_count", bytes);
  }

  netbufferv4_access_cm2_tbl_get_entry_count_result result;
  try {
    result.success = iface_->access_cm2_tbl_get_entry_count(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm2_tbl_get_entry_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm2_tbl_get_entry_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm2_tbl_get_entry_count");
  }

  oprot->writeMessageBegin("access_cm2_tbl_get_entry_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm2_tbl_get_entry_count", bytes);
  }
}

void netbufferv4Processor::process_access_cm3_tbl_get_entry_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm3_tbl_get_entry_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm3_tbl_get_entry_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm3_tbl_get_entry_count");
  }

  netbufferv4_access_cm3_tbl_get_entry_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm3_tbl_get_entry_count", bytes);
  }

  netbufferv4_access_cm3_tbl_get_entry_count_result result;
  try {
    result.success = iface_->access_cm3_tbl_get_entry_count(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm3_tbl_get_entry_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm3_tbl_get_entry_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm3_tbl_get_entry_count");
  }

  oprot->writeMessageBegin("access_cm3_tbl_get_entry_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm3_tbl_get_entry_count", bytes);
  }
}

void netbufferv4Processor::process_access_cm4_tbl_get_entry_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm4_tbl_get_entry_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm4_tbl_get_entry_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm4_tbl_get_entry_count");
  }

  netbufferv4_access_cm4_tbl_get_entry_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm4_tbl_get_entry_count", bytes);
  }

  netbufferv4_access_cm4_tbl_get_entry_count_result result;
  try {
    result.success = iface_->access_cm4_tbl_get_entry_count(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm4_tbl_get_entry_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm4_tbl_get_entry_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm4_tbl_get_entry_count");
  }

  oprot->writeMessageBegin("access_cm4_tbl_get_entry_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm4_tbl_get_entry_count", bytes);
  }
}

void netbufferv4Processor::process_access_deleted_tbl_get_entry_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_deleted_tbl_get_entry_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_deleted_tbl_get_entry_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_deleted_tbl_get_entry_count");
  }

  netbufferv4_access_deleted_tbl_get_entry_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_deleted_tbl_get_entry_count", bytes);
  }

  netbufferv4_access_deleted_tbl_get_entry_count_result result;
  try {
    result.success = iface_->access_deleted_tbl_get_entry_count(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_deleted_tbl_get_entry_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_deleted_tbl_get_entry_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_deleted_tbl_get_entry_count");
  }

  oprot->writeMessageBegin("access_deleted_tbl_get_entry_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_deleted_tbl_get_entry_count", bytes);
  }
}

void netbufferv4Processor::process_access_latest_tbl_get_entry_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_latest_tbl_get_entry_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_latest_tbl_get_entry_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_latest_tbl_get_entry_count");
  }

  netbufferv4_access_latest_tbl_get_entry_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_latest_tbl_get_entry_count", bytes);
  }

  netbufferv4_access_latest_tbl_get_entry_count_result result;
  try {
    result.success = iface_->access_latest_tbl_get_entry_count(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_latest_tbl_get_entry_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_latest_tbl_get_entry_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_latest_tbl_get_entry_count");
  }

  oprot->writeMessageBegin("access_latest_tbl_get_entry_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_latest_tbl_get_entry_count", bytes);
  }
}

void netbufferv4Processor::process_access_savedseq_tbl_get_entry_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_savedseq_tbl_get_entry_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_savedseq_tbl_get_entry_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_savedseq_tbl_get_entry_count");
  }

  netbufferv4_access_savedseq_tbl_get_entry_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_savedseq_tbl_get_entry_count", bytes);
  }

  netbufferv4_access_savedseq_tbl_get_entry_count_result result;
  try {
    result.success = iface_->access_savedseq_tbl_get_entry_count(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_savedseq_tbl_get_entry_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_savedseq_tbl_get_entry_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_savedseq_tbl_get_entry_count");
  }

  oprot->writeMessageBegin("access_savedseq_tbl_get_entry_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_savedseq_tbl_get_entry_count", bytes);
  }
}

void netbufferv4Processor::process_access_seq_tbl_get_entry_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_seq_tbl_get_entry_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_seq_tbl_get_entry_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_seq_tbl_get_entry_count");
  }

  netbufferv4_access_seq_tbl_get_entry_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_seq_tbl_get_entry_count", bytes);
  }

  netbufferv4_access_seq_tbl_get_entry_count_result result;
  try {
    result.success = iface_->access_seq_tbl_get_entry_count(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_seq_tbl_get_entry_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_seq_tbl_get_entry_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_seq_tbl_get_entry_count");
  }

  oprot->writeMessageBegin("access_seq_tbl_get_entry_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_seq_tbl_get_entry_count", bytes);
  }
}

void netbufferv4Processor::process_access_validvalue_tbl_get_entry_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_validvalue_tbl_get_entry_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_validvalue_tbl_get_entry_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_validvalue_tbl_get_entry_count");
  }

  netbufferv4_access_validvalue_tbl_get_entry_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_validvalue_tbl_get_entry_count", bytes);
  }

  netbufferv4_access_validvalue_tbl_get_entry_count_result result;
  try {
    result.success = iface_->access_validvalue_tbl_get_entry_count(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_validvalue_tbl_get_entry_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_validvalue_tbl_get_entry_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_validvalue_tbl_get_entry_count");
  }

  oprot->writeMessageBegin("access_validvalue_tbl_get_entry_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_validvalue_tbl_get_entry_count", bytes);
  }
}

void netbufferv4Processor::process_add_and_remove_value_header_tbl_get_entry_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.add_and_remove_value_header_tbl_get_entry_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.add_and_remove_value_header_tbl_get_entry_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_get_entry_count");
  }

  netbufferv4_add_and_remove_value_header_tbl_get_entry_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_get_entry_count", bytes);
  }

  netbufferv4_add_and_remove_value_header_tbl_get_entry_count_result result;
  try {
    result.success = iface_->add_and_remove_value_header_tbl_get_entry_count(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.add_and_remove_value_header_tbl_get_entry_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("add_and_remove_value_header_tbl_get_entry_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_get_entry_count");
  }

  oprot->writeMessageBegin("add_and_remove_value_header_tbl_get_entry_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_get_entry_count", bytes);
  }
}

void netbufferv4Processor::process_cache_lookup_tbl_get_entry_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.cache_lookup_tbl_get_entry_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.cache_lookup_tbl_get_entry_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.cache_lookup_tbl_get_entry_count");
  }

  netbufferv4_cache_lookup_tbl_get_entry_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.cache_lookup_tbl_get_entry_count", bytes);
  }

  netbufferv4_cache_lookup_tbl_get_entry_count_result result;
  try {
    result.success = iface_->cache_lookup_tbl_get_entry_count(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.cache_lookup_tbl_get_entry_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("cache_lookup_tbl_get_entry_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.cache_lookup_tbl_get_entry_count");
  }

  oprot->writeMessageBegin("cache_lookup_tbl_get_entry_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.cache_lookup_tbl_get_entry_count", bytes);
  }
}

void netbufferv4Processor::process_drop_tbl_get_entry_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.drop_tbl_get_entry_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.drop_tbl_get_entry_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.drop_tbl_get_entry_count");
  }

  netbufferv4_drop_tbl_get_entry_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.drop_tbl_get_entry_count", bytes);
  }

  netbufferv4_drop_tbl_get_entry_count_result result;
  try {
    result.success = iface_->drop_tbl_get_entry_count(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.drop_tbl_get_entry_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("drop_tbl_get_entry_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.drop_tbl_get_entry_count");
  }

  oprot->writeMessageBegin("drop_tbl_get_entry_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.drop_tbl_get_entry_count", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_get_entry_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_get_entry_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_get_entry_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_get_entry_count");
  }

  netbufferv4_eg_port_forward_tbl_get_entry_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_get_entry_count", bytes);
  }

  netbufferv4_eg_port_forward_tbl_get_entry_count_result result;
  try {
    result.success = iface_->eg_port_forward_tbl_get_entry_count(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_get_entry_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_get_entry_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_get_entry_count");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_get_entry_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_get_entry_count", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm1_tbl_get_entry_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm1_tbl_get_entry_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm1_tbl_get_entry_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm1_tbl_get_entry_count");
  }

  netbufferv4_hash_for_cm1_tbl_get_entry_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm1_tbl_get_entry_count", bytes);
  }

  netbufferv4_hash_for_cm1_tbl_get_entry_count_result result;
  try {
    result.success = iface_->hash_for_cm1_tbl_get_entry_count(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm1_tbl_get_entry_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm1_tbl_get_entry_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm1_tbl_get_entry_count");
  }

  oprot->writeMessageBegin("hash_for_cm1_tbl_get_entry_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm1_tbl_get_entry_count", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm2_tbl_get_entry_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm2_tbl_get_entry_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm2_tbl_get_entry_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm2_tbl_get_entry_count");
  }

  netbufferv4_hash_for_cm2_tbl_get_entry_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm2_tbl_get_entry_count", bytes);
  }

  netbufferv4_hash_for_cm2_tbl_get_entry_count_result result;
  try {
    result.success = iface_->hash_for_cm2_tbl_get_entry_count(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm2_tbl_get_entry_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm2_tbl_get_entry_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm2_tbl_get_entry_count");
  }

  oprot->writeMessageBegin("hash_for_cm2_tbl_get_entry_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm2_tbl_get_entry_count", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm3_tbl_get_entry_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm3_tbl_get_entry_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm3_tbl_get_entry_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm3_tbl_get_entry_count");
  }

  netbufferv4_hash_for_cm3_tbl_get_entry_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm3_tbl_get_entry_count", bytes);
  }

  netbufferv4_hash_for_cm3_tbl_get_entry_count_result result;
  try {
    result.success = iface_->hash_for_cm3_tbl_get_entry_count(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm3_tbl_get_entry_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm3_tbl_get_entry_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm3_tbl_get_entry_count");
  }

  oprot->writeMessageBegin("hash_for_cm3_tbl_get_entry_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm3_tbl_get_entry_count", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm4_tbl_get_entry_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm4_tbl_get_entry_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm4_tbl_get_entry_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm4_tbl_get_entry_count");
  }

  netbufferv4_hash_for_cm4_tbl_get_entry_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm4_tbl_get_entry_count", bytes);
  }

  netbufferv4_hash_for_cm4_tbl_get_entry_count_result result;
  try {
    result.success = iface_->hash_for_cm4_tbl_get_entry_count(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm4_tbl_get_entry_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm4_tbl_get_entry_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm4_tbl_get_entry_count");
  }

  oprot->writeMessageBegin("hash_for_cm4_tbl_get_entry_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm4_tbl_get_entry_count", bytes);
  }
}

void netbufferv4Processor::process_hash_for_seq_tbl_get_entry_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_seq_tbl_get_entry_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_seq_tbl_get_entry_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_seq_tbl_get_entry_count");
  }

  netbufferv4_hash_for_seq_tbl_get_entry_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_seq_tbl_get_entry_count", bytes);
  }

  netbufferv4_hash_for_seq_tbl_get_entry_count_result result;
  try {
    result.success = iface_->hash_for_seq_tbl_get_entry_count(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_seq_tbl_get_entry_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_seq_tbl_get_entry_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_seq_tbl_get_entry_count");
  }

  oprot->writeMessageBegin("hash_for_seq_tbl_get_entry_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_seq_tbl_get_entry_count", bytes);
  }
}

void netbufferv4Processor::process_ig_port_forward_tbl_get_entry_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.ig_port_forward_tbl_get_entry_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.ig_port_forward_tbl_get_entry_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.ig_port_forward_tbl_get_entry_count");
  }

  netbufferv4_ig_port_forward_tbl_get_entry_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.ig_port_forward_tbl_get_entry_count", bytes);
  }

  netbufferv4_ig_port_forward_tbl_get_entry_count_result result;
  try {
    result.success = iface_->ig_port_forward_tbl_get_entry_count(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.ig_port_forward_tbl_get_entry_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ig_port_forward_tbl_get_entry_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.ig_port_forward_tbl_get_entry_count");
  }

  oprot->writeMessageBegin("ig_port_forward_tbl_get_entry_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.ig_port_forward_tbl_get_entry_count", bytes);
  }
}

void netbufferv4Processor::process_ipv4_forward_tbl_get_entry_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.ipv4_forward_tbl_get_entry_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.ipv4_forward_tbl_get_entry_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.ipv4_forward_tbl_get_entry_count");
  }

  netbufferv4_ipv4_forward_tbl_get_entry_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.ipv4_forward_tbl_get_entry_count", bytes);
  }

  netbufferv4_ipv4_forward_tbl_get_entry_count_result result;
  try {
    result.success = iface_->ipv4_forward_tbl_get_entry_count(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.ipv4_forward_tbl_get_entry_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ipv4_forward_tbl_get_entry_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.ipv4_forward_tbl_get_entry_count");
  }

  oprot->writeMessageBegin("ipv4_forward_tbl_get_entry_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.ipv4_forward_tbl_get_entry_count", bytes);
  }
}

void netbufferv4Processor::process_is_hot_tbl_get_entry_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.is_hot_tbl_get_entry_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.is_hot_tbl_get_entry_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.is_hot_tbl_get_entry_count");
  }

  netbufferv4_is_hot_tbl_get_entry_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.is_hot_tbl_get_entry_count", bytes);
  }

  netbufferv4_is_hot_tbl_get_entry_count_result result;
  try {
    result.success = iface_->is_hot_tbl_get_entry_count(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.is_hot_tbl_get_entry_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("is_hot_tbl_get_entry_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.is_hot_tbl_get_entry_count");
  }

  oprot->writeMessageBegin("is_hot_tbl_get_entry_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.is_hot_tbl_get_entry_count", bytes);
  }
}

void netbufferv4Processor::process_lastclone_lastscansplit_tbl_get_entry_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.lastclone_lastscansplit_tbl_get_entry_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.lastclone_lastscansplit_tbl_get_entry_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.lastclone_lastscansplit_tbl_get_entry_count");
  }

  netbufferv4_lastclone_lastscansplit_tbl_get_entry_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.lastclone_lastscansplit_tbl_get_entry_count", bytes);
  }

  netbufferv4_lastclone_lastscansplit_tbl_get_entry_count_result result;
  try {
    result.success = iface_->lastclone_lastscansplit_tbl_get_entry_count(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.lastclone_lastscansplit_tbl_get_entry_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("lastclone_lastscansplit_tbl_get_entry_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.lastclone_lastscansplit_tbl_get_entry_count");
  }

  oprot->writeMessageBegin("lastclone_lastscansplit_tbl_get_entry_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.lastclone_lastscansplit_tbl_get_entry_count", bytes);
  }
}

void netbufferv4Processor::process_need_recirculate_tbl_get_entry_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.need_recirculate_tbl_get_entry_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.need_recirculate_tbl_get_entry_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.need_recirculate_tbl_get_entry_count");
  }

  netbufferv4_need_recirculate_tbl_get_entry_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.need_recirculate_tbl_get_entry_count", bytes);
  }

  netbufferv4_need_recirculate_tbl_get_entry_count_result result;
  try {
    result.success = iface_->need_recirculate_tbl_get_entry_count(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.need_recirculate_tbl_get_entry_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("need_recirculate_tbl_get_entry_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.need_recirculate_tbl_get_entry_count");
  }

  oprot->writeMessageBegin("need_recirculate_tbl_get_entry_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.need_recirculate_tbl_get_entry_count", bytes);
  }
}

void netbufferv4Processor::process_prepare_for_cachehit_tbl_get_entry_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.prepare_for_cachehit_tbl_get_entry_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.prepare_for_cachehit_tbl_get_entry_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.prepare_for_cachehit_tbl_get_entry_count");
  }

  netbufferv4_prepare_for_cachehit_tbl_get_entry_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.prepare_for_cachehit_tbl_get_entry_count", bytes);
  }

  netbufferv4_prepare_for_cachehit_tbl_get_entry_count_result result;
  try {
    result.success = iface_->prepare_for_cachehit_tbl_get_entry_count(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.prepare_for_cachehit_tbl_get_entry_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("prepare_for_cachehit_tbl_get_entry_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.prepare_for_cachehit_tbl_get_entry_count");
  }

  oprot->writeMessageBegin("prepare_for_cachehit_tbl_get_entry_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.prepare_for_cachehit_tbl_get_entry_count", bytes);
  }
}

void netbufferv4Processor::process_process_scanreq_split_tbl_get_entry_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.process_scanreq_split_tbl_get_entry_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.process_scanreq_split_tbl_get_entry_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.process_scanreq_split_tbl_get_entry_count");
  }

  netbufferv4_process_scanreq_split_tbl_get_entry_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.process_scanreq_split_tbl_get_entry_count", bytes);
  }

  netbufferv4_process_scanreq_split_tbl_get_entry_count_result result;
  try {
    result.success = iface_->process_scanreq_split_tbl_get_entry_count(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.process_scanreq_split_tbl_get_entry_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("process_scanreq_split_tbl_get_entry_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.process_scanreq_split_tbl_get_entry_count");
  }

  oprot->writeMessageBegin("process_scanreq_split_tbl_get_entry_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.process_scanreq_split_tbl_get_entry_count", bytes);
  }
}

void netbufferv4Processor::process_range_partition_for_scan_endkey_tbl_get_entry_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.range_partition_for_scan_endkey_tbl_get_entry_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_get_entry_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_get_entry_count");
  }

  netbufferv4_range_partition_for_scan_endkey_tbl_get_entry_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_get_entry_count", bytes);
  }

  netbufferv4_range_partition_for_scan_endkey_tbl_get_entry_count_result result;
  try {
    result.success = iface_->range_partition_for_scan_endkey_tbl_get_entry_count(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_get_entry_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("range_partition_for_scan_endkey_tbl_get_entry_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_get_entry_count");
  }

  oprot->writeMessageBegin("range_partition_for_scan_endkey_tbl_get_entry_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_get_entry_count", bytes);
  }
}

void netbufferv4Processor::process_range_partition_tbl_get_entry_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.range_partition_tbl_get_entry_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.range_partition_tbl_get_entry_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.range_partition_tbl_get_entry_count");
  }

  netbufferv4_range_partition_tbl_get_entry_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.range_partition_tbl_get_entry_count", bytes);
  }

  netbufferv4_range_partition_tbl_get_entry_count_result result;
  try {
    result.success = iface_->range_partition_tbl_get_entry_count(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.range_partition_tbl_get_entry_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("range_partition_tbl_get_entry_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.range_partition_tbl_get_entry_count");
  }

  oprot->writeMessageBegin("range_partition_tbl_get_entry_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.range_partition_tbl_get_entry_count", bytes);
  }
}

void netbufferv4Processor::process_recirculate_tbl_get_entry_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.recirculate_tbl_get_entry_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.recirculate_tbl_get_entry_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.recirculate_tbl_get_entry_count");
  }

  netbufferv4_recirculate_tbl_get_entry_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.recirculate_tbl_get_entry_count", bytes);
  }

  netbufferv4_recirculate_tbl_get_entry_count_result result;
  try {
    result.success = iface_->recirculate_tbl_get_entry_count(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.recirculate_tbl_get_entry_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("recirculate_tbl_get_entry_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.recirculate_tbl_get_entry_count");
  }

  oprot->writeMessageBegin("recirculate_tbl_get_entry_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.recirculate_tbl_get_entry_count", bytes);
  }
}

void netbufferv4Processor::process_sample_tbl_get_entry_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.sample_tbl_get_entry_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.sample_tbl_get_entry_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.sample_tbl_get_entry_count");
  }

  netbufferv4_sample_tbl_get_entry_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.sample_tbl_get_entry_count", bytes);
  }

  netbufferv4_sample_tbl_get_entry_count_result result;
  try {
    result.success = iface_->sample_tbl_get_entry_count(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.sample_tbl_get_entry_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sample_tbl_get_entry_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.sample_tbl_get_entry_count");
  }

  oprot->writeMessageBegin("sample_tbl_get_entry_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.sample_tbl_get_entry_count", bytes);
  }
}

void netbufferv4Processor::process_save_client_udpport_tbl_get_entry_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.save_client_udpport_tbl_get_entry_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.save_client_udpport_tbl_get_entry_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.save_client_udpport_tbl_get_entry_count");
  }

  netbufferv4_save_client_udpport_tbl_get_entry_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.save_client_udpport_tbl_get_entry_count", bytes);
  }

  netbufferv4_save_client_udpport_tbl_get_entry_count_result result;
  try {
    result.success = iface_->save_client_udpport_tbl_get_entry_count(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.save_client_udpport_tbl_get_entry_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("save_client_udpport_tbl_get_entry_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.save_client_udpport_tbl_get_entry_count");
  }

  oprot->writeMessageBegin("save_client_udpport_tbl_get_entry_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.save_client_udpport_tbl_get_entry_count", bytes);
  }
}

void netbufferv4Processor::process_set_hot_threshold_tbl_get_entry_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.set_hot_threshold_tbl_get_entry_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.set_hot_threshold_tbl_get_entry_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.set_hot_threshold_tbl_get_entry_count");
  }

  netbufferv4_set_hot_threshold_tbl_get_entry_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.set_hot_threshold_tbl_get_entry_count", bytes);
  }

  netbufferv4_set_hot_threshold_tbl_get_entry_count_result result;
  try {
    result.success = iface_->set_hot_threshold_tbl_get_entry_count(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.set_hot_threshold_tbl_get_entry_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("set_hot_threshold_tbl_get_entry_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.set_hot_threshold_tbl_get_entry_count");
  }

  oprot->writeMessageBegin("set_hot_threshold_tbl_get_entry_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.set_hot_threshold_tbl_get_entry_count", bytes);
  }
}

void netbufferv4Processor::process_snapshot_flag_tbl_get_entry_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.snapshot_flag_tbl_get_entry_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.snapshot_flag_tbl_get_entry_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.snapshot_flag_tbl_get_entry_count");
  }

  netbufferv4_snapshot_flag_tbl_get_entry_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.snapshot_flag_tbl_get_entry_count", bytes);
  }

  netbufferv4_snapshot_flag_tbl_get_entry_count_result result;
  try {
    result.success = iface_->snapshot_flag_tbl_get_entry_count(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.snapshot_flag_tbl_get_entry_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("snapshot_flag_tbl_get_entry_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.snapshot_flag_tbl_get_entry_count");
  }

  oprot->writeMessageBegin("snapshot_flag_tbl_get_entry_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.snapshot_flag_tbl_get_entry_count", bytes);
  }
}

void netbufferv4Processor::process_update_ipmac_srcport_tbl_get_entry_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_ipmac_srcport_tbl_get_entry_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_ipmac_srcport_tbl_get_entry_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_ipmac_srcport_tbl_get_entry_count");
  }

  netbufferv4_update_ipmac_srcport_tbl_get_entry_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_ipmac_srcport_tbl_get_entry_count", bytes);
  }

  netbufferv4_update_ipmac_srcport_tbl_get_entry_count_result result;
  try {
    result.success = iface_->update_ipmac_srcport_tbl_get_entry_count(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_ipmac_srcport_tbl_get_entry_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_ipmac_srcport_tbl_get_entry_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_ipmac_srcport_tbl_get_entry_count");
  }

  oprot->writeMessageBegin("update_ipmac_srcport_tbl_get_entry_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_ipmac_srcport_tbl_get_entry_count", bytes);
  }
}

void netbufferv4Processor::process_update_pktlen_tbl_get_entry_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_pktlen_tbl_get_entry_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_pktlen_tbl_get_entry_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_pktlen_tbl_get_entry_count");
  }

  netbufferv4_update_pktlen_tbl_get_entry_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_pktlen_tbl_get_entry_count", bytes);
  }

  netbufferv4_update_pktlen_tbl_get_entry_count_result result;
  try {
    result.success = iface_->update_pktlen_tbl_get_entry_count(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_pktlen_tbl_get_entry_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_pktlen_tbl_get_entry_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_pktlen_tbl_get_entry_count");
  }

  oprot->writeMessageBegin("update_pktlen_tbl_get_entry_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_pktlen_tbl_get_entry_count", bytes);
  }
}

void netbufferv4Processor::process_update_valhi10_tbl_get_entry_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi10_tbl_get_entry_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi10_tbl_get_entry_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi10_tbl_get_entry_count");
  }

  netbufferv4_update_valhi10_tbl_get_entry_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi10_tbl_get_entry_count", bytes);
  }

  netbufferv4_update_valhi10_tbl_get_entry_count_result result;
  try {
    result.success = iface_->update_valhi10_tbl_get_entry_count(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi10_tbl_get_entry_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi10_tbl_get_entry_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi10_tbl_get_entry_count");
  }

  oprot->writeMessageBegin("update_valhi10_tbl_get_entry_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi10_tbl_get_entry_count", bytes);
  }
}

void netbufferv4Processor::process_update_valhi11_tbl_get_entry_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi11_tbl_get_entry_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi11_tbl_get_entry_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi11_tbl_get_entry_count");
  }

  netbufferv4_update_valhi11_tbl_get_entry_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi11_tbl_get_entry_count", bytes);
  }

  netbufferv4_update_valhi11_tbl_get_entry_count_result result;
  try {
    result.success = iface_->update_valhi11_tbl_get_entry_count(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi11_tbl_get_entry_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi11_tbl_get_entry_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi11_tbl_get_entry_count");
  }

  oprot->writeMessageBegin("update_valhi11_tbl_get_entry_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi11_tbl_get_entry_count", bytes);
  }
}

void netbufferv4Processor::process_update_valhi12_tbl_get_entry_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi12_tbl_get_entry_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi12_tbl_get_entry_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi12_tbl_get_entry_count");
  }

  netbufferv4_update_valhi12_tbl_get_entry_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi12_tbl_get_entry_count", bytes);
  }

  netbufferv4_update_valhi12_tbl_get_entry_count_result result;
  try {
    result.success = iface_->update_valhi12_tbl_get_entry_count(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi12_tbl_get_entry_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi12_tbl_get_entry_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi12_tbl_get_entry_count");
  }

  oprot->writeMessageBegin("update_valhi12_tbl_get_entry_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi12_tbl_get_entry_count", bytes);
  }
}

void netbufferv4Processor::process_update_valhi13_tbl_get_entry_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi13_tbl_get_entry_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi13_tbl_get_entry_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi13_tbl_get_entry_count");
  }

  netbufferv4_update_valhi13_tbl_get_entry_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi13_tbl_get_entry_count", bytes);
  }

  netbufferv4_update_valhi13_tbl_get_entry_count_result result;
  try {
    result.success = iface_->update_valhi13_tbl_get_entry_count(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi13_tbl_get_entry_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi13_tbl_get_entry_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi13_tbl_get_entry_count");
  }

  oprot->writeMessageBegin("update_valhi13_tbl_get_entry_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi13_tbl_get_entry_count", bytes);
  }
}

void netbufferv4Processor::process_update_valhi14_tbl_get_entry_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi14_tbl_get_entry_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi14_tbl_get_entry_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi14_tbl_get_entry_count");
  }

  netbufferv4_update_valhi14_tbl_get_entry_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi14_tbl_get_entry_count", bytes);
  }

  netbufferv4_update_valhi14_tbl_get_entry_count_result result;
  try {
    result.success = iface_->update_valhi14_tbl_get_entry_count(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi14_tbl_get_entry_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi14_tbl_get_entry_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi14_tbl_get_entry_count");
  }

  oprot->writeMessageBegin("update_valhi14_tbl_get_entry_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi14_tbl_get_entry_count", bytes);
  }
}

void netbufferv4Processor::process_update_valhi15_tbl_get_entry_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi15_tbl_get_entry_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi15_tbl_get_entry_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi15_tbl_get_entry_count");
  }

  netbufferv4_update_valhi15_tbl_get_entry_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi15_tbl_get_entry_count", bytes);
  }

  netbufferv4_update_valhi15_tbl_get_entry_count_result result;
  try {
    result.success = iface_->update_valhi15_tbl_get_entry_count(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi15_tbl_get_entry_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi15_tbl_get_entry_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi15_tbl_get_entry_count");
  }

  oprot->writeMessageBegin("update_valhi15_tbl_get_entry_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi15_tbl_get_entry_count", bytes);
  }
}

void netbufferv4Processor::process_update_valhi16_tbl_get_entry_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi16_tbl_get_entry_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi16_tbl_get_entry_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi16_tbl_get_entry_count");
  }

  netbufferv4_update_valhi16_tbl_get_entry_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi16_tbl_get_entry_count", bytes);
  }

  netbufferv4_update_valhi16_tbl_get_entry_count_result result;
  try {
    result.success = iface_->update_valhi16_tbl_get_entry_count(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi16_tbl_get_entry_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi16_tbl_get_entry_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi16_tbl_get_entry_count");
  }

  oprot->writeMessageBegin("update_valhi16_tbl_get_entry_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi16_tbl_get_entry_count", bytes);
  }
}

void netbufferv4Processor::process_update_valhi1_tbl_get_entry_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi1_tbl_get_entry_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi1_tbl_get_entry_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi1_tbl_get_entry_count");
  }

  netbufferv4_update_valhi1_tbl_get_entry_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi1_tbl_get_entry_count", bytes);
  }

  netbufferv4_update_valhi1_tbl_get_entry_count_result result;
  try {
    result.success = iface_->update_valhi1_tbl_get_entry_count(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi1_tbl_get_entry_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi1_tbl_get_entry_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi1_tbl_get_entry_count");
  }

  oprot->writeMessageBegin("update_valhi1_tbl_get_entry_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi1_tbl_get_entry_count", bytes);
  }
}

void netbufferv4Processor::process_update_valhi2_tbl_get_entry_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi2_tbl_get_entry_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi2_tbl_get_entry_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi2_tbl_get_entry_count");
  }

  netbufferv4_update_valhi2_tbl_get_entry_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi2_tbl_get_entry_count", bytes);
  }

  netbufferv4_update_valhi2_tbl_get_entry_count_result result;
  try {
    result.success = iface_->update_valhi2_tbl_get_entry_count(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi2_tbl_get_entry_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi2_tbl_get_entry_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi2_tbl_get_entry_count");
  }

  oprot->writeMessageBegin("update_valhi2_tbl_get_entry_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi2_tbl_get_entry_count", bytes);
  }
}

void netbufferv4Processor::process_update_valhi3_tbl_get_entry_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi3_tbl_get_entry_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi3_tbl_get_entry_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi3_tbl_get_entry_count");
  }

  netbufferv4_update_valhi3_tbl_get_entry_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi3_tbl_get_entry_count", bytes);
  }

  netbufferv4_update_valhi3_tbl_get_entry_count_result result;
  try {
    result.success = iface_->update_valhi3_tbl_get_entry_count(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi3_tbl_get_entry_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi3_tbl_get_entry_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi3_tbl_get_entry_count");
  }

  oprot->writeMessageBegin("update_valhi3_tbl_get_entry_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi3_tbl_get_entry_count", bytes);
  }
}

void netbufferv4Processor::process_update_valhi4_tbl_get_entry_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi4_tbl_get_entry_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi4_tbl_get_entry_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi4_tbl_get_entry_count");
  }

  netbufferv4_update_valhi4_tbl_get_entry_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi4_tbl_get_entry_count", bytes);
  }

  netbufferv4_update_valhi4_tbl_get_entry_count_result result;
  try {
    result.success = iface_->update_valhi4_tbl_get_entry_count(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi4_tbl_get_entry_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi4_tbl_get_entry_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi4_tbl_get_entry_count");
  }

  oprot->writeMessageBegin("update_valhi4_tbl_get_entry_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi4_tbl_get_entry_count", bytes);
  }
}

void netbufferv4Processor::process_update_valhi5_tbl_get_entry_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi5_tbl_get_entry_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi5_tbl_get_entry_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi5_tbl_get_entry_count");
  }

  netbufferv4_update_valhi5_tbl_get_entry_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi5_tbl_get_entry_count", bytes);
  }

  netbufferv4_update_valhi5_tbl_get_entry_count_result result;
  try {
    result.success = iface_->update_valhi5_tbl_get_entry_count(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi5_tbl_get_entry_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi5_tbl_get_entry_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi5_tbl_get_entry_count");
  }

  oprot->writeMessageBegin("update_valhi5_tbl_get_entry_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi5_tbl_get_entry_count", bytes);
  }
}

void netbufferv4Processor::process_update_valhi6_tbl_get_entry_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi6_tbl_get_entry_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi6_tbl_get_entry_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi6_tbl_get_entry_count");
  }

  netbufferv4_update_valhi6_tbl_get_entry_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi6_tbl_get_entry_count", bytes);
  }

  netbufferv4_update_valhi6_tbl_get_entry_count_result result;
  try {
    result.success = iface_->update_valhi6_tbl_get_entry_count(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi6_tbl_get_entry_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi6_tbl_get_entry_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi6_tbl_get_entry_count");
  }

  oprot->writeMessageBegin("update_valhi6_tbl_get_entry_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi6_tbl_get_entry_count", bytes);
  }
}

void netbufferv4Processor::process_update_valhi7_tbl_get_entry_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi7_tbl_get_entry_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi7_tbl_get_entry_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi7_tbl_get_entry_count");
  }

  netbufferv4_update_valhi7_tbl_get_entry_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi7_tbl_get_entry_count", bytes);
  }

  netbufferv4_update_valhi7_tbl_get_entry_count_result result;
  try {
    result.success = iface_->update_valhi7_tbl_get_entry_count(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi7_tbl_get_entry_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi7_tbl_get_entry_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi7_tbl_get_entry_count");
  }

  oprot->writeMessageBegin("update_valhi7_tbl_get_entry_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi7_tbl_get_entry_count", bytes);
  }
}

void netbufferv4Processor::process_update_valhi8_tbl_get_entry_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi8_tbl_get_entry_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi8_tbl_get_entry_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi8_tbl_get_entry_count");
  }

  netbufferv4_update_valhi8_tbl_get_entry_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi8_tbl_get_entry_count", bytes);
  }

  netbufferv4_update_valhi8_tbl_get_entry_count_result result;
  try {
    result.success = iface_->update_valhi8_tbl_get_entry_count(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi8_tbl_get_entry_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi8_tbl_get_entry_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi8_tbl_get_entry_count");
  }

  oprot->writeMessageBegin("update_valhi8_tbl_get_entry_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi8_tbl_get_entry_count", bytes);
  }
}

void netbufferv4Processor::process_update_valhi9_tbl_get_entry_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi9_tbl_get_entry_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi9_tbl_get_entry_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi9_tbl_get_entry_count");
  }

  netbufferv4_update_valhi9_tbl_get_entry_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi9_tbl_get_entry_count", bytes);
  }

  netbufferv4_update_valhi9_tbl_get_entry_count_result result;
  try {
    result.success = iface_->update_valhi9_tbl_get_entry_count(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi9_tbl_get_entry_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi9_tbl_get_entry_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi9_tbl_get_entry_count");
  }

  oprot->writeMessageBegin("update_valhi9_tbl_get_entry_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi9_tbl_get_entry_count", bytes);
  }
}

void netbufferv4Processor::process_update_vallen_tbl_get_entry_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallen_tbl_get_entry_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallen_tbl_get_entry_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallen_tbl_get_entry_count");
  }

  netbufferv4_update_vallen_tbl_get_entry_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallen_tbl_get_entry_count", bytes);
  }

  netbufferv4_update_vallen_tbl_get_entry_count_result result;
  try {
    result.success = iface_->update_vallen_tbl_get_entry_count(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallen_tbl_get_entry_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallen_tbl_get_entry_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallen_tbl_get_entry_count");
  }

  oprot->writeMessageBegin("update_vallen_tbl_get_entry_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallen_tbl_get_entry_count", bytes);
  }
}

void netbufferv4Processor::process_update_vallo10_tbl_get_entry_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo10_tbl_get_entry_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo10_tbl_get_entry_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo10_tbl_get_entry_count");
  }

  netbufferv4_update_vallo10_tbl_get_entry_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo10_tbl_get_entry_count", bytes);
  }

  netbufferv4_update_vallo10_tbl_get_entry_count_result result;
  try {
    result.success = iface_->update_vallo10_tbl_get_entry_count(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo10_tbl_get_entry_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo10_tbl_get_entry_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo10_tbl_get_entry_count");
  }

  oprot->writeMessageBegin("update_vallo10_tbl_get_entry_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo10_tbl_get_entry_count", bytes);
  }
}

void netbufferv4Processor::process_update_vallo11_tbl_get_entry_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo11_tbl_get_entry_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo11_tbl_get_entry_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo11_tbl_get_entry_count");
  }

  netbufferv4_update_vallo11_tbl_get_entry_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo11_tbl_get_entry_count", bytes);
  }

  netbufferv4_update_vallo11_tbl_get_entry_count_result result;
  try {
    result.success = iface_->update_vallo11_tbl_get_entry_count(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo11_tbl_get_entry_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo11_tbl_get_entry_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo11_tbl_get_entry_count");
  }

  oprot->writeMessageBegin("update_vallo11_tbl_get_entry_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo11_tbl_get_entry_count", bytes);
  }
}

void netbufferv4Processor::process_update_vallo12_tbl_get_entry_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo12_tbl_get_entry_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo12_tbl_get_entry_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo12_tbl_get_entry_count");
  }

  netbufferv4_update_vallo12_tbl_get_entry_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo12_tbl_get_entry_count", bytes);
  }

  netbufferv4_update_vallo12_tbl_get_entry_count_result result;
  try {
    result.success = iface_->update_vallo12_tbl_get_entry_count(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo12_tbl_get_entry_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo12_tbl_get_entry_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo12_tbl_get_entry_count");
  }

  oprot->writeMessageBegin("update_vallo12_tbl_get_entry_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo12_tbl_get_entry_count", bytes);
  }
}

void netbufferv4Processor::process_update_vallo13_tbl_get_entry_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo13_tbl_get_entry_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo13_tbl_get_entry_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo13_tbl_get_entry_count");
  }

  netbufferv4_update_vallo13_tbl_get_entry_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo13_tbl_get_entry_count", bytes);
  }

  netbufferv4_update_vallo13_tbl_get_entry_count_result result;
  try {
    result.success = iface_->update_vallo13_tbl_get_entry_count(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo13_tbl_get_entry_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo13_tbl_get_entry_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo13_tbl_get_entry_count");
  }

  oprot->writeMessageBegin("update_vallo13_tbl_get_entry_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo13_tbl_get_entry_count", bytes);
  }
}

void netbufferv4Processor::process_update_vallo14_tbl_get_entry_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo14_tbl_get_entry_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo14_tbl_get_entry_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo14_tbl_get_entry_count");
  }

  netbufferv4_update_vallo14_tbl_get_entry_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo14_tbl_get_entry_count", bytes);
  }

  netbufferv4_update_vallo14_tbl_get_entry_count_result result;
  try {
    result.success = iface_->update_vallo14_tbl_get_entry_count(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo14_tbl_get_entry_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo14_tbl_get_entry_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo14_tbl_get_entry_count");
  }

  oprot->writeMessageBegin("update_vallo14_tbl_get_entry_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo14_tbl_get_entry_count", bytes);
  }
}

void netbufferv4Processor::process_update_vallo15_tbl_get_entry_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo15_tbl_get_entry_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo15_tbl_get_entry_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo15_tbl_get_entry_count");
  }

  netbufferv4_update_vallo15_tbl_get_entry_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo15_tbl_get_entry_count", bytes);
  }

  netbufferv4_update_vallo15_tbl_get_entry_count_result result;
  try {
    result.success = iface_->update_vallo15_tbl_get_entry_count(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo15_tbl_get_entry_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo15_tbl_get_entry_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo15_tbl_get_entry_count");
  }

  oprot->writeMessageBegin("update_vallo15_tbl_get_entry_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo15_tbl_get_entry_count", bytes);
  }
}

void netbufferv4Processor::process_update_vallo16_tbl_get_entry_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo16_tbl_get_entry_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo16_tbl_get_entry_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo16_tbl_get_entry_count");
  }

  netbufferv4_update_vallo16_tbl_get_entry_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo16_tbl_get_entry_count", bytes);
  }

  netbufferv4_update_vallo16_tbl_get_entry_count_result result;
  try {
    result.success = iface_->update_vallo16_tbl_get_entry_count(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo16_tbl_get_entry_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo16_tbl_get_entry_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo16_tbl_get_entry_count");
  }

  oprot->writeMessageBegin("update_vallo16_tbl_get_entry_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo16_tbl_get_entry_count", bytes);
  }
}

void netbufferv4Processor::process_update_vallo1_tbl_get_entry_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo1_tbl_get_entry_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo1_tbl_get_entry_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo1_tbl_get_entry_count");
  }

  netbufferv4_update_vallo1_tbl_get_entry_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo1_tbl_get_entry_count", bytes);
  }

  netbufferv4_update_vallo1_tbl_get_entry_count_result result;
  try {
    result.success = iface_->update_vallo1_tbl_get_entry_count(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo1_tbl_get_entry_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo1_tbl_get_entry_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo1_tbl_get_entry_count");
  }

  oprot->writeMessageBegin("update_vallo1_tbl_get_entry_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo1_tbl_get_entry_count", bytes);
  }
}

void netbufferv4Processor::process_update_vallo2_tbl_get_entry_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo2_tbl_get_entry_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo2_tbl_get_entry_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo2_tbl_get_entry_count");
  }

  netbufferv4_update_vallo2_tbl_get_entry_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo2_tbl_get_entry_count", bytes);
  }

  netbufferv4_update_vallo2_tbl_get_entry_count_result result;
  try {
    result.success = iface_->update_vallo2_tbl_get_entry_count(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo2_tbl_get_entry_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo2_tbl_get_entry_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo2_tbl_get_entry_count");
  }

  oprot->writeMessageBegin("update_vallo2_tbl_get_entry_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo2_tbl_get_entry_count", bytes);
  }
}

void netbufferv4Processor::process_update_vallo3_tbl_get_entry_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo3_tbl_get_entry_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo3_tbl_get_entry_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo3_tbl_get_entry_count");
  }

  netbufferv4_update_vallo3_tbl_get_entry_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo3_tbl_get_entry_count", bytes);
  }

  netbufferv4_update_vallo3_tbl_get_entry_count_result result;
  try {
    result.success = iface_->update_vallo3_tbl_get_entry_count(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo3_tbl_get_entry_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo3_tbl_get_entry_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo3_tbl_get_entry_count");
  }

  oprot->writeMessageBegin("update_vallo3_tbl_get_entry_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo3_tbl_get_entry_count", bytes);
  }
}

void netbufferv4Processor::process_update_vallo4_tbl_get_entry_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo4_tbl_get_entry_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo4_tbl_get_entry_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo4_tbl_get_entry_count");
  }

  netbufferv4_update_vallo4_tbl_get_entry_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo4_tbl_get_entry_count", bytes);
  }

  netbufferv4_update_vallo4_tbl_get_entry_count_result result;
  try {
    result.success = iface_->update_vallo4_tbl_get_entry_count(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo4_tbl_get_entry_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo4_tbl_get_entry_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo4_tbl_get_entry_count");
  }

  oprot->writeMessageBegin("update_vallo4_tbl_get_entry_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo4_tbl_get_entry_count", bytes);
  }
}

void netbufferv4Processor::process_update_vallo5_tbl_get_entry_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo5_tbl_get_entry_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo5_tbl_get_entry_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo5_tbl_get_entry_count");
  }

  netbufferv4_update_vallo5_tbl_get_entry_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo5_tbl_get_entry_count", bytes);
  }

  netbufferv4_update_vallo5_tbl_get_entry_count_result result;
  try {
    result.success = iface_->update_vallo5_tbl_get_entry_count(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo5_tbl_get_entry_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo5_tbl_get_entry_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo5_tbl_get_entry_count");
  }

  oprot->writeMessageBegin("update_vallo5_tbl_get_entry_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo5_tbl_get_entry_count", bytes);
  }
}

void netbufferv4Processor::process_update_vallo6_tbl_get_entry_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo6_tbl_get_entry_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo6_tbl_get_entry_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo6_tbl_get_entry_count");
  }

  netbufferv4_update_vallo6_tbl_get_entry_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo6_tbl_get_entry_count", bytes);
  }

  netbufferv4_update_vallo6_tbl_get_entry_count_result result;
  try {
    result.success = iface_->update_vallo6_tbl_get_entry_count(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo6_tbl_get_entry_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo6_tbl_get_entry_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo6_tbl_get_entry_count");
  }

  oprot->writeMessageBegin("update_vallo6_tbl_get_entry_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo6_tbl_get_entry_count", bytes);
  }
}

void netbufferv4Processor::process_update_vallo7_tbl_get_entry_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo7_tbl_get_entry_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo7_tbl_get_entry_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo7_tbl_get_entry_count");
  }

  netbufferv4_update_vallo7_tbl_get_entry_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo7_tbl_get_entry_count", bytes);
  }

  netbufferv4_update_vallo7_tbl_get_entry_count_result result;
  try {
    result.success = iface_->update_vallo7_tbl_get_entry_count(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo7_tbl_get_entry_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo7_tbl_get_entry_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo7_tbl_get_entry_count");
  }

  oprot->writeMessageBegin("update_vallo7_tbl_get_entry_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo7_tbl_get_entry_count", bytes);
  }
}

void netbufferv4Processor::process_update_vallo8_tbl_get_entry_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo8_tbl_get_entry_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo8_tbl_get_entry_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo8_tbl_get_entry_count");
  }

  netbufferv4_update_vallo8_tbl_get_entry_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo8_tbl_get_entry_count", bytes);
  }

  netbufferv4_update_vallo8_tbl_get_entry_count_result result;
  try {
    result.success = iface_->update_vallo8_tbl_get_entry_count(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo8_tbl_get_entry_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo8_tbl_get_entry_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo8_tbl_get_entry_count");
  }

  oprot->writeMessageBegin("update_vallo8_tbl_get_entry_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo8_tbl_get_entry_count", bytes);
  }
}

void netbufferv4Processor::process_update_vallo9_tbl_get_entry_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo9_tbl_get_entry_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo9_tbl_get_entry_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo9_tbl_get_entry_count");
  }

  netbufferv4_update_vallo9_tbl_get_entry_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo9_tbl_get_entry_count", bytes);
  }

  netbufferv4_update_vallo9_tbl_get_entry_count_result result;
  try {
    result.success = iface_->update_vallo9_tbl_get_entry_count(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo9_tbl_get_entry_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo9_tbl_get_entry_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo9_tbl_get_entry_count");
  }

  oprot->writeMessageBegin("update_vallo9_tbl_get_entry_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo9_tbl_get_entry_count", bytes);
  }
}

void netbufferv4Processor::process_access_cache_frequency_tbl_get_first_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cache_frequency_tbl_get_first_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cache_frequency_tbl_get_first_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cache_frequency_tbl_get_first_entry_handle");
  }

  netbufferv4_access_cache_frequency_tbl_get_first_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cache_frequency_tbl_get_first_entry_handle", bytes);
  }

  netbufferv4_access_cache_frequency_tbl_get_first_entry_handle_result result;
  try {
    result.success = iface_->access_cache_frequency_tbl_get_first_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cache_frequency_tbl_get_first_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cache_frequency_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cache_frequency_tbl_get_first_entry_handle");
  }

  oprot->writeMessageBegin("access_cache_frequency_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cache_frequency_tbl_get_first_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_access_cache_frequency_tbl_get_next_entry_handles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cache_frequency_tbl_get_next_entry_handles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cache_frequency_tbl_get_next_entry_handles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cache_frequency_tbl_get_next_entry_handles");
  }

  netbufferv4_access_cache_frequency_tbl_get_next_entry_handles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cache_frequency_tbl_get_next_entry_handles", bytes);
  }

  netbufferv4_access_cache_frequency_tbl_get_next_entry_handles_result result;
  try {
    iface_->access_cache_frequency_tbl_get_next_entry_handles(result.success, args.sess_hdl, args.dev_tgt, args.entry_hdl, args.n);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cache_frequency_tbl_get_next_entry_handles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cache_frequency_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cache_frequency_tbl_get_next_entry_handles");
  }

  oprot->writeMessageBegin("access_cache_frequency_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cache_frequency_tbl_get_next_entry_handles", bytes);
  }
}

void netbufferv4Processor::process_access_cache_frequency_tbl_get_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cache_frequency_tbl_get_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cache_frequency_tbl_get_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cache_frequency_tbl_get_entry");
  }

  netbufferv4_access_cache_frequency_tbl_get_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cache_frequency_tbl_get_entry", bytes);
  }

  netbufferv4_access_cache_frequency_tbl_get_entry_result result;
  try {
    iface_->access_cache_frequency_tbl_get_entry(result.success, args.sess_hdl, args.dev_id, args.entry_hdl, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cache_frequency_tbl_get_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cache_frequency_tbl_get_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cache_frequency_tbl_get_entry");
  }

  oprot->writeMessageBegin("access_cache_frequency_tbl_get_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cache_frequency_tbl_get_entry", bytes);
  }
}

void netbufferv4Processor::process_access_case1_tbl_get_first_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_case1_tbl_get_first_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_case1_tbl_get_first_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_case1_tbl_get_first_entry_handle");
  }

  netbufferv4_access_case1_tbl_get_first_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_case1_tbl_get_first_entry_handle", bytes);
  }

  netbufferv4_access_case1_tbl_get_first_entry_handle_result result;
  try {
    result.success = iface_->access_case1_tbl_get_first_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_case1_tbl_get_first_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_case1_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_case1_tbl_get_first_entry_handle");
  }

  oprot->writeMessageBegin("access_case1_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_case1_tbl_get_first_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_access_case1_tbl_get_next_entry_handles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_case1_tbl_get_next_entry_handles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_case1_tbl_get_next_entry_handles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_case1_tbl_get_next_entry_handles");
  }

  netbufferv4_access_case1_tbl_get_next_entry_handles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_case1_tbl_get_next_entry_handles", bytes);
  }

  netbufferv4_access_case1_tbl_get_next_entry_handles_result result;
  try {
    iface_->access_case1_tbl_get_next_entry_handles(result.success, args.sess_hdl, args.dev_tgt, args.entry_hdl, args.n);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_case1_tbl_get_next_entry_handles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_case1_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_case1_tbl_get_next_entry_handles");
  }

  oprot->writeMessageBegin("access_case1_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_case1_tbl_get_next_entry_handles", bytes);
  }
}

void netbufferv4Processor::process_access_case1_tbl_get_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_case1_tbl_get_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_case1_tbl_get_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_case1_tbl_get_entry");
  }

  netbufferv4_access_case1_tbl_get_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_case1_tbl_get_entry", bytes);
  }

  netbufferv4_access_case1_tbl_get_entry_result result;
  try {
    iface_->access_case1_tbl_get_entry(result.success, args.sess_hdl, args.dev_id, args.entry_hdl, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_case1_tbl_get_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_case1_tbl_get_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_case1_tbl_get_entry");
  }

  oprot->writeMessageBegin("access_case1_tbl_get_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_case1_tbl_get_entry", bytes);
  }
}

void netbufferv4Processor::process_access_cm1_tbl_get_first_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm1_tbl_get_first_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm1_tbl_get_first_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm1_tbl_get_first_entry_handle");
  }

  netbufferv4_access_cm1_tbl_get_first_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm1_tbl_get_first_entry_handle", bytes);
  }

  netbufferv4_access_cm1_tbl_get_first_entry_handle_result result;
  try {
    result.success = iface_->access_cm1_tbl_get_first_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm1_tbl_get_first_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm1_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm1_tbl_get_first_entry_handle");
  }

  oprot->writeMessageBegin("access_cm1_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm1_tbl_get_first_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_access_cm1_tbl_get_next_entry_handles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm1_tbl_get_next_entry_handles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm1_tbl_get_next_entry_handles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm1_tbl_get_next_entry_handles");
  }

  netbufferv4_access_cm1_tbl_get_next_entry_handles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm1_tbl_get_next_entry_handles", bytes);
  }

  netbufferv4_access_cm1_tbl_get_next_entry_handles_result result;
  try {
    iface_->access_cm1_tbl_get_next_entry_handles(result.success, args.sess_hdl, args.dev_tgt, args.entry_hdl, args.n);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm1_tbl_get_next_entry_handles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm1_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm1_tbl_get_next_entry_handles");
  }

  oprot->writeMessageBegin("access_cm1_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm1_tbl_get_next_entry_handles", bytes);
  }
}

void netbufferv4Processor::process_access_cm1_tbl_get_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm1_tbl_get_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm1_tbl_get_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm1_tbl_get_entry");
  }

  netbufferv4_access_cm1_tbl_get_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm1_tbl_get_entry", bytes);
  }

  netbufferv4_access_cm1_tbl_get_entry_result result;
  try {
    iface_->access_cm1_tbl_get_entry(result.success, args.sess_hdl, args.dev_id, args.entry_hdl, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm1_tbl_get_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm1_tbl_get_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm1_tbl_get_entry");
  }

  oprot->writeMessageBegin("access_cm1_tbl_get_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm1_tbl_get_entry", bytes);
  }
}

void netbufferv4Processor::process_access_cm2_tbl_get_first_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm2_tbl_get_first_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm2_tbl_get_first_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm2_tbl_get_first_entry_handle");
  }

  netbufferv4_access_cm2_tbl_get_first_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm2_tbl_get_first_entry_handle", bytes);
  }

  netbufferv4_access_cm2_tbl_get_first_entry_handle_result result;
  try {
    result.success = iface_->access_cm2_tbl_get_first_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm2_tbl_get_first_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm2_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm2_tbl_get_first_entry_handle");
  }

  oprot->writeMessageBegin("access_cm2_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm2_tbl_get_first_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_access_cm2_tbl_get_next_entry_handles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm2_tbl_get_next_entry_handles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm2_tbl_get_next_entry_handles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm2_tbl_get_next_entry_handles");
  }

  netbufferv4_access_cm2_tbl_get_next_entry_handles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm2_tbl_get_next_entry_handles", bytes);
  }

  netbufferv4_access_cm2_tbl_get_next_entry_handles_result result;
  try {
    iface_->access_cm2_tbl_get_next_entry_handles(result.success, args.sess_hdl, args.dev_tgt, args.entry_hdl, args.n);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm2_tbl_get_next_entry_handles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm2_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm2_tbl_get_next_entry_handles");
  }

  oprot->writeMessageBegin("access_cm2_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm2_tbl_get_next_entry_handles", bytes);
  }
}

void netbufferv4Processor::process_access_cm2_tbl_get_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm2_tbl_get_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm2_tbl_get_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm2_tbl_get_entry");
  }

  netbufferv4_access_cm2_tbl_get_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm2_tbl_get_entry", bytes);
  }

  netbufferv4_access_cm2_tbl_get_entry_result result;
  try {
    iface_->access_cm2_tbl_get_entry(result.success, args.sess_hdl, args.dev_id, args.entry_hdl, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm2_tbl_get_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm2_tbl_get_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm2_tbl_get_entry");
  }

  oprot->writeMessageBegin("access_cm2_tbl_get_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm2_tbl_get_entry", bytes);
  }
}

void netbufferv4Processor::process_access_cm3_tbl_get_first_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm3_tbl_get_first_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm3_tbl_get_first_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm3_tbl_get_first_entry_handle");
  }

  netbufferv4_access_cm3_tbl_get_first_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm3_tbl_get_first_entry_handle", bytes);
  }

  netbufferv4_access_cm3_tbl_get_first_entry_handle_result result;
  try {
    result.success = iface_->access_cm3_tbl_get_first_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm3_tbl_get_first_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm3_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm3_tbl_get_first_entry_handle");
  }

  oprot->writeMessageBegin("access_cm3_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm3_tbl_get_first_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_access_cm3_tbl_get_next_entry_handles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm3_tbl_get_next_entry_handles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm3_tbl_get_next_entry_handles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm3_tbl_get_next_entry_handles");
  }

  netbufferv4_access_cm3_tbl_get_next_entry_handles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm3_tbl_get_next_entry_handles", bytes);
  }

  netbufferv4_access_cm3_tbl_get_next_entry_handles_result result;
  try {
    iface_->access_cm3_tbl_get_next_entry_handles(result.success, args.sess_hdl, args.dev_tgt, args.entry_hdl, args.n);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm3_tbl_get_next_entry_handles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm3_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm3_tbl_get_next_entry_handles");
  }

  oprot->writeMessageBegin("access_cm3_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm3_tbl_get_next_entry_handles", bytes);
  }
}

void netbufferv4Processor::process_access_cm3_tbl_get_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm3_tbl_get_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm3_tbl_get_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm3_tbl_get_entry");
  }

  netbufferv4_access_cm3_tbl_get_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm3_tbl_get_entry", bytes);
  }

  netbufferv4_access_cm3_tbl_get_entry_result result;
  try {
    iface_->access_cm3_tbl_get_entry(result.success, args.sess_hdl, args.dev_id, args.entry_hdl, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm3_tbl_get_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm3_tbl_get_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm3_tbl_get_entry");
  }

  oprot->writeMessageBegin("access_cm3_tbl_get_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm3_tbl_get_entry", bytes);
  }
}

void netbufferv4Processor::process_access_cm4_tbl_get_first_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm4_tbl_get_first_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm4_tbl_get_first_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm4_tbl_get_first_entry_handle");
  }

  netbufferv4_access_cm4_tbl_get_first_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm4_tbl_get_first_entry_handle", bytes);
  }

  netbufferv4_access_cm4_tbl_get_first_entry_handle_result result;
  try {
    result.success = iface_->access_cm4_tbl_get_first_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm4_tbl_get_first_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm4_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm4_tbl_get_first_entry_handle");
  }

  oprot->writeMessageBegin("access_cm4_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm4_tbl_get_first_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_access_cm4_tbl_get_next_entry_handles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm4_tbl_get_next_entry_handles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm4_tbl_get_next_entry_handles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm4_tbl_get_next_entry_handles");
  }

  netbufferv4_access_cm4_tbl_get_next_entry_handles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm4_tbl_get_next_entry_handles", bytes);
  }

  netbufferv4_access_cm4_tbl_get_next_entry_handles_result result;
  try {
    iface_->access_cm4_tbl_get_next_entry_handles(result.success, args.sess_hdl, args.dev_tgt, args.entry_hdl, args.n);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm4_tbl_get_next_entry_handles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm4_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm4_tbl_get_next_entry_handles");
  }

  oprot->writeMessageBegin("access_cm4_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm4_tbl_get_next_entry_handles", bytes);
  }
}

void netbufferv4Processor::process_access_cm4_tbl_get_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm4_tbl_get_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm4_tbl_get_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm4_tbl_get_entry");
  }

  netbufferv4_access_cm4_tbl_get_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm4_tbl_get_entry", bytes);
  }

  netbufferv4_access_cm4_tbl_get_entry_result result;
  try {
    iface_->access_cm4_tbl_get_entry(result.success, args.sess_hdl, args.dev_id, args.entry_hdl, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm4_tbl_get_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm4_tbl_get_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm4_tbl_get_entry");
  }

  oprot->writeMessageBegin("access_cm4_tbl_get_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm4_tbl_get_entry", bytes);
  }
}

void netbufferv4Processor::process_access_deleted_tbl_get_first_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_deleted_tbl_get_first_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_deleted_tbl_get_first_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_deleted_tbl_get_first_entry_handle");
  }

  netbufferv4_access_deleted_tbl_get_first_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_deleted_tbl_get_first_entry_handle", bytes);
  }

  netbufferv4_access_deleted_tbl_get_first_entry_handle_result result;
  try {
    result.success = iface_->access_deleted_tbl_get_first_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_deleted_tbl_get_first_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_deleted_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_deleted_tbl_get_first_entry_handle");
  }

  oprot->writeMessageBegin("access_deleted_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_deleted_tbl_get_first_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_access_deleted_tbl_get_next_entry_handles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_deleted_tbl_get_next_entry_handles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_deleted_tbl_get_next_entry_handles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_deleted_tbl_get_next_entry_handles");
  }

  netbufferv4_access_deleted_tbl_get_next_entry_handles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_deleted_tbl_get_next_entry_handles", bytes);
  }

  netbufferv4_access_deleted_tbl_get_next_entry_handles_result result;
  try {
    iface_->access_deleted_tbl_get_next_entry_handles(result.success, args.sess_hdl, args.dev_tgt, args.entry_hdl, args.n);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_deleted_tbl_get_next_entry_handles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_deleted_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_deleted_tbl_get_next_entry_handles");
  }

  oprot->writeMessageBegin("access_deleted_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_deleted_tbl_get_next_entry_handles", bytes);
  }
}

void netbufferv4Processor::process_access_deleted_tbl_get_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_deleted_tbl_get_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_deleted_tbl_get_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_deleted_tbl_get_entry");
  }

  netbufferv4_access_deleted_tbl_get_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_deleted_tbl_get_entry", bytes);
  }

  netbufferv4_access_deleted_tbl_get_entry_result result;
  try {
    iface_->access_deleted_tbl_get_entry(result.success, args.sess_hdl, args.dev_id, args.entry_hdl, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_deleted_tbl_get_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_deleted_tbl_get_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_deleted_tbl_get_entry");
  }

  oprot->writeMessageBegin("access_deleted_tbl_get_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_deleted_tbl_get_entry", bytes);
  }
}

void netbufferv4Processor::process_access_latest_tbl_get_first_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_latest_tbl_get_first_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_latest_tbl_get_first_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_latest_tbl_get_first_entry_handle");
  }

  netbufferv4_access_latest_tbl_get_first_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_latest_tbl_get_first_entry_handle", bytes);
  }

  netbufferv4_access_latest_tbl_get_first_entry_handle_result result;
  try {
    result.success = iface_->access_latest_tbl_get_first_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_latest_tbl_get_first_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_latest_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_latest_tbl_get_first_entry_handle");
  }

  oprot->writeMessageBegin("access_latest_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_latest_tbl_get_first_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_access_latest_tbl_get_next_entry_handles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_latest_tbl_get_next_entry_handles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_latest_tbl_get_next_entry_handles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_latest_tbl_get_next_entry_handles");
  }

  netbufferv4_access_latest_tbl_get_next_entry_handles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_latest_tbl_get_next_entry_handles", bytes);
  }

  netbufferv4_access_latest_tbl_get_next_entry_handles_result result;
  try {
    iface_->access_latest_tbl_get_next_entry_handles(result.success, args.sess_hdl, args.dev_tgt, args.entry_hdl, args.n);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_latest_tbl_get_next_entry_handles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_latest_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_latest_tbl_get_next_entry_handles");
  }

  oprot->writeMessageBegin("access_latest_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_latest_tbl_get_next_entry_handles", bytes);
  }
}

void netbufferv4Processor::process_access_latest_tbl_get_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_latest_tbl_get_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_latest_tbl_get_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_latest_tbl_get_entry");
  }

  netbufferv4_access_latest_tbl_get_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_latest_tbl_get_entry", bytes);
  }

  netbufferv4_access_latest_tbl_get_entry_result result;
  try {
    iface_->access_latest_tbl_get_entry(result.success, args.sess_hdl, args.dev_id, args.entry_hdl, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_latest_tbl_get_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_latest_tbl_get_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_latest_tbl_get_entry");
  }

  oprot->writeMessageBegin("access_latest_tbl_get_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_latest_tbl_get_entry", bytes);
  }
}

void netbufferv4Processor::process_access_savedseq_tbl_get_first_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_savedseq_tbl_get_first_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_savedseq_tbl_get_first_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_savedseq_tbl_get_first_entry_handle");
  }

  netbufferv4_access_savedseq_tbl_get_first_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_savedseq_tbl_get_first_entry_handle", bytes);
  }

  netbufferv4_access_savedseq_tbl_get_first_entry_handle_result result;
  try {
    result.success = iface_->access_savedseq_tbl_get_first_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_savedseq_tbl_get_first_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_savedseq_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_savedseq_tbl_get_first_entry_handle");
  }

  oprot->writeMessageBegin("access_savedseq_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_savedseq_tbl_get_first_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_access_savedseq_tbl_get_next_entry_handles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_savedseq_tbl_get_next_entry_handles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_savedseq_tbl_get_next_entry_handles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_savedseq_tbl_get_next_entry_handles");
  }

  netbufferv4_access_savedseq_tbl_get_next_entry_handles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_savedseq_tbl_get_next_entry_handles", bytes);
  }

  netbufferv4_access_savedseq_tbl_get_next_entry_handles_result result;
  try {
    iface_->access_savedseq_tbl_get_next_entry_handles(result.success, args.sess_hdl, args.dev_tgt, args.entry_hdl, args.n);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_savedseq_tbl_get_next_entry_handles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_savedseq_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_savedseq_tbl_get_next_entry_handles");
  }

  oprot->writeMessageBegin("access_savedseq_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_savedseq_tbl_get_next_entry_handles", bytes);
  }
}

void netbufferv4Processor::process_access_savedseq_tbl_get_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_savedseq_tbl_get_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_savedseq_tbl_get_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_savedseq_tbl_get_entry");
  }

  netbufferv4_access_savedseq_tbl_get_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_savedseq_tbl_get_entry", bytes);
  }

  netbufferv4_access_savedseq_tbl_get_entry_result result;
  try {
    iface_->access_savedseq_tbl_get_entry(result.success, args.sess_hdl, args.dev_id, args.entry_hdl, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_savedseq_tbl_get_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_savedseq_tbl_get_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_savedseq_tbl_get_entry");
  }

  oprot->writeMessageBegin("access_savedseq_tbl_get_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_savedseq_tbl_get_entry", bytes);
  }
}

void netbufferv4Processor::process_access_seq_tbl_get_first_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_seq_tbl_get_first_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_seq_tbl_get_first_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_seq_tbl_get_first_entry_handle");
  }

  netbufferv4_access_seq_tbl_get_first_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_seq_tbl_get_first_entry_handle", bytes);
  }

  netbufferv4_access_seq_tbl_get_first_entry_handle_result result;
  try {
    result.success = iface_->access_seq_tbl_get_first_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_seq_tbl_get_first_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_seq_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_seq_tbl_get_first_entry_handle");
  }

  oprot->writeMessageBegin("access_seq_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_seq_tbl_get_first_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_access_seq_tbl_get_next_entry_handles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_seq_tbl_get_next_entry_handles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_seq_tbl_get_next_entry_handles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_seq_tbl_get_next_entry_handles");
  }

  netbufferv4_access_seq_tbl_get_next_entry_handles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_seq_tbl_get_next_entry_handles", bytes);
  }

  netbufferv4_access_seq_tbl_get_next_entry_handles_result result;
  try {
    iface_->access_seq_tbl_get_next_entry_handles(result.success, args.sess_hdl, args.dev_tgt, args.entry_hdl, args.n);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_seq_tbl_get_next_entry_handles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_seq_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_seq_tbl_get_next_entry_handles");
  }

  oprot->writeMessageBegin("access_seq_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_seq_tbl_get_next_entry_handles", bytes);
  }
}

void netbufferv4Processor::process_access_seq_tbl_get_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_seq_tbl_get_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_seq_tbl_get_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_seq_tbl_get_entry");
  }

  netbufferv4_access_seq_tbl_get_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_seq_tbl_get_entry", bytes);
  }

  netbufferv4_access_seq_tbl_get_entry_result result;
  try {
    iface_->access_seq_tbl_get_entry(result.success, args.sess_hdl, args.dev_id, args.entry_hdl, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_seq_tbl_get_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_seq_tbl_get_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_seq_tbl_get_entry");
  }

  oprot->writeMessageBegin("access_seq_tbl_get_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_seq_tbl_get_entry", bytes);
  }
}

void netbufferv4Processor::process_access_validvalue_tbl_get_first_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_validvalue_tbl_get_first_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_validvalue_tbl_get_first_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_validvalue_tbl_get_first_entry_handle");
  }

  netbufferv4_access_validvalue_tbl_get_first_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_validvalue_tbl_get_first_entry_handle", bytes);
  }

  netbufferv4_access_validvalue_tbl_get_first_entry_handle_result result;
  try {
    result.success = iface_->access_validvalue_tbl_get_first_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_validvalue_tbl_get_first_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_validvalue_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_validvalue_tbl_get_first_entry_handle");
  }

  oprot->writeMessageBegin("access_validvalue_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_validvalue_tbl_get_first_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_access_validvalue_tbl_get_next_entry_handles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_validvalue_tbl_get_next_entry_handles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_validvalue_tbl_get_next_entry_handles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_validvalue_tbl_get_next_entry_handles");
  }

  netbufferv4_access_validvalue_tbl_get_next_entry_handles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_validvalue_tbl_get_next_entry_handles", bytes);
  }

  netbufferv4_access_validvalue_tbl_get_next_entry_handles_result result;
  try {
    iface_->access_validvalue_tbl_get_next_entry_handles(result.success, args.sess_hdl, args.dev_tgt, args.entry_hdl, args.n);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_validvalue_tbl_get_next_entry_handles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_validvalue_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_validvalue_tbl_get_next_entry_handles");
  }

  oprot->writeMessageBegin("access_validvalue_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_validvalue_tbl_get_next_entry_handles", bytes);
  }
}

void netbufferv4Processor::process_access_validvalue_tbl_get_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_validvalue_tbl_get_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_validvalue_tbl_get_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_validvalue_tbl_get_entry");
  }

  netbufferv4_access_validvalue_tbl_get_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_validvalue_tbl_get_entry", bytes);
  }

  netbufferv4_access_validvalue_tbl_get_entry_result result;
  try {
    iface_->access_validvalue_tbl_get_entry(result.success, args.sess_hdl, args.dev_id, args.entry_hdl, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_validvalue_tbl_get_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_validvalue_tbl_get_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_validvalue_tbl_get_entry");
  }

  oprot->writeMessageBegin("access_validvalue_tbl_get_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_validvalue_tbl_get_entry", bytes);
  }
}

void netbufferv4Processor::process_add_and_remove_value_header_tbl_get_first_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.add_and_remove_value_header_tbl_get_first_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.add_and_remove_value_header_tbl_get_first_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_get_first_entry_handle");
  }

  netbufferv4_add_and_remove_value_header_tbl_get_first_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_get_first_entry_handle", bytes);
  }

  netbufferv4_add_and_remove_value_header_tbl_get_first_entry_handle_result result;
  try {
    result.success = iface_->add_and_remove_value_header_tbl_get_first_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.add_and_remove_value_header_tbl_get_first_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("add_and_remove_value_header_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_get_first_entry_handle");
  }

  oprot->writeMessageBegin("add_and_remove_value_header_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_get_first_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_add_and_remove_value_header_tbl_get_next_entry_handles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.add_and_remove_value_header_tbl_get_next_entry_handles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.add_and_remove_value_header_tbl_get_next_entry_handles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_get_next_entry_handles");
  }

  netbufferv4_add_and_remove_value_header_tbl_get_next_entry_handles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_get_next_entry_handles", bytes);
  }

  netbufferv4_add_and_remove_value_header_tbl_get_next_entry_handles_result result;
  try {
    iface_->add_and_remove_value_header_tbl_get_next_entry_handles(result.success, args.sess_hdl, args.dev_tgt, args.entry_hdl, args.n);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.add_and_remove_value_header_tbl_get_next_entry_handles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("add_and_remove_value_header_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_get_next_entry_handles");
  }

  oprot->writeMessageBegin("add_and_remove_value_header_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_get_next_entry_handles", bytes);
  }
}

void netbufferv4Processor::process_add_and_remove_value_header_tbl_get_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.add_and_remove_value_header_tbl_get_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.add_and_remove_value_header_tbl_get_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_get_entry");
  }

  netbufferv4_add_and_remove_value_header_tbl_get_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_get_entry", bytes);
  }

  netbufferv4_add_and_remove_value_header_tbl_get_entry_result result;
  try {
    iface_->add_and_remove_value_header_tbl_get_entry(result.success, args.sess_hdl, args.dev_id, args.entry_hdl, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.add_and_remove_value_header_tbl_get_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("add_and_remove_value_header_tbl_get_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_get_entry");
  }

  oprot->writeMessageBegin("add_and_remove_value_header_tbl_get_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_get_entry", bytes);
  }
}

void netbufferv4Processor::process_cache_lookup_tbl_get_first_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.cache_lookup_tbl_get_first_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.cache_lookup_tbl_get_first_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.cache_lookup_tbl_get_first_entry_handle");
  }

  netbufferv4_cache_lookup_tbl_get_first_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.cache_lookup_tbl_get_first_entry_handle", bytes);
  }

  netbufferv4_cache_lookup_tbl_get_first_entry_handle_result result;
  try {
    result.success = iface_->cache_lookup_tbl_get_first_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.cache_lookup_tbl_get_first_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("cache_lookup_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.cache_lookup_tbl_get_first_entry_handle");
  }

  oprot->writeMessageBegin("cache_lookup_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.cache_lookup_tbl_get_first_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_cache_lookup_tbl_get_next_entry_handles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.cache_lookup_tbl_get_next_entry_handles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.cache_lookup_tbl_get_next_entry_handles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.cache_lookup_tbl_get_next_entry_handles");
  }

  netbufferv4_cache_lookup_tbl_get_next_entry_handles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.cache_lookup_tbl_get_next_entry_handles", bytes);
  }

  netbufferv4_cache_lookup_tbl_get_next_entry_handles_result result;
  try {
    iface_->cache_lookup_tbl_get_next_entry_handles(result.success, args.sess_hdl, args.dev_tgt, args.entry_hdl, args.n);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.cache_lookup_tbl_get_next_entry_handles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("cache_lookup_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.cache_lookup_tbl_get_next_entry_handles");
  }

  oprot->writeMessageBegin("cache_lookup_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.cache_lookup_tbl_get_next_entry_handles", bytes);
  }
}

void netbufferv4Processor::process_cache_lookup_tbl_get_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.cache_lookup_tbl_get_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.cache_lookup_tbl_get_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.cache_lookup_tbl_get_entry");
  }

  netbufferv4_cache_lookup_tbl_get_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.cache_lookup_tbl_get_entry", bytes);
  }

  netbufferv4_cache_lookup_tbl_get_entry_result result;
  try {
    iface_->cache_lookup_tbl_get_entry(result.success, args.sess_hdl, args.dev_id, args.entry_hdl, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.cache_lookup_tbl_get_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("cache_lookup_tbl_get_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.cache_lookup_tbl_get_entry");
  }

  oprot->writeMessageBegin("cache_lookup_tbl_get_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.cache_lookup_tbl_get_entry", bytes);
  }
}

void netbufferv4Processor::process_drop_tbl_get_first_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.drop_tbl_get_first_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.drop_tbl_get_first_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.drop_tbl_get_first_entry_handle");
  }

  netbufferv4_drop_tbl_get_first_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.drop_tbl_get_first_entry_handle", bytes);
  }

  netbufferv4_drop_tbl_get_first_entry_handle_result result;
  try {
    result.success = iface_->drop_tbl_get_first_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.drop_tbl_get_first_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("drop_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.drop_tbl_get_first_entry_handle");
  }

  oprot->writeMessageBegin("drop_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.drop_tbl_get_first_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_drop_tbl_get_next_entry_handles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.drop_tbl_get_next_entry_handles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.drop_tbl_get_next_entry_handles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.drop_tbl_get_next_entry_handles");
  }

  netbufferv4_drop_tbl_get_next_entry_handles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.drop_tbl_get_next_entry_handles", bytes);
  }

  netbufferv4_drop_tbl_get_next_entry_handles_result result;
  try {
    iface_->drop_tbl_get_next_entry_handles(result.success, args.sess_hdl, args.dev_tgt, args.entry_hdl, args.n);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.drop_tbl_get_next_entry_handles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("drop_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.drop_tbl_get_next_entry_handles");
  }

  oprot->writeMessageBegin("drop_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.drop_tbl_get_next_entry_handles", bytes);
  }
}

void netbufferv4Processor::process_drop_tbl_get_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.drop_tbl_get_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.drop_tbl_get_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.drop_tbl_get_entry");
  }

  netbufferv4_drop_tbl_get_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.drop_tbl_get_entry", bytes);
  }

  netbufferv4_drop_tbl_get_entry_result result;
  try {
    iface_->drop_tbl_get_entry(result.success, args.sess_hdl, args.dev_id, args.entry_hdl, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.drop_tbl_get_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("drop_tbl_get_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.drop_tbl_get_entry");
  }

  oprot->writeMessageBegin("drop_tbl_get_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.drop_tbl_get_entry", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_get_first_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_get_first_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_get_first_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_get_first_entry_handle");
  }

  netbufferv4_eg_port_forward_tbl_get_first_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_get_first_entry_handle", bytes);
  }

  netbufferv4_eg_port_forward_tbl_get_first_entry_handle_result result;
  try {
    result.success = iface_->eg_port_forward_tbl_get_first_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_get_first_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_get_first_entry_handle");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_get_first_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_get_next_entry_handles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_get_next_entry_handles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_get_next_entry_handles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_get_next_entry_handles");
  }

  netbufferv4_eg_port_forward_tbl_get_next_entry_handles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_get_next_entry_handles", bytes);
  }

  netbufferv4_eg_port_forward_tbl_get_next_entry_handles_result result;
  try {
    iface_->eg_port_forward_tbl_get_next_entry_handles(result.success, args.sess_hdl, args.dev_tgt, args.entry_hdl, args.n);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_get_next_entry_handles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_get_next_entry_handles");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_get_next_entry_handles", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_get_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_get_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_get_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_get_entry");
  }

  netbufferv4_eg_port_forward_tbl_get_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_get_entry", bytes);
  }

  netbufferv4_eg_port_forward_tbl_get_entry_result result;
  try {
    iface_->eg_port_forward_tbl_get_entry(result.success, args.sess_hdl, args.dev_id, args.entry_hdl, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_get_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_get_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_get_entry");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_get_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_get_entry", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm1_tbl_get_first_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm1_tbl_get_first_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm1_tbl_get_first_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm1_tbl_get_first_entry_handle");
  }

  netbufferv4_hash_for_cm1_tbl_get_first_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm1_tbl_get_first_entry_handle", bytes);
  }

  netbufferv4_hash_for_cm1_tbl_get_first_entry_handle_result result;
  try {
    result.success = iface_->hash_for_cm1_tbl_get_first_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm1_tbl_get_first_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm1_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm1_tbl_get_first_entry_handle");
  }

  oprot->writeMessageBegin("hash_for_cm1_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm1_tbl_get_first_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm1_tbl_get_next_entry_handles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm1_tbl_get_next_entry_handles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm1_tbl_get_next_entry_handles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm1_tbl_get_next_entry_handles");
  }

  netbufferv4_hash_for_cm1_tbl_get_next_entry_handles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm1_tbl_get_next_entry_handles", bytes);
  }

  netbufferv4_hash_for_cm1_tbl_get_next_entry_handles_result result;
  try {
    iface_->hash_for_cm1_tbl_get_next_entry_handles(result.success, args.sess_hdl, args.dev_tgt, args.entry_hdl, args.n);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm1_tbl_get_next_entry_handles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm1_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm1_tbl_get_next_entry_handles");
  }

  oprot->writeMessageBegin("hash_for_cm1_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm1_tbl_get_next_entry_handles", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm1_tbl_get_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm1_tbl_get_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm1_tbl_get_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm1_tbl_get_entry");
  }

  netbufferv4_hash_for_cm1_tbl_get_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm1_tbl_get_entry", bytes);
  }

  netbufferv4_hash_for_cm1_tbl_get_entry_result result;
  try {
    iface_->hash_for_cm1_tbl_get_entry(result.success, args.sess_hdl, args.dev_id, args.entry_hdl, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm1_tbl_get_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm1_tbl_get_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm1_tbl_get_entry");
  }

  oprot->writeMessageBegin("hash_for_cm1_tbl_get_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm1_tbl_get_entry", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm2_tbl_get_first_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm2_tbl_get_first_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm2_tbl_get_first_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm2_tbl_get_first_entry_handle");
  }

  netbufferv4_hash_for_cm2_tbl_get_first_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm2_tbl_get_first_entry_handle", bytes);
  }

  netbufferv4_hash_for_cm2_tbl_get_first_entry_handle_result result;
  try {
    result.success = iface_->hash_for_cm2_tbl_get_first_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm2_tbl_get_first_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm2_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm2_tbl_get_first_entry_handle");
  }

  oprot->writeMessageBegin("hash_for_cm2_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm2_tbl_get_first_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm2_tbl_get_next_entry_handles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm2_tbl_get_next_entry_handles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm2_tbl_get_next_entry_handles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm2_tbl_get_next_entry_handles");
  }

  netbufferv4_hash_for_cm2_tbl_get_next_entry_handles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm2_tbl_get_next_entry_handles", bytes);
  }

  netbufferv4_hash_for_cm2_tbl_get_next_entry_handles_result result;
  try {
    iface_->hash_for_cm2_tbl_get_next_entry_handles(result.success, args.sess_hdl, args.dev_tgt, args.entry_hdl, args.n);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm2_tbl_get_next_entry_handles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm2_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm2_tbl_get_next_entry_handles");
  }

  oprot->writeMessageBegin("hash_for_cm2_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm2_tbl_get_next_entry_handles", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm2_tbl_get_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm2_tbl_get_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm2_tbl_get_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm2_tbl_get_entry");
  }

  netbufferv4_hash_for_cm2_tbl_get_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm2_tbl_get_entry", bytes);
  }

  netbufferv4_hash_for_cm2_tbl_get_entry_result result;
  try {
    iface_->hash_for_cm2_tbl_get_entry(result.success, args.sess_hdl, args.dev_id, args.entry_hdl, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm2_tbl_get_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm2_tbl_get_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm2_tbl_get_entry");
  }

  oprot->writeMessageBegin("hash_for_cm2_tbl_get_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm2_tbl_get_entry", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm3_tbl_get_first_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm3_tbl_get_first_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm3_tbl_get_first_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm3_tbl_get_first_entry_handle");
  }

  netbufferv4_hash_for_cm3_tbl_get_first_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm3_tbl_get_first_entry_handle", bytes);
  }

  netbufferv4_hash_for_cm3_tbl_get_first_entry_handle_result result;
  try {
    result.success = iface_->hash_for_cm3_tbl_get_first_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm3_tbl_get_first_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm3_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm3_tbl_get_first_entry_handle");
  }

  oprot->writeMessageBegin("hash_for_cm3_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm3_tbl_get_first_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm3_tbl_get_next_entry_handles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm3_tbl_get_next_entry_handles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm3_tbl_get_next_entry_handles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm3_tbl_get_next_entry_handles");
  }

  netbufferv4_hash_for_cm3_tbl_get_next_entry_handles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm3_tbl_get_next_entry_handles", bytes);
  }

  netbufferv4_hash_for_cm3_tbl_get_next_entry_handles_result result;
  try {
    iface_->hash_for_cm3_tbl_get_next_entry_handles(result.success, args.sess_hdl, args.dev_tgt, args.entry_hdl, args.n);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm3_tbl_get_next_entry_handles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm3_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm3_tbl_get_next_entry_handles");
  }

  oprot->writeMessageBegin("hash_for_cm3_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm3_tbl_get_next_entry_handles", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm3_tbl_get_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm3_tbl_get_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm3_tbl_get_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm3_tbl_get_entry");
  }

  netbufferv4_hash_for_cm3_tbl_get_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm3_tbl_get_entry", bytes);
  }

  netbufferv4_hash_for_cm3_tbl_get_entry_result result;
  try {
    iface_->hash_for_cm3_tbl_get_entry(result.success, args.sess_hdl, args.dev_id, args.entry_hdl, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm3_tbl_get_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm3_tbl_get_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm3_tbl_get_entry");
  }

  oprot->writeMessageBegin("hash_for_cm3_tbl_get_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm3_tbl_get_entry", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm4_tbl_get_first_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm4_tbl_get_first_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm4_tbl_get_first_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm4_tbl_get_first_entry_handle");
  }

  netbufferv4_hash_for_cm4_tbl_get_first_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm4_tbl_get_first_entry_handle", bytes);
  }

  netbufferv4_hash_for_cm4_tbl_get_first_entry_handle_result result;
  try {
    result.success = iface_->hash_for_cm4_tbl_get_first_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm4_tbl_get_first_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm4_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm4_tbl_get_first_entry_handle");
  }

  oprot->writeMessageBegin("hash_for_cm4_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm4_tbl_get_first_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm4_tbl_get_next_entry_handles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm4_tbl_get_next_entry_handles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm4_tbl_get_next_entry_handles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm4_tbl_get_next_entry_handles");
  }

  netbufferv4_hash_for_cm4_tbl_get_next_entry_handles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm4_tbl_get_next_entry_handles", bytes);
  }

  netbufferv4_hash_for_cm4_tbl_get_next_entry_handles_result result;
  try {
    iface_->hash_for_cm4_tbl_get_next_entry_handles(result.success, args.sess_hdl, args.dev_tgt, args.entry_hdl, args.n);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm4_tbl_get_next_entry_handles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm4_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm4_tbl_get_next_entry_handles");
  }

  oprot->writeMessageBegin("hash_for_cm4_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm4_tbl_get_next_entry_handles", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm4_tbl_get_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm4_tbl_get_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm4_tbl_get_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm4_tbl_get_entry");
  }

  netbufferv4_hash_for_cm4_tbl_get_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm4_tbl_get_entry", bytes);
  }

  netbufferv4_hash_for_cm4_tbl_get_entry_result result;
  try {
    iface_->hash_for_cm4_tbl_get_entry(result.success, args.sess_hdl, args.dev_id, args.entry_hdl, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm4_tbl_get_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm4_tbl_get_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm4_tbl_get_entry");
  }

  oprot->writeMessageBegin("hash_for_cm4_tbl_get_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm4_tbl_get_entry", bytes);
  }
}

void netbufferv4Processor::process_hash_for_seq_tbl_get_first_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_seq_tbl_get_first_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_seq_tbl_get_first_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_seq_tbl_get_first_entry_handle");
  }

  netbufferv4_hash_for_seq_tbl_get_first_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_seq_tbl_get_first_entry_handle", bytes);
  }

  netbufferv4_hash_for_seq_tbl_get_first_entry_handle_result result;
  try {
    result.success = iface_->hash_for_seq_tbl_get_first_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_seq_tbl_get_first_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_seq_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_seq_tbl_get_first_entry_handle");
  }

  oprot->writeMessageBegin("hash_for_seq_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_seq_tbl_get_first_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_hash_for_seq_tbl_get_next_entry_handles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_seq_tbl_get_next_entry_handles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_seq_tbl_get_next_entry_handles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_seq_tbl_get_next_entry_handles");
  }

  netbufferv4_hash_for_seq_tbl_get_next_entry_handles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_seq_tbl_get_next_entry_handles", bytes);
  }

  netbufferv4_hash_for_seq_tbl_get_next_entry_handles_result result;
  try {
    iface_->hash_for_seq_tbl_get_next_entry_handles(result.success, args.sess_hdl, args.dev_tgt, args.entry_hdl, args.n);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_seq_tbl_get_next_entry_handles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_seq_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_seq_tbl_get_next_entry_handles");
  }

  oprot->writeMessageBegin("hash_for_seq_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_seq_tbl_get_next_entry_handles", bytes);
  }
}

void netbufferv4Processor::process_hash_for_seq_tbl_get_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_seq_tbl_get_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_seq_tbl_get_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_seq_tbl_get_entry");
  }

  netbufferv4_hash_for_seq_tbl_get_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_seq_tbl_get_entry", bytes);
  }

  netbufferv4_hash_for_seq_tbl_get_entry_result result;
  try {
    iface_->hash_for_seq_tbl_get_entry(result.success, args.sess_hdl, args.dev_id, args.entry_hdl, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_seq_tbl_get_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_seq_tbl_get_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_seq_tbl_get_entry");
  }

  oprot->writeMessageBegin("hash_for_seq_tbl_get_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_seq_tbl_get_entry", bytes);
  }
}

void netbufferv4Processor::process_ig_port_forward_tbl_get_first_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.ig_port_forward_tbl_get_first_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.ig_port_forward_tbl_get_first_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.ig_port_forward_tbl_get_first_entry_handle");
  }

  netbufferv4_ig_port_forward_tbl_get_first_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.ig_port_forward_tbl_get_first_entry_handle", bytes);
  }

  netbufferv4_ig_port_forward_tbl_get_first_entry_handle_result result;
  try {
    result.success = iface_->ig_port_forward_tbl_get_first_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.ig_port_forward_tbl_get_first_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ig_port_forward_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.ig_port_forward_tbl_get_first_entry_handle");
  }

  oprot->writeMessageBegin("ig_port_forward_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.ig_port_forward_tbl_get_first_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_ig_port_forward_tbl_get_next_entry_handles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.ig_port_forward_tbl_get_next_entry_handles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.ig_port_forward_tbl_get_next_entry_handles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.ig_port_forward_tbl_get_next_entry_handles");
  }

  netbufferv4_ig_port_forward_tbl_get_next_entry_handles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.ig_port_forward_tbl_get_next_entry_handles", bytes);
  }

  netbufferv4_ig_port_forward_tbl_get_next_entry_handles_result result;
  try {
    iface_->ig_port_forward_tbl_get_next_entry_handles(result.success, args.sess_hdl, args.dev_tgt, args.entry_hdl, args.n);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.ig_port_forward_tbl_get_next_entry_handles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ig_port_forward_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.ig_port_forward_tbl_get_next_entry_handles");
  }

  oprot->writeMessageBegin("ig_port_forward_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.ig_port_forward_tbl_get_next_entry_handles", bytes);
  }
}

void netbufferv4Processor::process_ig_port_forward_tbl_get_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.ig_port_forward_tbl_get_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.ig_port_forward_tbl_get_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.ig_port_forward_tbl_get_entry");
  }

  netbufferv4_ig_port_forward_tbl_get_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.ig_port_forward_tbl_get_entry", bytes);
  }

  netbufferv4_ig_port_forward_tbl_get_entry_result result;
  try {
    iface_->ig_port_forward_tbl_get_entry(result.success, args.sess_hdl, args.dev_id, args.entry_hdl, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.ig_port_forward_tbl_get_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ig_port_forward_tbl_get_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.ig_port_forward_tbl_get_entry");
  }

  oprot->writeMessageBegin("ig_port_forward_tbl_get_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.ig_port_forward_tbl_get_entry", bytes);
  }
}

void netbufferv4Processor::process_ipv4_forward_tbl_get_first_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.ipv4_forward_tbl_get_first_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.ipv4_forward_tbl_get_first_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.ipv4_forward_tbl_get_first_entry_handle");
  }

  netbufferv4_ipv4_forward_tbl_get_first_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.ipv4_forward_tbl_get_first_entry_handle", bytes);
  }

  netbufferv4_ipv4_forward_tbl_get_first_entry_handle_result result;
  try {
    result.success = iface_->ipv4_forward_tbl_get_first_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.ipv4_forward_tbl_get_first_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ipv4_forward_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.ipv4_forward_tbl_get_first_entry_handle");
  }

  oprot->writeMessageBegin("ipv4_forward_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.ipv4_forward_tbl_get_first_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_ipv4_forward_tbl_get_next_entry_handles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.ipv4_forward_tbl_get_next_entry_handles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.ipv4_forward_tbl_get_next_entry_handles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.ipv4_forward_tbl_get_next_entry_handles");
  }

  netbufferv4_ipv4_forward_tbl_get_next_entry_handles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.ipv4_forward_tbl_get_next_entry_handles", bytes);
  }

  netbufferv4_ipv4_forward_tbl_get_next_entry_handles_result result;
  try {
    iface_->ipv4_forward_tbl_get_next_entry_handles(result.success, args.sess_hdl, args.dev_tgt, args.entry_hdl, args.n);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.ipv4_forward_tbl_get_next_entry_handles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ipv4_forward_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.ipv4_forward_tbl_get_next_entry_handles");
  }

  oprot->writeMessageBegin("ipv4_forward_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.ipv4_forward_tbl_get_next_entry_handles", bytes);
  }
}

void netbufferv4Processor::process_ipv4_forward_tbl_get_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.ipv4_forward_tbl_get_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.ipv4_forward_tbl_get_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.ipv4_forward_tbl_get_entry");
  }

  netbufferv4_ipv4_forward_tbl_get_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.ipv4_forward_tbl_get_entry", bytes);
  }

  netbufferv4_ipv4_forward_tbl_get_entry_result result;
  try {
    iface_->ipv4_forward_tbl_get_entry(result.success, args.sess_hdl, args.dev_id, args.entry_hdl, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.ipv4_forward_tbl_get_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ipv4_forward_tbl_get_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.ipv4_forward_tbl_get_entry");
  }

  oprot->writeMessageBegin("ipv4_forward_tbl_get_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.ipv4_forward_tbl_get_entry", bytes);
  }
}

void netbufferv4Processor::process_is_hot_tbl_get_first_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.is_hot_tbl_get_first_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.is_hot_tbl_get_first_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.is_hot_tbl_get_first_entry_handle");
  }

  netbufferv4_is_hot_tbl_get_first_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.is_hot_tbl_get_first_entry_handle", bytes);
  }

  netbufferv4_is_hot_tbl_get_first_entry_handle_result result;
  try {
    result.success = iface_->is_hot_tbl_get_first_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.is_hot_tbl_get_first_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("is_hot_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.is_hot_tbl_get_first_entry_handle");
  }

  oprot->writeMessageBegin("is_hot_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.is_hot_tbl_get_first_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_is_hot_tbl_get_next_entry_handles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.is_hot_tbl_get_next_entry_handles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.is_hot_tbl_get_next_entry_handles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.is_hot_tbl_get_next_entry_handles");
  }

  netbufferv4_is_hot_tbl_get_next_entry_handles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.is_hot_tbl_get_next_entry_handles", bytes);
  }

  netbufferv4_is_hot_tbl_get_next_entry_handles_result result;
  try {
    iface_->is_hot_tbl_get_next_entry_handles(result.success, args.sess_hdl, args.dev_tgt, args.entry_hdl, args.n);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.is_hot_tbl_get_next_entry_handles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("is_hot_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.is_hot_tbl_get_next_entry_handles");
  }

  oprot->writeMessageBegin("is_hot_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.is_hot_tbl_get_next_entry_handles", bytes);
  }
}

void netbufferv4Processor::process_is_hot_tbl_get_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.is_hot_tbl_get_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.is_hot_tbl_get_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.is_hot_tbl_get_entry");
  }

  netbufferv4_is_hot_tbl_get_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.is_hot_tbl_get_entry", bytes);
  }

  netbufferv4_is_hot_tbl_get_entry_result result;
  try {
    iface_->is_hot_tbl_get_entry(result.success, args.sess_hdl, args.dev_id, args.entry_hdl, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.is_hot_tbl_get_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("is_hot_tbl_get_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.is_hot_tbl_get_entry");
  }

  oprot->writeMessageBegin("is_hot_tbl_get_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.is_hot_tbl_get_entry", bytes);
  }
}

void netbufferv4Processor::process_lastclone_lastscansplit_tbl_get_first_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.lastclone_lastscansplit_tbl_get_first_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.lastclone_lastscansplit_tbl_get_first_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.lastclone_lastscansplit_tbl_get_first_entry_handle");
  }

  netbufferv4_lastclone_lastscansplit_tbl_get_first_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.lastclone_lastscansplit_tbl_get_first_entry_handle", bytes);
  }

  netbufferv4_lastclone_lastscansplit_tbl_get_first_entry_handle_result result;
  try {
    result.success = iface_->lastclone_lastscansplit_tbl_get_first_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.lastclone_lastscansplit_tbl_get_first_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("lastclone_lastscansplit_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.lastclone_lastscansplit_tbl_get_first_entry_handle");
  }

  oprot->writeMessageBegin("lastclone_lastscansplit_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.lastclone_lastscansplit_tbl_get_first_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_lastclone_lastscansplit_tbl_get_next_entry_handles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.lastclone_lastscansplit_tbl_get_next_entry_handles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.lastclone_lastscansplit_tbl_get_next_entry_handles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.lastclone_lastscansplit_tbl_get_next_entry_handles");
  }

  netbufferv4_lastclone_lastscansplit_tbl_get_next_entry_handles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.lastclone_lastscansplit_tbl_get_next_entry_handles", bytes);
  }

  netbufferv4_lastclone_lastscansplit_tbl_get_next_entry_handles_result result;
  try {
    iface_->lastclone_lastscansplit_tbl_get_next_entry_handles(result.success, args.sess_hdl, args.dev_tgt, args.entry_hdl, args.n);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.lastclone_lastscansplit_tbl_get_next_entry_handles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("lastclone_lastscansplit_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.lastclone_lastscansplit_tbl_get_next_entry_handles");
  }

  oprot->writeMessageBegin("lastclone_lastscansplit_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.lastclone_lastscansplit_tbl_get_next_entry_handles", bytes);
  }
}

void netbufferv4Processor::process_lastclone_lastscansplit_tbl_get_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.lastclone_lastscansplit_tbl_get_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.lastclone_lastscansplit_tbl_get_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.lastclone_lastscansplit_tbl_get_entry");
  }

  netbufferv4_lastclone_lastscansplit_tbl_get_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.lastclone_lastscansplit_tbl_get_entry", bytes);
  }

  netbufferv4_lastclone_lastscansplit_tbl_get_entry_result result;
  try {
    iface_->lastclone_lastscansplit_tbl_get_entry(result.success, args.sess_hdl, args.dev_id, args.entry_hdl, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.lastclone_lastscansplit_tbl_get_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("lastclone_lastscansplit_tbl_get_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.lastclone_lastscansplit_tbl_get_entry");
  }

  oprot->writeMessageBegin("lastclone_lastscansplit_tbl_get_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.lastclone_lastscansplit_tbl_get_entry", bytes);
  }
}

void netbufferv4Processor::process_need_recirculate_tbl_get_first_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.need_recirculate_tbl_get_first_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.need_recirculate_tbl_get_first_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.need_recirculate_tbl_get_first_entry_handle");
  }

  netbufferv4_need_recirculate_tbl_get_first_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.need_recirculate_tbl_get_first_entry_handle", bytes);
  }

  netbufferv4_need_recirculate_tbl_get_first_entry_handle_result result;
  try {
    result.success = iface_->need_recirculate_tbl_get_first_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.need_recirculate_tbl_get_first_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("need_recirculate_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.need_recirculate_tbl_get_first_entry_handle");
  }

  oprot->writeMessageBegin("need_recirculate_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.need_recirculate_tbl_get_first_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_need_recirculate_tbl_get_next_entry_handles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.need_recirculate_tbl_get_next_entry_handles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.need_recirculate_tbl_get_next_entry_handles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.need_recirculate_tbl_get_next_entry_handles");
  }

  netbufferv4_need_recirculate_tbl_get_next_entry_handles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.need_recirculate_tbl_get_next_entry_handles", bytes);
  }

  netbufferv4_need_recirculate_tbl_get_next_entry_handles_result result;
  try {
    iface_->need_recirculate_tbl_get_next_entry_handles(result.success, args.sess_hdl, args.dev_tgt, args.entry_hdl, args.n);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.need_recirculate_tbl_get_next_entry_handles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("need_recirculate_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.need_recirculate_tbl_get_next_entry_handles");
  }

  oprot->writeMessageBegin("need_recirculate_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.need_recirculate_tbl_get_next_entry_handles", bytes);
  }
}

void netbufferv4Processor::process_need_recirculate_tbl_get_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.need_recirculate_tbl_get_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.need_recirculate_tbl_get_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.need_recirculate_tbl_get_entry");
  }

  netbufferv4_need_recirculate_tbl_get_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.need_recirculate_tbl_get_entry", bytes);
  }

  netbufferv4_need_recirculate_tbl_get_entry_result result;
  try {
    iface_->need_recirculate_tbl_get_entry(result.success, args.sess_hdl, args.dev_id, args.entry_hdl, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.need_recirculate_tbl_get_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("need_recirculate_tbl_get_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.need_recirculate_tbl_get_entry");
  }

  oprot->writeMessageBegin("need_recirculate_tbl_get_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.need_recirculate_tbl_get_entry", bytes);
  }
}

void netbufferv4Processor::process_prepare_for_cachehit_tbl_get_first_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.prepare_for_cachehit_tbl_get_first_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.prepare_for_cachehit_tbl_get_first_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.prepare_for_cachehit_tbl_get_first_entry_handle");
  }

  netbufferv4_prepare_for_cachehit_tbl_get_first_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.prepare_for_cachehit_tbl_get_first_entry_handle", bytes);
  }

  netbufferv4_prepare_for_cachehit_tbl_get_first_entry_handle_result result;
  try {
    result.success = iface_->prepare_for_cachehit_tbl_get_first_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.prepare_for_cachehit_tbl_get_first_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("prepare_for_cachehit_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.prepare_for_cachehit_tbl_get_first_entry_handle");
  }

  oprot->writeMessageBegin("prepare_for_cachehit_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.prepare_for_cachehit_tbl_get_first_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_prepare_for_cachehit_tbl_get_next_entry_handles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.prepare_for_cachehit_tbl_get_next_entry_handles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.prepare_for_cachehit_tbl_get_next_entry_handles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.prepare_for_cachehit_tbl_get_next_entry_handles");
  }

  netbufferv4_prepare_for_cachehit_tbl_get_next_entry_handles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.prepare_for_cachehit_tbl_get_next_entry_handles", bytes);
  }

  netbufferv4_prepare_for_cachehit_tbl_get_next_entry_handles_result result;
  try {
    iface_->prepare_for_cachehit_tbl_get_next_entry_handles(result.success, args.sess_hdl, args.dev_tgt, args.entry_hdl, args.n);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.prepare_for_cachehit_tbl_get_next_entry_handles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("prepare_for_cachehit_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.prepare_for_cachehit_tbl_get_next_entry_handles");
  }

  oprot->writeMessageBegin("prepare_for_cachehit_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.prepare_for_cachehit_tbl_get_next_entry_handles", bytes);
  }
}

void netbufferv4Processor::process_prepare_for_cachehit_tbl_get_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.prepare_for_cachehit_tbl_get_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.prepare_for_cachehit_tbl_get_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.prepare_for_cachehit_tbl_get_entry");
  }

  netbufferv4_prepare_for_cachehit_tbl_get_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.prepare_for_cachehit_tbl_get_entry", bytes);
  }

  netbufferv4_prepare_for_cachehit_tbl_get_entry_result result;
  try {
    iface_->prepare_for_cachehit_tbl_get_entry(result.success, args.sess_hdl, args.dev_id, args.entry_hdl, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.prepare_for_cachehit_tbl_get_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("prepare_for_cachehit_tbl_get_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.prepare_for_cachehit_tbl_get_entry");
  }

  oprot->writeMessageBegin("prepare_for_cachehit_tbl_get_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.prepare_for_cachehit_tbl_get_entry", bytes);
  }
}

void netbufferv4Processor::process_process_scanreq_split_tbl_get_first_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.process_scanreq_split_tbl_get_first_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.process_scanreq_split_tbl_get_first_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.process_scanreq_split_tbl_get_first_entry_handle");
  }

  netbufferv4_process_scanreq_split_tbl_get_first_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.process_scanreq_split_tbl_get_first_entry_handle", bytes);
  }

  netbufferv4_process_scanreq_split_tbl_get_first_entry_handle_result result;
  try {
    result.success = iface_->process_scanreq_split_tbl_get_first_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.process_scanreq_split_tbl_get_first_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("process_scanreq_split_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.process_scanreq_split_tbl_get_first_entry_handle");
  }

  oprot->writeMessageBegin("process_scanreq_split_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.process_scanreq_split_tbl_get_first_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_process_scanreq_split_tbl_get_next_entry_handles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.process_scanreq_split_tbl_get_next_entry_handles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.process_scanreq_split_tbl_get_next_entry_handles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.process_scanreq_split_tbl_get_next_entry_handles");
  }

  netbufferv4_process_scanreq_split_tbl_get_next_entry_handles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.process_scanreq_split_tbl_get_next_entry_handles", bytes);
  }

  netbufferv4_process_scanreq_split_tbl_get_next_entry_handles_result result;
  try {
    iface_->process_scanreq_split_tbl_get_next_entry_handles(result.success, args.sess_hdl, args.dev_tgt, args.entry_hdl, args.n);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.process_scanreq_split_tbl_get_next_entry_handles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("process_scanreq_split_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.process_scanreq_split_tbl_get_next_entry_handles");
  }

  oprot->writeMessageBegin("process_scanreq_split_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.process_scanreq_split_tbl_get_next_entry_handles", bytes);
  }
}

void netbufferv4Processor::process_process_scanreq_split_tbl_get_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.process_scanreq_split_tbl_get_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.process_scanreq_split_tbl_get_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.process_scanreq_split_tbl_get_entry");
  }

  netbufferv4_process_scanreq_split_tbl_get_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.process_scanreq_split_tbl_get_entry", bytes);
  }

  netbufferv4_process_scanreq_split_tbl_get_entry_result result;
  try {
    iface_->process_scanreq_split_tbl_get_entry(result.success, args.sess_hdl, args.dev_id, args.entry_hdl, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.process_scanreq_split_tbl_get_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("process_scanreq_split_tbl_get_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.process_scanreq_split_tbl_get_entry");
  }

  oprot->writeMessageBegin("process_scanreq_split_tbl_get_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.process_scanreq_split_tbl_get_entry", bytes);
  }
}

void netbufferv4Processor::process_range_partition_for_scan_endkey_tbl_get_first_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.range_partition_for_scan_endkey_tbl_get_first_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_get_first_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_get_first_entry_handle");
  }

  netbufferv4_range_partition_for_scan_endkey_tbl_get_first_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_get_first_entry_handle", bytes);
  }

  netbufferv4_range_partition_for_scan_endkey_tbl_get_first_entry_handle_result result;
  try {
    result.success = iface_->range_partition_for_scan_endkey_tbl_get_first_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_get_first_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("range_partition_for_scan_endkey_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_get_first_entry_handle");
  }

  oprot->writeMessageBegin("range_partition_for_scan_endkey_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_get_first_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_range_partition_for_scan_endkey_tbl_get_next_entry_handles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.range_partition_for_scan_endkey_tbl_get_next_entry_handles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_get_next_entry_handles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_get_next_entry_handles");
  }

  netbufferv4_range_partition_for_scan_endkey_tbl_get_next_entry_handles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_get_next_entry_handles", bytes);
  }

  netbufferv4_range_partition_for_scan_endkey_tbl_get_next_entry_handles_result result;
  try {
    iface_->range_partition_for_scan_endkey_tbl_get_next_entry_handles(result.success, args.sess_hdl, args.dev_tgt, args.entry_hdl, args.n);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_get_next_entry_handles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("range_partition_for_scan_endkey_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_get_next_entry_handles");
  }

  oprot->writeMessageBegin("range_partition_for_scan_endkey_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_get_next_entry_handles", bytes);
  }
}

void netbufferv4Processor::process_range_partition_for_scan_endkey_tbl_get_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.range_partition_for_scan_endkey_tbl_get_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_get_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_get_entry");
  }

  netbufferv4_range_partition_for_scan_endkey_tbl_get_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_get_entry", bytes);
  }

  netbufferv4_range_partition_for_scan_endkey_tbl_get_entry_result result;
  try {
    iface_->range_partition_for_scan_endkey_tbl_get_entry(result.success, args.sess_hdl, args.dev_id, args.entry_hdl, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_get_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("range_partition_for_scan_endkey_tbl_get_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_get_entry");
  }

  oprot->writeMessageBegin("range_partition_for_scan_endkey_tbl_get_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_get_entry", bytes);
  }
}

void netbufferv4Processor::process_range_partition_tbl_get_first_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.range_partition_tbl_get_first_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.range_partition_tbl_get_first_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.range_partition_tbl_get_first_entry_handle");
  }

  netbufferv4_range_partition_tbl_get_first_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.range_partition_tbl_get_first_entry_handle", bytes);
  }

  netbufferv4_range_partition_tbl_get_first_entry_handle_result result;
  try {
    result.success = iface_->range_partition_tbl_get_first_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.range_partition_tbl_get_first_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("range_partition_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.range_partition_tbl_get_first_entry_handle");
  }

  oprot->writeMessageBegin("range_partition_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.range_partition_tbl_get_first_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_range_partition_tbl_get_next_entry_handles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.range_partition_tbl_get_next_entry_handles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.range_partition_tbl_get_next_entry_handles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.range_partition_tbl_get_next_entry_handles");
  }

  netbufferv4_range_partition_tbl_get_next_entry_handles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.range_partition_tbl_get_next_entry_handles", bytes);
  }

  netbufferv4_range_partition_tbl_get_next_entry_handles_result result;
  try {
    iface_->range_partition_tbl_get_next_entry_handles(result.success, args.sess_hdl, args.dev_tgt, args.entry_hdl, args.n);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.range_partition_tbl_get_next_entry_handles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("range_partition_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.range_partition_tbl_get_next_entry_handles");
  }

  oprot->writeMessageBegin("range_partition_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.range_partition_tbl_get_next_entry_handles", bytes);
  }
}

void netbufferv4Processor::process_range_partition_tbl_get_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.range_partition_tbl_get_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.range_partition_tbl_get_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.range_partition_tbl_get_entry");
  }

  netbufferv4_range_partition_tbl_get_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.range_partition_tbl_get_entry", bytes);
  }

  netbufferv4_range_partition_tbl_get_entry_result result;
  try {
    iface_->range_partition_tbl_get_entry(result.success, args.sess_hdl, args.dev_id, args.entry_hdl, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.range_partition_tbl_get_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("range_partition_tbl_get_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.range_partition_tbl_get_entry");
  }

  oprot->writeMessageBegin("range_partition_tbl_get_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.range_partition_tbl_get_entry", bytes);
  }
}

void netbufferv4Processor::process_recirculate_tbl_get_first_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.recirculate_tbl_get_first_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.recirculate_tbl_get_first_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.recirculate_tbl_get_first_entry_handle");
  }

  netbufferv4_recirculate_tbl_get_first_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.recirculate_tbl_get_first_entry_handle", bytes);
  }

  netbufferv4_recirculate_tbl_get_first_entry_handle_result result;
  try {
    result.success = iface_->recirculate_tbl_get_first_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.recirculate_tbl_get_first_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("recirculate_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.recirculate_tbl_get_first_entry_handle");
  }

  oprot->writeMessageBegin("recirculate_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.recirculate_tbl_get_first_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_recirculate_tbl_get_next_entry_handles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.recirculate_tbl_get_next_entry_handles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.recirculate_tbl_get_next_entry_handles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.recirculate_tbl_get_next_entry_handles");
  }

  netbufferv4_recirculate_tbl_get_next_entry_handles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.recirculate_tbl_get_next_entry_handles", bytes);
  }

  netbufferv4_recirculate_tbl_get_next_entry_handles_result result;
  try {
    iface_->recirculate_tbl_get_next_entry_handles(result.success, args.sess_hdl, args.dev_tgt, args.entry_hdl, args.n);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.recirculate_tbl_get_next_entry_handles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("recirculate_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.recirculate_tbl_get_next_entry_handles");
  }

  oprot->writeMessageBegin("recirculate_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.recirculate_tbl_get_next_entry_handles", bytes);
  }
}

void netbufferv4Processor::process_recirculate_tbl_get_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.recirculate_tbl_get_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.recirculate_tbl_get_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.recirculate_tbl_get_entry");
  }

  netbufferv4_recirculate_tbl_get_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.recirculate_tbl_get_entry", bytes);
  }

  netbufferv4_recirculate_tbl_get_entry_result result;
  try {
    iface_->recirculate_tbl_get_entry(result.success, args.sess_hdl, args.dev_id, args.entry_hdl, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.recirculate_tbl_get_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("recirculate_tbl_get_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.recirculate_tbl_get_entry");
  }

  oprot->writeMessageBegin("recirculate_tbl_get_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.recirculate_tbl_get_entry", bytes);
  }
}

void netbufferv4Processor::process_sample_tbl_get_first_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.sample_tbl_get_first_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.sample_tbl_get_first_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.sample_tbl_get_first_entry_handle");
  }

  netbufferv4_sample_tbl_get_first_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.sample_tbl_get_first_entry_handle", bytes);
  }

  netbufferv4_sample_tbl_get_first_entry_handle_result result;
  try {
    result.success = iface_->sample_tbl_get_first_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.sample_tbl_get_first_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sample_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.sample_tbl_get_first_entry_handle");
  }

  oprot->writeMessageBegin("sample_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.sample_tbl_get_first_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_sample_tbl_get_next_entry_handles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.sample_tbl_get_next_entry_handles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.sample_tbl_get_next_entry_handles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.sample_tbl_get_next_entry_handles");
  }

  netbufferv4_sample_tbl_get_next_entry_handles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.sample_tbl_get_next_entry_handles", bytes);
  }

  netbufferv4_sample_tbl_get_next_entry_handles_result result;
  try {
    iface_->sample_tbl_get_next_entry_handles(result.success, args.sess_hdl, args.dev_tgt, args.entry_hdl, args.n);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.sample_tbl_get_next_entry_handles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sample_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.sample_tbl_get_next_entry_handles");
  }

  oprot->writeMessageBegin("sample_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.sample_tbl_get_next_entry_handles", bytes);
  }
}

void netbufferv4Processor::process_sample_tbl_get_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.sample_tbl_get_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.sample_tbl_get_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.sample_tbl_get_entry");
  }

  netbufferv4_sample_tbl_get_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.sample_tbl_get_entry", bytes);
  }

  netbufferv4_sample_tbl_get_entry_result result;
  try {
    iface_->sample_tbl_get_entry(result.success, args.sess_hdl, args.dev_id, args.entry_hdl, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.sample_tbl_get_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sample_tbl_get_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.sample_tbl_get_entry");
  }

  oprot->writeMessageBegin("sample_tbl_get_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.sample_tbl_get_entry", bytes);
  }
}

void netbufferv4Processor::process_save_client_udpport_tbl_get_first_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.save_client_udpport_tbl_get_first_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.save_client_udpport_tbl_get_first_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.save_client_udpport_tbl_get_first_entry_handle");
  }

  netbufferv4_save_client_udpport_tbl_get_first_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.save_client_udpport_tbl_get_first_entry_handle", bytes);
  }

  netbufferv4_save_client_udpport_tbl_get_first_entry_handle_result result;
  try {
    result.success = iface_->save_client_udpport_tbl_get_first_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.save_client_udpport_tbl_get_first_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("save_client_udpport_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.save_client_udpport_tbl_get_first_entry_handle");
  }

  oprot->writeMessageBegin("save_client_udpport_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.save_client_udpport_tbl_get_first_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_save_client_udpport_tbl_get_next_entry_handles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.save_client_udpport_tbl_get_next_entry_handles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.save_client_udpport_tbl_get_next_entry_handles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.save_client_udpport_tbl_get_next_entry_handles");
  }

  netbufferv4_save_client_udpport_tbl_get_next_entry_handles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.save_client_udpport_tbl_get_next_entry_handles", bytes);
  }

  netbufferv4_save_client_udpport_tbl_get_next_entry_handles_result result;
  try {
    iface_->save_client_udpport_tbl_get_next_entry_handles(result.success, args.sess_hdl, args.dev_tgt, args.entry_hdl, args.n);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.save_client_udpport_tbl_get_next_entry_handles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("save_client_udpport_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.save_client_udpport_tbl_get_next_entry_handles");
  }

  oprot->writeMessageBegin("save_client_udpport_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.save_client_udpport_tbl_get_next_entry_handles", bytes);
  }
}

void netbufferv4Processor::process_save_client_udpport_tbl_get_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.save_client_udpport_tbl_get_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.save_client_udpport_tbl_get_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.save_client_udpport_tbl_get_entry");
  }

  netbufferv4_save_client_udpport_tbl_get_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.save_client_udpport_tbl_get_entry", bytes);
  }

  netbufferv4_save_client_udpport_tbl_get_entry_result result;
  try {
    iface_->save_client_udpport_tbl_get_entry(result.success, args.sess_hdl, args.dev_id, args.entry_hdl, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.save_client_udpport_tbl_get_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("save_client_udpport_tbl_get_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.save_client_udpport_tbl_get_entry");
  }

  oprot->writeMessageBegin("save_client_udpport_tbl_get_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.save_client_udpport_tbl_get_entry", bytes);
  }
}

void netbufferv4Processor::process_set_hot_threshold_tbl_get_first_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.set_hot_threshold_tbl_get_first_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.set_hot_threshold_tbl_get_first_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.set_hot_threshold_tbl_get_first_entry_handle");
  }

  netbufferv4_set_hot_threshold_tbl_get_first_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.set_hot_threshold_tbl_get_first_entry_handle", bytes);
  }

  netbufferv4_set_hot_threshold_tbl_get_first_entry_handle_result result;
  try {
    result.success = iface_->set_hot_threshold_tbl_get_first_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.set_hot_threshold_tbl_get_first_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("set_hot_threshold_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.set_hot_threshold_tbl_get_first_entry_handle");
  }

  oprot->writeMessageBegin("set_hot_threshold_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.set_hot_threshold_tbl_get_first_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_set_hot_threshold_tbl_get_next_entry_handles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.set_hot_threshold_tbl_get_next_entry_handles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.set_hot_threshold_tbl_get_next_entry_handles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.set_hot_threshold_tbl_get_next_entry_handles");
  }

  netbufferv4_set_hot_threshold_tbl_get_next_entry_handles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.set_hot_threshold_tbl_get_next_entry_handles", bytes);
  }

  netbufferv4_set_hot_threshold_tbl_get_next_entry_handles_result result;
  try {
    iface_->set_hot_threshold_tbl_get_next_entry_handles(result.success, args.sess_hdl, args.dev_tgt, args.entry_hdl, args.n);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.set_hot_threshold_tbl_get_next_entry_handles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("set_hot_threshold_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.set_hot_threshold_tbl_get_next_entry_handles");
  }

  oprot->writeMessageBegin("set_hot_threshold_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.set_hot_threshold_tbl_get_next_entry_handles", bytes);
  }
}

void netbufferv4Processor::process_set_hot_threshold_tbl_get_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.set_hot_threshold_tbl_get_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.set_hot_threshold_tbl_get_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.set_hot_threshold_tbl_get_entry");
  }

  netbufferv4_set_hot_threshold_tbl_get_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.set_hot_threshold_tbl_get_entry", bytes);
  }

  netbufferv4_set_hot_threshold_tbl_get_entry_result result;
  try {
    iface_->set_hot_threshold_tbl_get_entry(result.success, args.sess_hdl, args.dev_id, args.entry_hdl, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.set_hot_threshold_tbl_get_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("set_hot_threshold_tbl_get_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.set_hot_threshold_tbl_get_entry");
  }

  oprot->writeMessageBegin("set_hot_threshold_tbl_get_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.set_hot_threshold_tbl_get_entry", bytes);
  }
}

void netbufferv4Processor::process_snapshot_flag_tbl_get_first_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.snapshot_flag_tbl_get_first_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.snapshot_flag_tbl_get_first_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.snapshot_flag_tbl_get_first_entry_handle");
  }

  netbufferv4_snapshot_flag_tbl_get_first_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.snapshot_flag_tbl_get_first_entry_handle", bytes);
  }

  netbufferv4_snapshot_flag_tbl_get_first_entry_handle_result result;
  try {
    result.success = iface_->snapshot_flag_tbl_get_first_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.snapshot_flag_tbl_get_first_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("snapshot_flag_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.snapshot_flag_tbl_get_first_entry_handle");
  }

  oprot->writeMessageBegin("snapshot_flag_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.snapshot_flag_tbl_get_first_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_snapshot_flag_tbl_get_next_entry_handles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.snapshot_flag_tbl_get_next_entry_handles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.snapshot_flag_tbl_get_next_entry_handles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.snapshot_flag_tbl_get_next_entry_handles");
  }

  netbufferv4_snapshot_flag_tbl_get_next_entry_handles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.snapshot_flag_tbl_get_next_entry_handles", bytes);
  }

  netbufferv4_snapshot_flag_tbl_get_next_entry_handles_result result;
  try {
    iface_->snapshot_flag_tbl_get_next_entry_handles(result.success, args.sess_hdl, args.dev_tgt, args.entry_hdl, args.n);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.snapshot_flag_tbl_get_next_entry_handles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("snapshot_flag_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.snapshot_flag_tbl_get_next_entry_handles");
  }

  oprot->writeMessageBegin("snapshot_flag_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.snapshot_flag_tbl_get_next_entry_handles", bytes);
  }
}

void netbufferv4Processor::process_snapshot_flag_tbl_get_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.snapshot_flag_tbl_get_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.snapshot_flag_tbl_get_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.snapshot_flag_tbl_get_entry");
  }

  netbufferv4_snapshot_flag_tbl_get_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.snapshot_flag_tbl_get_entry", bytes);
  }

  netbufferv4_snapshot_flag_tbl_get_entry_result result;
  try {
    iface_->snapshot_flag_tbl_get_entry(result.success, args.sess_hdl, args.dev_id, args.entry_hdl, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.snapshot_flag_tbl_get_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("snapshot_flag_tbl_get_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.snapshot_flag_tbl_get_entry");
  }

  oprot->writeMessageBegin("snapshot_flag_tbl_get_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.snapshot_flag_tbl_get_entry", bytes);
  }
}

void netbufferv4Processor::process_update_ipmac_srcport_tbl_get_first_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_ipmac_srcport_tbl_get_first_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_ipmac_srcport_tbl_get_first_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_ipmac_srcport_tbl_get_first_entry_handle");
  }

  netbufferv4_update_ipmac_srcport_tbl_get_first_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_ipmac_srcport_tbl_get_first_entry_handle", bytes);
  }

  netbufferv4_update_ipmac_srcport_tbl_get_first_entry_handle_result result;
  try {
    result.success = iface_->update_ipmac_srcport_tbl_get_first_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_ipmac_srcport_tbl_get_first_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_ipmac_srcport_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_ipmac_srcport_tbl_get_first_entry_handle");
  }

  oprot->writeMessageBegin("update_ipmac_srcport_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_ipmac_srcport_tbl_get_first_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_ipmac_srcport_tbl_get_next_entry_handles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_ipmac_srcport_tbl_get_next_entry_handles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_ipmac_srcport_tbl_get_next_entry_handles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_ipmac_srcport_tbl_get_next_entry_handles");
  }

  netbufferv4_update_ipmac_srcport_tbl_get_next_entry_handles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_ipmac_srcport_tbl_get_next_entry_handles", bytes);
  }

  netbufferv4_update_ipmac_srcport_tbl_get_next_entry_handles_result result;
  try {
    iface_->update_ipmac_srcport_tbl_get_next_entry_handles(result.success, args.sess_hdl, args.dev_tgt, args.entry_hdl, args.n);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_ipmac_srcport_tbl_get_next_entry_handles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_ipmac_srcport_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_ipmac_srcport_tbl_get_next_entry_handles");
  }

  oprot->writeMessageBegin("update_ipmac_srcport_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_ipmac_srcport_tbl_get_next_entry_handles", bytes);
  }
}

void netbufferv4Processor::process_update_ipmac_srcport_tbl_get_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_ipmac_srcport_tbl_get_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_ipmac_srcport_tbl_get_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_ipmac_srcport_tbl_get_entry");
  }

  netbufferv4_update_ipmac_srcport_tbl_get_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_ipmac_srcport_tbl_get_entry", bytes);
  }

  netbufferv4_update_ipmac_srcport_tbl_get_entry_result result;
  try {
    iface_->update_ipmac_srcport_tbl_get_entry(result.success, args.sess_hdl, args.dev_id, args.entry_hdl, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_ipmac_srcport_tbl_get_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_ipmac_srcport_tbl_get_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_ipmac_srcport_tbl_get_entry");
  }

  oprot->writeMessageBegin("update_ipmac_srcport_tbl_get_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_ipmac_srcport_tbl_get_entry", bytes);
  }
}

void netbufferv4Processor::process_update_pktlen_tbl_get_first_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_pktlen_tbl_get_first_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_pktlen_tbl_get_first_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_pktlen_tbl_get_first_entry_handle");
  }

  netbufferv4_update_pktlen_tbl_get_first_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_pktlen_tbl_get_first_entry_handle", bytes);
  }

  netbufferv4_update_pktlen_tbl_get_first_entry_handle_result result;
  try {
    result.success = iface_->update_pktlen_tbl_get_first_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_pktlen_tbl_get_first_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_pktlen_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_pktlen_tbl_get_first_entry_handle");
  }

  oprot->writeMessageBegin("update_pktlen_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_pktlen_tbl_get_first_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_pktlen_tbl_get_next_entry_handles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_pktlen_tbl_get_next_entry_handles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_pktlen_tbl_get_next_entry_handles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_pktlen_tbl_get_next_entry_handles");
  }

  netbufferv4_update_pktlen_tbl_get_next_entry_handles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_pktlen_tbl_get_next_entry_handles", bytes);
  }

  netbufferv4_update_pktlen_tbl_get_next_entry_handles_result result;
  try {
    iface_->update_pktlen_tbl_get_next_entry_handles(result.success, args.sess_hdl, args.dev_tgt, args.entry_hdl, args.n);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_pktlen_tbl_get_next_entry_handles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_pktlen_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_pktlen_tbl_get_next_entry_handles");
  }

  oprot->writeMessageBegin("update_pktlen_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_pktlen_tbl_get_next_entry_handles", bytes);
  }
}

void netbufferv4Processor::process_update_pktlen_tbl_get_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_pktlen_tbl_get_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_pktlen_tbl_get_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_pktlen_tbl_get_entry");
  }

  netbufferv4_update_pktlen_tbl_get_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_pktlen_tbl_get_entry", bytes);
  }

  netbufferv4_update_pktlen_tbl_get_entry_result result;
  try {
    iface_->update_pktlen_tbl_get_entry(result.success, args.sess_hdl, args.dev_id, args.entry_hdl, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_pktlen_tbl_get_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_pktlen_tbl_get_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_pktlen_tbl_get_entry");
  }

  oprot->writeMessageBegin("update_pktlen_tbl_get_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_pktlen_tbl_get_entry", bytes);
  }
}

void netbufferv4Processor::process_update_valhi10_tbl_get_first_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi10_tbl_get_first_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi10_tbl_get_first_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi10_tbl_get_first_entry_handle");
  }

  netbufferv4_update_valhi10_tbl_get_first_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi10_tbl_get_first_entry_handle", bytes);
  }

  netbufferv4_update_valhi10_tbl_get_first_entry_handle_result result;
  try {
    result.success = iface_->update_valhi10_tbl_get_first_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi10_tbl_get_first_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi10_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi10_tbl_get_first_entry_handle");
  }

  oprot->writeMessageBegin("update_valhi10_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi10_tbl_get_first_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_valhi10_tbl_get_next_entry_handles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi10_tbl_get_next_entry_handles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi10_tbl_get_next_entry_handles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi10_tbl_get_next_entry_handles");
  }

  netbufferv4_update_valhi10_tbl_get_next_entry_handles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi10_tbl_get_next_entry_handles", bytes);
  }

  netbufferv4_update_valhi10_tbl_get_next_entry_handles_result result;
  try {
    iface_->update_valhi10_tbl_get_next_entry_handles(result.success, args.sess_hdl, args.dev_tgt, args.entry_hdl, args.n);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi10_tbl_get_next_entry_handles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi10_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi10_tbl_get_next_entry_handles");
  }

  oprot->writeMessageBegin("update_valhi10_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi10_tbl_get_next_entry_handles", bytes);
  }
}

void netbufferv4Processor::process_update_valhi10_tbl_get_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi10_tbl_get_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi10_tbl_get_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi10_tbl_get_entry");
  }

  netbufferv4_update_valhi10_tbl_get_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi10_tbl_get_entry", bytes);
  }

  netbufferv4_update_valhi10_tbl_get_entry_result result;
  try {
    iface_->update_valhi10_tbl_get_entry(result.success, args.sess_hdl, args.dev_id, args.entry_hdl, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi10_tbl_get_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi10_tbl_get_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi10_tbl_get_entry");
  }

  oprot->writeMessageBegin("update_valhi10_tbl_get_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi10_tbl_get_entry", bytes);
  }
}

void netbufferv4Processor::process_update_valhi11_tbl_get_first_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi11_tbl_get_first_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi11_tbl_get_first_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi11_tbl_get_first_entry_handle");
  }

  netbufferv4_update_valhi11_tbl_get_first_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi11_tbl_get_first_entry_handle", bytes);
  }

  netbufferv4_update_valhi11_tbl_get_first_entry_handle_result result;
  try {
    result.success = iface_->update_valhi11_tbl_get_first_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi11_tbl_get_first_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi11_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi11_tbl_get_first_entry_handle");
  }

  oprot->writeMessageBegin("update_valhi11_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi11_tbl_get_first_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_valhi11_tbl_get_next_entry_handles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi11_tbl_get_next_entry_handles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi11_tbl_get_next_entry_handles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi11_tbl_get_next_entry_handles");
  }

  netbufferv4_update_valhi11_tbl_get_next_entry_handles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi11_tbl_get_next_entry_handles", bytes);
  }

  netbufferv4_update_valhi11_tbl_get_next_entry_handles_result result;
  try {
    iface_->update_valhi11_tbl_get_next_entry_handles(result.success, args.sess_hdl, args.dev_tgt, args.entry_hdl, args.n);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi11_tbl_get_next_entry_handles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi11_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi11_tbl_get_next_entry_handles");
  }

  oprot->writeMessageBegin("update_valhi11_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi11_tbl_get_next_entry_handles", bytes);
  }
}

void netbufferv4Processor::process_update_valhi11_tbl_get_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi11_tbl_get_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi11_tbl_get_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi11_tbl_get_entry");
  }

  netbufferv4_update_valhi11_tbl_get_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi11_tbl_get_entry", bytes);
  }

  netbufferv4_update_valhi11_tbl_get_entry_result result;
  try {
    iface_->update_valhi11_tbl_get_entry(result.success, args.sess_hdl, args.dev_id, args.entry_hdl, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi11_tbl_get_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi11_tbl_get_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi11_tbl_get_entry");
  }

  oprot->writeMessageBegin("update_valhi11_tbl_get_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi11_tbl_get_entry", bytes);
  }
}

void netbufferv4Processor::process_update_valhi12_tbl_get_first_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi12_tbl_get_first_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi12_tbl_get_first_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi12_tbl_get_first_entry_handle");
  }

  netbufferv4_update_valhi12_tbl_get_first_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi12_tbl_get_first_entry_handle", bytes);
  }

  netbufferv4_update_valhi12_tbl_get_first_entry_handle_result result;
  try {
    result.success = iface_->update_valhi12_tbl_get_first_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi12_tbl_get_first_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi12_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi12_tbl_get_first_entry_handle");
  }

  oprot->writeMessageBegin("update_valhi12_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi12_tbl_get_first_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_valhi12_tbl_get_next_entry_handles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi12_tbl_get_next_entry_handles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi12_tbl_get_next_entry_handles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi12_tbl_get_next_entry_handles");
  }

  netbufferv4_update_valhi12_tbl_get_next_entry_handles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi12_tbl_get_next_entry_handles", bytes);
  }

  netbufferv4_update_valhi12_tbl_get_next_entry_handles_result result;
  try {
    iface_->update_valhi12_tbl_get_next_entry_handles(result.success, args.sess_hdl, args.dev_tgt, args.entry_hdl, args.n);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi12_tbl_get_next_entry_handles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi12_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi12_tbl_get_next_entry_handles");
  }

  oprot->writeMessageBegin("update_valhi12_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi12_tbl_get_next_entry_handles", bytes);
  }
}

void netbufferv4Processor::process_update_valhi12_tbl_get_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi12_tbl_get_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi12_tbl_get_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi12_tbl_get_entry");
  }

  netbufferv4_update_valhi12_tbl_get_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi12_tbl_get_entry", bytes);
  }

  netbufferv4_update_valhi12_tbl_get_entry_result result;
  try {
    iface_->update_valhi12_tbl_get_entry(result.success, args.sess_hdl, args.dev_id, args.entry_hdl, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi12_tbl_get_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi12_tbl_get_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi12_tbl_get_entry");
  }

  oprot->writeMessageBegin("update_valhi12_tbl_get_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi12_tbl_get_entry", bytes);
  }
}

void netbufferv4Processor::process_update_valhi13_tbl_get_first_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi13_tbl_get_first_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi13_tbl_get_first_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi13_tbl_get_first_entry_handle");
  }

  netbufferv4_update_valhi13_tbl_get_first_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi13_tbl_get_first_entry_handle", bytes);
  }

  netbufferv4_update_valhi13_tbl_get_first_entry_handle_result result;
  try {
    result.success = iface_->update_valhi13_tbl_get_first_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi13_tbl_get_first_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi13_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi13_tbl_get_first_entry_handle");
  }

  oprot->writeMessageBegin("update_valhi13_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi13_tbl_get_first_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_valhi13_tbl_get_next_entry_handles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi13_tbl_get_next_entry_handles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi13_tbl_get_next_entry_handles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi13_tbl_get_next_entry_handles");
  }

  netbufferv4_update_valhi13_tbl_get_next_entry_handles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi13_tbl_get_next_entry_handles", bytes);
  }

  netbufferv4_update_valhi13_tbl_get_next_entry_handles_result result;
  try {
    iface_->update_valhi13_tbl_get_next_entry_handles(result.success, args.sess_hdl, args.dev_tgt, args.entry_hdl, args.n);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi13_tbl_get_next_entry_handles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi13_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi13_tbl_get_next_entry_handles");
  }

  oprot->writeMessageBegin("update_valhi13_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi13_tbl_get_next_entry_handles", bytes);
  }
}

void netbufferv4Processor::process_update_valhi13_tbl_get_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi13_tbl_get_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi13_tbl_get_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi13_tbl_get_entry");
  }

  netbufferv4_update_valhi13_tbl_get_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi13_tbl_get_entry", bytes);
  }

  netbufferv4_update_valhi13_tbl_get_entry_result result;
  try {
    iface_->update_valhi13_tbl_get_entry(result.success, args.sess_hdl, args.dev_id, args.entry_hdl, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi13_tbl_get_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi13_tbl_get_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi13_tbl_get_entry");
  }

  oprot->writeMessageBegin("update_valhi13_tbl_get_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi13_tbl_get_entry", bytes);
  }
}

void netbufferv4Processor::process_update_valhi14_tbl_get_first_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi14_tbl_get_first_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi14_tbl_get_first_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi14_tbl_get_first_entry_handle");
  }

  netbufferv4_update_valhi14_tbl_get_first_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi14_tbl_get_first_entry_handle", bytes);
  }

  netbufferv4_update_valhi14_tbl_get_first_entry_handle_result result;
  try {
    result.success = iface_->update_valhi14_tbl_get_first_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi14_tbl_get_first_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi14_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi14_tbl_get_first_entry_handle");
  }

  oprot->writeMessageBegin("update_valhi14_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi14_tbl_get_first_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_valhi14_tbl_get_next_entry_handles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi14_tbl_get_next_entry_handles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi14_tbl_get_next_entry_handles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi14_tbl_get_next_entry_handles");
  }

  netbufferv4_update_valhi14_tbl_get_next_entry_handles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi14_tbl_get_next_entry_handles", bytes);
  }

  netbufferv4_update_valhi14_tbl_get_next_entry_handles_result result;
  try {
    iface_->update_valhi14_tbl_get_next_entry_handles(result.success, args.sess_hdl, args.dev_tgt, args.entry_hdl, args.n);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi14_tbl_get_next_entry_handles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi14_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi14_tbl_get_next_entry_handles");
  }

  oprot->writeMessageBegin("update_valhi14_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi14_tbl_get_next_entry_handles", bytes);
  }
}

void netbufferv4Processor::process_update_valhi14_tbl_get_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi14_tbl_get_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi14_tbl_get_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi14_tbl_get_entry");
  }

  netbufferv4_update_valhi14_tbl_get_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi14_tbl_get_entry", bytes);
  }

  netbufferv4_update_valhi14_tbl_get_entry_result result;
  try {
    iface_->update_valhi14_tbl_get_entry(result.success, args.sess_hdl, args.dev_id, args.entry_hdl, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi14_tbl_get_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi14_tbl_get_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi14_tbl_get_entry");
  }

  oprot->writeMessageBegin("update_valhi14_tbl_get_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi14_tbl_get_entry", bytes);
  }
}

void netbufferv4Processor::process_update_valhi15_tbl_get_first_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi15_tbl_get_first_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi15_tbl_get_first_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi15_tbl_get_first_entry_handle");
  }

  netbufferv4_update_valhi15_tbl_get_first_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi15_tbl_get_first_entry_handle", bytes);
  }

  netbufferv4_update_valhi15_tbl_get_first_entry_handle_result result;
  try {
    result.success = iface_->update_valhi15_tbl_get_first_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi15_tbl_get_first_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi15_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi15_tbl_get_first_entry_handle");
  }

  oprot->writeMessageBegin("update_valhi15_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi15_tbl_get_first_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_valhi15_tbl_get_next_entry_handles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi15_tbl_get_next_entry_handles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi15_tbl_get_next_entry_handles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi15_tbl_get_next_entry_handles");
  }

  netbufferv4_update_valhi15_tbl_get_next_entry_handles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi15_tbl_get_next_entry_handles", bytes);
  }

  netbufferv4_update_valhi15_tbl_get_next_entry_handles_result result;
  try {
    iface_->update_valhi15_tbl_get_next_entry_handles(result.success, args.sess_hdl, args.dev_tgt, args.entry_hdl, args.n);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi15_tbl_get_next_entry_handles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi15_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi15_tbl_get_next_entry_handles");
  }

  oprot->writeMessageBegin("update_valhi15_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi15_tbl_get_next_entry_handles", bytes);
  }
}

void netbufferv4Processor::process_update_valhi15_tbl_get_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi15_tbl_get_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi15_tbl_get_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi15_tbl_get_entry");
  }

  netbufferv4_update_valhi15_tbl_get_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi15_tbl_get_entry", bytes);
  }

  netbufferv4_update_valhi15_tbl_get_entry_result result;
  try {
    iface_->update_valhi15_tbl_get_entry(result.success, args.sess_hdl, args.dev_id, args.entry_hdl, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi15_tbl_get_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi15_tbl_get_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi15_tbl_get_entry");
  }

  oprot->writeMessageBegin("update_valhi15_tbl_get_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi15_tbl_get_entry", bytes);
  }
}

void netbufferv4Processor::process_update_valhi16_tbl_get_first_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi16_tbl_get_first_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi16_tbl_get_first_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi16_tbl_get_first_entry_handle");
  }

  netbufferv4_update_valhi16_tbl_get_first_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi16_tbl_get_first_entry_handle", bytes);
  }

  netbufferv4_update_valhi16_tbl_get_first_entry_handle_result result;
  try {
    result.success = iface_->update_valhi16_tbl_get_first_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi16_tbl_get_first_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi16_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi16_tbl_get_first_entry_handle");
  }

  oprot->writeMessageBegin("update_valhi16_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi16_tbl_get_first_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_valhi16_tbl_get_next_entry_handles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi16_tbl_get_next_entry_handles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi16_tbl_get_next_entry_handles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi16_tbl_get_next_entry_handles");
  }

  netbufferv4_update_valhi16_tbl_get_next_entry_handles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi16_tbl_get_next_entry_handles", bytes);
  }

  netbufferv4_update_valhi16_tbl_get_next_entry_handles_result result;
  try {
    iface_->update_valhi16_tbl_get_next_entry_handles(result.success, args.sess_hdl, args.dev_tgt, args.entry_hdl, args.n);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi16_tbl_get_next_entry_handles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi16_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi16_tbl_get_next_entry_handles");
  }

  oprot->writeMessageBegin("update_valhi16_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi16_tbl_get_next_entry_handles", bytes);
  }
}

void netbufferv4Processor::process_update_valhi16_tbl_get_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi16_tbl_get_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi16_tbl_get_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi16_tbl_get_entry");
  }

  netbufferv4_update_valhi16_tbl_get_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi16_tbl_get_entry", bytes);
  }

  netbufferv4_update_valhi16_tbl_get_entry_result result;
  try {
    iface_->update_valhi16_tbl_get_entry(result.success, args.sess_hdl, args.dev_id, args.entry_hdl, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi16_tbl_get_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi16_tbl_get_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi16_tbl_get_entry");
  }

  oprot->writeMessageBegin("update_valhi16_tbl_get_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi16_tbl_get_entry", bytes);
  }
}

void netbufferv4Processor::process_update_valhi1_tbl_get_first_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi1_tbl_get_first_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi1_tbl_get_first_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi1_tbl_get_first_entry_handle");
  }

  netbufferv4_update_valhi1_tbl_get_first_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi1_tbl_get_first_entry_handle", bytes);
  }

  netbufferv4_update_valhi1_tbl_get_first_entry_handle_result result;
  try {
    result.success = iface_->update_valhi1_tbl_get_first_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi1_tbl_get_first_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi1_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi1_tbl_get_first_entry_handle");
  }

  oprot->writeMessageBegin("update_valhi1_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi1_tbl_get_first_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_valhi1_tbl_get_next_entry_handles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi1_tbl_get_next_entry_handles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi1_tbl_get_next_entry_handles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi1_tbl_get_next_entry_handles");
  }

  netbufferv4_update_valhi1_tbl_get_next_entry_handles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi1_tbl_get_next_entry_handles", bytes);
  }

  netbufferv4_update_valhi1_tbl_get_next_entry_handles_result result;
  try {
    iface_->update_valhi1_tbl_get_next_entry_handles(result.success, args.sess_hdl, args.dev_tgt, args.entry_hdl, args.n);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi1_tbl_get_next_entry_handles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi1_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi1_tbl_get_next_entry_handles");
  }

  oprot->writeMessageBegin("update_valhi1_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi1_tbl_get_next_entry_handles", bytes);
  }
}

void netbufferv4Processor::process_update_valhi1_tbl_get_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi1_tbl_get_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi1_tbl_get_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi1_tbl_get_entry");
  }

  netbufferv4_update_valhi1_tbl_get_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi1_tbl_get_entry", bytes);
  }

  netbufferv4_update_valhi1_tbl_get_entry_result result;
  try {
    iface_->update_valhi1_tbl_get_entry(result.success, args.sess_hdl, args.dev_id, args.entry_hdl, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi1_tbl_get_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi1_tbl_get_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi1_tbl_get_entry");
  }

  oprot->writeMessageBegin("update_valhi1_tbl_get_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi1_tbl_get_entry", bytes);
  }
}

void netbufferv4Processor::process_update_valhi2_tbl_get_first_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi2_tbl_get_first_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi2_tbl_get_first_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi2_tbl_get_first_entry_handle");
  }

  netbufferv4_update_valhi2_tbl_get_first_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi2_tbl_get_first_entry_handle", bytes);
  }

  netbufferv4_update_valhi2_tbl_get_first_entry_handle_result result;
  try {
    result.success = iface_->update_valhi2_tbl_get_first_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi2_tbl_get_first_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi2_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi2_tbl_get_first_entry_handle");
  }

  oprot->writeMessageBegin("update_valhi2_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi2_tbl_get_first_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_valhi2_tbl_get_next_entry_handles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi2_tbl_get_next_entry_handles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi2_tbl_get_next_entry_handles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi2_tbl_get_next_entry_handles");
  }

  netbufferv4_update_valhi2_tbl_get_next_entry_handles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi2_tbl_get_next_entry_handles", bytes);
  }

  netbufferv4_update_valhi2_tbl_get_next_entry_handles_result result;
  try {
    iface_->update_valhi2_tbl_get_next_entry_handles(result.success, args.sess_hdl, args.dev_tgt, args.entry_hdl, args.n);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi2_tbl_get_next_entry_handles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi2_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi2_tbl_get_next_entry_handles");
  }

  oprot->writeMessageBegin("update_valhi2_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi2_tbl_get_next_entry_handles", bytes);
  }
}

void netbufferv4Processor::process_update_valhi2_tbl_get_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi2_tbl_get_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi2_tbl_get_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi2_tbl_get_entry");
  }

  netbufferv4_update_valhi2_tbl_get_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi2_tbl_get_entry", bytes);
  }

  netbufferv4_update_valhi2_tbl_get_entry_result result;
  try {
    iface_->update_valhi2_tbl_get_entry(result.success, args.sess_hdl, args.dev_id, args.entry_hdl, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi2_tbl_get_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi2_tbl_get_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi2_tbl_get_entry");
  }

  oprot->writeMessageBegin("update_valhi2_tbl_get_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi2_tbl_get_entry", bytes);
  }
}

void netbufferv4Processor::process_update_valhi3_tbl_get_first_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi3_tbl_get_first_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi3_tbl_get_first_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi3_tbl_get_first_entry_handle");
  }

  netbufferv4_update_valhi3_tbl_get_first_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi3_tbl_get_first_entry_handle", bytes);
  }

  netbufferv4_update_valhi3_tbl_get_first_entry_handle_result result;
  try {
    result.success = iface_->update_valhi3_tbl_get_first_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi3_tbl_get_first_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi3_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi3_tbl_get_first_entry_handle");
  }

  oprot->writeMessageBegin("update_valhi3_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi3_tbl_get_first_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_valhi3_tbl_get_next_entry_handles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi3_tbl_get_next_entry_handles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi3_tbl_get_next_entry_handles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi3_tbl_get_next_entry_handles");
  }

  netbufferv4_update_valhi3_tbl_get_next_entry_handles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi3_tbl_get_next_entry_handles", bytes);
  }

  netbufferv4_update_valhi3_tbl_get_next_entry_handles_result result;
  try {
    iface_->update_valhi3_tbl_get_next_entry_handles(result.success, args.sess_hdl, args.dev_tgt, args.entry_hdl, args.n);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi3_tbl_get_next_entry_handles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi3_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi3_tbl_get_next_entry_handles");
  }

  oprot->writeMessageBegin("update_valhi3_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi3_tbl_get_next_entry_handles", bytes);
  }
}

void netbufferv4Processor::process_update_valhi3_tbl_get_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi3_tbl_get_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi3_tbl_get_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi3_tbl_get_entry");
  }

  netbufferv4_update_valhi3_tbl_get_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi3_tbl_get_entry", bytes);
  }

  netbufferv4_update_valhi3_tbl_get_entry_result result;
  try {
    iface_->update_valhi3_tbl_get_entry(result.success, args.sess_hdl, args.dev_id, args.entry_hdl, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi3_tbl_get_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi3_tbl_get_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi3_tbl_get_entry");
  }

  oprot->writeMessageBegin("update_valhi3_tbl_get_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi3_tbl_get_entry", bytes);
  }
}

void netbufferv4Processor::process_update_valhi4_tbl_get_first_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi4_tbl_get_first_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi4_tbl_get_first_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi4_tbl_get_first_entry_handle");
  }

  netbufferv4_update_valhi4_tbl_get_first_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi4_tbl_get_first_entry_handle", bytes);
  }

  netbufferv4_update_valhi4_tbl_get_first_entry_handle_result result;
  try {
    result.success = iface_->update_valhi4_tbl_get_first_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi4_tbl_get_first_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi4_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi4_tbl_get_first_entry_handle");
  }

  oprot->writeMessageBegin("update_valhi4_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi4_tbl_get_first_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_valhi4_tbl_get_next_entry_handles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi4_tbl_get_next_entry_handles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi4_tbl_get_next_entry_handles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi4_tbl_get_next_entry_handles");
  }

  netbufferv4_update_valhi4_tbl_get_next_entry_handles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi4_tbl_get_next_entry_handles", bytes);
  }

  netbufferv4_update_valhi4_tbl_get_next_entry_handles_result result;
  try {
    iface_->update_valhi4_tbl_get_next_entry_handles(result.success, args.sess_hdl, args.dev_tgt, args.entry_hdl, args.n);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi4_tbl_get_next_entry_handles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi4_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi4_tbl_get_next_entry_handles");
  }

  oprot->writeMessageBegin("update_valhi4_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi4_tbl_get_next_entry_handles", bytes);
  }
}

void netbufferv4Processor::process_update_valhi4_tbl_get_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi4_tbl_get_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi4_tbl_get_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi4_tbl_get_entry");
  }

  netbufferv4_update_valhi4_tbl_get_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi4_tbl_get_entry", bytes);
  }

  netbufferv4_update_valhi4_tbl_get_entry_result result;
  try {
    iface_->update_valhi4_tbl_get_entry(result.success, args.sess_hdl, args.dev_id, args.entry_hdl, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi4_tbl_get_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi4_tbl_get_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi4_tbl_get_entry");
  }

  oprot->writeMessageBegin("update_valhi4_tbl_get_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi4_tbl_get_entry", bytes);
  }
}

void netbufferv4Processor::process_update_valhi5_tbl_get_first_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi5_tbl_get_first_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi5_tbl_get_first_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi5_tbl_get_first_entry_handle");
  }

  netbufferv4_update_valhi5_tbl_get_first_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi5_tbl_get_first_entry_handle", bytes);
  }

  netbufferv4_update_valhi5_tbl_get_first_entry_handle_result result;
  try {
    result.success = iface_->update_valhi5_tbl_get_first_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi5_tbl_get_first_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi5_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi5_tbl_get_first_entry_handle");
  }

  oprot->writeMessageBegin("update_valhi5_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi5_tbl_get_first_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_valhi5_tbl_get_next_entry_handles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi5_tbl_get_next_entry_handles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi5_tbl_get_next_entry_handles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi5_tbl_get_next_entry_handles");
  }

  netbufferv4_update_valhi5_tbl_get_next_entry_handles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi5_tbl_get_next_entry_handles", bytes);
  }

  netbufferv4_update_valhi5_tbl_get_next_entry_handles_result result;
  try {
    iface_->update_valhi5_tbl_get_next_entry_handles(result.success, args.sess_hdl, args.dev_tgt, args.entry_hdl, args.n);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi5_tbl_get_next_entry_handles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi5_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi5_tbl_get_next_entry_handles");
  }

  oprot->writeMessageBegin("update_valhi5_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi5_tbl_get_next_entry_handles", bytes);
  }
}

void netbufferv4Processor::process_update_valhi5_tbl_get_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi5_tbl_get_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi5_tbl_get_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi5_tbl_get_entry");
  }

  netbufferv4_update_valhi5_tbl_get_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi5_tbl_get_entry", bytes);
  }

  netbufferv4_update_valhi5_tbl_get_entry_result result;
  try {
    iface_->update_valhi5_tbl_get_entry(result.success, args.sess_hdl, args.dev_id, args.entry_hdl, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi5_tbl_get_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi5_tbl_get_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi5_tbl_get_entry");
  }

  oprot->writeMessageBegin("update_valhi5_tbl_get_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi5_tbl_get_entry", bytes);
  }
}

void netbufferv4Processor::process_update_valhi6_tbl_get_first_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi6_tbl_get_first_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi6_tbl_get_first_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi6_tbl_get_first_entry_handle");
  }

  netbufferv4_update_valhi6_tbl_get_first_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi6_tbl_get_first_entry_handle", bytes);
  }

  netbufferv4_update_valhi6_tbl_get_first_entry_handle_result result;
  try {
    result.success = iface_->update_valhi6_tbl_get_first_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi6_tbl_get_first_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi6_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi6_tbl_get_first_entry_handle");
  }

  oprot->writeMessageBegin("update_valhi6_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi6_tbl_get_first_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_valhi6_tbl_get_next_entry_handles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi6_tbl_get_next_entry_handles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi6_tbl_get_next_entry_handles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi6_tbl_get_next_entry_handles");
  }

  netbufferv4_update_valhi6_tbl_get_next_entry_handles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi6_tbl_get_next_entry_handles", bytes);
  }

  netbufferv4_update_valhi6_tbl_get_next_entry_handles_result result;
  try {
    iface_->update_valhi6_tbl_get_next_entry_handles(result.success, args.sess_hdl, args.dev_tgt, args.entry_hdl, args.n);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi6_tbl_get_next_entry_handles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi6_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi6_tbl_get_next_entry_handles");
  }

  oprot->writeMessageBegin("update_valhi6_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi6_tbl_get_next_entry_handles", bytes);
  }
}

void netbufferv4Processor::process_update_valhi6_tbl_get_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi6_tbl_get_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi6_tbl_get_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi6_tbl_get_entry");
  }

  netbufferv4_update_valhi6_tbl_get_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi6_tbl_get_entry", bytes);
  }

  netbufferv4_update_valhi6_tbl_get_entry_result result;
  try {
    iface_->update_valhi6_tbl_get_entry(result.success, args.sess_hdl, args.dev_id, args.entry_hdl, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi6_tbl_get_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi6_tbl_get_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi6_tbl_get_entry");
  }

  oprot->writeMessageBegin("update_valhi6_tbl_get_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi6_tbl_get_entry", bytes);
  }
}

void netbufferv4Processor::process_update_valhi7_tbl_get_first_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi7_tbl_get_first_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi7_tbl_get_first_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi7_tbl_get_first_entry_handle");
  }

  netbufferv4_update_valhi7_tbl_get_first_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi7_tbl_get_first_entry_handle", bytes);
  }

  netbufferv4_update_valhi7_tbl_get_first_entry_handle_result result;
  try {
    result.success = iface_->update_valhi7_tbl_get_first_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi7_tbl_get_first_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi7_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi7_tbl_get_first_entry_handle");
  }

  oprot->writeMessageBegin("update_valhi7_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi7_tbl_get_first_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_valhi7_tbl_get_next_entry_handles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi7_tbl_get_next_entry_handles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi7_tbl_get_next_entry_handles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi7_tbl_get_next_entry_handles");
  }

  netbufferv4_update_valhi7_tbl_get_next_entry_handles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi7_tbl_get_next_entry_handles", bytes);
  }

  netbufferv4_update_valhi7_tbl_get_next_entry_handles_result result;
  try {
    iface_->update_valhi7_tbl_get_next_entry_handles(result.success, args.sess_hdl, args.dev_tgt, args.entry_hdl, args.n);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi7_tbl_get_next_entry_handles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi7_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi7_tbl_get_next_entry_handles");
  }

  oprot->writeMessageBegin("update_valhi7_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi7_tbl_get_next_entry_handles", bytes);
  }
}

void netbufferv4Processor::process_update_valhi7_tbl_get_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi7_tbl_get_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi7_tbl_get_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi7_tbl_get_entry");
  }

  netbufferv4_update_valhi7_tbl_get_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi7_tbl_get_entry", bytes);
  }

  netbufferv4_update_valhi7_tbl_get_entry_result result;
  try {
    iface_->update_valhi7_tbl_get_entry(result.success, args.sess_hdl, args.dev_id, args.entry_hdl, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi7_tbl_get_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi7_tbl_get_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi7_tbl_get_entry");
  }

  oprot->writeMessageBegin("update_valhi7_tbl_get_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi7_tbl_get_entry", bytes);
  }
}

void netbufferv4Processor::process_update_valhi8_tbl_get_first_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi8_tbl_get_first_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi8_tbl_get_first_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi8_tbl_get_first_entry_handle");
  }

  netbufferv4_update_valhi8_tbl_get_first_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi8_tbl_get_first_entry_handle", bytes);
  }

  netbufferv4_update_valhi8_tbl_get_first_entry_handle_result result;
  try {
    result.success = iface_->update_valhi8_tbl_get_first_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi8_tbl_get_first_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi8_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi8_tbl_get_first_entry_handle");
  }

  oprot->writeMessageBegin("update_valhi8_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi8_tbl_get_first_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_valhi8_tbl_get_next_entry_handles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi8_tbl_get_next_entry_handles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi8_tbl_get_next_entry_handles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi8_tbl_get_next_entry_handles");
  }

  netbufferv4_update_valhi8_tbl_get_next_entry_handles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi8_tbl_get_next_entry_handles", bytes);
  }

  netbufferv4_update_valhi8_tbl_get_next_entry_handles_result result;
  try {
    iface_->update_valhi8_tbl_get_next_entry_handles(result.success, args.sess_hdl, args.dev_tgt, args.entry_hdl, args.n);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi8_tbl_get_next_entry_handles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi8_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi8_tbl_get_next_entry_handles");
  }

  oprot->writeMessageBegin("update_valhi8_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi8_tbl_get_next_entry_handles", bytes);
  }
}

void netbufferv4Processor::process_update_valhi8_tbl_get_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi8_tbl_get_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi8_tbl_get_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi8_tbl_get_entry");
  }

  netbufferv4_update_valhi8_tbl_get_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi8_tbl_get_entry", bytes);
  }

  netbufferv4_update_valhi8_tbl_get_entry_result result;
  try {
    iface_->update_valhi8_tbl_get_entry(result.success, args.sess_hdl, args.dev_id, args.entry_hdl, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi8_tbl_get_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi8_tbl_get_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi8_tbl_get_entry");
  }

  oprot->writeMessageBegin("update_valhi8_tbl_get_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi8_tbl_get_entry", bytes);
  }
}

void netbufferv4Processor::process_update_valhi9_tbl_get_first_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi9_tbl_get_first_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi9_tbl_get_first_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi9_tbl_get_first_entry_handle");
  }

  netbufferv4_update_valhi9_tbl_get_first_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi9_tbl_get_first_entry_handle", bytes);
  }

  netbufferv4_update_valhi9_tbl_get_first_entry_handle_result result;
  try {
    result.success = iface_->update_valhi9_tbl_get_first_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi9_tbl_get_first_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi9_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi9_tbl_get_first_entry_handle");
  }

  oprot->writeMessageBegin("update_valhi9_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi9_tbl_get_first_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_valhi9_tbl_get_next_entry_handles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi9_tbl_get_next_entry_handles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi9_tbl_get_next_entry_handles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi9_tbl_get_next_entry_handles");
  }

  netbufferv4_update_valhi9_tbl_get_next_entry_handles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi9_tbl_get_next_entry_handles", bytes);
  }

  netbufferv4_update_valhi9_tbl_get_next_entry_handles_result result;
  try {
    iface_->update_valhi9_tbl_get_next_entry_handles(result.success, args.sess_hdl, args.dev_tgt, args.entry_hdl, args.n);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi9_tbl_get_next_entry_handles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi9_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi9_tbl_get_next_entry_handles");
  }

  oprot->writeMessageBegin("update_valhi9_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi9_tbl_get_next_entry_handles", bytes);
  }
}

void netbufferv4Processor::process_update_valhi9_tbl_get_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi9_tbl_get_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi9_tbl_get_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi9_tbl_get_entry");
  }

  netbufferv4_update_valhi9_tbl_get_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi9_tbl_get_entry", bytes);
  }

  netbufferv4_update_valhi9_tbl_get_entry_result result;
  try {
    iface_->update_valhi9_tbl_get_entry(result.success, args.sess_hdl, args.dev_id, args.entry_hdl, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi9_tbl_get_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi9_tbl_get_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi9_tbl_get_entry");
  }

  oprot->writeMessageBegin("update_valhi9_tbl_get_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi9_tbl_get_entry", bytes);
  }
}

void netbufferv4Processor::process_update_vallen_tbl_get_first_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallen_tbl_get_first_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallen_tbl_get_first_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallen_tbl_get_first_entry_handle");
  }

  netbufferv4_update_vallen_tbl_get_first_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallen_tbl_get_first_entry_handle", bytes);
  }

  netbufferv4_update_vallen_tbl_get_first_entry_handle_result result;
  try {
    result.success = iface_->update_vallen_tbl_get_first_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallen_tbl_get_first_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallen_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallen_tbl_get_first_entry_handle");
  }

  oprot->writeMessageBegin("update_vallen_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallen_tbl_get_first_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_vallen_tbl_get_next_entry_handles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallen_tbl_get_next_entry_handles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallen_tbl_get_next_entry_handles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallen_tbl_get_next_entry_handles");
  }

  netbufferv4_update_vallen_tbl_get_next_entry_handles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallen_tbl_get_next_entry_handles", bytes);
  }

  netbufferv4_update_vallen_tbl_get_next_entry_handles_result result;
  try {
    iface_->update_vallen_tbl_get_next_entry_handles(result.success, args.sess_hdl, args.dev_tgt, args.entry_hdl, args.n);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallen_tbl_get_next_entry_handles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallen_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallen_tbl_get_next_entry_handles");
  }

  oprot->writeMessageBegin("update_vallen_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallen_tbl_get_next_entry_handles", bytes);
  }
}

void netbufferv4Processor::process_update_vallen_tbl_get_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallen_tbl_get_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallen_tbl_get_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallen_tbl_get_entry");
  }

  netbufferv4_update_vallen_tbl_get_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallen_tbl_get_entry", bytes);
  }

  netbufferv4_update_vallen_tbl_get_entry_result result;
  try {
    iface_->update_vallen_tbl_get_entry(result.success, args.sess_hdl, args.dev_id, args.entry_hdl, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallen_tbl_get_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallen_tbl_get_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallen_tbl_get_entry");
  }

  oprot->writeMessageBegin("update_vallen_tbl_get_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallen_tbl_get_entry", bytes);
  }
}

void netbufferv4Processor::process_update_vallo10_tbl_get_first_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo10_tbl_get_first_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo10_tbl_get_first_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo10_tbl_get_first_entry_handle");
  }

  netbufferv4_update_vallo10_tbl_get_first_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo10_tbl_get_first_entry_handle", bytes);
  }

  netbufferv4_update_vallo10_tbl_get_first_entry_handle_result result;
  try {
    result.success = iface_->update_vallo10_tbl_get_first_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo10_tbl_get_first_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo10_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo10_tbl_get_first_entry_handle");
  }

  oprot->writeMessageBegin("update_vallo10_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo10_tbl_get_first_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_vallo10_tbl_get_next_entry_handles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo10_tbl_get_next_entry_handles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo10_tbl_get_next_entry_handles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo10_tbl_get_next_entry_handles");
  }

  netbufferv4_update_vallo10_tbl_get_next_entry_handles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo10_tbl_get_next_entry_handles", bytes);
  }

  netbufferv4_update_vallo10_tbl_get_next_entry_handles_result result;
  try {
    iface_->update_vallo10_tbl_get_next_entry_handles(result.success, args.sess_hdl, args.dev_tgt, args.entry_hdl, args.n);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo10_tbl_get_next_entry_handles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo10_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo10_tbl_get_next_entry_handles");
  }

  oprot->writeMessageBegin("update_vallo10_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo10_tbl_get_next_entry_handles", bytes);
  }
}

void netbufferv4Processor::process_update_vallo10_tbl_get_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo10_tbl_get_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo10_tbl_get_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo10_tbl_get_entry");
  }

  netbufferv4_update_vallo10_tbl_get_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo10_tbl_get_entry", bytes);
  }

  netbufferv4_update_vallo10_tbl_get_entry_result result;
  try {
    iface_->update_vallo10_tbl_get_entry(result.success, args.sess_hdl, args.dev_id, args.entry_hdl, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo10_tbl_get_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo10_tbl_get_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo10_tbl_get_entry");
  }

  oprot->writeMessageBegin("update_vallo10_tbl_get_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo10_tbl_get_entry", bytes);
  }
}

void netbufferv4Processor::process_update_vallo11_tbl_get_first_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo11_tbl_get_first_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo11_tbl_get_first_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo11_tbl_get_first_entry_handle");
  }

  netbufferv4_update_vallo11_tbl_get_first_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo11_tbl_get_first_entry_handle", bytes);
  }

  netbufferv4_update_vallo11_tbl_get_first_entry_handle_result result;
  try {
    result.success = iface_->update_vallo11_tbl_get_first_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo11_tbl_get_first_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo11_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo11_tbl_get_first_entry_handle");
  }

  oprot->writeMessageBegin("update_vallo11_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo11_tbl_get_first_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_vallo11_tbl_get_next_entry_handles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo11_tbl_get_next_entry_handles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo11_tbl_get_next_entry_handles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo11_tbl_get_next_entry_handles");
  }

  netbufferv4_update_vallo11_tbl_get_next_entry_handles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo11_tbl_get_next_entry_handles", bytes);
  }

  netbufferv4_update_vallo11_tbl_get_next_entry_handles_result result;
  try {
    iface_->update_vallo11_tbl_get_next_entry_handles(result.success, args.sess_hdl, args.dev_tgt, args.entry_hdl, args.n);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo11_tbl_get_next_entry_handles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo11_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo11_tbl_get_next_entry_handles");
  }

  oprot->writeMessageBegin("update_vallo11_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo11_tbl_get_next_entry_handles", bytes);
  }
}

void netbufferv4Processor::process_update_vallo11_tbl_get_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo11_tbl_get_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo11_tbl_get_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo11_tbl_get_entry");
  }

  netbufferv4_update_vallo11_tbl_get_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo11_tbl_get_entry", bytes);
  }

  netbufferv4_update_vallo11_tbl_get_entry_result result;
  try {
    iface_->update_vallo11_tbl_get_entry(result.success, args.sess_hdl, args.dev_id, args.entry_hdl, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo11_tbl_get_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo11_tbl_get_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo11_tbl_get_entry");
  }

  oprot->writeMessageBegin("update_vallo11_tbl_get_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo11_tbl_get_entry", bytes);
  }
}

void netbufferv4Processor::process_update_vallo12_tbl_get_first_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo12_tbl_get_first_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo12_tbl_get_first_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo12_tbl_get_first_entry_handle");
  }

  netbufferv4_update_vallo12_tbl_get_first_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo12_tbl_get_first_entry_handle", bytes);
  }

  netbufferv4_update_vallo12_tbl_get_first_entry_handle_result result;
  try {
    result.success = iface_->update_vallo12_tbl_get_first_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo12_tbl_get_first_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo12_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo12_tbl_get_first_entry_handle");
  }

  oprot->writeMessageBegin("update_vallo12_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo12_tbl_get_first_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_vallo12_tbl_get_next_entry_handles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo12_tbl_get_next_entry_handles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo12_tbl_get_next_entry_handles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo12_tbl_get_next_entry_handles");
  }

  netbufferv4_update_vallo12_tbl_get_next_entry_handles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo12_tbl_get_next_entry_handles", bytes);
  }

  netbufferv4_update_vallo12_tbl_get_next_entry_handles_result result;
  try {
    iface_->update_vallo12_tbl_get_next_entry_handles(result.success, args.sess_hdl, args.dev_tgt, args.entry_hdl, args.n);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo12_tbl_get_next_entry_handles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo12_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo12_tbl_get_next_entry_handles");
  }

  oprot->writeMessageBegin("update_vallo12_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo12_tbl_get_next_entry_handles", bytes);
  }
}

void netbufferv4Processor::process_update_vallo12_tbl_get_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo12_tbl_get_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo12_tbl_get_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo12_tbl_get_entry");
  }

  netbufferv4_update_vallo12_tbl_get_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo12_tbl_get_entry", bytes);
  }

  netbufferv4_update_vallo12_tbl_get_entry_result result;
  try {
    iface_->update_vallo12_tbl_get_entry(result.success, args.sess_hdl, args.dev_id, args.entry_hdl, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo12_tbl_get_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo12_tbl_get_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo12_tbl_get_entry");
  }

  oprot->writeMessageBegin("update_vallo12_tbl_get_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo12_tbl_get_entry", bytes);
  }
}

void netbufferv4Processor::process_update_vallo13_tbl_get_first_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo13_tbl_get_first_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo13_tbl_get_first_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo13_tbl_get_first_entry_handle");
  }

  netbufferv4_update_vallo13_tbl_get_first_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo13_tbl_get_first_entry_handle", bytes);
  }

  netbufferv4_update_vallo13_tbl_get_first_entry_handle_result result;
  try {
    result.success = iface_->update_vallo13_tbl_get_first_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo13_tbl_get_first_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo13_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo13_tbl_get_first_entry_handle");
  }

  oprot->writeMessageBegin("update_vallo13_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo13_tbl_get_first_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_vallo13_tbl_get_next_entry_handles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo13_tbl_get_next_entry_handles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo13_tbl_get_next_entry_handles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo13_tbl_get_next_entry_handles");
  }

  netbufferv4_update_vallo13_tbl_get_next_entry_handles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo13_tbl_get_next_entry_handles", bytes);
  }

  netbufferv4_update_vallo13_tbl_get_next_entry_handles_result result;
  try {
    iface_->update_vallo13_tbl_get_next_entry_handles(result.success, args.sess_hdl, args.dev_tgt, args.entry_hdl, args.n);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo13_tbl_get_next_entry_handles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo13_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo13_tbl_get_next_entry_handles");
  }

  oprot->writeMessageBegin("update_vallo13_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo13_tbl_get_next_entry_handles", bytes);
  }
}

void netbufferv4Processor::process_update_vallo13_tbl_get_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo13_tbl_get_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo13_tbl_get_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo13_tbl_get_entry");
  }

  netbufferv4_update_vallo13_tbl_get_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo13_tbl_get_entry", bytes);
  }

  netbufferv4_update_vallo13_tbl_get_entry_result result;
  try {
    iface_->update_vallo13_tbl_get_entry(result.success, args.sess_hdl, args.dev_id, args.entry_hdl, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo13_tbl_get_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo13_tbl_get_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo13_tbl_get_entry");
  }

  oprot->writeMessageBegin("update_vallo13_tbl_get_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo13_tbl_get_entry", bytes);
  }
}

void netbufferv4Processor::process_update_vallo14_tbl_get_first_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo14_tbl_get_first_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo14_tbl_get_first_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo14_tbl_get_first_entry_handle");
  }

  netbufferv4_update_vallo14_tbl_get_first_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo14_tbl_get_first_entry_handle", bytes);
  }

  netbufferv4_update_vallo14_tbl_get_first_entry_handle_result result;
  try {
    result.success = iface_->update_vallo14_tbl_get_first_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo14_tbl_get_first_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo14_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo14_tbl_get_first_entry_handle");
  }

  oprot->writeMessageBegin("update_vallo14_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo14_tbl_get_first_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_vallo14_tbl_get_next_entry_handles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo14_tbl_get_next_entry_handles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo14_tbl_get_next_entry_handles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo14_tbl_get_next_entry_handles");
  }

  netbufferv4_update_vallo14_tbl_get_next_entry_handles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo14_tbl_get_next_entry_handles", bytes);
  }

  netbufferv4_update_vallo14_tbl_get_next_entry_handles_result result;
  try {
    iface_->update_vallo14_tbl_get_next_entry_handles(result.success, args.sess_hdl, args.dev_tgt, args.entry_hdl, args.n);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo14_tbl_get_next_entry_handles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo14_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo14_tbl_get_next_entry_handles");
  }

  oprot->writeMessageBegin("update_vallo14_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo14_tbl_get_next_entry_handles", bytes);
  }
}

void netbufferv4Processor::process_update_vallo14_tbl_get_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo14_tbl_get_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo14_tbl_get_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo14_tbl_get_entry");
  }

  netbufferv4_update_vallo14_tbl_get_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo14_tbl_get_entry", bytes);
  }

  netbufferv4_update_vallo14_tbl_get_entry_result result;
  try {
    iface_->update_vallo14_tbl_get_entry(result.success, args.sess_hdl, args.dev_id, args.entry_hdl, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo14_tbl_get_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo14_tbl_get_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo14_tbl_get_entry");
  }

  oprot->writeMessageBegin("update_vallo14_tbl_get_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo14_tbl_get_entry", bytes);
  }
}

void netbufferv4Processor::process_update_vallo15_tbl_get_first_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo15_tbl_get_first_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo15_tbl_get_first_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo15_tbl_get_first_entry_handle");
  }

  netbufferv4_update_vallo15_tbl_get_first_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo15_tbl_get_first_entry_handle", bytes);
  }

  netbufferv4_update_vallo15_tbl_get_first_entry_handle_result result;
  try {
    result.success = iface_->update_vallo15_tbl_get_first_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo15_tbl_get_first_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo15_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo15_tbl_get_first_entry_handle");
  }

  oprot->writeMessageBegin("update_vallo15_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo15_tbl_get_first_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_vallo15_tbl_get_next_entry_handles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo15_tbl_get_next_entry_handles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo15_tbl_get_next_entry_handles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo15_tbl_get_next_entry_handles");
  }

  netbufferv4_update_vallo15_tbl_get_next_entry_handles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo15_tbl_get_next_entry_handles", bytes);
  }

  netbufferv4_update_vallo15_tbl_get_next_entry_handles_result result;
  try {
    iface_->update_vallo15_tbl_get_next_entry_handles(result.success, args.sess_hdl, args.dev_tgt, args.entry_hdl, args.n);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo15_tbl_get_next_entry_handles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo15_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo15_tbl_get_next_entry_handles");
  }

  oprot->writeMessageBegin("update_vallo15_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo15_tbl_get_next_entry_handles", bytes);
  }
}

void netbufferv4Processor::process_update_vallo15_tbl_get_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo15_tbl_get_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo15_tbl_get_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo15_tbl_get_entry");
  }

  netbufferv4_update_vallo15_tbl_get_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo15_tbl_get_entry", bytes);
  }

  netbufferv4_update_vallo15_tbl_get_entry_result result;
  try {
    iface_->update_vallo15_tbl_get_entry(result.success, args.sess_hdl, args.dev_id, args.entry_hdl, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo15_tbl_get_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo15_tbl_get_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo15_tbl_get_entry");
  }

  oprot->writeMessageBegin("update_vallo15_tbl_get_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo15_tbl_get_entry", bytes);
  }
}

void netbufferv4Processor::process_update_vallo16_tbl_get_first_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo16_tbl_get_first_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo16_tbl_get_first_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo16_tbl_get_first_entry_handle");
  }

  netbufferv4_update_vallo16_tbl_get_first_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo16_tbl_get_first_entry_handle", bytes);
  }

  netbufferv4_update_vallo16_tbl_get_first_entry_handle_result result;
  try {
    result.success = iface_->update_vallo16_tbl_get_first_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo16_tbl_get_first_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo16_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo16_tbl_get_first_entry_handle");
  }

  oprot->writeMessageBegin("update_vallo16_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo16_tbl_get_first_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_vallo16_tbl_get_next_entry_handles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo16_tbl_get_next_entry_handles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo16_tbl_get_next_entry_handles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo16_tbl_get_next_entry_handles");
  }

  netbufferv4_update_vallo16_tbl_get_next_entry_handles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo16_tbl_get_next_entry_handles", bytes);
  }

  netbufferv4_update_vallo16_tbl_get_next_entry_handles_result result;
  try {
    iface_->update_vallo16_tbl_get_next_entry_handles(result.success, args.sess_hdl, args.dev_tgt, args.entry_hdl, args.n);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo16_tbl_get_next_entry_handles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo16_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo16_tbl_get_next_entry_handles");
  }

  oprot->writeMessageBegin("update_vallo16_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo16_tbl_get_next_entry_handles", bytes);
  }
}

void netbufferv4Processor::process_update_vallo16_tbl_get_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo16_tbl_get_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo16_tbl_get_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo16_tbl_get_entry");
  }

  netbufferv4_update_vallo16_tbl_get_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo16_tbl_get_entry", bytes);
  }

  netbufferv4_update_vallo16_tbl_get_entry_result result;
  try {
    iface_->update_vallo16_tbl_get_entry(result.success, args.sess_hdl, args.dev_id, args.entry_hdl, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo16_tbl_get_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo16_tbl_get_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo16_tbl_get_entry");
  }

  oprot->writeMessageBegin("update_vallo16_tbl_get_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo16_tbl_get_entry", bytes);
  }
}

void netbufferv4Processor::process_update_vallo1_tbl_get_first_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo1_tbl_get_first_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo1_tbl_get_first_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo1_tbl_get_first_entry_handle");
  }

  netbufferv4_update_vallo1_tbl_get_first_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo1_tbl_get_first_entry_handle", bytes);
  }

  netbufferv4_update_vallo1_tbl_get_first_entry_handle_result result;
  try {
    result.success = iface_->update_vallo1_tbl_get_first_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo1_tbl_get_first_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo1_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo1_tbl_get_first_entry_handle");
  }

  oprot->writeMessageBegin("update_vallo1_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo1_tbl_get_first_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_vallo1_tbl_get_next_entry_handles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo1_tbl_get_next_entry_handles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo1_tbl_get_next_entry_handles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo1_tbl_get_next_entry_handles");
  }

  netbufferv4_update_vallo1_tbl_get_next_entry_handles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo1_tbl_get_next_entry_handles", bytes);
  }

  netbufferv4_update_vallo1_tbl_get_next_entry_handles_result result;
  try {
    iface_->update_vallo1_tbl_get_next_entry_handles(result.success, args.sess_hdl, args.dev_tgt, args.entry_hdl, args.n);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo1_tbl_get_next_entry_handles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo1_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo1_tbl_get_next_entry_handles");
  }

  oprot->writeMessageBegin("update_vallo1_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo1_tbl_get_next_entry_handles", bytes);
  }
}

void netbufferv4Processor::process_update_vallo1_tbl_get_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo1_tbl_get_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo1_tbl_get_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo1_tbl_get_entry");
  }

  netbufferv4_update_vallo1_tbl_get_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo1_tbl_get_entry", bytes);
  }

  netbufferv4_update_vallo1_tbl_get_entry_result result;
  try {
    iface_->update_vallo1_tbl_get_entry(result.success, args.sess_hdl, args.dev_id, args.entry_hdl, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo1_tbl_get_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo1_tbl_get_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo1_tbl_get_entry");
  }

  oprot->writeMessageBegin("update_vallo1_tbl_get_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo1_tbl_get_entry", bytes);
  }
}

void netbufferv4Processor::process_update_vallo2_tbl_get_first_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo2_tbl_get_first_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo2_tbl_get_first_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo2_tbl_get_first_entry_handle");
  }

  netbufferv4_update_vallo2_tbl_get_first_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo2_tbl_get_first_entry_handle", bytes);
  }

  netbufferv4_update_vallo2_tbl_get_first_entry_handle_result result;
  try {
    result.success = iface_->update_vallo2_tbl_get_first_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo2_tbl_get_first_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo2_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo2_tbl_get_first_entry_handle");
  }

  oprot->writeMessageBegin("update_vallo2_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo2_tbl_get_first_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_vallo2_tbl_get_next_entry_handles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo2_tbl_get_next_entry_handles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo2_tbl_get_next_entry_handles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo2_tbl_get_next_entry_handles");
  }

  netbufferv4_update_vallo2_tbl_get_next_entry_handles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo2_tbl_get_next_entry_handles", bytes);
  }

  netbufferv4_update_vallo2_tbl_get_next_entry_handles_result result;
  try {
    iface_->update_vallo2_tbl_get_next_entry_handles(result.success, args.sess_hdl, args.dev_tgt, args.entry_hdl, args.n);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo2_tbl_get_next_entry_handles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo2_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo2_tbl_get_next_entry_handles");
  }

  oprot->writeMessageBegin("update_vallo2_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo2_tbl_get_next_entry_handles", bytes);
  }
}

void netbufferv4Processor::process_update_vallo2_tbl_get_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo2_tbl_get_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo2_tbl_get_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo2_tbl_get_entry");
  }

  netbufferv4_update_vallo2_tbl_get_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo2_tbl_get_entry", bytes);
  }

  netbufferv4_update_vallo2_tbl_get_entry_result result;
  try {
    iface_->update_vallo2_tbl_get_entry(result.success, args.sess_hdl, args.dev_id, args.entry_hdl, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo2_tbl_get_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo2_tbl_get_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo2_tbl_get_entry");
  }

  oprot->writeMessageBegin("update_vallo2_tbl_get_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo2_tbl_get_entry", bytes);
  }
}

void netbufferv4Processor::process_update_vallo3_tbl_get_first_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo3_tbl_get_first_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo3_tbl_get_first_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo3_tbl_get_first_entry_handle");
  }

  netbufferv4_update_vallo3_tbl_get_first_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo3_tbl_get_first_entry_handle", bytes);
  }

  netbufferv4_update_vallo3_tbl_get_first_entry_handle_result result;
  try {
    result.success = iface_->update_vallo3_tbl_get_first_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo3_tbl_get_first_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo3_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo3_tbl_get_first_entry_handle");
  }

  oprot->writeMessageBegin("update_vallo3_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo3_tbl_get_first_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_vallo3_tbl_get_next_entry_handles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo3_tbl_get_next_entry_handles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo3_tbl_get_next_entry_handles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo3_tbl_get_next_entry_handles");
  }

  netbufferv4_update_vallo3_tbl_get_next_entry_handles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo3_tbl_get_next_entry_handles", bytes);
  }

  netbufferv4_update_vallo3_tbl_get_next_entry_handles_result result;
  try {
    iface_->update_vallo3_tbl_get_next_entry_handles(result.success, args.sess_hdl, args.dev_tgt, args.entry_hdl, args.n);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo3_tbl_get_next_entry_handles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo3_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo3_tbl_get_next_entry_handles");
  }

  oprot->writeMessageBegin("update_vallo3_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo3_tbl_get_next_entry_handles", bytes);
  }
}

void netbufferv4Processor::process_update_vallo3_tbl_get_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo3_tbl_get_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo3_tbl_get_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo3_tbl_get_entry");
  }

  netbufferv4_update_vallo3_tbl_get_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo3_tbl_get_entry", bytes);
  }

  netbufferv4_update_vallo3_tbl_get_entry_result result;
  try {
    iface_->update_vallo3_tbl_get_entry(result.success, args.sess_hdl, args.dev_id, args.entry_hdl, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo3_tbl_get_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo3_tbl_get_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo3_tbl_get_entry");
  }

  oprot->writeMessageBegin("update_vallo3_tbl_get_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo3_tbl_get_entry", bytes);
  }
}

void netbufferv4Processor::process_update_vallo4_tbl_get_first_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo4_tbl_get_first_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo4_tbl_get_first_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo4_tbl_get_first_entry_handle");
  }

  netbufferv4_update_vallo4_tbl_get_first_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo4_tbl_get_first_entry_handle", bytes);
  }

  netbufferv4_update_vallo4_tbl_get_first_entry_handle_result result;
  try {
    result.success = iface_->update_vallo4_tbl_get_first_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo4_tbl_get_first_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo4_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo4_tbl_get_first_entry_handle");
  }

  oprot->writeMessageBegin("update_vallo4_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo4_tbl_get_first_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_vallo4_tbl_get_next_entry_handles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo4_tbl_get_next_entry_handles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo4_tbl_get_next_entry_handles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo4_tbl_get_next_entry_handles");
  }

  netbufferv4_update_vallo4_tbl_get_next_entry_handles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo4_tbl_get_next_entry_handles", bytes);
  }

  netbufferv4_update_vallo4_tbl_get_next_entry_handles_result result;
  try {
    iface_->update_vallo4_tbl_get_next_entry_handles(result.success, args.sess_hdl, args.dev_tgt, args.entry_hdl, args.n);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo4_tbl_get_next_entry_handles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo4_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo4_tbl_get_next_entry_handles");
  }

  oprot->writeMessageBegin("update_vallo4_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo4_tbl_get_next_entry_handles", bytes);
  }
}

void netbufferv4Processor::process_update_vallo4_tbl_get_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo4_tbl_get_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo4_tbl_get_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo4_tbl_get_entry");
  }

  netbufferv4_update_vallo4_tbl_get_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo4_tbl_get_entry", bytes);
  }

  netbufferv4_update_vallo4_tbl_get_entry_result result;
  try {
    iface_->update_vallo4_tbl_get_entry(result.success, args.sess_hdl, args.dev_id, args.entry_hdl, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo4_tbl_get_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo4_tbl_get_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo4_tbl_get_entry");
  }

  oprot->writeMessageBegin("update_vallo4_tbl_get_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo4_tbl_get_entry", bytes);
  }
}

void netbufferv4Processor::process_update_vallo5_tbl_get_first_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo5_tbl_get_first_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo5_tbl_get_first_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo5_tbl_get_first_entry_handle");
  }

  netbufferv4_update_vallo5_tbl_get_first_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo5_tbl_get_first_entry_handle", bytes);
  }

  netbufferv4_update_vallo5_tbl_get_first_entry_handle_result result;
  try {
    result.success = iface_->update_vallo5_tbl_get_first_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo5_tbl_get_first_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo5_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo5_tbl_get_first_entry_handle");
  }

  oprot->writeMessageBegin("update_vallo5_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo5_tbl_get_first_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_vallo5_tbl_get_next_entry_handles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo5_tbl_get_next_entry_handles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo5_tbl_get_next_entry_handles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo5_tbl_get_next_entry_handles");
  }

  netbufferv4_update_vallo5_tbl_get_next_entry_handles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo5_tbl_get_next_entry_handles", bytes);
  }

  netbufferv4_update_vallo5_tbl_get_next_entry_handles_result result;
  try {
    iface_->update_vallo5_tbl_get_next_entry_handles(result.success, args.sess_hdl, args.dev_tgt, args.entry_hdl, args.n);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo5_tbl_get_next_entry_handles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo5_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo5_tbl_get_next_entry_handles");
  }

  oprot->writeMessageBegin("update_vallo5_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo5_tbl_get_next_entry_handles", bytes);
  }
}

void netbufferv4Processor::process_update_vallo5_tbl_get_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo5_tbl_get_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo5_tbl_get_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo5_tbl_get_entry");
  }

  netbufferv4_update_vallo5_tbl_get_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo5_tbl_get_entry", bytes);
  }

  netbufferv4_update_vallo5_tbl_get_entry_result result;
  try {
    iface_->update_vallo5_tbl_get_entry(result.success, args.sess_hdl, args.dev_id, args.entry_hdl, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo5_tbl_get_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo5_tbl_get_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo5_tbl_get_entry");
  }

  oprot->writeMessageBegin("update_vallo5_tbl_get_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo5_tbl_get_entry", bytes);
  }
}

void netbufferv4Processor::process_update_vallo6_tbl_get_first_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo6_tbl_get_first_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo6_tbl_get_first_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo6_tbl_get_first_entry_handle");
  }

  netbufferv4_update_vallo6_tbl_get_first_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo6_tbl_get_first_entry_handle", bytes);
  }

  netbufferv4_update_vallo6_tbl_get_first_entry_handle_result result;
  try {
    result.success = iface_->update_vallo6_tbl_get_first_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo6_tbl_get_first_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo6_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo6_tbl_get_first_entry_handle");
  }

  oprot->writeMessageBegin("update_vallo6_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo6_tbl_get_first_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_vallo6_tbl_get_next_entry_handles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo6_tbl_get_next_entry_handles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo6_tbl_get_next_entry_handles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo6_tbl_get_next_entry_handles");
  }

  netbufferv4_update_vallo6_tbl_get_next_entry_handles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo6_tbl_get_next_entry_handles", bytes);
  }

  netbufferv4_update_vallo6_tbl_get_next_entry_handles_result result;
  try {
    iface_->update_vallo6_tbl_get_next_entry_handles(result.success, args.sess_hdl, args.dev_tgt, args.entry_hdl, args.n);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo6_tbl_get_next_entry_handles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo6_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo6_tbl_get_next_entry_handles");
  }

  oprot->writeMessageBegin("update_vallo6_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo6_tbl_get_next_entry_handles", bytes);
  }
}

void netbufferv4Processor::process_update_vallo6_tbl_get_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo6_tbl_get_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo6_tbl_get_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo6_tbl_get_entry");
  }

  netbufferv4_update_vallo6_tbl_get_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo6_tbl_get_entry", bytes);
  }

  netbufferv4_update_vallo6_tbl_get_entry_result result;
  try {
    iface_->update_vallo6_tbl_get_entry(result.success, args.sess_hdl, args.dev_id, args.entry_hdl, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo6_tbl_get_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo6_tbl_get_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo6_tbl_get_entry");
  }

  oprot->writeMessageBegin("update_vallo6_tbl_get_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo6_tbl_get_entry", bytes);
  }
}

void netbufferv4Processor::process_update_vallo7_tbl_get_first_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo7_tbl_get_first_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo7_tbl_get_first_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo7_tbl_get_first_entry_handle");
  }

  netbufferv4_update_vallo7_tbl_get_first_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo7_tbl_get_first_entry_handle", bytes);
  }

  netbufferv4_update_vallo7_tbl_get_first_entry_handle_result result;
  try {
    result.success = iface_->update_vallo7_tbl_get_first_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo7_tbl_get_first_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo7_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo7_tbl_get_first_entry_handle");
  }

  oprot->writeMessageBegin("update_vallo7_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo7_tbl_get_first_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_vallo7_tbl_get_next_entry_handles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo7_tbl_get_next_entry_handles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo7_tbl_get_next_entry_handles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo7_tbl_get_next_entry_handles");
  }

  netbufferv4_update_vallo7_tbl_get_next_entry_handles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo7_tbl_get_next_entry_handles", bytes);
  }

  netbufferv4_update_vallo7_tbl_get_next_entry_handles_result result;
  try {
    iface_->update_vallo7_tbl_get_next_entry_handles(result.success, args.sess_hdl, args.dev_tgt, args.entry_hdl, args.n);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo7_tbl_get_next_entry_handles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo7_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo7_tbl_get_next_entry_handles");
  }

  oprot->writeMessageBegin("update_vallo7_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo7_tbl_get_next_entry_handles", bytes);
  }
}

void netbufferv4Processor::process_update_vallo7_tbl_get_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo7_tbl_get_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo7_tbl_get_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo7_tbl_get_entry");
  }

  netbufferv4_update_vallo7_tbl_get_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo7_tbl_get_entry", bytes);
  }

  netbufferv4_update_vallo7_tbl_get_entry_result result;
  try {
    iface_->update_vallo7_tbl_get_entry(result.success, args.sess_hdl, args.dev_id, args.entry_hdl, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo7_tbl_get_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo7_tbl_get_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo7_tbl_get_entry");
  }

  oprot->writeMessageBegin("update_vallo7_tbl_get_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo7_tbl_get_entry", bytes);
  }
}

void netbufferv4Processor::process_update_vallo8_tbl_get_first_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo8_tbl_get_first_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo8_tbl_get_first_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo8_tbl_get_first_entry_handle");
  }

  netbufferv4_update_vallo8_tbl_get_first_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo8_tbl_get_first_entry_handle", bytes);
  }

  netbufferv4_update_vallo8_tbl_get_first_entry_handle_result result;
  try {
    result.success = iface_->update_vallo8_tbl_get_first_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo8_tbl_get_first_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo8_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo8_tbl_get_first_entry_handle");
  }

  oprot->writeMessageBegin("update_vallo8_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo8_tbl_get_first_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_vallo8_tbl_get_next_entry_handles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo8_tbl_get_next_entry_handles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo8_tbl_get_next_entry_handles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo8_tbl_get_next_entry_handles");
  }

  netbufferv4_update_vallo8_tbl_get_next_entry_handles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo8_tbl_get_next_entry_handles", bytes);
  }

  netbufferv4_update_vallo8_tbl_get_next_entry_handles_result result;
  try {
    iface_->update_vallo8_tbl_get_next_entry_handles(result.success, args.sess_hdl, args.dev_tgt, args.entry_hdl, args.n);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo8_tbl_get_next_entry_handles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo8_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo8_tbl_get_next_entry_handles");
  }

  oprot->writeMessageBegin("update_vallo8_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo8_tbl_get_next_entry_handles", bytes);
  }
}

void netbufferv4Processor::process_update_vallo8_tbl_get_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo8_tbl_get_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo8_tbl_get_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo8_tbl_get_entry");
  }

  netbufferv4_update_vallo8_tbl_get_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo8_tbl_get_entry", bytes);
  }

  netbufferv4_update_vallo8_tbl_get_entry_result result;
  try {
    iface_->update_vallo8_tbl_get_entry(result.success, args.sess_hdl, args.dev_id, args.entry_hdl, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo8_tbl_get_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo8_tbl_get_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo8_tbl_get_entry");
  }

  oprot->writeMessageBegin("update_vallo8_tbl_get_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo8_tbl_get_entry", bytes);
  }
}

void netbufferv4Processor::process_update_vallo9_tbl_get_first_entry_handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo9_tbl_get_first_entry_handle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo9_tbl_get_first_entry_handle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo9_tbl_get_first_entry_handle");
  }

  netbufferv4_update_vallo9_tbl_get_first_entry_handle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo9_tbl_get_first_entry_handle", bytes);
  }

  netbufferv4_update_vallo9_tbl_get_first_entry_handle_result result;
  try {
    result.success = iface_->update_vallo9_tbl_get_first_entry_handle(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo9_tbl_get_first_entry_handle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo9_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo9_tbl_get_first_entry_handle");
  }

  oprot->writeMessageBegin("update_vallo9_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo9_tbl_get_first_entry_handle", bytes);
  }
}

void netbufferv4Processor::process_update_vallo9_tbl_get_next_entry_handles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo9_tbl_get_next_entry_handles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo9_tbl_get_next_entry_handles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo9_tbl_get_next_entry_handles");
  }

  netbufferv4_update_vallo9_tbl_get_next_entry_handles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo9_tbl_get_next_entry_handles", bytes);
  }

  netbufferv4_update_vallo9_tbl_get_next_entry_handles_result result;
  try {
    iface_->update_vallo9_tbl_get_next_entry_handles(result.success, args.sess_hdl, args.dev_tgt, args.entry_hdl, args.n);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo9_tbl_get_next_entry_handles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo9_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo9_tbl_get_next_entry_handles");
  }

  oprot->writeMessageBegin("update_vallo9_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo9_tbl_get_next_entry_handles", bytes);
  }
}

void netbufferv4Processor::process_update_vallo9_tbl_get_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo9_tbl_get_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo9_tbl_get_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo9_tbl_get_entry");
  }

  netbufferv4_update_vallo9_tbl_get_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo9_tbl_get_entry", bytes);
  }

  netbufferv4_update_vallo9_tbl_get_entry_result result;
  try {
    iface_->update_vallo9_tbl_get_entry(result.success, args.sess_hdl, args.dev_id, args.entry_hdl, args.read_from_hw);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo9_tbl_get_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo9_tbl_get_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo9_tbl_get_entry");
  }

  oprot->writeMessageBegin("update_vallo9_tbl_get_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo9_tbl_get_entry", bytes);
  }
}

void netbufferv4Processor::process_access_cache_frequency_tbl_set_default_action_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cache_frequency_tbl_set_default_action_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cache_frequency_tbl_set_default_action_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cache_frequency_tbl_set_default_action_nop");
  }

  netbufferv4_access_cache_frequency_tbl_set_default_action_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cache_frequency_tbl_set_default_action_nop", bytes);
  }

  netbufferv4_access_cache_frequency_tbl_set_default_action_nop_result result;
  try {
    result.success = iface_->access_cache_frequency_tbl_set_default_action_nop(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cache_frequency_tbl_set_default_action_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cache_frequency_tbl_set_default_action_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cache_frequency_tbl_set_default_action_nop");
  }

  oprot->writeMessageBegin("access_cache_frequency_tbl_set_default_action_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cache_frequency_tbl_set_default_action_nop", bytes);
  }
}

void netbufferv4Processor::process_access_case1_tbl_set_default_action_reset_is_case1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_case1_tbl_set_default_action_reset_is_case1", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_case1_tbl_set_default_action_reset_is_case1");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_case1_tbl_set_default_action_reset_is_case1");
  }

  netbufferv4_access_case1_tbl_set_default_action_reset_is_case1_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_case1_tbl_set_default_action_reset_is_case1", bytes);
  }

  netbufferv4_access_case1_tbl_set_default_action_reset_is_case1_result result;
  try {
    result.success = iface_->access_case1_tbl_set_default_action_reset_is_case1(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_case1_tbl_set_default_action_reset_is_case1");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_case1_tbl_set_default_action_reset_is_case1", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_case1_tbl_set_default_action_reset_is_case1");
  }

  oprot->writeMessageBegin("access_case1_tbl_set_default_action_reset_is_case1", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_case1_tbl_set_default_action_reset_is_case1", bytes);
  }
}

void netbufferv4Processor::process_access_cm1_tbl_set_default_action_initialize_cm1_predicate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm1_tbl_set_default_action_initialize_cm1_predicate", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm1_tbl_set_default_action_initialize_cm1_predicate");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm1_tbl_set_default_action_initialize_cm1_predicate");
  }

  netbufferv4_access_cm1_tbl_set_default_action_initialize_cm1_predicate_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm1_tbl_set_default_action_initialize_cm1_predicate", bytes);
  }

  netbufferv4_access_cm1_tbl_set_default_action_initialize_cm1_predicate_result result;
  try {
    result.success = iface_->access_cm1_tbl_set_default_action_initialize_cm1_predicate(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm1_tbl_set_default_action_initialize_cm1_predicate");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm1_tbl_set_default_action_initialize_cm1_predicate", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm1_tbl_set_default_action_initialize_cm1_predicate");
  }

  oprot->writeMessageBegin("access_cm1_tbl_set_default_action_initialize_cm1_predicate", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm1_tbl_set_default_action_initialize_cm1_predicate", bytes);
  }
}

void netbufferv4Processor::process_access_cm2_tbl_set_default_action_initialize_cm2_predicate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm2_tbl_set_default_action_initialize_cm2_predicate", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm2_tbl_set_default_action_initialize_cm2_predicate");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm2_tbl_set_default_action_initialize_cm2_predicate");
  }

  netbufferv4_access_cm2_tbl_set_default_action_initialize_cm2_predicate_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm2_tbl_set_default_action_initialize_cm2_predicate", bytes);
  }

  netbufferv4_access_cm2_tbl_set_default_action_initialize_cm2_predicate_result result;
  try {
    result.success = iface_->access_cm2_tbl_set_default_action_initialize_cm2_predicate(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm2_tbl_set_default_action_initialize_cm2_predicate");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm2_tbl_set_default_action_initialize_cm2_predicate", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm2_tbl_set_default_action_initialize_cm2_predicate");
  }

  oprot->writeMessageBegin("access_cm2_tbl_set_default_action_initialize_cm2_predicate", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm2_tbl_set_default_action_initialize_cm2_predicate", bytes);
  }
}

void netbufferv4Processor::process_access_cm3_tbl_set_default_action_initialize_cm3_predicate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm3_tbl_set_default_action_initialize_cm3_predicate", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm3_tbl_set_default_action_initialize_cm3_predicate");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm3_tbl_set_default_action_initialize_cm3_predicate");
  }

  netbufferv4_access_cm3_tbl_set_default_action_initialize_cm3_predicate_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm3_tbl_set_default_action_initialize_cm3_predicate", bytes);
  }

  netbufferv4_access_cm3_tbl_set_default_action_initialize_cm3_predicate_result result;
  try {
    result.success = iface_->access_cm3_tbl_set_default_action_initialize_cm3_predicate(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm3_tbl_set_default_action_initialize_cm3_predicate");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm3_tbl_set_default_action_initialize_cm3_predicate", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm3_tbl_set_default_action_initialize_cm3_predicate");
  }

  oprot->writeMessageBegin("access_cm3_tbl_set_default_action_initialize_cm3_predicate", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm3_tbl_set_default_action_initialize_cm3_predicate", bytes);
  }
}

void netbufferv4Processor::process_access_cm4_tbl_set_default_action_initialize_cm4_predicate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm4_tbl_set_default_action_initialize_cm4_predicate", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm4_tbl_set_default_action_initialize_cm4_predicate");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm4_tbl_set_default_action_initialize_cm4_predicate");
  }

  netbufferv4_access_cm4_tbl_set_default_action_initialize_cm4_predicate_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm4_tbl_set_default_action_initialize_cm4_predicate", bytes);
  }

  netbufferv4_access_cm4_tbl_set_default_action_initialize_cm4_predicate_result result;
  try {
    result.success = iface_->access_cm4_tbl_set_default_action_initialize_cm4_predicate(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm4_tbl_set_default_action_initialize_cm4_predicate");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm4_tbl_set_default_action_initialize_cm4_predicate", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm4_tbl_set_default_action_initialize_cm4_predicate");
  }

  oprot->writeMessageBegin("access_cm4_tbl_set_default_action_initialize_cm4_predicate", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm4_tbl_set_default_action_initialize_cm4_predicate", bytes);
  }
}

void netbufferv4Processor::process_access_deleted_tbl_set_default_action_reset_is_deleted(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_deleted_tbl_set_default_action_reset_is_deleted", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_deleted_tbl_set_default_action_reset_is_deleted");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_deleted_tbl_set_default_action_reset_is_deleted");
  }

  netbufferv4_access_deleted_tbl_set_default_action_reset_is_deleted_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_deleted_tbl_set_default_action_reset_is_deleted", bytes);
  }

  netbufferv4_access_deleted_tbl_set_default_action_reset_is_deleted_result result;
  try {
    result.success = iface_->access_deleted_tbl_set_default_action_reset_is_deleted(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_deleted_tbl_set_default_action_reset_is_deleted");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_deleted_tbl_set_default_action_reset_is_deleted", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_deleted_tbl_set_default_action_reset_is_deleted");
  }

  oprot->writeMessageBegin("access_deleted_tbl_set_default_action_reset_is_deleted", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_deleted_tbl_set_default_action_reset_is_deleted", bytes);
  }
}

void netbufferv4Processor::process_access_latest_tbl_set_default_action_reset_is_latest(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_latest_tbl_set_default_action_reset_is_latest", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_latest_tbl_set_default_action_reset_is_latest");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_latest_tbl_set_default_action_reset_is_latest");
  }

  netbufferv4_access_latest_tbl_set_default_action_reset_is_latest_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_latest_tbl_set_default_action_reset_is_latest", bytes);
  }

  netbufferv4_access_latest_tbl_set_default_action_reset_is_latest_result result;
  try {
    result.success = iface_->access_latest_tbl_set_default_action_reset_is_latest(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_latest_tbl_set_default_action_reset_is_latest");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_latest_tbl_set_default_action_reset_is_latest", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_latest_tbl_set_default_action_reset_is_latest");
  }

  oprot->writeMessageBegin("access_latest_tbl_set_default_action_reset_is_latest", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_latest_tbl_set_default_action_reset_is_latest", bytes);
  }
}

void netbufferv4Processor::process_access_savedseq_tbl_set_default_action_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_savedseq_tbl_set_default_action_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_savedseq_tbl_set_default_action_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_savedseq_tbl_set_default_action_nop");
  }

  netbufferv4_access_savedseq_tbl_set_default_action_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_savedseq_tbl_set_default_action_nop", bytes);
  }

  netbufferv4_access_savedseq_tbl_set_default_action_nop_result result;
  try {
    result.success = iface_->access_savedseq_tbl_set_default_action_nop(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_savedseq_tbl_set_default_action_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_savedseq_tbl_set_default_action_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_savedseq_tbl_set_default_action_nop");
  }

  oprot->writeMessageBegin("access_savedseq_tbl_set_default_action_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_savedseq_tbl_set_default_action_nop", bytes);
  }
}

void netbufferv4Processor::process_access_seq_tbl_set_default_action_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_seq_tbl_set_default_action_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_seq_tbl_set_default_action_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_seq_tbl_set_default_action_nop");
  }

  netbufferv4_access_seq_tbl_set_default_action_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_seq_tbl_set_default_action_nop", bytes);
  }

  netbufferv4_access_seq_tbl_set_default_action_nop_result result;
  try {
    result.success = iface_->access_seq_tbl_set_default_action_nop(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_seq_tbl_set_default_action_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_seq_tbl_set_default_action_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_seq_tbl_set_default_action_nop");
  }

  oprot->writeMessageBegin("access_seq_tbl_set_default_action_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_seq_tbl_set_default_action_nop", bytes);
  }
}

void netbufferv4Processor::process_access_validvalue_tbl_set_default_action_reset_meta_validvalue(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_validvalue_tbl_set_default_action_reset_meta_validvalue", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_validvalue_tbl_set_default_action_reset_meta_validvalue");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_validvalue_tbl_set_default_action_reset_meta_validvalue");
  }

  netbufferv4_access_validvalue_tbl_set_default_action_reset_meta_validvalue_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_validvalue_tbl_set_default_action_reset_meta_validvalue", bytes);
  }

  netbufferv4_access_validvalue_tbl_set_default_action_reset_meta_validvalue_result result;
  try {
    result.success = iface_->access_validvalue_tbl_set_default_action_reset_meta_validvalue(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_validvalue_tbl_set_default_action_reset_meta_validvalue");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_validvalue_tbl_set_default_action_reset_meta_validvalue", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_validvalue_tbl_set_default_action_reset_meta_validvalue");
  }

  oprot->writeMessageBegin("access_validvalue_tbl_set_default_action_reset_meta_validvalue", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_validvalue_tbl_set_default_action_reset_meta_validvalue", bytes);
  }
}

void netbufferv4Processor::process_add_and_remove_value_header_tbl_set_default_action_remove_all(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.add_and_remove_value_header_tbl_set_default_action_remove_all", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.add_and_remove_value_header_tbl_set_default_action_remove_all");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_set_default_action_remove_all");
  }

  netbufferv4_add_and_remove_value_header_tbl_set_default_action_remove_all_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_set_default_action_remove_all", bytes);
  }

  netbufferv4_add_and_remove_value_header_tbl_set_default_action_remove_all_result result;
  try {
    result.success = iface_->add_and_remove_value_header_tbl_set_default_action_remove_all(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.add_and_remove_value_header_tbl_set_default_action_remove_all");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("add_and_remove_value_header_tbl_set_default_action_remove_all", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_set_default_action_remove_all");
  }

  oprot->writeMessageBegin("add_and_remove_value_header_tbl_set_default_action_remove_all", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_set_default_action_remove_all", bytes);
  }
}

void netbufferv4Processor::process_cache_lookup_tbl_set_default_action_uncached_action(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.cache_lookup_tbl_set_default_action_uncached_action", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.cache_lookup_tbl_set_default_action_uncached_action");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.cache_lookup_tbl_set_default_action_uncached_action");
  }

  netbufferv4_cache_lookup_tbl_set_default_action_uncached_action_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.cache_lookup_tbl_set_default_action_uncached_action", bytes);
  }

  netbufferv4_cache_lookup_tbl_set_default_action_uncached_action_result result;
  try {
    result.success = iface_->cache_lookup_tbl_set_default_action_uncached_action(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.cache_lookup_tbl_set_default_action_uncached_action");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("cache_lookup_tbl_set_default_action_uncached_action", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.cache_lookup_tbl_set_default_action_uncached_action");
  }

  oprot->writeMessageBegin("cache_lookup_tbl_set_default_action_uncached_action", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.cache_lookup_tbl_set_default_action_uncached_action", bytes);
  }
}

void netbufferv4Processor::process_drop_tbl_set_default_action_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.drop_tbl_set_default_action_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.drop_tbl_set_default_action_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.drop_tbl_set_default_action_nop");
  }

  netbufferv4_drop_tbl_set_default_action_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.drop_tbl_set_default_action_nop", bytes);
  }

  netbufferv4_drop_tbl_set_default_action_nop_result result;
  try {
    result.success = iface_->drop_tbl_set_default_action_nop(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.drop_tbl_set_default_action_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("drop_tbl_set_default_action_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.drop_tbl_set_default_action_nop");
  }

  oprot->writeMessageBegin("drop_tbl_set_default_action_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.drop_tbl_set_default_action_nop", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_set_default_action_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_set_default_action_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_set_default_action_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_set_default_action_nop");
  }

  netbufferv4_eg_port_forward_tbl_set_default_action_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_set_default_action_nop", bytes);
  }

  netbufferv4_eg_port_forward_tbl_set_default_action_nop_result result;
  try {
    result.success = iface_->eg_port_forward_tbl_set_default_action_nop(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_set_default_action_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_set_default_action_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_set_default_action_nop");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_set_default_action_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_set_default_action_nop", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm1_tbl_set_default_action_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm1_tbl_set_default_action_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm1_tbl_set_default_action_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm1_tbl_set_default_action_nop");
  }

  netbufferv4_hash_for_cm1_tbl_set_default_action_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm1_tbl_set_default_action_nop", bytes);
  }

  netbufferv4_hash_for_cm1_tbl_set_default_action_nop_result result;
  try {
    result.success = iface_->hash_for_cm1_tbl_set_default_action_nop(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm1_tbl_set_default_action_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm1_tbl_set_default_action_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm1_tbl_set_default_action_nop");
  }

  oprot->writeMessageBegin("hash_for_cm1_tbl_set_default_action_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm1_tbl_set_default_action_nop", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm2_tbl_set_default_action_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm2_tbl_set_default_action_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm2_tbl_set_default_action_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm2_tbl_set_default_action_nop");
  }

  netbufferv4_hash_for_cm2_tbl_set_default_action_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm2_tbl_set_default_action_nop", bytes);
  }

  netbufferv4_hash_for_cm2_tbl_set_default_action_nop_result result;
  try {
    result.success = iface_->hash_for_cm2_tbl_set_default_action_nop(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm2_tbl_set_default_action_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm2_tbl_set_default_action_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm2_tbl_set_default_action_nop");
  }

  oprot->writeMessageBegin("hash_for_cm2_tbl_set_default_action_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm2_tbl_set_default_action_nop", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm3_tbl_set_default_action_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm3_tbl_set_default_action_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm3_tbl_set_default_action_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm3_tbl_set_default_action_nop");
  }

  netbufferv4_hash_for_cm3_tbl_set_default_action_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm3_tbl_set_default_action_nop", bytes);
  }

  netbufferv4_hash_for_cm3_tbl_set_default_action_nop_result result;
  try {
    result.success = iface_->hash_for_cm3_tbl_set_default_action_nop(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm3_tbl_set_default_action_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm3_tbl_set_default_action_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm3_tbl_set_default_action_nop");
  }

  oprot->writeMessageBegin("hash_for_cm3_tbl_set_default_action_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm3_tbl_set_default_action_nop", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm4_tbl_set_default_action_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm4_tbl_set_default_action_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm4_tbl_set_default_action_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm4_tbl_set_default_action_nop");
  }

  netbufferv4_hash_for_cm4_tbl_set_default_action_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm4_tbl_set_default_action_nop", bytes);
  }

  netbufferv4_hash_for_cm4_tbl_set_default_action_nop_result result;
  try {
    result.success = iface_->hash_for_cm4_tbl_set_default_action_nop(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm4_tbl_set_default_action_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm4_tbl_set_default_action_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm4_tbl_set_default_action_nop");
  }

  oprot->writeMessageBegin("hash_for_cm4_tbl_set_default_action_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm4_tbl_set_default_action_nop", bytes);
  }
}

void netbufferv4Processor::process_hash_for_seq_tbl_set_default_action_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_seq_tbl_set_default_action_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_seq_tbl_set_default_action_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_seq_tbl_set_default_action_nop");
  }

  netbufferv4_hash_for_seq_tbl_set_default_action_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_seq_tbl_set_default_action_nop", bytes);
  }

  netbufferv4_hash_for_seq_tbl_set_default_action_nop_result result;
  try {
    result.success = iface_->hash_for_seq_tbl_set_default_action_nop(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_seq_tbl_set_default_action_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_seq_tbl_set_default_action_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_seq_tbl_set_default_action_nop");
  }

  oprot->writeMessageBegin("hash_for_seq_tbl_set_default_action_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_seq_tbl_set_default_action_nop", bytes);
  }
}

void netbufferv4Processor::process_ig_port_forward_tbl_set_default_action_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.ig_port_forward_tbl_set_default_action_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.ig_port_forward_tbl_set_default_action_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.ig_port_forward_tbl_set_default_action_nop");
  }

  netbufferv4_ig_port_forward_tbl_set_default_action_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.ig_port_forward_tbl_set_default_action_nop", bytes);
  }

  netbufferv4_ig_port_forward_tbl_set_default_action_nop_result result;
  try {
    result.success = iface_->ig_port_forward_tbl_set_default_action_nop(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.ig_port_forward_tbl_set_default_action_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ig_port_forward_tbl_set_default_action_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.ig_port_forward_tbl_set_default_action_nop");
  }

  oprot->writeMessageBegin("ig_port_forward_tbl_set_default_action_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.ig_port_forward_tbl_set_default_action_nop", bytes);
  }
}

void netbufferv4Processor::process_ipv4_forward_tbl_set_default_action_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.ipv4_forward_tbl_set_default_action_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.ipv4_forward_tbl_set_default_action_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.ipv4_forward_tbl_set_default_action_nop");
  }

  netbufferv4_ipv4_forward_tbl_set_default_action_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.ipv4_forward_tbl_set_default_action_nop", bytes);
  }

  netbufferv4_ipv4_forward_tbl_set_default_action_nop_result result;
  try {
    result.success = iface_->ipv4_forward_tbl_set_default_action_nop(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.ipv4_forward_tbl_set_default_action_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ipv4_forward_tbl_set_default_action_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.ipv4_forward_tbl_set_default_action_nop");
  }

  oprot->writeMessageBegin("ipv4_forward_tbl_set_default_action_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.ipv4_forward_tbl_set_default_action_nop", bytes);
  }
}

void netbufferv4Processor::process_is_hot_tbl_set_default_action_reset_is_hot(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.is_hot_tbl_set_default_action_reset_is_hot", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.is_hot_tbl_set_default_action_reset_is_hot");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.is_hot_tbl_set_default_action_reset_is_hot");
  }

  netbufferv4_is_hot_tbl_set_default_action_reset_is_hot_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.is_hot_tbl_set_default_action_reset_is_hot", bytes);
  }

  netbufferv4_is_hot_tbl_set_default_action_reset_is_hot_result result;
  try {
    result.success = iface_->is_hot_tbl_set_default_action_reset_is_hot(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.is_hot_tbl_set_default_action_reset_is_hot");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("is_hot_tbl_set_default_action_reset_is_hot", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.is_hot_tbl_set_default_action_reset_is_hot");
  }

  oprot->writeMessageBegin("is_hot_tbl_set_default_action_reset_is_hot", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.is_hot_tbl_set_default_action_reset_is_hot", bytes);
  }
}

void netbufferv4Processor::process_lastclone_lastscansplit_tbl_set_default_action_reset_is_lastclone_lastscansplit(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.lastclone_lastscansplit_tbl_set_default_action_reset_is_lastclone_lastscansplit", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.lastclone_lastscansplit_tbl_set_default_action_reset_is_lastclone_lastscansplit");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.lastclone_lastscansplit_tbl_set_default_action_reset_is_lastclone_lastscansplit");
  }

  netbufferv4_lastclone_lastscansplit_tbl_set_default_action_reset_is_lastclone_lastscansplit_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.lastclone_lastscansplit_tbl_set_default_action_reset_is_lastclone_lastscansplit", bytes);
  }

  netbufferv4_lastclone_lastscansplit_tbl_set_default_action_reset_is_lastclone_lastscansplit_result result;
  try {
    result.success = iface_->lastclone_lastscansplit_tbl_set_default_action_reset_is_lastclone_lastscansplit(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.lastclone_lastscansplit_tbl_set_default_action_reset_is_lastclone_lastscansplit");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("lastclone_lastscansplit_tbl_set_default_action_reset_is_lastclone_lastscansplit", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.lastclone_lastscansplit_tbl_set_default_action_reset_is_lastclone_lastscansplit");
  }

  oprot->writeMessageBegin("lastclone_lastscansplit_tbl_set_default_action_reset_is_lastclone_lastscansplit", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.lastclone_lastscansplit_tbl_set_default_action_reset_is_lastclone_lastscansplit", bytes);
  }
}

void netbufferv4Processor::process_need_recirculate_tbl_set_default_action_reset_need_recirculate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.need_recirculate_tbl_set_default_action_reset_need_recirculate", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.need_recirculate_tbl_set_default_action_reset_need_recirculate");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.need_recirculate_tbl_set_default_action_reset_need_recirculate");
  }

  netbufferv4_need_recirculate_tbl_set_default_action_reset_need_recirculate_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.need_recirculate_tbl_set_default_action_reset_need_recirculate", bytes);
  }

  netbufferv4_need_recirculate_tbl_set_default_action_reset_need_recirculate_result result;
  try {
    result.success = iface_->need_recirculate_tbl_set_default_action_reset_need_recirculate(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.need_recirculate_tbl_set_default_action_reset_need_recirculate");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("need_recirculate_tbl_set_default_action_reset_need_recirculate", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.need_recirculate_tbl_set_default_action_reset_need_recirculate");
  }

  oprot->writeMessageBegin("need_recirculate_tbl_set_default_action_reset_need_recirculate", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.need_recirculate_tbl_set_default_action_reset_need_recirculate", bytes);
  }
}

void netbufferv4Processor::process_prepare_for_cachehit_tbl_set_default_action_set_client_sid(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.prepare_for_cachehit_tbl_set_default_action_set_client_sid", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.prepare_for_cachehit_tbl_set_default_action_set_client_sid");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.prepare_for_cachehit_tbl_set_default_action_set_client_sid");
  }

  netbufferv4_prepare_for_cachehit_tbl_set_default_action_set_client_sid_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.prepare_for_cachehit_tbl_set_default_action_set_client_sid", bytes);
  }

  netbufferv4_prepare_for_cachehit_tbl_set_default_action_set_client_sid_result result;
  try {
    result.success = iface_->prepare_for_cachehit_tbl_set_default_action_set_client_sid(args.sess_hdl, args.dev_tgt, args.action_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.prepare_for_cachehit_tbl_set_default_action_set_client_sid");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("prepare_for_cachehit_tbl_set_default_action_set_client_sid", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.prepare_for_cachehit_tbl_set_default_action_set_client_sid");
  }

  oprot->writeMessageBegin("prepare_for_cachehit_tbl_set_default_action_set_client_sid", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.prepare_for_cachehit_tbl_set_default_action_set_client_sid", bytes);
  }
}

void netbufferv4Processor::process_process_scanreq_split_tbl_set_default_action_reset_meta_serversid_remainscannum(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.process_scanreq_split_tbl_set_default_action_reset_meta_serversid_remainscannum", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.process_scanreq_split_tbl_set_default_action_reset_meta_serversid_remainscannum");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.process_scanreq_split_tbl_set_default_action_reset_meta_serversid_remainscannum");
  }

  netbufferv4_process_scanreq_split_tbl_set_default_action_reset_meta_serversid_remainscannum_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.process_scanreq_split_tbl_set_default_action_reset_meta_serversid_remainscannum", bytes);
  }

  netbufferv4_process_scanreq_split_tbl_set_default_action_reset_meta_serversid_remainscannum_result result;
  try {
    result.success = iface_->process_scanreq_split_tbl_set_default_action_reset_meta_serversid_remainscannum(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.process_scanreq_split_tbl_set_default_action_reset_meta_serversid_remainscannum");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("process_scanreq_split_tbl_set_default_action_reset_meta_serversid_remainscannum", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.process_scanreq_split_tbl_set_default_action_reset_meta_serversid_remainscannum");
  }

  oprot->writeMessageBegin("process_scanreq_split_tbl_set_default_action_reset_meta_serversid_remainscannum", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.process_scanreq_split_tbl_set_default_action_reset_meta_serversid_remainscannum", bytes);
  }
}

void netbufferv4Processor::process_range_partition_for_scan_endkey_tbl_set_default_action_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.range_partition_for_scan_endkey_tbl_set_default_action_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_set_default_action_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_set_default_action_nop");
  }

  netbufferv4_range_partition_for_scan_endkey_tbl_set_default_action_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_set_default_action_nop", bytes);
  }

  netbufferv4_range_partition_for_scan_endkey_tbl_set_default_action_nop_result result;
  try {
    result.success = iface_->range_partition_for_scan_endkey_tbl_set_default_action_nop(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_set_default_action_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("range_partition_for_scan_endkey_tbl_set_default_action_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_set_default_action_nop");
  }

  oprot->writeMessageBegin("range_partition_for_scan_endkey_tbl_set_default_action_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_set_default_action_nop", bytes);
  }
}

void netbufferv4Processor::process_range_partition_tbl_set_default_action_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.range_partition_tbl_set_default_action_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.range_partition_tbl_set_default_action_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.range_partition_tbl_set_default_action_nop");
  }

  netbufferv4_range_partition_tbl_set_default_action_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.range_partition_tbl_set_default_action_nop", bytes);
  }

  netbufferv4_range_partition_tbl_set_default_action_nop_result result;
  try {
    result.success = iface_->range_partition_tbl_set_default_action_nop(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.range_partition_tbl_set_default_action_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("range_partition_tbl_set_default_action_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.range_partition_tbl_set_default_action_nop");
  }

  oprot->writeMessageBegin("range_partition_tbl_set_default_action_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.range_partition_tbl_set_default_action_nop", bytes);
  }
}

void netbufferv4Processor::process_recirculate_tbl_set_default_action_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.recirculate_tbl_set_default_action_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.recirculate_tbl_set_default_action_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.recirculate_tbl_set_default_action_nop");
  }

  netbufferv4_recirculate_tbl_set_default_action_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.recirculate_tbl_set_default_action_nop", bytes);
  }

  netbufferv4_recirculate_tbl_set_default_action_nop_result result;
  try {
    result.success = iface_->recirculate_tbl_set_default_action_nop(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.recirculate_tbl_set_default_action_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("recirculate_tbl_set_default_action_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.recirculate_tbl_set_default_action_nop");
  }

  oprot->writeMessageBegin("recirculate_tbl_set_default_action_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.recirculate_tbl_set_default_action_nop", bytes);
  }
}

void netbufferv4Processor::process_sample_tbl_set_default_action_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.sample_tbl_set_default_action_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.sample_tbl_set_default_action_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.sample_tbl_set_default_action_nop");
  }

  netbufferv4_sample_tbl_set_default_action_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.sample_tbl_set_default_action_nop", bytes);
  }

  netbufferv4_sample_tbl_set_default_action_nop_result result;
  try {
    result.success = iface_->sample_tbl_set_default_action_nop(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.sample_tbl_set_default_action_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sample_tbl_set_default_action_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.sample_tbl_set_default_action_nop");
  }

  oprot->writeMessageBegin("sample_tbl_set_default_action_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.sample_tbl_set_default_action_nop", bytes);
  }
}

void netbufferv4Processor::process_save_client_udpport_tbl_set_default_action_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.save_client_udpport_tbl_set_default_action_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.save_client_udpport_tbl_set_default_action_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.save_client_udpport_tbl_set_default_action_nop");
  }

  netbufferv4_save_client_udpport_tbl_set_default_action_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.save_client_udpport_tbl_set_default_action_nop", bytes);
  }

  netbufferv4_save_client_udpport_tbl_set_default_action_nop_result result;
  try {
    result.success = iface_->save_client_udpport_tbl_set_default_action_nop(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.save_client_udpport_tbl_set_default_action_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("save_client_udpport_tbl_set_default_action_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.save_client_udpport_tbl_set_default_action_nop");
  }

  oprot->writeMessageBegin("save_client_udpport_tbl_set_default_action_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.save_client_udpport_tbl_set_default_action_nop", bytes);
  }
}

void netbufferv4Processor::process_set_hot_threshold_tbl_set_default_action_set_hot_threshold(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.set_hot_threshold_tbl_set_default_action_set_hot_threshold", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.set_hot_threshold_tbl_set_default_action_set_hot_threshold");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.set_hot_threshold_tbl_set_default_action_set_hot_threshold");
  }

  netbufferv4_set_hot_threshold_tbl_set_default_action_set_hot_threshold_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.set_hot_threshold_tbl_set_default_action_set_hot_threshold", bytes);
  }

  netbufferv4_set_hot_threshold_tbl_set_default_action_set_hot_threshold_result result;
  try {
    result.success = iface_->set_hot_threshold_tbl_set_default_action_set_hot_threshold(args.sess_hdl, args.dev_tgt, args.action_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.set_hot_threshold_tbl_set_default_action_set_hot_threshold");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("set_hot_threshold_tbl_set_default_action_set_hot_threshold", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.set_hot_threshold_tbl_set_default_action_set_hot_threshold");
  }

  oprot->writeMessageBegin("set_hot_threshold_tbl_set_default_action_set_hot_threshold", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.set_hot_threshold_tbl_set_default_action_set_hot_threshold", bytes);
  }
}

void netbufferv4Processor::process_snapshot_flag_tbl_set_default_action_reset_snapshot_flag(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.snapshot_flag_tbl_set_default_action_reset_snapshot_flag", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.snapshot_flag_tbl_set_default_action_reset_snapshot_flag");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.snapshot_flag_tbl_set_default_action_reset_snapshot_flag");
  }

  netbufferv4_snapshot_flag_tbl_set_default_action_reset_snapshot_flag_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.snapshot_flag_tbl_set_default_action_reset_snapshot_flag", bytes);
  }

  netbufferv4_snapshot_flag_tbl_set_default_action_reset_snapshot_flag_result result;
  try {
    result.success = iface_->snapshot_flag_tbl_set_default_action_reset_snapshot_flag(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.snapshot_flag_tbl_set_default_action_reset_snapshot_flag");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("snapshot_flag_tbl_set_default_action_reset_snapshot_flag", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.snapshot_flag_tbl_set_default_action_reset_snapshot_flag");
  }

  oprot->writeMessageBegin("snapshot_flag_tbl_set_default_action_reset_snapshot_flag", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.snapshot_flag_tbl_set_default_action_reset_snapshot_flag", bytes);
  }
}

void netbufferv4Processor::process_update_ipmac_srcport_tbl_set_default_action_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_ipmac_srcport_tbl_set_default_action_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_ipmac_srcport_tbl_set_default_action_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_ipmac_srcport_tbl_set_default_action_nop");
  }

  netbufferv4_update_ipmac_srcport_tbl_set_default_action_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_ipmac_srcport_tbl_set_default_action_nop", bytes);
  }

  netbufferv4_update_ipmac_srcport_tbl_set_default_action_nop_result result;
  try {
    result.success = iface_->update_ipmac_srcport_tbl_set_default_action_nop(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_ipmac_srcport_tbl_set_default_action_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_ipmac_srcport_tbl_set_default_action_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_ipmac_srcport_tbl_set_default_action_nop");
  }

  oprot->writeMessageBegin("update_ipmac_srcport_tbl_set_default_action_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_ipmac_srcport_tbl_set_default_action_nop", bytes);
  }
}

void netbufferv4Processor::process_update_pktlen_tbl_set_default_action_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_pktlen_tbl_set_default_action_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_pktlen_tbl_set_default_action_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_pktlen_tbl_set_default_action_nop");
  }

  netbufferv4_update_pktlen_tbl_set_default_action_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_pktlen_tbl_set_default_action_nop", bytes);
  }

  netbufferv4_update_pktlen_tbl_set_default_action_nop_result result;
  try {
    result.success = iface_->update_pktlen_tbl_set_default_action_nop(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_pktlen_tbl_set_default_action_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_pktlen_tbl_set_default_action_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_pktlen_tbl_set_default_action_nop");
  }

  oprot->writeMessageBegin("update_pktlen_tbl_set_default_action_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_pktlen_tbl_set_default_action_nop", bytes);
  }
}

void netbufferv4Processor::process_update_valhi10_tbl_set_default_action_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi10_tbl_set_default_action_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi10_tbl_set_default_action_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi10_tbl_set_default_action_nop");
  }

  netbufferv4_update_valhi10_tbl_set_default_action_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi10_tbl_set_default_action_nop", bytes);
  }

  netbufferv4_update_valhi10_tbl_set_default_action_nop_result result;
  try {
    result.success = iface_->update_valhi10_tbl_set_default_action_nop(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi10_tbl_set_default_action_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi10_tbl_set_default_action_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi10_tbl_set_default_action_nop");
  }

  oprot->writeMessageBegin("update_valhi10_tbl_set_default_action_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi10_tbl_set_default_action_nop", bytes);
  }
}

void netbufferv4Processor::process_update_valhi11_tbl_set_default_action_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi11_tbl_set_default_action_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi11_tbl_set_default_action_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi11_tbl_set_default_action_nop");
  }

  netbufferv4_update_valhi11_tbl_set_default_action_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi11_tbl_set_default_action_nop", bytes);
  }

  netbufferv4_update_valhi11_tbl_set_default_action_nop_result result;
  try {
    result.success = iface_->update_valhi11_tbl_set_default_action_nop(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi11_tbl_set_default_action_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi11_tbl_set_default_action_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi11_tbl_set_default_action_nop");
  }

  oprot->writeMessageBegin("update_valhi11_tbl_set_default_action_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi11_tbl_set_default_action_nop", bytes);
  }
}

void netbufferv4Processor::process_update_valhi12_tbl_set_default_action_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi12_tbl_set_default_action_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi12_tbl_set_default_action_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi12_tbl_set_default_action_nop");
  }

  netbufferv4_update_valhi12_tbl_set_default_action_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi12_tbl_set_default_action_nop", bytes);
  }

  netbufferv4_update_valhi12_tbl_set_default_action_nop_result result;
  try {
    result.success = iface_->update_valhi12_tbl_set_default_action_nop(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi12_tbl_set_default_action_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi12_tbl_set_default_action_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi12_tbl_set_default_action_nop");
  }

  oprot->writeMessageBegin("update_valhi12_tbl_set_default_action_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi12_tbl_set_default_action_nop", bytes);
  }
}

void netbufferv4Processor::process_update_valhi13_tbl_set_default_action_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi13_tbl_set_default_action_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi13_tbl_set_default_action_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi13_tbl_set_default_action_nop");
  }

  netbufferv4_update_valhi13_tbl_set_default_action_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi13_tbl_set_default_action_nop", bytes);
  }

  netbufferv4_update_valhi13_tbl_set_default_action_nop_result result;
  try {
    result.success = iface_->update_valhi13_tbl_set_default_action_nop(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi13_tbl_set_default_action_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi13_tbl_set_default_action_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi13_tbl_set_default_action_nop");
  }

  oprot->writeMessageBegin("update_valhi13_tbl_set_default_action_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi13_tbl_set_default_action_nop", bytes);
  }
}

void netbufferv4Processor::process_update_valhi14_tbl_set_default_action_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi14_tbl_set_default_action_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi14_tbl_set_default_action_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi14_tbl_set_default_action_nop");
  }

  netbufferv4_update_valhi14_tbl_set_default_action_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi14_tbl_set_default_action_nop", bytes);
  }

  netbufferv4_update_valhi14_tbl_set_default_action_nop_result result;
  try {
    result.success = iface_->update_valhi14_tbl_set_default_action_nop(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi14_tbl_set_default_action_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi14_tbl_set_default_action_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi14_tbl_set_default_action_nop");
  }

  oprot->writeMessageBegin("update_valhi14_tbl_set_default_action_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi14_tbl_set_default_action_nop", bytes);
  }
}

void netbufferv4Processor::process_update_valhi15_tbl_set_default_action_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi15_tbl_set_default_action_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi15_tbl_set_default_action_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi15_tbl_set_default_action_nop");
  }

  netbufferv4_update_valhi15_tbl_set_default_action_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi15_tbl_set_default_action_nop", bytes);
  }

  netbufferv4_update_valhi15_tbl_set_default_action_nop_result result;
  try {
    result.success = iface_->update_valhi15_tbl_set_default_action_nop(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi15_tbl_set_default_action_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi15_tbl_set_default_action_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi15_tbl_set_default_action_nop");
  }

  oprot->writeMessageBegin("update_valhi15_tbl_set_default_action_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi15_tbl_set_default_action_nop", bytes);
  }
}

void netbufferv4Processor::process_update_valhi16_tbl_set_default_action_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi16_tbl_set_default_action_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi16_tbl_set_default_action_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi16_tbl_set_default_action_nop");
  }

  netbufferv4_update_valhi16_tbl_set_default_action_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi16_tbl_set_default_action_nop", bytes);
  }

  netbufferv4_update_valhi16_tbl_set_default_action_nop_result result;
  try {
    result.success = iface_->update_valhi16_tbl_set_default_action_nop(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi16_tbl_set_default_action_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi16_tbl_set_default_action_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi16_tbl_set_default_action_nop");
  }

  oprot->writeMessageBegin("update_valhi16_tbl_set_default_action_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi16_tbl_set_default_action_nop", bytes);
  }
}

void netbufferv4Processor::process_update_valhi1_tbl_set_default_action_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi1_tbl_set_default_action_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi1_tbl_set_default_action_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi1_tbl_set_default_action_nop");
  }

  netbufferv4_update_valhi1_tbl_set_default_action_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi1_tbl_set_default_action_nop", bytes);
  }

  netbufferv4_update_valhi1_tbl_set_default_action_nop_result result;
  try {
    result.success = iface_->update_valhi1_tbl_set_default_action_nop(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi1_tbl_set_default_action_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi1_tbl_set_default_action_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi1_tbl_set_default_action_nop");
  }

  oprot->writeMessageBegin("update_valhi1_tbl_set_default_action_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi1_tbl_set_default_action_nop", bytes);
  }
}

void netbufferv4Processor::process_update_valhi2_tbl_set_default_action_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi2_tbl_set_default_action_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi2_tbl_set_default_action_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi2_tbl_set_default_action_nop");
  }

  netbufferv4_update_valhi2_tbl_set_default_action_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi2_tbl_set_default_action_nop", bytes);
  }

  netbufferv4_update_valhi2_tbl_set_default_action_nop_result result;
  try {
    result.success = iface_->update_valhi2_tbl_set_default_action_nop(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi2_tbl_set_default_action_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi2_tbl_set_default_action_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi2_tbl_set_default_action_nop");
  }

  oprot->writeMessageBegin("update_valhi2_tbl_set_default_action_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi2_tbl_set_default_action_nop", bytes);
  }
}

void netbufferv4Processor::process_update_valhi3_tbl_set_default_action_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi3_tbl_set_default_action_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi3_tbl_set_default_action_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi3_tbl_set_default_action_nop");
  }

  netbufferv4_update_valhi3_tbl_set_default_action_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi3_tbl_set_default_action_nop", bytes);
  }

  netbufferv4_update_valhi3_tbl_set_default_action_nop_result result;
  try {
    result.success = iface_->update_valhi3_tbl_set_default_action_nop(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi3_tbl_set_default_action_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi3_tbl_set_default_action_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi3_tbl_set_default_action_nop");
  }

  oprot->writeMessageBegin("update_valhi3_tbl_set_default_action_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi3_tbl_set_default_action_nop", bytes);
  }
}

void netbufferv4Processor::process_update_valhi4_tbl_set_default_action_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi4_tbl_set_default_action_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi4_tbl_set_default_action_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi4_tbl_set_default_action_nop");
  }

  netbufferv4_update_valhi4_tbl_set_default_action_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi4_tbl_set_default_action_nop", bytes);
  }

  netbufferv4_update_valhi4_tbl_set_default_action_nop_result result;
  try {
    result.success = iface_->update_valhi4_tbl_set_default_action_nop(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi4_tbl_set_default_action_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi4_tbl_set_default_action_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi4_tbl_set_default_action_nop");
  }

  oprot->writeMessageBegin("update_valhi4_tbl_set_default_action_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi4_tbl_set_default_action_nop", bytes);
  }
}

void netbufferv4Processor::process_update_valhi5_tbl_set_default_action_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi5_tbl_set_default_action_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi5_tbl_set_default_action_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi5_tbl_set_default_action_nop");
  }

  netbufferv4_update_valhi5_tbl_set_default_action_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi5_tbl_set_default_action_nop", bytes);
  }

  netbufferv4_update_valhi5_tbl_set_default_action_nop_result result;
  try {
    result.success = iface_->update_valhi5_tbl_set_default_action_nop(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi5_tbl_set_default_action_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi5_tbl_set_default_action_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi5_tbl_set_default_action_nop");
  }

  oprot->writeMessageBegin("update_valhi5_tbl_set_default_action_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi5_tbl_set_default_action_nop", bytes);
  }
}

void netbufferv4Processor::process_update_valhi6_tbl_set_default_action_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi6_tbl_set_default_action_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi6_tbl_set_default_action_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi6_tbl_set_default_action_nop");
  }

  netbufferv4_update_valhi6_tbl_set_default_action_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi6_tbl_set_default_action_nop", bytes);
  }

  netbufferv4_update_valhi6_tbl_set_default_action_nop_result result;
  try {
    result.success = iface_->update_valhi6_tbl_set_default_action_nop(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi6_tbl_set_default_action_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi6_tbl_set_default_action_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi6_tbl_set_default_action_nop");
  }

  oprot->writeMessageBegin("update_valhi6_tbl_set_default_action_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi6_tbl_set_default_action_nop", bytes);
  }
}

void netbufferv4Processor::process_update_valhi7_tbl_set_default_action_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi7_tbl_set_default_action_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi7_tbl_set_default_action_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi7_tbl_set_default_action_nop");
  }

  netbufferv4_update_valhi7_tbl_set_default_action_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi7_tbl_set_default_action_nop", bytes);
  }

  netbufferv4_update_valhi7_tbl_set_default_action_nop_result result;
  try {
    result.success = iface_->update_valhi7_tbl_set_default_action_nop(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi7_tbl_set_default_action_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi7_tbl_set_default_action_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi7_tbl_set_default_action_nop");
  }

  oprot->writeMessageBegin("update_valhi7_tbl_set_default_action_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi7_tbl_set_default_action_nop", bytes);
  }
}

void netbufferv4Processor::process_update_valhi8_tbl_set_default_action_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi8_tbl_set_default_action_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi8_tbl_set_default_action_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi8_tbl_set_default_action_nop");
  }

  netbufferv4_update_valhi8_tbl_set_default_action_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi8_tbl_set_default_action_nop", bytes);
  }

  netbufferv4_update_valhi8_tbl_set_default_action_nop_result result;
  try {
    result.success = iface_->update_valhi8_tbl_set_default_action_nop(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi8_tbl_set_default_action_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi8_tbl_set_default_action_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi8_tbl_set_default_action_nop");
  }

  oprot->writeMessageBegin("update_valhi8_tbl_set_default_action_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi8_tbl_set_default_action_nop", bytes);
  }
}

void netbufferv4Processor::process_update_valhi9_tbl_set_default_action_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi9_tbl_set_default_action_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi9_tbl_set_default_action_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi9_tbl_set_default_action_nop");
  }

  netbufferv4_update_valhi9_tbl_set_default_action_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi9_tbl_set_default_action_nop", bytes);
  }

  netbufferv4_update_valhi9_tbl_set_default_action_nop_result result;
  try {
    result.success = iface_->update_valhi9_tbl_set_default_action_nop(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi9_tbl_set_default_action_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi9_tbl_set_default_action_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi9_tbl_set_default_action_nop");
  }

  oprot->writeMessageBegin("update_valhi9_tbl_set_default_action_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi9_tbl_set_default_action_nop", bytes);
  }
}

void netbufferv4Processor::process_update_vallen_tbl_set_default_action_reset_access_val_mode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallen_tbl_set_default_action_reset_access_val_mode", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallen_tbl_set_default_action_reset_access_val_mode");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallen_tbl_set_default_action_reset_access_val_mode");
  }

  netbufferv4_update_vallen_tbl_set_default_action_reset_access_val_mode_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallen_tbl_set_default_action_reset_access_val_mode", bytes);
  }

  netbufferv4_update_vallen_tbl_set_default_action_reset_access_val_mode_result result;
  try {
    result.success = iface_->update_vallen_tbl_set_default_action_reset_access_val_mode(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallen_tbl_set_default_action_reset_access_val_mode");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallen_tbl_set_default_action_reset_access_val_mode", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallen_tbl_set_default_action_reset_access_val_mode");
  }

  oprot->writeMessageBegin("update_vallen_tbl_set_default_action_reset_access_val_mode", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallen_tbl_set_default_action_reset_access_val_mode", bytes);
  }
}

void netbufferv4Processor::process_update_vallo10_tbl_set_default_action_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo10_tbl_set_default_action_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo10_tbl_set_default_action_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo10_tbl_set_default_action_nop");
  }

  netbufferv4_update_vallo10_tbl_set_default_action_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo10_tbl_set_default_action_nop", bytes);
  }

  netbufferv4_update_vallo10_tbl_set_default_action_nop_result result;
  try {
    result.success = iface_->update_vallo10_tbl_set_default_action_nop(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo10_tbl_set_default_action_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo10_tbl_set_default_action_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo10_tbl_set_default_action_nop");
  }

  oprot->writeMessageBegin("update_vallo10_tbl_set_default_action_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo10_tbl_set_default_action_nop", bytes);
  }
}

void netbufferv4Processor::process_update_vallo11_tbl_set_default_action_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo11_tbl_set_default_action_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo11_tbl_set_default_action_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo11_tbl_set_default_action_nop");
  }

  netbufferv4_update_vallo11_tbl_set_default_action_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo11_tbl_set_default_action_nop", bytes);
  }

  netbufferv4_update_vallo11_tbl_set_default_action_nop_result result;
  try {
    result.success = iface_->update_vallo11_tbl_set_default_action_nop(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo11_tbl_set_default_action_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo11_tbl_set_default_action_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo11_tbl_set_default_action_nop");
  }

  oprot->writeMessageBegin("update_vallo11_tbl_set_default_action_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo11_tbl_set_default_action_nop", bytes);
  }
}

void netbufferv4Processor::process_update_vallo12_tbl_set_default_action_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo12_tbl_set_default_action_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo12_tbl_set_default_action_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo12_tbl_set_default_action_nop");
  }

  netbufferv4_update_vallo12_tbl_set_default_action_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo12_tbl_set_default_action_nop", bytes);
  }

  netbufferv4_update_vallo12_tbl_set_default_action_nop_result result;
  try {
    result.success = iface_->update_vallo12_tbl_set_default_action_nop(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo12_tbl_set_default_action_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo12_tbl_set_default_action_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo12_tbl_set_default_action_nop");
  }

  oprot->writeMessageBegin("update_vallo12_tbl_set_default_action_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo12_tbl_set_default_action_nop", bytes);
  }
}

void netbufferv4Processor::process_update_vallo13_tbl_set_default_action_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo13_tbl_set_default_action_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo13_tbl_set_default_action_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo13_tbl_set_default_action_nop");
  }

  netbufferv4_update_vallo13_tbl_set_default_action_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo13_tbl_set_default_action_nop", bytes);
  }

  netbufferv4_update_vallo13_tbl_set_default_action_nop_result result;
  try {
    result.success = iface_->update_vallo13_tbl_set_default_action_nop(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo13_tbl_set_default_action_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo13_tbl_set_default_action_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo13_tbl_set_default_action_nop");
  }

  oprot->writeMessageBegin("update_vallo13_tbl_set_default_action_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo13_tbl_set_default_action_nop", bytes);
  }
}

void netbufferv4Processor::process_update_vallo14_tbl_set_default_action_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo14_tbl_set_default_action_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo14_tbl_set_default_action_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo14_tbl_set_default_action_nop");
  }

  netbufferv4_update_vallo14_tbl_set_default_action_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo14_tbl_set_default_action_nop", bytes);
  }

  netbufferv4_update_vallo14_tbl_set_default_action_nop_result result;
  try {
    result.success = iface_->update_vallo14_tbl_set_default_action_nop(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo14_tbl_set_default_action_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo14_tbl_set_default_action_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo14_tbl_set_default_action_nop");
  }

  oprot->writeMessageBegin("update_vallo14_tbl_set_default_action_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo14_tbl_set_default_action_nop", bytes);
  }
}

void netbufferv4Processor::process_update_vallo15_tbl_set_default_action_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo15_tbl_set_default_action_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo15_tbl_set_default_action_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo15_tbl_set_default_action_nop");
  }

  netbufferv4_update_vallo15_tbl_set_default_action_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo15_tbl_set_default_action_nop", bytes);
  }

  netbufferv4_update_vallo15_tbl_set_default_action_nop_result result;
  try {
    result.success = iface_->update_vallo15_tbl_set_default_action_nop(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo15_tbl_set_default_action_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo15_tbl_set_default_action_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo15_tbl_set_default_action_nop");
  }

  oprot->writeMessageBegin("update_vallo15_tbl_set_default_action_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo15_tbl_set_default_action_nop", bytes);
  }
}

void netbufferv4Processor::process_update_vallo16_tbl_set_default_action_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo16_tbl_set_default_action_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo16_tbl_set_default_action_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo16_tbl_set_default_action_nop");
  }

  netbufferv4_update_vallo16_tbl_set_default_action_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo16_tbl_set_default_action_nop", bytes);
  }

  netbufferv4_update_vallo16_tbl_set_default_action_nop_result result;
  try {
    result.success = iface_->update_vallo16_tbl_set_default_action_nop(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo16_tbl_set_default_action_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo16_tbl_set_default_action_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo16_tbl_set_default_action_nop");
  }

  oprot->writeMessageBegin("update_vallo16_tbl_set_default_action_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo16_tbl_set_default_action_nop", bytes);
  }
}

void netbufferv4Processor::process_update_vallo1_tbl_set_default_action_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo1_tbl_set_default_action_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo1_tbl_set_default_action_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo1_tbl_set_default_action_nop");
  }

  netbufferv4_update_vallo1_tbl_set_default_action_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo1_tbl_set_default_action_nop", bytes);
  }

  netbufferv4_update_vallo1_tbl_set_default_action_nop_result result;
  try {
    result.success = iface_->update_vallo1_tbl_set_default_action_nop(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo1_tbl_set_default_action_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo1_tbl_set_default_action_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo1_tbl_set_default_action_nop");
  }

  oprot->writeMessageBegin("update_vallo1_tbl_set_default_action_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo1_tbl_set_default_action_nop", bytes);
  }
}

void netbufferv4Processor::process_update_vallo2_tbl_set_default_action_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo2_tbl_set_default_action_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo2_tbl_set_default_action_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo2_tbl_set_default_action_nop");
  }

  netbufferv4_update_vallo2_tbl_set_default_action_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo2_tbl_set_default_action_nop", bytes);
  }

  netbufferv4_update_vallo2_tbl_set_default_action_nop_result result;
  try {
    result.success = iface_->update_vallo2_tbl_set_default_action_nop(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo2_tbl_set_default_action_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo2_tbl_set_default_action_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo2_tbl_set_default_action_nop");
  }

  oprot->writeMessageBegin("update_vallo2_tbl_set_default_action_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo2_tbl_set_default_action_nop", bytes);
  }
}

void netbufferv4Processor::process_update_vallo3_tbl_set_default_action_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo3_tbl_set_default_action_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo3_tbl_set_default_action_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo3_tbl_set_default_action_nop");
  }

  netbufferv4_update_vallo3_tbl_set_default_action_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo3_tbl_set_default_action_nop", bytes);
  }

  netbufferv4_update_vallo3_tbl_set_default_action_nop_result result;
  try {
    result.success = iface_->update_vallo3_tbl_set_default_action_nop(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo3_tbl_set_default_action_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo3_tbl_set_default_action_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo3_tbl_set_default_action_nop");
  }

  oprot->writeMessageBegin("update_vallo3_tbl_set_default_action_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo3_tbl_set_default_action_nop", bytes);
  }
}

void netbufferv4Processor::process_update_vallo4_tbl_set_default_action_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo4_tbl_set_default_action_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo4_tbl_set_default_action_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo4_tbl_set_default_action_nop");
  }

  netbufferv4_update_vallo4_tbl_set_default_action_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo4_tbl_set_default_action_nop", bytes);
  }

  netbufferv4_update_vallo4_tbl_set_default_action_nop_result result;
  try {
    result.success = iface_->update_vallo4_tbl_set_default_action_nop(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo4_tbl_set_default_action_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo4_tbl_set_default_action_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo4_tbl_set_default_action_nop");
  }

  oprot->writeMessageBegin("update_vallo4_tbl_set_default_action_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo4_tbl_set_default_action_nop", bytes);
  }
}

void netbufferv4Processor::process_update_vallo5_tbl_set_default_action_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo5_tbl_set_default_action_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo5_tbl_set_default_action_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo5_tbl_set_default_action_nop");
  }

  netbufferv4_update_vallo5_tbl_set_default_action_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo5_tbl_set_default_action_nop", bytes);
  }

  netbufferv4_update_vallo5_tbl_set_default_action_nop_result result;
  try {
    result.success = iface_->update_vallo5_tbl_set_default_action_nop(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo5_tbl_set_default_action_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo5_tbl_set_default_action_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo5_tbl_set_default_action_nop");
  }

  oprot->writeMessageBegin("update_vallo5_tbl_set_default_action_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo5_tbl_set_default_action_nop", bytes);
  }
}

void netbufferv4Processor::process_update_vallo6_tbl_set_default_action_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo6_tbl_set_default_action_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo6_tbl_set_default_action_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo6_tbl_set_default_action_nop");
  }

  netbufferv4_update_vallo6_tbl_set_default_action_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo6_tbl_set_default_action_nop", bytes);
  }

  netbufferv4_update_vallo6_tbl_set_default_action_nop_result result;
  try {
    result.success = iface_->update_vallo6_tbl_set_default_action_nop(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo6_tbl_set_default_action_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo6_tbl_set_default_action_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo6_tbl_set_default_action_nop");
  }

  oprot->writeMessageBegin("update_vallo6_tbl_set_default_action_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo6_tbl_set_default_action_nop", bytes);
  }
}

void netbufferv4Processor::process_update_vallo7_tbl_set_default_action_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo7_tbl_set_default_action_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo7_tbl_set_default_action_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo7_tbl_set_default_action_nop");
  }

  netbufferv4_update_vallo7_tbl_set_default_action_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo7_tbl_set_default_action_nop", bytes);
  }

  netbufferv4_update_vallo7_tbl_set_default_action_nop_result result;
  try {
    result.success = iface_->update_vallo7_tbl_set_default_action_nop(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo7_tbl_set_default_action_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo7_tbl_set_default_action_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo7_tbl_set_default_action_nop");
  }

  oprot->writeMessageBegin("update_vallo7_tbl_set_default_action_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo7_tbl_set_default_action_nop", bytes);
  }
}

void netbufferv4Processor::process_update_vallo8_tbl_set_default_action_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo8_tbl_set_default_action_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo8_tbl_set_default_action_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo8_tbl_set_default_action_nop");
  }

  netbufferv4_update_vallo8_tbl_set_default_action_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo8_tbl_set_default_action_nop", bytes);
  }

  netbufferv4_update_vallo8_tbl_set_default_action_nop_result result;
  try {
    result.success = iface_->update_vallo8_tbl_set_default_action_nop(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo8_tbl_set_default_action_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo8_tbl_set_default_action_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo8_tbl_set_default_action_nop");
  }

  oprot->writeMessageBegin("update_vallo8_tbl_set_default_action_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo8_tbl_set_default_action_nop", bytes);
  }
}

void netbufferv4Processor::process_update_vallo9_tbl_set_default_action_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo9_tbl_set_default_action_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo9_tbl_set_default_action_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo9_tbl_set_default_action_nop");
  }

  netbufferv4_update_vallo9_tbl_set_default_action_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo9_tbl_set_default_action_nop", bytes);
  }

  netbufferv4_update_vallo9_tbl_set_default_action_nop_result result;
  try {
    result.success = iface_->update_vallo9_tbl_set_default_action_nop(args.sess_hdl, args.dev_tgt);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo9_tbl_set_default_action_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo9_tbl_set_default_action_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo9_tbl_set_default_action_nop");
  }

  oprot->writeMessageBegin("update_vallo9_tbl_set_default_action_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo9_tbl_set_default_action_nop", bytes);
  }
}

void netbufferv4Processor::process_access_cache_frequency_tbl_set_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cache_frequency_tbl_set_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cache_frequency_tbl_set_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cache_frequency_tbl_set_property");
  }

  netbufferv4_access_cache_frequency_tbl_set_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cache_frequency_tbl_set_property", bytes);
  }

  netbufferv4_access_cache_frequency_tbl_set_property_result result;
  try {
    iface_->access_cache_frequency_tbl_set_property(args.sess_hdl, args.dev_id, args.property, args.value, args.prop_args);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cache_frequency_tbl_set_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cache_frequency_tbl_set_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cache_frequency_tbl_set_property");
  }

  oprot->writeMessageBegin("access_cache_frequency_tbl_set_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cache_frequency_tbl_set_property", bytes);
  }
}

void netbufferv4Processor::process_access_cache_frequency_tbl_get_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cache_frequency_tbl_get_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cache_frequency_tbl_get_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cache_frequency_tbl_get_property");
  }

  netbufferv4_access_cache_frequency_tbl_get_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cache_frequency_tbl_get_property", bytes);
  }

  netbufferv4_access_cache_frequency_tbl_get_property_result result;
  try {
    iface_->access_cache_frequency_tbl_get_property(result.success, args.sess_hdl, args.dev_id, args.property);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cache_frequency_tbl_get_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cache_frequency_tbl_get_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cache_frequency_tbl_get_property");
  }

  oprot->writeMessageBegin("access_cache_frequency_tbl_get_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cache_frequency_tbl_get_property", bytes);
  }
}

void netbufferv4Processor::process_access_case1_tbl_set_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_case1_tbl_set_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_case1_tbl_set_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_case1_tbl_set_property");
  }

  netbufferv4_access_case1_tbl_set_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_case1_tbl_set_property", bytes);
  }

  netbufferv4_access_case1_tbl_set_property_result result;
  try {
    iface_->access_case1_tbl_set_property(args.sess_hdl, args.dev_id, args.property, args.value, args.prop_args);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_case1_tbl_set_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_case1_tbl_set_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_case1_tbl_set_property");
  }

  oprot->writeMessageBegin("access_case1_tbl_set_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_case1_tbl_set_property", bytes);
  }
}

void netbufferv4Processor::process_access_case1_tbl_get_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_case1_tbl_get_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_case1_tbl_get_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_case1_tbl_get_property");
  }

  netbufferv4_access_case1_tbl_get_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_case1_tbl_get_property", bytes);
  }

  netbufferv4_access_case1_tbl_get_property_result result;
  try {
    iface_->access_case1_tbl_get_property(result.success, args.sess_hdl, args.dev_id, args.property);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_case1_tbl_get_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_case1_tbl_get_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_case1_tbl_get_property");
  }

  oprot->writeMessageBegin("access_case1_tbl_get_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_case1_tbl_get_property", bytes);
  }
}

void netbufferv4Processor::process_access_cm1_tbl_set_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm1_tbl_set_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm1_tbl_set_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm1_tbl_set_property");
  }

  netbufferv4_access_cm1_tbl_set_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm1_tbl_set_property", bytes);
  }

  netbufferv4_access_cm1_tbl_set_property_result result;
  try {
    iface_->access_cm1_tbl_set_property(args.sess_hdl, args.dev_id, args.property, args.value, args.prop_args);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm1_tbl_set_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm1_tbl_set_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm1_tbl_set_property");
  }

  oprot->writeMessageBegin("access_cm1_tbl_set_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm1_tbl_set_property", bytes);
  }
}

void netbufferv4Processor::process_access_cm1_tbl_get_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm1_tbl_get_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm1_tbl_get_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm1_tbl_get_property");
  }

  netbufferv4_access_cm1_tbl_get_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm1_tbl_get_property", bytes);
  }

  netbufferv4_access_cm1_tbl_get_property_result result;
  try {
    iface_->access_cm1_tbl_get_property(result.success, args.sess_hdl, args.dev_id, args.property);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm1_tbl_get_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm1_tbl_get_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm1_tbl_get_property");
  }

  oprot->writeMessageBegin("access_cm1_tbl_get_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm1_tbl_get_property", bytes);
  }
}

void netbufferv4Processor::process_access_cm2_tbl_set_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm2_tbl_set_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm2_tbl_set_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm2_tbl_set_property");
  }

  netbufferv4_access_cm2_tbl_set_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm2_tbl_set_property", bytes);
  }

  netbufferv4_access_cm2_tbl_set_property_result result;
  try {
    iface_->access_cm2_tbl_set_property(args.sess_hdl, args.dev_id, args.property, args.value, args.prop_args);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm2_tbl_set_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm2_tbl_set_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm2_tbl_set_property");
  }

  oprot->writeMessageBegin("access_cm2_tbl_set_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm2_tbl_set_property", bytes);
  }
}

void netbufferv4Processor::process_access_cm2_tbl_get_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm2_tbl_get_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm2_tbl_get_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm2_tbl_get_property");
  }

  netbufferv4_access_cm2_tbl_get_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm2_tbl_get_property", bytes);
  }

  netbufferv4_access_cm2_tbl_get_property_result result;
  try {
    iface_->access_cm2_tbl_get_property(result.success, args.sess_hdl, args.dev_id, args.property);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm2_tbl_get_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm2_tbl_get_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm2_tbl_get_property");
  }

  oprot->writeMessageBegin("access_cm2_tbl_get_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm2_tbl_get_property", bytes);
  }
}

void netbufferv4Processor::process_access_cm3_tbl_set_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm3_tbl_set_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm3_tbl_set_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm3_tbl_set_property");
  }

  netbufferv4_access_cm3_tbl_set_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm3_tbl_set_property", bytes);
  }

  netbufferv4_access_cm3_tbl_set_property_result result;
  try {
    iface_->access_cm3_tbl_set_property(args.sess_hdl, args.dev_id, args.property, args.value, args.prop_args);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm3_tbl_set_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm3_tbl_set_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm3_tbl_set_property");
  }

  oprot->writeMessageBegin("access_cm3_tbl_set_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm3_tbl_set_property", bytes);
  }
}

void netbufferv4Processor::process_access_cm3_tbl_get_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm3_tbl_get_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm3_tbl_get_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm3_tbl_get_property");
  }

  netbufferv4_access_cm3_tbl_get_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm3_tbl_get_property", bytes);
  }

  netbufferv4_access_cm3_tbl_get_property_result result;
  try {
    iface_->access_cm3_tbl_get_property(result.success, args.sess_hdl, args.dev_id, args.property);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm3_tbl_get_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm3_tbl_get_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm3_tbl_get_property");
  }

  oprot->writeMessageBegin("access_cm3_tbl_get_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm3_tbl_get_property", bytes);
  }
}

void netbufferv4Processor::process_access_cm4_tbl_set_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm4_tbl_set_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm4_tbl_set_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm4_tbl_set_property");
  }

  netbufferv4_access_cm4_tbl_set_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm4_tbl_set_property", bytes);
  }

  netbufferv4_access_cm4_tbl_set_property_result result;
  try {
    iface_->access_cm4_tbl_set_property(args.sess_hdl, args.dev_id, args.property, args.value, args.prop_args);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm4_tbl_set_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm4_tbl_set_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm4_tbl_set_property");
  }

  oprot->writeMessageBegin("access_cm4_tbl_set_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm4_tbl_set_property", bytes);
  }
}

void netbufferv4Processor::process_access_cm4_tbl_get_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm4_tbl_get_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm4_tbl_get_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm4_tbl_get_property");
  }

  netbufferv4_access_cm4_tbl_get_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm4_tbl_get_property", bytes);
  }

  netbufferv4_access_cm4_tbl_get_property_result result;
  try {
    iface_->access_cm4_tbl_get_property(result.success, args.sess_hdl, args.dev_id, args.property);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm4_tbl_get_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm4_tbl_get_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm4_tbl_get_property");
  }

  oprot->writeMessageBegin("access_cm4_tbl_get_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm4_tbl_get_property", bytes);
  }
}

void netbufferv4Processor::process_access_deleted_tbl_set_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_deleted_tbl_set_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_deleted_tbl_set_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_deleted_tbl_set_property");
  }

  netbufferv4_access_deleted_tbl_set_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_deleted_tbl_set_property", bytes);
  }

  netbufferv4_access_deleted_tbl_set_property_result result;
  try {
    iface_->access_deleted_tbl_set_property(args.sess_hdl, args.dev_id, args.property, args.value, args.prop_args);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_deleted_tbl_set_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_deleted_tbl_set_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_deleted_tbl_set_property");
  }

  oprot->writeMessageBegin("access_deleted_tbl_set_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_deleted_tbl_set_property", bytes);
  }
}

void netbufferv4Processor::process_access_deleted_tbl_get_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_deleted_tbl_get_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_deleted_tbl_get_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_deleted_tbl_get_property");
  }

  netbufferv4_access_deleted_tbl_get_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_deleted_tbl_get_property", bytes);
  }

  netbufferv4_access_deleted_tbl_get_property_result result;
  try {
    iface_->access_deleted_tbl_get_property(result.success, args.sess_hdl, args.dev_id, args.property);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_deleted_tbl_get_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_deleted_tbl_get_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_deleted_tbl_get_property");
  }

  oprot->writeMessageBegin("access_deleted_tbl_get_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_deleted_tbl_get_property", bytes);
  }
}

void netbufferv4Processor::process_access_latest_tbl_set_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_latest_tbl_set_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_latest_tbl_set_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_latest_tbl_set_property");
  }

  netbufferv4_access_latest_tbl_set_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_latest_tbl_set_property", bytes);
  }

  netbufferv4_access_latest_tbl_set_property_result result;
  try {
    iface_->access_latest_tbl_set_property(args.sess_hdl, args.dev_id, args.property, args.value, args.prop_args);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_latest_tbl_set_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_latest_tbl_set_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_latest_tbl_set_property");
  }

  oprot->writeMessageBegin("access_latest_tbl_set_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_latest_tbl_set_property", bytes);
  }
}

void netbufferv4Processor::process_access_latest_tbl_get_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_latest_tbl_get_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_latest_tbl_get_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_latest_tbl_get_property");
  }

  netbufferv4_access_latest_tbl_get_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_latest_tbl_get_property", bytes);
  }

  netbufferv4_access_latest_tbl_get_property_result result;
  try {
    iface_->access_latest_tbl_get_property(result.success, args.sess_hdl, args.dev_id, args.property);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_latest_tbl_get_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_latest_tbl_get_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_latest_tbl_get_property");
  }

  oprot->writeMessageBegin("access_latest_tbl_get_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_latest_tbl_get_property", bytes);
  }
}

void netbufferv4Processor::process_access_savedseq_tbl_set_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_savedseq_tbl_set_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_savedseq_tbl_set_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_savedseq_tbl_set_property");
  }

  netbufferv4_access_savedseq_tbl_set_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_savedseq_tbl_set_property", bytes);
  }

  netbufferv4_access_savedseq_tbl_set_property_result result;
  try {
    iface_->access_savedseq_tbl_set_property(args.sess_hdl, args.dev_id, args.property, args.value, args.prop_args);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_savedseq_tbl_set_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_savedseq_tbl_set_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_savedseq_tbl_set_property");
  }

  oprot->writeMessageBegin("access_savedseq_tbl_set_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_savedseq_tbl_set_property", bytes);
  }
}

void netbufferv4Processor::process_access_savedseq_tbl_get_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_savedseq_tbl_get_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_savedseq_tbl_get_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_savedseq_tbl_get_property");
  }

  netbufferv4_access_savedseq_tbl_get_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_savedseq_tbl_get_property", bytes);
  }

  netbufferv4_access_savedseq_tbl_get_property_result result;
  try {
    iface_->access_savedseq_tbl_get_property(result.success, args.sess_hdl, args.dev_id, args.property);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_savedseq_tbl_get_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_savedseq_tbl_get_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_savedseq_tbl_get_property");
  }

  oprot->writeMessageBegin("access_savedseq_tbl_get_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_savedseq_tbl_get_property", bytes);
  }
}

void netbufferv4Processor::process_access_seq_tbl_set_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_seq_tbl_set_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_seq_tbl_set_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_seq_tbl_set_property");
  }

  netbufferv4_access_seq_tbl_set_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_seq_tbl_set_property", bytes);
  }

  netbufferv4_access_seq_tbl_set_property_result result;
  try {
    iface_->access_seq_tbl_set_property(args.sess_hdl, args.dev_id, args.property, args.value, args.prop_args);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_seq_tbl_set_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_seq_tbl_set_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_seq_tbl_set_property");
  }

  oprot->writeMessageBegin("access_seq_tbl_set_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_seq_tbl_set_property", bytes);
  }
}

void netbufferv4Processor::process_access_seq_tbl_get_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_seq_tbl_get_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_seq_tbl_get_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_seq_tbl_get_property");
  }

  netbufferv4_access_seq_tbl_get_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_seq_tbl_get_property", bytes);
  }

  netbufferv4_access_seq_tbl_get_property_result result;
  try {
    iface_->access_seq_tbl_get_property(result.success, args.sess_hdl, args.dev_id, args.property);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_seq_tbl_get_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_seq_tbl_get_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_seq_tbl_get_property");
  }

  oprot->writeMessageBegin("access_seq_tbl_get_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_seq_tbl_get_property", bytes);
  }
}

void netbufferv4Processor::process_access_validvalue_tbl_set_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_validvalue_tbl_set_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_validvalue_tbl_set_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_validvalue_tbl_set_property");
  }

  netbufferv4_access_validvalue_tbl_set_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_validvalue_tbl_set_property", bytes);
  }

  netbufferv4_access_validvalue_tbl_set_property_result result;
  try {
    iface_->access_validvalue_tbl_set_property(args.sess_hdl, args.dev_id, args.property, args.value, args.prop_args);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_validvalue_tbl_set_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_validvalue_tbl_set_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_validvalue_tbl_set_property");
  }

  oprot->writeMessageBegin("access_validvalue_tbl_set_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_validvalue_tbl_set_property", bytes);
  }
}

void netbufferv4Processor::process_access_validvalue_tbl_get_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_validvalue_tbl_get_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_validvalue_tbl_get_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_validvalue_tbl_get_property");
  }

  netbufferv4_access_validvalue_tbl_get_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_validvalue_tbl_get_property", bytes);
  }

  netbufferv4_access_validvalue_tbl_get_property_result result;
  try {
    iface_->access_validvalue_tbl_get_property(result.success, args.sess_hdl, args.dev_id, args.property);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_validvalue_tbl_get_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_validvalue_tbl_get_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_validvalue_tbl_get_property");
  }

  oprot->writeMessageBegin("access_validvalue_tbl_get_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_validvalue_tbl_get_property", bytes);
  }
}

void netbufferv4Processor::process_add_and_remove_value_header_tbl_set_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.add_and_remove_value_header_tbl_set_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.add_and_remove_value_header_tbl_set_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_set_property");
  }

  netbufferv4_add_and_remove_value_header_tbl_set_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_set_property", bytes);
  }

  netbufferv4_add_and_remove_value_header_tbl_set_property_result result;
  try {
    iface_->add_and_remove_value_header_tbl_set_property(args.sess_hdl, args.dev_id, args.property, args.value, args.prop_args);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.add_and_remove_value_header_tbl_set_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("add_and_remove_value_header_tbl_set_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_set_property");
  }

  oprot->writeMessageBegin("add_and_remove_value_header_tbl_set_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_set_property", bytes);
  }
}

void netbufferv4Processor::process_add_and_remove_value_header_tbl_get_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.add_and_remove_value_header_tbl_get_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.add_and_remove_value_header_tbl_get_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_get_property");
  }

  netbufferv4_add_and_remove_value_header_tbl_get_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_get_property", bytes);
  }

  netbufferv4_add_and_remove_value_header_tbl_get_property_result result;
  try {
    iface_->add_and_remove_value_header_tbl_get_property(result.success, args.sess_hdl, args.dev_id, args.property);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.add_and_remove_value_header_tbl_get_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("add_and_remove_value_header_tbl_get_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_get_property");
  }

  oprot->writeMessageBegin("add_and_remove_value_header_tbl_get_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_get_property", bytes);
  }
}

void netbufferv4Processor::process_cache_lookup_tbl_set_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.cache_lookup_tbl_set_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.cache_lookup_tbl_set_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.cache_lookup_tbl_set_property");
  }

  netbufferv4_cache_lookup_tbl_set_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.cache_lookup_tbl_set_property", bytes);
  }

  netbufferv4_cache_lookup_tbl_set_property_result result;
  try {
    iface_->cache_lookup_tbl_set_property(args.sess_hdl, args.dev_id, args.property, args.value, args.prop_args);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.cache_lookup_tbl_set_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("cache_lookup_tbl_set_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.cache_lookup_tbl_set_property");
  }

  oprot->writeMessageBegin("cache_lookup_tbl_set_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.cache_lookup_tbl_set_property", bytes);
  }
}

void netbufferv4Processor::process_cache_lookup_tbl_get_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.cache_lookup_tbl_get_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.cache_lookup_tbl_get_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.cache_lookup_tbl_get_property");
  }

  netbufferv4_cache_lookup_tbl_get_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.cache_lookup_tbl_get_property", bytes);
  }

  netbufferv4_cache_lookup_tbl_get_property_result result;
  try {
    iface_->cache_lookup_tbl_get_property(result.success, args.sess_hdl, args.dev_id, args.property);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.cache_lookup_tbl_get_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("cache_lookup_tbl_get_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.cache_lookup_tbl_get_property");
  }

  oprot->writeMessageBegin("cache_lookup_tbl_get_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.cache_lookup_tbl_get_property", bytes);
  }
}

void netbufferv4Processor::process_drop_tbl_set_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.drop_tbl_set_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.drop_tbl_set_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.drop_tbl_set_property");
  }

  netbufferv4_drop_tbl_set_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.drop_tbl_set_property", bytes);
  }

  netbufferv4_drop_tbl_set_property_result result;
  try {
    iface_->drop_tbl_set_property(args.sess_hdl, args.dev_id, args.property, args.value, args.prop_args);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.drop_tbl_set_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("drop_tbl_set_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.drop_tbl_set_property");
  }

  oprot->writeMessageBegin("drop_tbl_set_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.drop_tbl_set_property", bytes);
  }
}

void netbufferv4Processor::process_drop_tbl_get_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.drop_tbl_get_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.drop_tbl_get_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.drop_tbl_get_property");
  }

  netbufferv4_drop_tbl_get_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.drop_tbl_get_property", bytes);
  }

  netbufferv4_drop_tbl_get_property_result result;
  try {
    iface_->drop_tbl_get_property(result.success, args.sess_hdl, args.dev_id, args.property);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.drop_tbl_get_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("drop_tbl_get_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.drop_tbl_get_property");
  }

  oprot->writeMessageBegin("drop_tbl_get_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.drop_tbl_get_property", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_set_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_set_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_set_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_set_property");
  }

  netbufferv4_eg_port_forward_tbl_set_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_set_property", bytes);
  }

  netbufferv4_eg_port_forward_tbl_set_property_result result;
  try {
    iface_->eg_port_forward_tbl_set_property(args.sess_hdl, args.dev_id, args.property, args.value, args.prop_args);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_set_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_set_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_set_property");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_set_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_set_property", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_get_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_get_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_get_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_get_property");
  }

  netbufferv4_eg_port_forward_tbl_get_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_get_property", bytes);
  }

  netbufferv4_eg_port_forward_tbl_get_property_result result;
  try {
    iface_->eg_port_forward_tbl_get_property(result.success, args.sess_hdl, args.dev_id, args.property);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_get_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_get_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_get_property");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_get_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_get_property", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm1_tbl_set_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm1_tbl_set_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm1_tbl_set_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm1_tbl_set_property");
  }

  netbufferv4_hash_for_cm1_tbl_set_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm1_tbl_set_property", bytes);
  }

  netbufferv4_hash_for_cm1_tbl_set_property_result result;
  try {
    iface_->hash_for_cm1_tbl_set_property(args.sess_hdl, args.dev_id, args.property, args.value, args.prop_args);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm1_tbl_set_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm1_tbl_set_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm1_tbl_set_property");
  }

  oprot->writeMessageBegin("hash_for_cm1_tbl_set_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm1_tbl_set_property", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm1_tbl_get_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm1_tbl_get_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm1_tbl_get_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm1_tbl_get_property");
  }

  netbufferv4_hash_for_cm1_tbl_get_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm1_tbl_get_property", bytes);
  }

  netbufferv4_hash_for_cm1_tbl_get_property_result result;
  try {
    iface_->hash_for_cm1_tbl_get_property(result.success, args.sess_hdl, args.dev_id, args.property);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm1_tbl_get_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm1_tbl_get_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm1_tbl_get_property");
  }

  oprot->writeMessageBegin("hash_for_cm1_tbl_get_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm1_tbl_get_property", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm2_tbl_set_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm2_tbl_set_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm2_tbl_set_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm2_tbl_set_property");
  }

  netbufferv4_hash_for_cm2_tbl_set_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm2_tbl_set_property", bytes);
  }

  netbufferv4_hash_for_cm2_tbl_set_property_result result;
  try {
    iface_->hash_for_cm2_tbl_set_property(args.sess_hdl, args.dev_id, args.property, args.value, args.prop_args);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm2_tbl_set_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm2_tbl_set_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm2_tbl_set_property");
  }

  oprot->writeMessageBegin("hash_for_cm2_tbl_set_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm2_tbl_set_property", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm2_tbl_get_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm2_tbl_get_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm2_tbl_get_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm2_tbl_get_property");
  }

  netbufferv4_hash_for_cm2_tbl_get_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm2_tbl_get_property", bytes);
  }

  netbufferv4_hash_for_cm2_tbl_get_property_result result;
  try {
    iface_->hash_for_cm2_tbl_get_property(result.success, args.sess_hdl, args.dev_id, args.property);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm2_tbl_get_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm2_tbl_get_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm2_tbl_get_property");
  }

  oprot->writeMessageBegin("hash_for_cm2_tbl_get_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm2_tbl_get_property", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm3_tbl_set_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm3_tbl_set_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm3_tbl_set_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm3_tbl_set_property");
  }

  netbufferv4_hash_for_cm3_tbl_set_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm3_tbl_set_property", bytes);
  }

  netbufferv4_hash_for_cm3_tbl_set_property_result result;
  try {
    iface_->hash_for_cm3_tbl_set_property(args.sess_hdl, args.dev_id, args.property, args.value, args.prop_args);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm3_tbl_set_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm3_tbl_set_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm3_tbl_set_property");
  }

  oprot->writeMessageBegin("hash_for_cm3_tbl_set_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm3_tbl_set_property", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm3_tbl_get_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm3_tbl_get_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm3_tbl_get_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm3_tbl_get_property");
  }

  netbufferv4_hash_for_cm3_tbl_get_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm3_tbl_get_property", bytes);
  }

  netbufferv4_hash_for_cm3_tbl_get_property_result result;
  try {
    iface_->hash_for_cm3_tbl_get_property(result.success, args.sess_hdl, args.dev_id, args.property);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm3_tbl_get_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm3_tbl_get_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm3_tbl_get_property");
  }

  oprot->writeMessageBegin("hash_for_cm3_tbl_get_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm3_tbl_get_property", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm4_tbl_set_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm4_tbl_set_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm4_tbl_set_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm4_tbl_set_property");
  }

  netbufferv4_hash_for_cm4_tbl_set_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm4_tbl_set_property", bytes);
  }

  netbufferv4_hash_for_cm4_tbl_set_property_result result;
  try {
    iface_->hash_for_cm4_tbl_set_property(args.sess_hdl, args.dev_id, args.property, args.value, args.prop_args);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm4_tbl_set_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm4_tbl_set_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm4_tbl_set_property");
  }

  oprot->writeMessageBegin("hash_for_cm4_tbl_set_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm4_tbl_set_property", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm4_tbl_get_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm4_tbl_get_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm4_tbl_get_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm4_tbl_get_property");
  }

  netbufferv4_hash_for_cm4_tbl_get_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm4_tbl_get_property", bytes);
  }

  netbufferv4_hash_for_cm4_tbl_get_property_result result;
  try {
    iface_->hash_for_cm4_tbl_get_property(result.success, args.sess_hdl, args.dev_id, args.property);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm4_tbl_get_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm4_tbl_get_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm4_tbl_get_property");
  }

  oprot->writeMessageBegin("hash_for_cm4_tbl_get_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm4_tbl_get_property", bytes);
  }
}

void netbufferv4Processor::process_hash_for_seq_tbl_set_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_seq_tbl_set_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_seq_tbl_set_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_seq_tbl_set_property");
  }

  netbufferv4_hash_for_seq_tbl_set_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_seq_tbl_set_property", bytes);
  }

  netbufferv4_hash_for_seq_tbl_set_property_result result;
  try {
    iface_->hash_for_seq_tbl_set_property(args.sess_hdl, args.dev_id, args.property, args.value, args.prop_args);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_seq_tbl_set_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_seq_tbl_set_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_seq_tbl_set_property");
  }

  oprot->writeMessageBegin("hash_for_seq_tbl_set_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_seq_tbl_set_property", bytes);
  }
}

void netbufferv4Processor::process_hash_for_seq_tbl_get_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_seq_tbl_get_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_seq_tbl_get_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_seq_tbl_get_property");
  }

  netbufferv4_hash_for_seq_tbl_get_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_seq_tbl_get_property", bytes);
  }

  netbufferv4_hash_for_seq_tbl_get_property_result result;
  try {
    iface_->hash_for_seq_tbl_get_property(result.success, args.sess_hdl, args.dev_id, args.property);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_seq_tbl_get_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_seq_tbl_get_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_seq_tbl_get_property");
  }

  oprot->writeMessageBegin("hash_for_seq_tbl_get_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_seq_tbl_get_property", bytes);
  }
}

void netbufferv4Processor::process_ig_port_forward_tbl_set_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.ig_port_forward_tbl_set_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.ig_port_forward_tbl_set_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.ig_port_forward_tbl_set_property");
  }

  netbufferv4_ig_port_forward_tbl_set_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.ig_port_forward_tbl_set_property", bytes);
  }

  netbufferv4_ig_port_forward_tbl_set_property_result result;
  try {
    iface_->ig_port_forward_tbl_set_property(args.sess_hdl, args.dev_id, args.property, args.value, args.prop_args);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.ig_port_forward_tbl_set_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ig_port_forward_tbl_set_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.ig_port_forward_tbl_set_property");
  }

  oprot->writeMessageBegin("ig_port_forward_tbl_set_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.ig_port_forward_tbl_set_property", bytes);
  }
}

void netbufferv4Processor::process_ig_port_forward_tbl_get_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.ig_port_forward_tbl_get_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.ig_port_forward_tbl_get_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.ig_port_forward_tbl_get_property");
  }

  netbufferv4_ig_port_forward_tbl_get_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.ig_port_forward_tbl_get_property", bytes);
  }

  netbufferv4_ig_port_forward_tbl_get_property_result result;
  try {
    iface_->ig_port_forward_tbl_get_property(result.success, args.sess_hdl, args.dev_id, args.property);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.ig_port_forward_tbl_get_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ig_port_forward_tbl_get_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.ig_port_forward_tbl_get_property");
  }

  oprot->writeMessageBegin("ig_port_forward_tbl_get_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.ig_port_forward_tbl_get_property", bytes);
  }
}

void netbufferv4Processor::process_ipv4_forward_tbl_set_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.ipv4_forward_tbl_set_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.ipv4_forward_tbl_set_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.ipv4_forward_tbl_set_property");
  }

  netbufferv4_ipv4_forward_tbl_set_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.ipv4_forward_tbl_set_property", bytes);
  }

  netbufferv4_ipv4_forward_tbl_set_property_result result;
  try {
    iface_->ipv4_forward_tbl_set_property(args.sess_hdl, args.dev_id, args.property, args.value, args.prop_args);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.ipv4_forward_tbl_set_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ipv4_forward_tbl_set_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.ipv4_forward_tbl_set_property");
  }

  oprot->writeMessageBegin("ipv4_forward_tbl_set_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.ipv4_forward_tbl_set_property", bytes);
  }
}

void netbufferv4Processor::process_ipv4_forward_tbl_get_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.ipv4_forward_tbl_get_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.ipv4_forward_tbl_get_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.ipv4_forward_tbl_get_property");
  }

  netbufferv4_ipv4_forward_tbl_get_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.ipv4_forward_tbl_get_property", bytes);
  }

  netbufferv4_ipv4_forward_tbl_get_property_result result;
  try {
    iface_->ipv4_forward_tbl_get_property(result.success, args.sess_hdl, args.dev_id, args.property);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.ipv4_forward_tbl_get_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ipv4_forward_tbl_get_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.ipv4_forward_tbl_get_property");
  }

  oprot->writeMessageBegin("ipv4_forward_tbl_get_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.ipv4_forward_tbl_get_property", bytes);
  }
}

void netbufferv4Processor::process_is_hot_tbl_set_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.is_hot_tbl_set_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.is_hot_tbl_set_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.is_hot_tbl_set_property");
  }

  netbufferv4_is_hot_tbl_set_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.is_hot_tbl_set_property", bytes);
  }

  netbufferv4_is_hot_tbl_set_property_result result;
  try {
    iface_->is_hot_tbl_set_property(args.sess_hdl, args.dev_id, args.property, args.value, args.prop_args);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.is_hot_tbl_set_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("is_hot_tbl_set_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.is_hot_tbl_set_property");
  }

  oprot->writeMessageBegin("is_hot_tbl_set_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.is_hot_tbl_set_property", bytes);
  }
}

void netbufferv4Processor::process_is_hot_tbl_get_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.is_hot_tbl_get_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.is_hot_tbl_get_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.is_hot_tbl_get_property");
  }

  netbufferv4_is_hot_tbl_get_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.is_hot_tbl_get_property", bytes);
  }

  netbufferv4_is_hot_tbl_get_property_result result;
  try {
    iface_->is_hot_tbl_get_property(result.success, args.sess_hdl, args.dev_id, args.property);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.is_hot_tbl_get_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("is_hot_tbl_get_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.is_hot_tbl_get_property");
  }

  oprot->writeMessageBegin("is_hot_tbl_get_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.is_hot_tbl_get_property", bytes);
  }
}

void netbufferv4Processor::process_lastclone_lastscansplit_tbl_set_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.lastclone_lastscansplit_tbl_set_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.lastclone_lastscansplit_tbl_set_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.lastclone_lastscansplit_tbl_set_property");
  }

  netbufferv4_lastclone_lastscansplit_tbl_set_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.lastclone_lastscansplit_tbl_set_property", bytes);
  }

  netbufferv4_lastclone_lastscansplit_tbl_set_property_result result;
  try {
    iface_->lastclone_lastscansplit_tbl_set_property(args.sess_hdl, args.dev_id, args.property, args.value, args.prop_args);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.lastclone_lastscansplit_tbl_set_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("lastclone_lastscansplit_tbl_set_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.lastclone_lastscansplit_tbl_set_property");
  }

  oprot->writeMessageBegin("lastclone_lastscansplit_tbl_set_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.lastclone_lastscansplit_tbl_set_property", bytes);
  }
}

void netbufferv4Processor::process_lastclone_lastscansplit_tbl_get_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.lastclone_lastscansplit_tbl_get_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.lastclone_lastscansplit_tbl_get_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.lastclone_lastscansplit_tbl_get_property");
  }

  netbufferv4_lastclone_lastscansplit_tbl_get_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.lastclone_lastscansplit_tbl_get_property", bytes);
  }

  netbufferv4_lastclone_lastscansplit_tbl_get_property_result result;
  try {
    iface_->lastclone_lastscansplit_tbl_get_property(result.success, args.sess_hdl, args.dev_id, args.property);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.lastclone_lastscansplit_tbl_get_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("lastclone_lastscansplit_tbl_get_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.lastclone_lastscansplit_tbl_get_property");
  }

  oprot->writeMessageBegin("lastclone_lastscansplit_tbl_get_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.lastclone_lastscansplit_tbl_get_property", bytes);
  }
}

void netbufferv4Processor::process_need_recirculate_tbl_set_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.need_recirculate_tbl_set_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.need_recirculate_tbl_set_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.need_recirculate_tbl_set_property");
  }

  netbufferv4_need_recirculate_tbl_set_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.need_recirculate_tbl_set_property", bytes);
  }

  netbufferv4_need_recirculate_tbl_set_property_result result;
  try {
    iface_->need_recirculate_tbl_set_property(args.sess_hdl, args.dev_id, args.property, args.value, args.prop_args);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.need_recirculate_tbl_set_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("need_recirculate_tbl_set_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.need_recirculate_tbl_set_property");
  }

  oprot->writeMessageBegin("need_recirculate_tbl_set_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.need_recirculate_tbl_set_property", bytes);
  }
}

void netbufferv4Processor::process_need_recirculate_tbl_get_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.need_recirculate_tbl_get_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.need_recirculate_tbl_get_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.need_recirculate_tbl_get_property");
  }

  netbufferv4_need_recirculate_tbl_get_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.need_recirculate_tbl_get_property", bytes);
  }

  netbufferv4_need_recirculate_tbl_get_property_result result;
  try {
    iface_->need_recirculate_tbl_get_property(result.success, args.sess_hdl, args.dev_id, args.property);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.need_recirculate_tbl_get_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("need_recirculate_tbl_get_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.need_recirculate_tbl_get_property");
  }

  oprot->writeMessageBegin("need_recirculate_tbl_get_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.need_recirculate_tbl_get_property", bytes);
  }
}

void netbufferv4Processor::process_prepare_for_cachehit_tbl_set_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.prepare_for_cachehit_tbl_set_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.prepare_for_cachehit_tbl_set_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.prepare_for_cachehit_tbl_set_property");
  }

  netbufferv4_prepare_for_cachehit_tbl_set_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.prepare_for_cachehit_tbl_set_property", bytes);
  }

  netbufferv4_prepare_for_cachehit_tbl_set_property_result result;
  try {
    iface_->prepare_for_cachehit_tbl_set_property(args.sess_hdl, args.dev_id, args.property, args.value, args.prop_args);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.prepare_for_cachehit_tbl_set_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("prepare_for_cachehit_tbl_set_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.prepare_for_cachehit_tbl_set_property");
  }

  oprot->writeMessageBegin("prepare_for_cachehit_tbl_set_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.prepare_for_cachehit_tbl_set_property", bytes);
  }
}

void netbufferv4Processor::process_prepare_for_cachehit_tbl_get_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.prepare_for_cachehit_tbl_get_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.prepare_for_cachehit_tbl_get_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.prepare_for_cachehit_tbl_get_property");
  }

  netbufferv4_prepare_for_cachehit_tbl_get_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.prepare_for_cachehit_tbl_get_property", bytes);
  }

  netbufferv4_prepare_for_cachehit_tbl_get_property_result result;
  try {
    iface_->prepare_for_cachehit_tbl_get_property(result.success, args.sess_hdl, args.dev_id, args.property);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.prepare_for_cachehit_tbl_get_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("prepare_for_cachehit_tbl_get_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.prepare_for_cachehit_tbl_get_property");
  }

  oprot->writeMessageBegin("prepare_for_cachehit_tbl_get_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.prepare_for_cachehit_tbl_get_property", bytes);
  }
}

void netbufferv4Processor::process_process_scanreq_split_tbl_set_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.process_scanreq_split_tbl_set_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.process_scanreq_split_tbl_set_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.process_scanreq_split_tbl_set_property");
  }

  netbufferv4_process_scanreq_split_tbl_set_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.process_scanreq_split_tbl_set_property", bytes);
  }

  netbufferv4_process_scanreq_split_tbl_set_property_result result;
  try {
    iface_->process_scanreq_split_tbl_set_property(args.sess_hdl, args.dev_id, args.property, args.value, args.prop_args);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.process_scanreq_split_tbl_set_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("process_scanreq_split_tbl_set_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.process_scanreq_split_tbl_set_property");
  }

  oprot->writeMessageBegin("process_scanreq_split_tbl_set_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.process_scanreq_split_tbl_set_property", bytes);
  }
}

void netbufferv4Processor::process_process_scanreq_split_tbl_get_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.process_scanreq_split_tbl_get_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.process_scanreq_split_tbl_get_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.process_scanreq_split_tbl_get_property");
  }

  netbufferv4_process_scanreq_split_tbl_get_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.process_scanreq_split_tbl_get_property", bytes);
  }

  netbufferv4_process_scanreq_split_tbl_get_property_result result;
  try {
    iface_->process_scanreq_split_tbl_get_property(result.success, args.sess_hdl, args.dev_id, args.property);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.process_scanreq_split_tbl_get_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("process_scanreq_split_tbl_get_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.process_scanreq_split_tbl_get_property");
  }

  oprot->writeMessageBegin("process_scanreq_split_tbl_get_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.process_scanreq_split_tbl_get_property", bytes);
  }
}

void netbufferv4Processor::process_range_partition_for_scan_endkey_tbl_set_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.range_partition_for_scan_endkey_tbl_set_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_set_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_set_property");
  }

  netbufferv4_range_partition_for_scan_endkey_tbl_set_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_set_property", bytes);
  }

  netbufferv4_range_partition_for_scan_endkey_tbl_set_property_result result;
  try {
    iface_->range_partition_for_scan_endkey_tbl_set_property(args.sess_hdl, args.dev_id, args.property, args.value, args.prop_args);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_set_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("range_partition_for_scan_endkey_tbl_set_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_set_property");
  }

  oprot->writeMessageBegin("range_partition_for_scan_endkey_tbl_set_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_set_property", bytes);
  }
}

void netbufferv4Processor::process_range_partition_for_scan_endkey_tbl_get_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.range_partition_for_scan_endkey_tbl_get_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_get_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_get_property");
  }

  netbufferv4_range_partition_for_scan_endkey_tbl_get_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_get_property", bytes);
  }

  netbufferv4_range_partition_for_scan_endkey_tbl_get_property_result result;
  try {
    iface_->range_partition_for_scan_endkey_tbl_get_property(result.success, args.sess_hdl, args.dev_id, args.property);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_get_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("range_partition_for_scan_endkey_tbl_get_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_get_property");
  }

  oprot->writeMessageBegin("range_partition_for_scan_endkey_tbl_get_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.range_partition_for_scan_endkey_tbl_get_property", bytes);
  }
}

void netbufferv4Processor::process_range_partition_tbl_set_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.range_partition_tbl_set_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.range_partition_tbl_set_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.range_partition_tbl_set_property");
  }

  netbufferv4_range_partition_tbl_set_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.range_partition_tbl_set_property", bytes);
  }

  netbufferv4_range_partition_tbl_set_property_result result;
  try {
    iface_->range_partition_tbl_set_property(args.sess_hdl, args.dev_id, args.property, args.value, args.prop_args);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.range_partition_tbl_set_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("range_partition_tbl_set_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.range_partition_tbl_set_property");
  }

  oprot->writeMessageBegin("range_partition_tbl_set_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.range_partition_tbl_set_property", bytes);
  }
}

void netbufferv4Processor::process_range_partition_tbl_get_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.range_partition_tbl_get_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.range_partition_tbl_get_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.range_partition_tbl_get_property");
  }

  netbufferv4_range_partition_tbl_get_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.range_partition_tbl_get_property", bytes);
  }

  netbufferv4_range_partition_tbl_get_property_result result;
  try {
    iface_->range_partition_tbl_get_property(result.success, args.sess_hdl, args.dev_id, args.property);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.range_partition_tbl_get_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("range_partition_tbl_get_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.range_partition_tbl_get_property");
  }

  oprot->writeMessageBegin("range_partition_tbl_get_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.range_partition_tbl_get_property", bytes);
  }
}

void netbufferv4Processor::process_recirculate_tbl_set_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.recirculate_tbl_set_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.recirculate_tbl_set_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.recirculate_tbl_set_property");
  }

  netbufferv4_recirculate_tbl_set_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.recirculate_tbl_set_property", bytes);
  }

  netbufferv4_recirculate_tbl_set_property_result result;
  try {
    iface_->recirculate_tbl_set_property(args.sess_hdl, args.dev_id, args.property, args.value, args.prop_args);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.recirculate_tbl_set_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("recirculate_tbl_set_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.recirculate_tbl_set_property");
  }

  oprot->writeMessageBegin("recirculate_tbl_set_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.recirculate_tbl_set_property", bytes);
  }
}

void netbufferv4Processor::process_recirculate_tbl_get_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.recirculate_tbl_get_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.recirculate_tbl_get_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.recirculate_tbl_get_property");
  }

  netbufferv4_recirculate_tbl_get_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.recirculate_tbl_get_property", bytes);
  }

  netbufferv4_recirculate_tbl_get_property_result result;
  try {
    iface_->recirculate_tbl_get_property(result.success, args.sess_hdl, args.dev_id, args.property);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.recirculate_tbl_get_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("recirculate_tbl_get_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.recirculate_tbl_get_property");
  }

  oprot->writeMessageBegin("recirculate_tbl_get_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.recirculate_tbl_get_property", bytes);
  }
}

void netbufferv4Processor::process_sample_tbl_set_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.sample_tbl_set_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.sample_tbl_set_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.sample_tbl_set_property");
  }

  netbufferv4_sample_tbl_set_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.sample_tbl_set_property", bytes);
  }

  netbufferv4_sample_tbl_set_property_result result;
  try {
    iface_->sample_tbl_set_property(args.sess_hdl, args.dev_id, args.property, args.value, args.prop_args);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.sample_tbl_set_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sample_tbl_set_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.sample_tbl_set_property");
  }

  oprot->writeMessageBegin("sample_tbl_set_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.sample_tbl_set_property", bytes);
  }
}

void netbufferv4Processor::process_sample_tbl_get_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.sample_tbl_get_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.sample_tbl_get_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.sample_tbl_get_property");
  }

  netbufferv4_sample_tbl_get_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.sample_tbl_get_property", bytes);
  }

  netbufferv4_sample_tbl_get_property_result result;
  try {
    iface_->sample_tbl_get_property(result.success, args.sess_hdl, args.dev_id, args.property);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.sample_tbl_get_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sample_tbl_get_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.sample_tbl_get_property");
  }

  oprot->writeMessageBegin("sample_tbl_get_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.sample_tbl_get_property", bytes);
  }
}

void netbufferv4Processor::process_save_client_udpport_tbl_set_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.save_client_udpport_tbl_set_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.save_client_udpport_tbl_set_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.save_client_udpport_tbl_set_property");
  }

  netbufferv4_save_client_udpport_tbl_set_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.save_client_udpport_tbl_set_property", bytes);
  }

  netbufferv4_save_client_udpport_tbl_set_property_result result;
  try {
    iface_->save_client_udpport_tbl_set_property(args.sess_hdl, args.dev_id, args.property, args.value, args.prop_args);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.save_client_udpport_tbl_set_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("save_client_udpport_tbl_set_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.save_client_udpport_tbl_set_property");
  }

  oprot->writeMessageBegin("save_client_udpport_tbl_set_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.save_client_udpport_tbl_set_property", bytes);
  }
}

void netbufferv4Processor::process_save_client_udpport_tbl_get_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.save_client_udpport_tbl_get_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.save_client_udpport_tbl_get_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.save_client_udpport_tbl_get_property");
  }

  netbufferv4_save_client_udpport_tbl_get_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.save_client_udpport_tbl_get_property", bytes);
  }

  netbufferv4_save_client_udpport_tbl_get_property_result result;
  try {
    iface_->save_client_udpport_tbl_get_property(result.success, args.sess_hdl, args.dev_id, args.property);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.save_client_udpport_tbl_get_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("save_client_udpport_tbl_get_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.save_client_udpport_tbl_get_property");
  }

  oprot->writeMessageBegin("save_client_udpport_tbl_get_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.save_client_udpport_tbl_get_property", bytes);
  }
}

void netbufferv4Processor::process_set_hot_threshold_tbl_set_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.set_hot_threshold_tbl_set_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.set_hot_threshold_tbl_set_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.set_hot_threshold_tbl_set_property");
  }

  netbufferv4_set_hot_threshold_tbl_set_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.set_hot_threshold_tbl_set_property", bytes);
  }

  netbufferv4_set_hot_threshold_tbl_set_property_result result;
  try {
    iface_->set_hot_threshold_tbl_set_property(args.sess_hdl, args.dev_id, args.property, args.value, args.prop_args);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.set_hot_threshold_tbl_set_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("set_hot_threshold_tbl_set_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.set_hot_threshold_tbl_set_property");
  }

  oprot->writeMessageBegin("set_hot_threshold_tbl_set_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.set_hot_threshold_tbl_set_property", bytes);
  }
}

void netbufferv4Processor::process_set_hot_threshold_tbl_get_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.set_hot_threshold_tbl_get_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.set_hot_threshold_tbl_get_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.set_hot_threshold_tbl_get_property");
  }

  netbufferv4_set_hot_threshold_tbl_get_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.set_hot_threshold_tbl_get_property", bytes);
  }

  netbufferv4_set_hot_threshold_tbl_get_property_result result;
  try {
    iface_->set_hot_threshold_tbl_get_property(result.success, args.sess_hdl, args.dev_id, args.property);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.set_hot_threshold_tbl_get_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("set_hot_threshold_tbl_get_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.set_hot_threshold_tbl_get_property");
  }

  oprot->writeMessageBegin("set_hot_threshold_tbl_get_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.set_hot_threshold_tbl_get_property", bytes);
  }
}

void netbufferv4Processor::process_snapshot_flag_tbl_set_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.snapshot_flag_tbl_set_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.snapshot_flag_tbl_set_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.snapshot_flag_tbl_set_property");
  }

  netbufferv4_snapshot_flag_tbl_set_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.snapshot_flag_tbl_set_property", bytes);
  }

  netbufferv4_snapshot_flag_tbl_set_property_result result;
  try {
    iface_->snapshot_flag_tbl_set_property(args.sess_hdl, args.dev_id, args.property, args.value, args.prop_args);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.snapshot_flag_tbl_set_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("snapshot_flag_tbl_set_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.snapshot_flag_tbl_set_property");
  }

  oprot->writeMessageBegin("snapshot_flag_tbl_set_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.snapshot_flag_tbl_set_property", bytes);
  }
}

void netbufferv4Processor::process_snapshot_flag_tbl_get_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.snapshot_flag_tbl_get_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.snapshot_flag_tbl_get_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.snapshot_flag_tbl_get_property");
  }

  netbufferv4_snapshot_flag_tbl_get_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.snapshot_flag_tbl_get_property", bytes);
  }

  netbufferv4_snapshot_flag_tbl_get_property_result result;
  try {
    iface_->snapshot_flag_tbl_get_property(result.success, args.sess_hdl, args.dev_id, args.property);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.snapshot_flag_tbl_get_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("snapshot_flag_tbl_get_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.snapshot_flag_tbl_get_property");
  }

  oprot->writeMessageBegin("snapshot_flag_tbl_get_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.snapshot_flag_tbl_get_property", bytes);
  }
}

void netbufferv4Processor::process_update_ipmac_srcport_tbl_set_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_ipmac_srcport_tbl_set_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_ipmac_srcport_tbl_set_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_ipmac_srcport_tbl_set_property");
  }

  netbufferv4_update_ipmac_srcport_tbl_set_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_ipmac_srcport_tbl_set_property", bytes);
  }

  netbufferv4_update_ipmac_srcport_tbl_set_property_result result;
  try {
    iface_->update_ipmac_srcport_tbl_set_property(args.sess_hdl, args.dev_id, args.property, args.value, args.prop_args);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_ipmac_srcport_tbl_set_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_ipmac_srcport_tbl_set_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_ipmac_srcport_tbl_set_property");
  }

  oprot->writeMessageBegin("update_ipmac_srcport_tbl_set_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_ipmac_srcport_tbl_set_property", bytes);
  }
}

void netbufferv4Processor::process_update_ipmac_srcport_tbl_get_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_ipmac_srcport_tbl_get_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_ipmac_srcport_tbl_get_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_ipmac_srcport_tbl_get_property");
  }

  netbufferv4_update_ipmac_srcport_tbl_get_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_ipmac_srcport_tbl_get_property", bytes);
  }

  netbufferv4_update_ipmac_srcport_tbl_get_property_result result;
  try {
    iface_->update_ipmac_srcport_tbl_get_property(result.success, args.sess_hdl, args.dev_id, args.property);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_ipmac_srcport_tbl_get_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_ipmac_srcport_tbl_get_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_ipmac_srcport_tbl_get_property");
  }

  oprot->writeMessageBegin("update_ipmac_srcport_tbl_get_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_ipmac_srcport_tbl_get_property", bytes);
  }
}

void netbufferv4Processor::process_update_pktlen_tbl_set_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_pktlen_tbl_set_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_pktlen_tbl_set_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_pktlen_tbl_set_property");
  }

  netbufferv4_update_pktlen_tbl_set_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_pktlen_tbl_set_property", bytes);
  }

  netbufferv4_update_pktlen_tbl_set_property_result result;
  try {
    iface_->update_pktlen_tbl_set_property(args.sess_hdl, args.dev_id, args.property, args.value, args.prop_args);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_pktlen_tbl_set_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_pktlen_tbl_set_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_pktlen_tbl_set_property");
  }

  oprot->writeMessageBegin("update_pktlen_tbl_set_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_pktlen_tbl_set_property", bytes);
  }
}

void netbufferv4Processor::process_update_pktlen_tbl_get_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_pktlen_tbl_get_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_pktlen_tbl_get_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_pktlen_tbl_get_property");
  }

  netbufferv4_update_pktlen_tbl_get_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_pktlen_tbl_get_property", bytes);
  }

  netbufferv4_update_pktlen_tbl_get_property_result result;
  try {
    iface_->update_pktlen_tbl_get_property(result.success, args.sess_hdl, args.dev_id, args.property);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_pktlen_tbl_get_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_pktlen_tbl_get_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_pktlen_tbl_get_property");
  }

  oprot->writeMessageBegin("update_pktlen_tbl_get_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_pktlen_tbl_get_property", bytes);
  }
}

void netbufferv4Processor::process_update_valhi10_tbl_set_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi10_tbl_set_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi10_tbl_set_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi10_tbl_set_property");
  }

  netbufferv4_update_valhi10_tbl_set_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi10_tbl_set_property", bytes);
  }

  netbufferv4_update_valhi10_tbl_set_property_result result;
  try {
    iface_->update_valhi10_tbl_set_property(args.sess_hdl, args.dev_id, args.property, args.value, args.prop_args);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi10_tbl_set_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi10_tbl_set_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi10_tbl_set_property");
  }

  oprot->writeMessageBegin("update_valhi10_tbl_set_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi10_tbl_set_property", bytes);
  }
}

void netbufferv4Processor::process_update_valhi10_tbl_get_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi10_tbl_get_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi10_tbl_get_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi10_tbl_get_property");
  }

  netbufferv4_update_valhi10_tbl_get_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi10_tbl_get_property", bytes);
  }

  netbufferv4_update_valhi10_tbl_get_property_result result;
  try {
    iface_->update_valhi10_tbl_get_property(result.success, args.sess_hdl, args.dev_id, args.property);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi10_tbl_get_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi10_tbl_get_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi10_tbl_get_property");
  }

  oprot->writeMessageBegin("update_valhi10_tbl_get_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi10_tbl_get_property", bytes);
  }
}

void netbufferv4Processor::process_update_valhi11_tbl_set_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi11_tbl_set_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi11_tbl_set_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi11_tbl_set_property");
  }

  netbufferv4_update_valhi11_tbl_set_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi11_tbl_set_property", bytes);
  }

  netbufferv4_update_valhi11_tbl_set_property_result result;
  try {
    iface_->update_valhi11_tbl_set_property(args.sess_hdl, args.dev_id, args.property, args.value, args.prop_args);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi11_tbl_set_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi11_tbl_set_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi11_tbl_set_property");
  }

  oprot->writeMessageBegin("update_valhi11_tbl_set_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi11_tbl_set_property", bytes);
  }
}

void netbufferv4Processor::process_update_valhi11_tbl_get_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi11_tbl_get_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi11_tbl_get_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi11_tbl_get_property");
  }

  netbufferv4_update_valhi11_tbl_get_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi11_tbl_get_property", bytes);
  }

  netbufferv4_update_valhi11_tbl_get_property_result result;
  try {
    iface_->update_valhi11_tbl_get_property(result.success, args.sess_hdl, args.dev_id, args.property);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi11_tbl_get_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi11_tbl_get_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi11_tbl_get_property");
  }

  oprot->writeMessageBegin("update_valhi11_tbl_get_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi11_tbl_get_property", bytes);
  }
}

void netbufferv4Processor::process_update_valhi12_tbl_set_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi12_tbl_set_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi12_tbl_set_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi12_tbl_set_property");
  }

  netbufferv4_update_valhi12_tbl_set_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi12_tbl_set_property", bytes);
  }

  netbufferv4_update_valhi12_tbl_set_property_result result;
  try {
    iface_->update_valhi12_tbl_set_property(args.sess_hdl, args.dev_id, args.property, args.value, args.prop_args);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi12_tbl_set_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi12_tbl_set_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi12_tbl_set_property");
  }

  oprot->writeMessageBegin("update_valhi12_tbl_set_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi12_tbl_set_property", bytes);
  }
}

void netbufferv4Processor::process_update_valhi12_tbl_get_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi12_tbl_get_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi12_tbl_get_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi12_tbl_get_property");
  }

  netbufferv4_update_valhi12_tbl_get_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi12_tbl_get_property", bytes);
  }

  netbufferv4_update_valhi12_tbl_get_property_result result;
  try {
    iface_->update_valhi12_tbl_get_property(result.success, args.sess_hdl, args.dev_id, args.property);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi12_tbl_get_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi12_tbl_get_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi12_tbl_get_property");
  }

  oprot->writeMessageBegin("update_valhi12_tbl_get_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi12_tbl_get_property", bytes);
  }
}

void netbufferv4Processor::process_update_valhi13_tbl_set_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi13_tbl_set_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi13_tbl_set_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi13_tbl_set_property");
  }

  netbufferv4_update_valhi13_tbl_set_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi13_tbl_set_property", bytes);
  }

  netbufferv4_update_valhi13_tbl_set_property_result result;
  try {
    iface_->update_valhi13_tbl_set_property(args.sess_hdl, args.dev_id, args.property, args.value, args.prop_args);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi13_tbl_set_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi13_tbl_set_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi13_tbl_set_property");
  }

  oprot->writeMessageBegin("update_valhi13_tbl_set_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi13_tbl_set_property", bytes);
  }
}

void netbufferv4Processor::process_update_valhi13_tbl_get_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi13_tbl_get_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi13_tbl_get_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi13_tbl_get_property");
  }

  netbufferv4_update_valhi13_tbl_get_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi13_tbl_get_property", bytes);
  }

  netbufferv4_update_valhi13_tbl_get_property_result result;
  try {
    iface_->update_valhi13_tbl_get_property(result.success, args.sess_hdl, args.dev_id, args.property);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi13_tbl_get_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi13_tbl_get_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi13_tbl_get_property");
  }

  oprot->writeMessageBegin("update_valhi13_tbl_get_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi13_tbl_get_property", bytes);
  }
}

void netbufferv4Processor::process_update_valhi14_tbl_set_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi14_tbl_set_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi14_tbl_set_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi14_tbl_set_property");
  }

  netbufferv4_update_valhi14_tbl_set_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi14_tbl_set_property", bytes);
  }

  netbufferv4_update_valhi14_tbl_set_property_result result;
  try {
    iface_->update_valhi14_tbl_set_property(args.sess_hdl, args.dev_id, args.property, args.value, args.prop_args);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi14_tbl_set_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi14_tbl_set_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi14_tbl_set_property");
  }

  oprot->writeMessageBegin("update_valhi14_tbl_set_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi14_tbl_set_property", bytes);
  }
}

void netbufferv4Processor::process_update_valhi14_tbl_get_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi14_tbl_get_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi14_tbl_get_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi14_tbl_get_property");
  }

  netbufferv4_update_valhi14_tbl_get_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi14_tbl_get_property", bytes);
  }

  netbufferv4_update_valhi14_tbl_get_property_result result;
  try {
    iface_->update_valhi14_tbl_get_property(result.success, args.sess_hdl, args.dev_id, args.property);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi14_tbl_get_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi14_tbl_get_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi14_tbl_get_property");
  }

  oprot->writeMessageBegin("update_valhi14_tbl_get_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi14_tbl_get_property", bytes);
  }
}

void netbufferv4Processor::process_update_valhi15_tbl_set_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi15_tbl_set_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi15_tbl_set_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi15_tbl_set_property");
  }

  netbufferv4_update_valhi15_tbl_set_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi15_tbl_set_property", bytes);
  }

  netbufferv4_update_valhi15_tbl_set_property_result result;
  try {
    iface_->update_valhi15_tbl_set_property(args.sess_hdl, args.dev_id, args.property, args.value, args.prop_args);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi15_tbl_set_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi15_tbl_set_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi15_tbl_set_property");
  }

  oprot->writeMessageBegin("update_valhi15_tbl_set_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi15_tbl_set_property", bytes);
  }
}

void netbufferv4Processor::process_update_valhi15_tbl_get_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi15_tbl_get_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi15_tbl_get_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi15_tbl_get_property");
  }

  netbufferv4_update_valhi15_tbl_get_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi15_tbl_get_property", bytes);
  }

  netbufferv4_update_valhi15_tbl_get_property_result result;
  try {
    iface_->update_valhi15_tbl_get_property(result.success, args.sess_hdl, args.dev_id, args.property);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi15_tbl_get_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi15_tbl_get_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi15_tbl_get_property");
  }

  oprot->writeMessageBegin("update_valhi15_tbl_get_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi15_tbl_get_property", bytes);
  }
}

void netbufferv4Processor::process_update_valhi16_tbl_set_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi16_tbl_set_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi16_tbl_set_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi16_tbl_set_property");
  }

  netbufferv4_update_valhi16_tbl_set_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi16_tbl_set_property", bytes);
  }

  netbufferv4_update_valhi16_tbl_set_property_result result;
  try {
    iface_->update_valhi16_tbl_set_property(args.sess_hdl, args.dev_id, args.property, args.value, args.prop_args);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi16_tbl_set_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi16_tbl_set_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi16_tbl_set_property");
  }

  oprot->writeMessageBegin("update_valhi16_tbl_set_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi16_tbl_set_property", bytes);
  }
}

void netbufferv4Processor::process_update_valhi16_tbl_get_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi16_tbl_get_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi16_tbl_get_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi16_tbl_get_property");
  }

  netbufferv4_update_valhi16_tbl_get_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi16_tbl_get_property", bytes);
  }

  netbufferv4_update_valhi16_tbl_get_property_result result;
  try {
    iface_->update_valhi16_tbl_get_property(result.success, args.sess_hdl, args.dev_id, args.property);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi16_tbl_get_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi16_tbl_get_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi16_tbl_get_property");
  }

  oprot->writeMessageBegin("update_valhi16_tbl_get_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi16_tbl_get_property", bytes);
  }
}

void netbufferv4Processor::process_update_valhi1_tbl_set_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi1_tbl_set_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi1_tbl_set_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi1_tbl_set_property");
  }

  netbufferv4_update_valhi1_tbl_set_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi1_tbl_set_property", bytes);
  }

  netbufferv4_update_valhi1_tbl_set_property_result result;
  try {
    iface_->update_valhi1_tbl_set_property(args.sess_hdl, args.dev_id, args.property, args.value, args.prop_args);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi1_tbl_set_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi1_tbl_set_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi1_tbl_set_property");
  }

  oprot->writeMessageBegin("update_valhi1_tbl_set_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi1_tbl_set_property", bytes);
  }
}

void netbufferv4Processor::process_update_valhi1_tbl_get_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi1_tbl_get_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi1_tbl_get_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi1_tbl_get_property");
  }

  netbufferv4_update_valhi1_tbl_get_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi1_tbl_get_property", bytes);
  }

  netbufferv4_update_valhi1_tbl_get_property_result result;
  try {
    iface_->update_valhi1_tbl_get_property(result.success, args.sess_hdl, args.dev_id, args.property);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi1_tbl_get_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi1_tbl_get_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi1_tbl_get_property");
  }

  oprot->writeMessageBegin("update_valhi1_tbl_get_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi1_tbl_get_property", bytes);
  }
}

void netbufferv4Processor::process_update_valhi2_tbl_set_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi2_tbl_set_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi2_tbl_set_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi2_tbl_set_property");
  }

  netbufferv4_update_valhi2_tbl_set_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi2_tbl_set_property", bytes);
  }

  netbufferv4_update_valhi2_tbl_set_property_result result;
  try {
    iface_->update_valhi2_tbl_set_property(args.sess_hdl, args.dev_id, args.property, args.value, args.prop_args);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi2_tbl_set_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi2_tbl_set_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi2_tbl_set_property");
  }

  oprot->writeMessageBegin("update_valhi2_tbl_set_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi2_tbl_set_property", bytes);
  }
}

void netbufferv4Processor::process_update_valhi2_tbl_get_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi2_tbl_get_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi2_tbl_get_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi2_tbl_get_property");
  }

  netbufferv4_update_valhi2_tbl_get_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi2_tbl_get_property", bytes);
  }

  netbufferv4_update_valhi2_tbl_get_property_result result;
  try {
    iface_->update_valhi2_tbl_get_property(result.success, args.sess_hdl, args.dev_id, args.property);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi2_tbl_get_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi2_tbl_get_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi2_tbl_get_property");
  }

  oprot->writeMessageBegin("update_valhi2_tbl_get_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi2_tbl_get_property", bytes);
  }
}

void netbufferv4Processor::process_update_valhi3_tbl_set_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi3_tbl_set_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi3_tbl_set_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi3_tbl_set_property");
  }

  netbufferv4_update_valhi3_tbl_set_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi3_tbl_set_property", bytes);
  }

  netbufferv4_update_valhi3_tbl_set_property_result result;
  try {
    iface_->update_valhi3_tbl_set_property(args.sess_hdl, args.dev_id, args.property, args.value, args.prop_args);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi3_tbl_set_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi3_tbl_set_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi3_tbl_set_property");
  }

  oprot->writeMessageBegin("update_valhi3_tbl_set_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi3_tbl_set_property", bytes);
  }
}

void netbufferv4Processor::process_update_valhi3_tbl_get_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi3_tbl_get_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi3_tbl_get_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi3_tbl_get_property");
  }

  netbufferv4_update_valhi3_tbl_get_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi3_tbl_get_property", bytes);
  }

  netbufferv4_update_valhi3_tbl_get_property_result result;
  try {
    iface_->update_valhi3_tbl_get_property(result.success, args.sess_hdl, args.dev_id, args.property);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi3_tbl_get_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi3_tbl_get_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi3_tbl_get_property");
  }

  oprot->writeMessageBegin("update_valhi3_tbl_get_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi3_tbl_get_property", bytes);
  }
}

void netbufferv4Processor::process_update_valhi4_tbl_set_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi4_tbl_set_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi4_tbl_set_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi4_tbl_set_property");
  }

  netbufferv4_update_valhi4_tbl_set_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi4_tbl_set_property", bytes);
  }

  netbufferv4_update_valhi4_tbl_set_property_result result;
  try {
    iface_->update_valhi4_tbl_set_property(args.sess_hdl, args.dev_id, args.property, args.value, args.prop_args);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi4_tbl_set_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi4_tbl_set_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi4_tbl_set_property");
  }

  oprot->writeMessageBegin("update_valhi4_tbl_set_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi4_tbl_set_property", bytes);
  }
}

void netbufferv4Processor::process_update_valhi4_tbl_get_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi4_tbl_get_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi4_tbl_get_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi4_tbl_get_property");
  }

  netbufferv4_update_valhi4_tbl_get_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi4_tbl_get_property", bytes);
  }

  netbufferv4_update_valhi4_tbl_get_property_result result;
  try {
    iface_->update_valhi4_tbl_get_property(result.success, args.sess_hdl, args.dev_id, args.property);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi4_tbl_get_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi4_tbl_get_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi4_tbl_get_property");
  }

  oprot->writeMessageBegin("update_valhi4_tbl_get_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi4_tbl_get_property", bytes);
  }
}

void netbufferv4Processor::process_update_valhi5_tbl_set_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi5_tbl_set_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi5_tbl_set_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi5_tbl_set_property");
  }

  netbufferv4_update_valhi5_tbl_set_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi5_tbl_set_property", bytes);
  }

  netbufferv4_update_valhi5_tbl_set_property_result result;
  try {
    iface_->update_valhi5_tbl_set_property(args.sess_hdl, args.dev_id, args.property, args.value, args.prop_args);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi5_tbl_set_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi5_tbl_set_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi5_tbl_set_property");
  }

  oprot->writeMessageBegin("update_valhi5_tbl_set_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi5_tbl_set_property", bytes);
  }
}

void netbufferv4Processor::process_update_valhi5_tbl_get_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi5_tbl_get_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi5_tbl_get_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi5_tbl_get_property");
  }

  netbufferv4_update_valhi5_tbl_get_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi5_tbl_get_property", bytes);
  }

  netbufferv4_update_valhi5_tbl_get_property_result result;
  try {
    iface_->update_valhi5_tbl_get_property(result.success, args.sess_hdl, args.dev_id, args.property);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi5_tbl_get_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi5_tbl_get_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi5_tbl_get_property");
  }

  oprot->writeMessageBegin("update_valhi5_tbl_get_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi5_tbl_get_property", bytes);
  }
}

void netbufferv4Processor::process_update_valhi6_tbl_set_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi6_tbl_set_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi6_tbl_set_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi6_tbl_set_property");
  }

  netbufferv4_update_valhi6_tbl_set_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi6_tbl_set_property", bytes);
  }

  netbufferv4_update_valhi6_tbl_set_property_result result;
  try {
    iface_->update_valhi6_tbl_set_property(args.sess_hdl, args.dev_id, args.property, args.value, args.prop_args);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi6_tbl_set_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi6_tbl_set_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi6_tbl_set_property");
  }

  oprot->writeMessageBegin("update_valhi6_tbl_set_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi6_tbl_set_property", bytes);
  }
}

void netbufferv4Processor::process_update_valhi6_tbl_get_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi6_tbl_get_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi6_tbl_get_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi6_tbl_get_property");
  }

  netbufferv4_update_valhi6_tbl_get_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi6_tbl_get_property", bytes);
  }

  netbufferv4_update_valhi6_tbl_get_property_result result;
  try {
    iface_->update_valhi6_tbl_get_property(result.success, args.sess_hdl, args.dev_id, args.property);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi6_tbl_get_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi6_tbl_get_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi6_tbl_get_property");
  }

  oprot->writeMessageBegin("update_valhi6_tbl_get_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi6_tbl_get_property", bytes);
  }
}

void netbufferv4Processor::process_update_valhi7_tbl_set_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi7_tbl_set_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi7_tbl_set_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi7_tbl_set_property");
  }

  netbufferv4_update_valhi7_tbl_set_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi7_tbl_set_property", bytes);
  }

  netbufferv4_update_valhi7_tbl_set_property_result result;
  try {
    iface_->update_valhi7_tbl_set_property(args.sess_hdl, args.dev_id, args.property, args.value, args.prop_args);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi7_tbl_set_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi7_tbl_set_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi7_tbl_set_property");
  }

  oprot->writeMessageBegin("update_valhi7_tbl_set_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi7_tbl_set_property", bytes);
  }
}

void netbufferv4Processor::process_update_valhi7_tbl_get_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi7_tbl_get_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi7_tbl_get_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi7_tbl_get_property");
  }

  netbufferv4_update_valhi7_tbl_get_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi7_tbl_get_property", bytes);
  }

  netbufferv4_update_valhi7_tbl_get_property_result result;
  try {
    iface_->update_valhi7_tbl_get_property(result.success, args.sess_hdl, args.dev_id, args.property);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi7_tbl_get_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi7_tbl_get_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi7_tbl_get_property");
  }

  oprot->writeMessageBegin("update_valhi7_tbl_get_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi7_tbl_get_property", bytes);
  }
}

void netbufferv4Processor::process_update_valhi8_tbl_set_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi8_tbl_set_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi8_tbl_set_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi8_tbl_set_property");
  }

  netbufferv4_update_valhi8_tbl_set_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi8_tbl_set_property", bytes);
  }

  netbufferv4_update_valhi8_tbl_set_property_result result;
  try {
    iface_->update_valhi8_tbl_set_property(args.sess_hdl, args.dev_id, args.property, args.value, args.prop_args);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi8_tbl_set_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi8_tbl_set_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi8_tbl_set_property");
  }

  oprot->writeMessageBegin("update_valhi8_tbl_set_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi8_tbl_set_property", bytes);
  }
}

void netbufferv4Processor::process_update_valhi8_tbl_get_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi8_tbl_get_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi8_tbl_get_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi8_tbl_get_property");
  }

  netbufferv4_update_valhi8_tbl_get_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi8_tbl_get_property", bytes);
  }

  netbufferv4_update_valhi8_tbl_get_property_result result;
  try {
    iface_->update_valhi8_tbl_get_property(result.success, args.sess_hdl, args.dev_id, args.property);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi8_tbl_get_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi8_tbl_get_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi8_tbl_get_property");
  }

  oprot->writeMessageBegin("update_valhi8_tbl_get_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi8_tbl_get_property", bytes);
  }
}

void netbufferv4Processor::process_update_valhi9_tbl_set_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi9_tbl_set_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi9_tbl_set_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi9_tbl_set_property");
  }

  netbufferv4_update_valhi9_tbl_set_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi9_tbl_set_property", bytes);
  }

  netbufferv4_update_valhi9_tbl_set_property_result result;
  try {
    iface_->update_valhi9_tbl_set_property(args.sess_hdl, args.dev_id, args.property, args.value, args.prop_args);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi9_tbl_set_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi9_tbl_set_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi9_tbl_set_property");
  }

  oprot->writeMessageBegin("update_valhi9_tbl_set_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi9_tbl_set_property", bytes);
  }
}

void netbufferv4Processor::process_update_valhi9_tbl_get_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi9_tbl_get_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi9_tbl_get_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi9_tbl_get_property");
  }

  netbufferv4_update_valhi9_tbl_get_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi9_tbl_get_property", bytes);
  }

  netbufferv4_update_valhi9_tbl_get_property_result result;
  try {
    iface_->update_valhi9_tbl_get_property(result.success, args.sess_hdl, args.dev_id, args.property);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi9_tbl_get_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi9_tbl_get_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi9_tbl_get_property");
  }

  oprot->writeMessageBegin("update_valhi9_tbl_get_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi9_tbl_get_property", bytes);
  }
}

void netbufferv4Processor::process_update_vallen_tbl_set_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallen_tbl_set_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallen_tbl_set_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallen_tbl_set_property");
  }

  netbufferv4_update_vallen_tbl_set_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallen_tbl_set_property", bytes);
  }

  netbufferv4_update_vallen_tbl_set_property_result result;
  try {
    iface_->update_vallen_tbl_set_property(args.sess_hdl, args.dev_id, args.property, args.value, args.prop_args);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallen_tbl_set_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallen_tbl_set_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallen_tbl_set_property");
  }

  oprot->writeMessageBegin("update_vallen_tbl_set_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallen_tbl_set_property", bytes);
  }
}

void netbufferv4Processor::process_update_vallen_tbl_get_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallen_tbl_get_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallen_tbl_get_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallen_tbl_get_property");
  }

  netbufferv4_update_vallen_tbl_get_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallen_tbl_get_property", bytes);
  }

  netbufferv4_update_vallen_tbl_get_property_result result;
  try {
    iface_->update_vallen_tbl_get_property(result.success, args.sess_hdl, args.dev_id, args.property);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallen_tbl_get_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallen_tbl_get_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallen_tbl_get_property");
  }

  oprot->writeMessageBegin("update_vallen_tbl_get_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallen_tbl_get_property", bytes);
  }
}

void netbufferv4Processor::process_update_vallo10_tbl_set_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo10_tbl_set_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo10_tbl_set_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo10_tbl_set_property");
  }

  netbufferv4_update_vallo10_tbl_set_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo10_tbl_set_property", bytes);
  }

  netbufferv4_update_vallo10_tbl_set_property_result result;
  try {
    iface_->update_vallo10_tbl_set_property(args.sess_hdl, args.dev_id, args.property, args.value, args.prop_args);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo10_tbl_set_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo10_tbl_set_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo10_tbl_set_property");
  }

  oprot->writeMessageBegin("update_vallo10_tbl_set_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo10_tbl_set_property", bytes);
  }
}

void netbufferv4Processor::process_update_vallo10_tbl_get_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo10_tbl_get_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo10_tbl_get_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo10_tbl_get_property");
  }

  netbufferv4_update_vallo10_tbl_get_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo10_tbl_get_property", bytes);
  }

  netbufferv4_update_vallo10_tbl_get_property_result result;
  try {
    iface_->update_vallo10_tbl_get_property(result.success, args.sess_hdl, args.dev_id, args.property);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo10_tbl_get_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo10_tbl_get_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo10_tbl_get_property");
  }

  oprot->writeMessageBegin("update_vallo10_tbl_get_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo10_tbl_get_property", bytes);
  }
}

void netbufferv4Processor::process_update_vallo11_tbl_set_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo11_tbl_set_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo11_tbl_set_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo11_tbl_set_property");
  }

  netbufferv4_update_vallo11_tbl_set_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo11_tbl_set_property", bytes);
  }

  netbufferv4_update_vallo11_tbl_set_property_result result;
  try {
    iface_->update_vallo11_tbl_set_property(args.sess_hdl, args.dev_id, args.property, args.value, args.prop_args);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo11_tbl_set_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo11_tbl_set_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo11_tbl_set_property");
  }

  oprot->writeMessageBegin("update_vallo11_tbl_set_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo11_tbl_set_property", bytes);
  }
}

void netbufferv4Processor::process_update_vallo11_tbl_get_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo11_tbl_get_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo11_tbl_get_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo11_tbl_get_property");
  }

  netbufferv4_update_vallo11_tbl_get_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo11_tbl_get_property", bytes);
  }

  netbufferv4_update_vallo11_tbl_get_property_result result;
  try {
    iface_->update_vallo11_tbl_get_property(result.success, args.sess_hdl, args.dev_id, args.property);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo11_tbl_get_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo11_tbl_get_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo11_tbl_get_property");
  }

  oprot->writeMessageBegin("update_vallo11_tbl_get_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo11_tbl_get_property", bytes);
  }
}

void netbufferv4Processor::process_update_vallo12_tbl_set_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo12_tbl_set_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo12_tbl_set_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo12_tbl_set_property");
  }

  netbufferv4_update_vallo12_tbl_set_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo12_tbl_set_property", bytes);
  }

  netbufferv4_update_vallo12_tbl_set_property_result result;
  try {
    iface_->update_vallo12_tbl_set_property(args.sess_hdl, args.dev_id, args.property, args.value, args.prop_args);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo12_tbl_set_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo12_tbl_set_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo12_tbl_set_property");
  }

  oprot->writeMessageBegin("update_vallo12_tbl_set_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo12_tbl_set_property", bytes);
  }
}

void netbufferv4Processor::process_update_vallo12_tbl_get_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo12_tbl_get_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo12_tbl_get_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo12_tbl_get_property");
  }

  netbufferv4_update_vallo12_tbl_get_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo12_tbl_get_property", bytes);
  }

  netbufferv4_update_vallo12_tbl_get_property_result result;
  try {
    iface_->update_vallo12_tbl_get_property(result.success, args.sess_hdl, args.dev_id, args.property);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo12_tbl_get_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo12_tbl_get_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo12_tbl_get_property");
  }

  oprot->writeMessageBegin("update_vallo12_tbl_get_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo12_tbl_get_property", bytes);
  }
}

void netbufferv4Processor::process_update_vallo13_tbl_set_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo13_tbl_set_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo13_tbl_set_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo13_tbl_set_property");
  }

  netbufferv4_update_vallo13_tbl_set_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo13_tbl_set_property", bytes);
  }

  netbufferv4_update_vallo13_tbl_set_property_result result;
  try {
    iface_->update_vallo13_tbl_set_property(args.sess_hdl, args.dev_id, args.property, args.value, args.prop_args);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo13_tbl_set_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo13_tbl_set_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo13_tbl_set_property");
  }

  oprot->writeMessageBegin("update_vallo13_tbl_set_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo13_tbl_set_property", bytes);
  }
}

void netbufferv4Processor::process_update_vallo13_tbl_get_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo13_tbl_get_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo13_tbl_get_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo13_tbl_get_property");
  }

  netbufferv4_update_vallo13_tbl_get_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo13_tbl_get_property", bytes);
  }

  netbufferv4_update_vallo13_tbl_get_property_result result;
  try {
    iface_->update_vallo13_tbl_get_property(result.success, args.sess_hdl, args.dev_id, args.property);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo13_tbl_get_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo13_tbl_get_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo13_tbl_get_property");
  }

  oprot->writeMessageBegin("update_vallo13_tbl_get_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo13_tbl_get_property", bytes);
  }
}

void netbufferv4Processor::process_update_vallo14_tbl_set_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo14_tbl_set_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo14_tbl_set_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo14_tbl_set_property");
  }

  netbufferv4_update_vallo14_tbl_set_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo14_tbl_set_property", bytes);
  }

  netbufferv4_update_vallo14_tbl_set_property_result result;
  try {
    iface_->update_vallo14_tbl_set_property(args.sess_hdl, args.dev_id, args.property, args.value, args.prop_args);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo14_tbl_set_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo14_tbl_set_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo14_tbl_set_property");
  }

  oprot->writeMessageBegin("update_vallo14_tbl_set_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo14_tbl_set_property", bytes);
  }
}

void netbufferv4Processor::process_update_vallo14_tbl_get_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo14_tbl_get_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo14_tbl_get_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo14_tbl_get_property");
  }

  netbufferv4_update_vallo14_tbl_get_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo14_tbl_get_property", bytes);
  }

  netbufferv4_update_vallo14_tbl_get_property_result result;
  try {
    iface_->update_vallo14_tbl_get_property(result.success, args.sess_hdl, args.dev_id, args.property);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo14_tbl_get_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo14_tbl_get_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo14_tbl_get_property");
  }

  oprot->writeMessageBegin("update_vallo14_tbl_get_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo14_tbl_get_property", bytes);
  }
}

void netbufferv4Processor::process_update_vallo15_tbl_set_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo15_tbl_set_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo15_tbl_set_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo15_tbl_set_property");
  }

  netbufferv4_update_vallo15_tbl_set_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo15_tbl_set_property", bytes);
  }

  netbufferv4_update_vallo15_tbl_set_property_result result;
  try {
    iface_->update_vallo15_tbl_set_property(args.sess_hdl, args.dev_id, args.property, args.value, args.prop_args);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo15_tbl_set_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo15_tbl_set_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo15_tbl_set_property");
  }

  oprot->writeMessageBegin("update_vallo15_tbl_set_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo15_tbl_set_property", bytes);
  }
}

void netbufferv4Processor::process_update_vallo15_tbl_get_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo15_tbl_get_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo15_tbl_get_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo15_tbl_get_property");
  }

  netbufferv4_update_vallo15_tbl_get_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo15_tbl_get_property", bytes);
  }

  netbufferv4_update_vallo15_tbl_get_property_result result;
  try {
    iface_->update_vallo15_tbl_get_property(result.success, args.sess_hdl, args.dev_id, args.property);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo15_tbl_get_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo15_tbl_get_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo15_tbl_get_property");
  }

  oprot->writeMessageBegin("update_vallo15_tbl_get_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo15_tbl_get_property", bytes);
  }
}

void netbufferv4Processor::process_update_vallo16_tbl_set_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo16_tbl_set_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo16_tbl_set_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo16_tbl_set_property");
  }

  netbufferv4_update_vallo16_tbl_set_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo16_tbl_set_property", bytes);
  }

  netbufferv4_update_vallo16_tbl_set_property_result result;
  try {
    iface_->update_vallo16_tbl_set_property(args.sess_hdl, args.dev_id, args.property, args.value, args.prop_args);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo16_tbl_set_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo16_tbl_set_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo16_tbl_set_property");
  }

  oprot->writeMessageBegin("update_vallo16_tbl_set_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo16_tbl_set_property", bytes);
  }
}

void netbufferv4Processor::process_update_vallo16_tbl_get_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo16_tbl_get_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo16_tbl_get_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo16_tbl_get_property");
  }

  netbufferv4_update_vallo16_tbl_get_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo16_tbl_get_property", bytes);
  }

  netbufferv4_update_vallo16_tbl_get_property_result result;
  try {
    iface_->update_vallo16_tbl_get_property(result.success, args.sess_hdl, args.dev_id, args.property);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo16_tbl_get_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo16_tbl_get_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo16_tbl_get_property");
  }

  oprot->writeMessageBegin("update_vallo16_tbl_get_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo16_tbl_get_property", bytes);
  }
}

void netbufferv4Processor::process_update_vallo1_tbl_set_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo1_tbl_set_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo1_tbl_set_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo1_tbl_set_property");
  }

  netbufferv4_update_vallo1_tbl_set_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo1_tbl_set_property", bytes);
  }

  netbufferv4_update_vallo1_tbl_set_property_result result;
  try {
    iface_->update_vallo1_tbl_set_property(args.sess_hdl, args.dev_id, args.property, args.value, args.prop_args);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo1_tbl_set_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo1_tbl_set_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo1_tbl_set_property");
  }

  oprot->writeMessageBegin("update_vallo1_tbl_set_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo1_tbl_set_property", bytes);
  }
}

void netbufferv4Processor::process_update_vallo1_tbl_get_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo1_tbl_get_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo1_tbl_get_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo1_tbl_get_property");
  }

  netbufferv4_update_vallo1_tbl_get_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo1_tbl_get_property", bytes);
  }

  netbufferv4_update_vallo1_tbl_get_property_result result;
  try {
    iface_->update_vallo1_tbl_get_property(result.success, args.sess_hdl, args.dev_id, args.property);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo1_tbl_get_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo1_tbl_get_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo1_tbl_get_property");
  }

  oprot->writeMessageBegin("update_vallo1_tbl_get_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo1_tbl_get_property", bytes);
  }
}

void netbufferv4Processor::process_update_vallo2_tbl_set_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo2_tbl_set_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo2_tbl_set_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo2_tbl_set_property");
  }

  netbufferv4_update_vallo2_tbl_set_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo2_tbl_set_property", bytes);
  }

  netbufferv4_update_vallo2_tbl_set_property_result result;
  try {
    iface_->update_vallo2_tbl_set_property(args.sess_hdl, args.dev_id, args.property, args.value, args.prop_args);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo2_tbl_set_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo2_tbl_set_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo2_tbl_set_property");
  }

  oprot->writeMessageBegin("update_vallo2_tbl_set_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo2_tbl_set_property", bytes);
  }
}

void netbufferv4Processor::process_update_vallo2_tbl_get_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo2_tbl_get_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo2_tbl_get_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo2_tbl_get_property");
  }

  netbufferv4_update_vallo2_tbl_get_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo2_tbl_get_property", bytes);
  }

  netbufferv4_update_vallo2_tbl_get_property_result result;
  try {
    iface_->update_vallo2_tbl_get_property(result.success, args.sess_hdl, args.dev_id, args.property);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo2_tbl_get_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo2_tbl_get_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo2_tbl_get_property");
  }

  oprot->writeMessageBegin("update_vallo2_tbl_get_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo2_tbl_get_property", bytes);
  }
}

void netbufferv4Processor::process_update_vallo3_tbl_set_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo3_tbl_set_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo3_tbl_set_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo3_tbl_set_property");
  }

  netbufferv4_update_vallo3_tbl_set_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo3_tbl_set_property", bytes);
  }

  netbufferv4_update_vallo3_tbl_set_property_result result;
  try {
    iface_->update_vallo3_tbl_set_property(args.sess_hdl, args.dev_id, args.property, args.value, args.prop_args);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo3_tbl_set_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo3_tbl_set_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo3_tbl_set_property");
  }

  oprot->writeMessageBegin("update_vallo3_tbl_set_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo3_tbl_set_property", bytes);
  }
}

void netbufferv4Processor::process_update_vallo3_tbl_get_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo3_tbl_get_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo3_tbl_get_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo3_tbl_get_property");
  }

  netbufferv4_update_vallo3_tbl_get_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo3_tbl_get_property", bytes);
  }

  netbufferv4_update_vallo3_tbl_get_property_result result;
  try {
    iface_->update_vallo3_tbl_get_property(result.success, args.sess_hdl, args.dev_id, args.property);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo3_tbl_get_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo3_tbl_get_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo3_tbl_get_property");
  }

  oprot->writeMessageBegin("update_vallo3_tbl_get_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo3_tbl_get_property", bytes);
  }
}

void netbufferv4Processor::process_update_vallo4_tbl_set_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo4_tbl_set_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo4_tbl_set_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo4_tbl_set_property");
  }

  netbufferv4_update_vallo4_tbl_set_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo4_tbl_set_property", bytes);
  }

  netbufferv4_update_vallo4_tbl_set_property_result result;
  try {
    iface_->update_vallo4_tbl_set_property(args.sess_hdl, args.dev_id, args.property, args.value, args.prop_args);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo4_tbl_set_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo4_tbl_set_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo4_tbl_set_property");
  }

  oprot->writeMessageBegin("update_vallo4_tbl_set_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo4_tbl_set_property", bytes);
  }
}

void netbufferv4Processor::process_update_vallo4_tbl_get_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo4_tbl_get_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo4_tbl_get_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo4_tbl_get_property");
  }

  netbufferv4_update_vallo4_tbl_get_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo4_tbl_get_property", bytes);
  }

  netbufferv4_update_vallo4_tbl_get_property_result result;
  try {
    iface_->update_vallo4_tbl_get_property(result.success, args.sess_hdl, args.dev_id, args.property);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo4_tbl_get_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo4_tbl_get_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo4_tbl_get_property");
  }

  oprot->writeMessageBegin("update_vallo4_tbl_get_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo4_tbl_get_property", bytes);
  }
}

void netbufferv4Processor::process_update_vallo5_tbl_set_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo5_tbl_set_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo5_tbl_set_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo5_tbl_set_property");
  }

  netbufferv4_update_vallo5_tbl_set_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo5_tbl_set_property", bytes);
  }

  netbufferv4_update_vallo5_tbl_set_property_result result;
  try {
    iface_->update_vallo5_tbl_set_property(args.sess_hdl, args.dev_id, args.property, args.value, args.prop_args);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo5_tbl_set_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo5_tbl_set_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo5_tbl_set_property");
  }

  oprot->writeMessageBegin("update_vallo5_tbl_set_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo5_tbl_set_property", bytes);
  }
}

void netbufferv4Processor::process_update_vallo5_tbl_get_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo5_tbl_get_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo5_tbl_get_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo5_tbl_get_property");
  }

  netbufferv4_update_vallo5_tbl_get_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo5_tbl_get_property", bytes);
  }

  netbufferv4_update_vallo5_tbl_get_property_result result;
  try {
    iface_->update_vallo5_tbl_get_property(result.success, args.sess_hdl, args.dev_id, args.property);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo5_tbl_get_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo5_tbl_get_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo5_tbl_get_property");
  }

  oprot->writeMessageBegin("update_vallo5_tbl_get_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo5_tbl_get_property", bytes);
  }
}

void netbufferv4Processor::process_update_vallo6_tbl_set_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo6_tbl_set_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo6_tbl_set_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo6_tbl_set_property");
  }

  netbufferv4_update_vallo6_tbl_set_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo6_tbl_set_property", bytes);
  }

  netbufferv4_update_vallo6_tbl_set_property_result result;
  try {
    iface_->update_vallo6_tbl_set_property(args.sess_hdl, args.dev_id, args.property, args.value, args.prop_args);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo6_tbl_set_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo6_tbl_set_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo6_tbl_set_property");
  }

  oprot->writeMessageBegin("update_vallo6_tbl_set_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo6_tbl_set_property", bytes);
  }
}

void netbufferv4Processor::process_update_vallo6_tbl_get_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo6_tbl_get_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo6_tbl_get_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo6_tbl_get_property");
  }

  netbufferv4_update_vallo6_tbl_get_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo6_tbl_get_property", bytes);
  }

  netbufferv4_update_vallo6_tbl_get_property_result result;
  try {
    iface_->update_vallo6_tbl_get_property(result.success, args.sess_hdl, args.dev_id, args.property);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo6_tbl_get_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo6_tbl_get_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo6_tbl_get_property");
  }

  oprot->writeMessageBegin("update_vallo6_tbl_get_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo6_tbl_get_property", bytes);
  }
}

void netbufferv4Processor::process_update_vallo7_tbl_set_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo7_tbl_set_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo7_tbl_set_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo7_tbl_set_property");
  }

  netbufferv4_update_vallo7_tbl_set_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo7_tbl_set_property", bytes);
  }

  netbufferv4_update_vallo7_tbl_set_property_result result;
  try {
    iface_->update_vallo7_tbl_set_property(args.sess_hdl, args.dev_id, args.property, args.value, args.prop_args);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo7_tbl_set_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo7_tbl_set_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo7_tbl_set_property");
  }

  oprot->writeMessageBegin("update_vallo7_tbl_set_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo7_tbl_set_property", bytes);
  }
}

void netbufferv4Processor::process_update_vallo7_tbl_get_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo7_tbl_get_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo7_tbl_get_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo7_tbl_get_property");
  }

  netbufferv4_update_vallo7_tbl_get_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo7_tbl_get_property", bytes);
  }

  netbufferv4_update_vallo7_tbl_get_property_result result;
  try {
    iface_->update_vallo7_tbl_get_property(result.success, args.sess_hdl, args.dev_id, args.property);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo7_tbl_get_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo7_tbl_get_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo7_tbl_get_property");
  }

  oprot->writeMessageBegin("update_vallo7_tbl_get_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo7_tbl_get_property", bytes);
  }
}

void netbufferv4Processor::process_update_vallo8_tbl_set_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo8_tbl_set_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo8_tbl_set_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo8_tbl_set_property");
  }

  netbufferv4_update_vallo8_tbl_set_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo8_tbl_set_property", bytes);
  }

  netbufferv4_update_vallo8_tbl_set_property_result result;
  try {
    iface_->update_vallo8_tbl_set_property(args.sess_hdl, args.dev_id, args.property, args.value, args.prop_args);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo8_tbl_set_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo8_tbl_set_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo8_tbl_set_property");
  }

  oprot->writeMessageBegin("update_vallo8_tbl_set_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo8_tbl_set_property", bytes);
  }
}

void netbufferv4Processor::process_update_vallo8_tbl_get_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo8_tbl_get_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo8_tbl_get_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo8_tbl_get_property");
  }

  netbufferv4_update_vallo8_tbl_get_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo8_tbl_get_property", bytes);
  }

  netbufferv4_update_vallo8_tbl_get_property_result result;
  try {
    iface_->update_vallo8_tbl_get_property(result.success, args.sess_hdl, args.dev_id, args.property);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo8_tbl_get_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo8_tbl_get_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo8_tbl_get_property");
  }

  oprot->writeMessageBegin("update_vallo8_tbl_get_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo8_tbl_get_property", bytes);
  }
}

void netbufferv4Processor::process_update_vallo9_tbl_set_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo9_tbl_set_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo9_tbl_set_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo9_tbl_set_property");
  }

  netbufferv4_update_vallo9_tbl_set_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo9_tbl_set_property", bytes);
  }

  netbufferv4_update_vallo9_tbl_set_property_result result;
  try {
    iface_->update_vallo9_tbl_set_property(args.sess_hdl, args.dev_id, args.property, args.value, args.prop_args);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo9_tbl_set_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo9_tbl_set_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo9_tbl_set_property");
  }

  oprot->writeMessageBegin("update_vallo9_tbl_set_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo9_tbl_set_property", bytes);
  }
}

void netbufferv4Processor::process_update_vallo9_tbl_get_property(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo9_tbl_get_property", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo9_tbl_get_property");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo9_tbl_get_property");
  }

  netbufferv4_update_vallo9_tbl_get_property_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo9_tbl_get_property", bytes);
  }

  netbufferv4_update_vallo9_tbl_get_property_result result;
  try {
    iface_->update_vallo9_tbl_get_property(result.success, args.sess_hdl, args.dev_id, args.property);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo9_tbl_get_property");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo9_tbl_get_property", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo9_tbl_get_property");
  }

  oprot->writeMessageBegin("update_vallo9_tbl_get_property", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo9_tbl_get_property", bytes);
  }
}

void netbufferv4Processor::process_set_learning_timeout(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.set_learning_timeout", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.set_learning_timeout");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.set_learning_timeout");
  }

  netbufferv4_set_learning_timeout_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.set_learning_timeout", bytes);
  }

  netbufferv4_set_learning_timeout_result result;
  try {
    iface_->set_learning_timeout(args.sess_hdl, args.dev_id, args.usecs);
  } catch (InvalidLearnOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.set_learning_timeout");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("set_learning_timeout", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.set_learning_timeout");
  }

  oprot->writeMessageBegin("set_learning_timeout", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.set_learning_timeout", bytes);
  }
}

void netbufferv4Processor::process_tbl_dbg_counter_type_set(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.tbl_dbg_counter_type_set", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.tbl_dbg_counter_type_set");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.tbl_dbg_counter_type_set");
  }

  netbufferv4_tbl_dbg_counter_type_set_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.tbl_dbg_counter_type_set", bytes);
  }

  netbufferv4_tbl_dbg_counter_type_set_result result;
  try {
    iface_->tbl_dbg_counter_type_set(args.dev_tgt, args.tbl_name, args.type);
  } catch (InvalidDbgOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.tbl_dbg_counter_type_set");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("tbl_dbg_counter_type_set", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.tbl_dbg_counter_type_set");
  }

  oprot->writeMessageBegin("tbl_dbg_counter_type_set", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.tbl_dbg_counter_type_set", bytes);
  }
}

void netbufferv4Processor::process_tbl_dbg_counter_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.tbl_dbg_counter_get", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.tbl_dbg_counter_get");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.tbl_dbg_counter_get");
  }

  netbufferv4_tbl_dbg_counter_get_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.tbl_dbg_counter_get", bytes);
  }

  netbufferv4_tbl_dbg_counter_get_result result;
  try {
    iface_->tbl_dbg_counter_get(result.success, args.dev_tgt, args.tbl_name);
    result.__isset.success = true;
  } catch (InvalidDbgOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.tbl_dbg_counter_get");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("tbl_dbg_counter_get", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.tbl_dbg_counter_get");
  }

  oprot->writeMessageBegin("tbl_dbg_counter_get", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.tbl_dbg_counter_get", bytes);
  }
}

void netbufferv4Processor::process_tbl_dbg_counter_clear(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.tbl_dbg_counter_clear", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.tbl_dbg_counter_clear");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.tbl_dbg_counter_clear");
  }

  netbufferv4_tbl_dbg_counter_clear_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.tbl_dbg_counter_clear", bytes);
  }

  netbufferv4_tbl_dbg_counter_clear_result result;
  try {
    iface_->tbl_dbg_counter_clear(args.dev_tgt, args.tbl_name);
  } catch (InvalidDbgOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.tbl_dbg_counter_clear");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("tbl_dbg_counter_clear", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.tbl_dbg_counter_clear");
  }

  oprot->writeMessageBegin("tbl_dbg_counter_clear", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.tbl_dbg_counter_clear", bytes);
  }
}

void netbufferv4Processor::process_tbl_dbg_counter_type_stage_set(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.tbl_dbg_counter_type_stage_set", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.tbl_dbg_counter_type_stage_set");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.tbl_dbg_counter_type_stage_set");
  }

  netbufferv4_tbl_dbg_counter_type_stage_set_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.tbl_dbg_counter_type_stage_set", bytes);
  }

  netbufferv4_tbl_dbg_counter_type_stage_set_result result;
  try {
    iface_->tbl_dbg_counter_type_stage_set(args.dev_tgt, args.stage, args.type);
  } catch (InvalidDbgOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.tbl_dbg_counter_type_stage_set");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("tbl_dbg_counter_type_stage_set", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.tbl_dbg_counter_type_stage_set");
  }

  oprot->writeMessageBegin("tbl_dbg_counter_type_stage_set", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.tbl_dbg_counter_type_stage_set", bytes);
  }
}

void netbufferv4Processor::process_tbl_dbg_counter_stage_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.tbl_dbg_counter_stage_get", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.tbl_dbg_counter_stage_get");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.tbl_dbg_counter_stage_get");
  }

  netbufferv4_tbl_dbg_counter_stage_get_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.tbl_dbg_counter_stage_get", bytes);
  }

  netbufferv4_tbl_dbg_counter_stage_get_result result;
  try {
    iface_->tbl_dbg_counter_stage_get(result.success, args.dev_tgt, args.stage);
    result.__isset.success = true;
  } catch (InvalidDbgOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.tbl_dbg_counter_stage_get");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("tbl_dbg_counter_stage_get", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.tbl_dbg_counter_stage_get");
  }

  oprot->writeMessageBegin("tbl_dbg_counter_stage_get", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.tbl_dbg_counter_stage_get", bytes);
  }
}

void netbufferv4Processor::process_tbl_dbg_counter_stage_clear(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.tbl_dbg_counter_stage_clear", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.tbl_dbg_counter_stage_clear");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.tbl_dbg_counter_stage_clear");
  }

  netbufferv4_tbl_dbg_counter_stage_clear_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.tbl_dbg_counter_stage_clear", bytes);
  }

  netbufferv4_tbl_dbg_counter_stage_clear_result result;
  try {
    iface_->tbl_dbg_counter_stage_clear(args.dev_tgt, args.stage);
  } catch (InvalidDbgOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.tbl_dbg_counter_stage_clear");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("tbl_dbg_counter_stage_clear", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.tbl_dbg_counter_stage_clear");
  }

  oprot->writeMessageBegin("tbl_dbg_counter_stage_clear", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.tbl_dbg_counter_stage_clear", bytes);
  }
}

void netbufferv4Processor::process_snapshot_create(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.snapshot_create", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.snapshot_create");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.snapshot_create");
  }

  netbufferv4_snapshot_create_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.snapshot_create", bytes);
  }

  netbufferv4_snapshot_create_result result;
  try {
    result.success = iface_->snapshot_create(args.dev_tgt, args.start_stage, args.end_stage, args.direction);
    result.__isset.success = true;
  } catch (InvalidSnapshotOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.snapshot_create");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("snapshot_create", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.snapshot_create");
  }

  oprot->writeMessageBegin("snapshot_create", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.snapshot_create", bytes);
  }
}

void netbufferv4Processor::process_snapshot_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.snapshot_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.snapshot_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.snapshot_delete");
  }

  netbufferv4_snapshot_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.snapshot_delete", bytes);
  }

  netbufferv4_snapshot_delete_result result;
  try {
    iface_->snapshot_delete(args.handle);
  } catch (InvalidSnapshotOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.snapshot_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("snapshot_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.snapshot_delete");
  }

  oprot->writeMessageBegin("snapshot_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.snapshot_delete", bytes);
  }
}

void netbufferv4Processor::process_snapshot_state_set(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.snapshot_state_set", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.snapshot_state_set");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.snapshot_state_set");
  }

  netbufferv4_snapshot_state_set_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.snapshot_state_set", bytes);
  }

  netbufferv4_snapshot_state_set_result result;
  try {
    iface_->snapshot_state_set(args.handle, args.state, args.usecs);
  } catch (InvalidSnapshotOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.snapshot_state_set");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("snapshot_state_set", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.snapshot_state_set");
  }

  oprot->writeMessageBegin("snapshot_state_set", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.snapshot_state_set", bytes);
  }
}

void netbufferv4Processor::process_snapshot_state_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.snapshot_state_get", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.snapshot_state_get");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.snapshot_state_get");
  }

  netbufferv4_snapshot_state_get_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.snapshot_state_get", bytes);
  }

  netbufferv4_snapshot_state_get_result result;
  try {
    result.success = iface_->snapshot_state_get(args.handle, args.pipe);
    result.__isset.success = true;
  } catch (InvalidSnapshotOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.snapshot_state_get");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("snapshot_state_get", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.snapshot_state_get");
  }

  oprot->writeMessageBegin("snapshot_state_get", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.snapshot_state_get", bytes);
  }
}

void netbufferv4Processor::process_snapshot_timer_enable(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.snapshot_timer_enable", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.snapshot_timer_enable");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.snapshot_timer_enable");
  }

  netbufferv4_snapshot_timer_enable_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.snapshot_timer_enable", bytes);
  }

  netbufferv4_snapshot_timer_enable_result result;
  try {
    iface_->snapshot_timer_enable(args.handle, args.disable);
  } catch (InvalidSnapshotOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.snapshot_timer_enable");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("snapshot_timer_enable", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.snapshot_timer_enable");
  }

  oprot->writeMessageBegin("snapshot_timer_enable", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.snapshot_timer_enable", bytes);
  }
}

void netbufferv4Processor::process_snapshot_capture_trigger_set(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.snapshot_capture_trigger_set", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.snapshot_capture_trigger_set");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.snapshot_capture_trigger_set");
  }

  netbufferv4_snapshot_capture_trigger_set_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.snapshot_capture_trigger_set", bytes);
  }

  netbufferv4_snapshot_capture_trigger_set_result result;
  try {
    iface_->snapshot_capture_trigger_set(args.handle, args.trig_spec, args.trig_spec2);
  } catch (InvalidSnapshotOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.snapshot_capture_trigger_set");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("snapshot_capture_trigger_set", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.snapshot_capture_trigger_set");
  }

  oprot->writeMessageBegin("snapshot_capture_trigger_set", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.snapshot_capture_trigger_set", bytes);
  }
}

void netbufferv4Processor::process_snapshot_capture_data_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.snapshot_capture_data_get", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.snapshot_capture_data_get");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.snapshot_capture_data_get");
  }

  netbufferv4_snapshot_capture_data_get_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.snapshot_capture_data_get", bytes);
  }

  netbufferv4_snapshot_capture_data_get_result result;
  try {
    result.success = iface_->snapshot_capture_data_get(args.handle, args.pipe, args.stage_id, args.field_name);
    result.__isset.success = true;
  } catch (InvalidSnapshotOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.snapshot_capture_data_get");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("snapshot_capture_data_get", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.snapshot_capture_data_get");
  }

  oprot->writeMessageBegin("snapshot_capture_data_get", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.snapshot_capture_data_get", bytes);
  }
}

void netbufferv4Processor::process_snapshot_capture_tbl_data_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.snapshot_capture_tbl_data_get", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.snapshot_capture_tbl_data_get");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.snapshot_capture_tbl_data_get");
  }

  netbufferv4_snapshot_capture_tbl_data_get_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.snapshot_capture_tbl_data_get", bytes);
  }

  netbufferv4_snapshot_capture_tbl_data_get_result result;
  try {
    iface_->snapshot_capture_tbl_data_get(result.success, args.handle, args.pipe, args.table_name);
    result.__isset.success = true;
  } catch (InvalidSnapshotOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.snapshot_capture_tbl_data_get");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("snapshot_capture_tbl_data_get", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.snapshot_capture_tbl_data_get");
  }

  oprot->writeMessageBegin("snapshot_capture_tbl_data_get", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.snapshot_capture_tbl_data_get", bytes);
  }
}

void netbufferv4Processor::process_snapshot_capture_trigger_fields_clr(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.snapshot_capture_trigger_fields_clr", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.snapshot_capture_trigger_fields_clr");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.snapshot_capture_trigger_fields_clr");
  }

  netbufferv4_snapshot_capture_trigger_fields_clr_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.snapshot_capture_trigger_fields_clr", bytes);
  }

  netbufferv4_snapshot_capture_trigger_fields_clr_result result;
  try {
    iface_->snapshot_capture_trigger_fields_clr(args.handle);
  } catch (InvalidSnapshotOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.snapshot_capture_trigger_fields_clr");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("snapshot_capture_trigger_fields_clr", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.snapshot_capture_trigger_fields_clr");
  }

  oprot->writeMessageBegin("snapshot_capture_trigger_fields_clr", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.snapshot_capture_trigger_fields_clr", bytes);
  }
}

void netbufferv4Processor::process_snapshot_field_in_scope(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.snapshot_field_in_scope", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.snapshot_field_in_scope");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.snapshot_field_in_scope");
  }

  netbufferv4_snapshot_field_in_scope_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.snapshot_field_in_scope", bytes);
  }

  netbufferv4_snapshot_field_in_scope_result result;
  try {
    result.success = iface_->snapshot_field_in_scope(args.dev_tgt, args.stage, args.direction, args.field_name);
    result.__isset.success = true;
  } catch (InvalidSnapshotOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.snapshot_field_in_scope");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("snapshot_field_in_scope", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.snapshot_field_in_scope");
  }

  oprot->writeMessageBegin("snapshot_field_in_scope", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.snapshot_field_in_scope", bytes);
  }
}

void netbufferv4Processor::process_register_hw_sync_cm4_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_hw_sync_cm4_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_hw_sync_cm4_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_hw_sync_cm4_reg");
  }

  netbufferv4_register_hw_sync_cm4_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_hw_sync_cm4_reg", bytes);
  }

  netbufferv4_register_hw_sync_cm4_reg_result result;
  try {
    iface_->register_hw_sync_cm4_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_hw_sync_cm4_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_hw_sync_cm4_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_hw_sync_cm4_reg");
  }

  oprot->writeMessageBegin("register_hw_sync_cm4_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_hw_sync_cm4_reg", bytes);
  }
}

void netbufferv4Processor::process_register_read_cm4_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_read_cm4_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_read_cm4_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_read_cm4_reg");
  }

  netbufferv4_register_read_cm4_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_read_cm4_reg", bytes);
  }

  netbufferv4_register_read_cm4_reg_result result;
  try {
    iface_->register_read_cm4_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_read_cm4_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_read_cm4_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_read_cm4_reg");
  }

  oprot->writeMessageBegin("register_read_cm4_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_read_cm4_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_cm4_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_cm4_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_cm4_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_cm4_reg");
  }

  netbufferv4_register_write_cm4_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_cm4_reg", bytes);
  }

  netbufferv4_register_write_cm4_reg_result result;
  try {
    iface_->register_write_cm4_reg(args.sess_hdl, args.dev_tgt, args.index, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_cm4_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_cm4_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_cm4_reg");
  }

  oprot->writeMessageBegin("register_write_cm4_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_cm4_reg", bytes);
  }
}

void netbufferv4Processor::process_register_reset_all_cm4_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_reset_all_cm4_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_reset_all_cm4_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_reset_all_cm4_reg");
  }

  netbufferv4_register_reset_all_cm4_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_reset_all_cm4_reg", bytes);
  }

  netbufferv4_register_reset_all_cm4_reg_result result;
  try {
    iface_->register_reset_all_cm4_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_reset_all_cm4_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_reset_all_cm4_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_reset_all_cm4_reg");
  }

  oprot->writeMessageBegin("register_reset_all_cm4_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_reset_all_cm4_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_reset_cm4_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_reset_cm4_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_reset_cm4_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_reset_cm4_reg");
  }

  netbufferv4_register_range_reset_cm4_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_reset_cm4_reg", bytes);
  }

  netbufferv4_register_range_reset_cm4_reg_result result;
  try {
    iface_->register_range_reset_cm4_reg(args.sess_hdl, args.dev_tgt, args.index, args.count);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_reset_cm4_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_reset_cm4_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_reset_cm4_reg");
  }

  oprot->writeMessageBegin("register_range_reset_cm4_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_reset_cm4_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_all_cm4_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_all_cm4_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_all_cm4_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_all_cm4_reg");
  }

  netbufferv4_register_write_all_cm4_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_all_cm4_reg", bytes);
  }

  netbufferv4_register_write_all_cm4_reg_result result;
  try {
    iface_->register_write_all_cm4_reg(args.sess_hdl, args.dev_tgt, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_all_cm4_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_all_cm4_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_all_cm4_reg");
  }

  oprot->writeMessageBegin("register_write_all_cm4_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_all_cm4_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_read_cm4_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_read_cm4_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_read_cm4_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_read_cm4_reg");
  }

  netbufferv4_register_range_read_cm4_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_read_cm4_reg", bytes);
  }

  netbufferv4_register_range_read_cm4_reg_result result;
  try {
    iface_->register_range_read_cm4_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.count, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_read_cm4_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_read_cm4_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_read_cm4_reg");
  }

  oprot->writeMessageBegin("register_range_read_cm4_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_read_cm4_reg", bytes);
  }
}

void netbufferv4Processor::process_register_hw_sync_valhi1_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_hw_sync_valhi1_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_hw_sync_valhi1_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_hw_sync_valhi1_reg");
  }

  netbufferv4_register_hw_sync_valhi1_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_hw_sync_valhi1_reg", bytes);
  }

  netbufferv4_register_hw_sync_valhi1_reg_result result;
  try {
    iface_->register_hw_sync_valhi1_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_hw_sync_valhi1_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_hw_sync_valhi1_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_hw_sync_valhi1_reg");
  }

  oprot->writeMessageBegin("register_hw_sync_valhi1_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_hw_sync_valhi1_reg", bytes);
  }
}

void netbufferv4Processor::process_register_read_valhi1_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_read_valhi1_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_read_valhi1_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_read_valhi1_reg");
  }

  netbufferv4_register_read_valhi1_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_read_valhi1_reg", bytes);
  }

  netbufferv4_register_read_valhi1_reg_result result;
  try {
    iface_->register_read_valhi1_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_read_valhi1_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_read_valhi1_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_read_valhi1_reg");
  }

  oprot->writeMessageBegin("register_read_valhi1_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_read_valhi1_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_valhi1_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_valhi1_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_valhi1_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_valhi1_reg");
  }

  netbufferv4_register_write_valhi1_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_valhi1_reg", bytes);
  }

  netbufferv4_register_write_valhi1_reg_result result;
  try {
    iface_->register_write_valhi1_reg(args.sess_hdl, args.dev_tgt, args.index, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_valhi1_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_valhi1_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_valhi1_reg");
  }

  oprot->writeMessageBegin("register_write_valhi1_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_valhi1_reg", bytes);
  }
}

void netbufferv4Processor::process_register_reset_all_valhi1_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_reset_all_valhi1_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_reset_all_valhi1_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_reset_all_valhi1_reg");
  }

  netbufferv4_register_reset_all_valhi1_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_reset_all_valhi1_reg", bytes);
  }

  netbufferv4_register_reset_all_valhi1_reg_result result;
  try {
    iface_->register_reset_all_valhi1_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_reset_all_valhi1_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_reset_all_valhi1_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_reset_all_valhi1_reg");
  }

  oprot->writeMessageBegin("register_reset_all_valhi1_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_reset_all_valhi1_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_reset_valhi1_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_reset_valhi1_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_reset_valhi1_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_reset_valhi1_reg");
  }

  netbufferv4_register_range_reset_valhi1_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_reset_valhi1_reg", bytes);
  }

  netbufferv4_register_range_reset_valhi1_reg_result result;
  try {
    iface_->register_range_reset_valhi1_reg(args.sess_hdl, args.dev_tgt, args.index, args.count);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_reset_valhi1_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_reset_valhi1_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_reset_valhi1_reg");
  }

  oprot->writeMessageBegin("register_range_reset_valhi1_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_reset_valhi1_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_all_valhi1_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_all_valhi1_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_all_valhi1_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_all_valhi1_reg");
  }

  netbufferv4_register_write_all_valhi1_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_all_valhi1_reg", bytes);
  }

  netbufferv4_register_write_all_valhi1_reg_result result;
  try {
    iface_->register_write_all_valhi1_reg(args.sess_hdl, args.dev_tgt, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_all_valhi1_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_all_valhi1_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_all_valhi1_reg");
  }

  oprot->writeMessageBegin("register_write_all_valhi1_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_all_valhi1_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_read_valhi1_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_read_valhi1_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_read_valhi1_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_read_valhi1_reg");
  }

  netbufferv4_register_range_read_valhi1_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_read_valhi1_reg", bytes);
  }

  netbufferv4_register_range_read_valhi1_reg_result result;
  try {
    iface_->register_range_read_valhi1_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.count, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_read_valhi1_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_read_valhi1_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_read_valhi1_reg");
  }

  oprot->writeMessageBegin("register_range_read_valhi1_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_read_valhi1_reg", bytes);
  }
}

void netbufferv4Processor::process_register_hw_sync_valhi6_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_hw_sync_valhi6_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_hw_sync_valhi6_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_hw_sync_valhi6_reg");
  }

  netbufferv4_register_hw_sync_valhi6_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_hw_sync_valhi6_reg", bytes);
  }

  netbufferv4_register_hw_sync_valhi6_reg_result result;
  try {
    iface_->register_hw_sync_valhi6_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_hw_sync_valhi6_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_hw_sync_valhi6_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_hw_sync_valhi6_reg");
  }

  oprot->writeMessageBegin("register_hw_sync_valhi6_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_hw_sync_valhi6_reg", bytes);
  }
}

void netbufferv4Processor::process_register_read_valhi6_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_read_valhi6_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_read_valhi6_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_read_valhi6_reg");
  }

  netbufferv4_register_read_valhi6_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_read_valhi6_reg", bytes);
  }

  netbufferv4_register_read_valhi6_reg_result result;
  try {
    iface_->register_read_valhi6_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_read_valhi6_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_read_valhi6_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_read_valhi6_reg");
  }

  oprot->writeMessageBegin("register_read_valhi6_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_read_valhi6_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_valhi6_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_valhi6_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_valhi6_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_valhi6_reg");
  }

  netbufferv4_register_write_valhi6_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_valhi6_reg", bytes);
  }

  netbufferv4_register_write_valhi6_reg_result result;
  try {
    iface_->register_write_valhi6_reg(args.sess_hdl, args.dev_tgt, args.index, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_valhi6_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_valhi6_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_valhi6_reg");
  }

  oprot->writeMessageBegin("register_write_valhi6_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_valhi6_reg", bytes);
  }
}

void netbufferv4Processor::process_register_reset_all_valhi6_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_reset_all_valhi6_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_reset_all_valhi6_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_reset_all_valhi6_reg");
  }

  netbufferv4_register_reset_all_valhi6_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_reset_all_valhi6_reg", bytes);
  }

  netbufferv4_register_reset_all_valhi6_reg_result result;
  try {
    iface_->register_reset_all_valhi6_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_reset_all_valhi6_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_reset_all_valhi6_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_reset_all_valhi6_reg");
  }

  oprot->writeMessageBegin("register_reset_all_valhi6_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_reset_all_valhi6_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_reset_valhi6_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_reset_valhi6_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_reset_valhi6_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_reset_valhi6_reg");
  }

  netbufferv4_register_range_reset_valhi6_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_reset_valhi6_reg", bytes);
  }

  netbufferv4_register_range_reset_valhi6_reg_result result;
  try {
    iface_->register_range_reset_valhi6_reg(args.sess_hdl, args.dev_tgt, args.index, args.count);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_reset_valhi6_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_reset_valhi6_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_reset_valhi6_reg");
  }

  oprot->writeMessageBegin("register_range_reset_valhi6_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_reset_valhi6_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_all_valhi6_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_all_valhi6_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_all_valhi6_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_all_valhi6_reg");
  }

  netbufferv4_register_write_all_valhi6_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_all_valhi6_reg", bytes);
  }

  netbufferv4_register_write_all_valhi6_reg_result result;
  try {
    iface_->register_write_all_valhi6_reg(args.sess_hdl, args.dev_tgt, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_all_valhi6_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_all_valhi6_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_all_valhi6_reg");
  }

  oprot->writeMessageBegin("register_write_all_valhi6_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_all_valhi6_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_read_valhi6_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_read_valhi6_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_read_valhi6_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_read_valhi6_reg");
  }

  netbufferv4_register_range_read_valhi6_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_read_valhi6_reg", bytes);
  }

  netbufferv4_register_range_read_valhi6_reg_result result;
  try {
    iface_->register_range_read_valhi6_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.count, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_read_valhi6_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_read_valhi6_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_read_valhi6_reg");
  }

  oprot->writeMessageBegin("register_range_read_valhi6_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_read_valhi6_reg", bytes);
  }
}

void netbufferv4Processor::process_register_hw_sync_valhi14_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_hw_sync_valhi14_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_hw_sync_valhi14_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_hw_sync_valhi14_reg");
  }

  netbufferv4_register_hw_sync_valhi14_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_hw_sync_valhi14_reg", bytes);
  }

  netbufferv4_register_hw_sync_valhi14_reg_result result;
  try {
    iface_->register_hw_sync_valhi14_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_hw_sync_valhi14_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_hw_sync_valhi14_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_hw_sync_valhi14_reg");
  }

  oprot->writeMessageBegin("register_hw_sync_valhi14_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_hw_sync_valhi14_reg", bytes);
  }
}

void netbufferv4Processor::process_register_read_valhi14_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_read_valhi14_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_read_valhi14_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_read_valhi14_reg");
  }

  netbufferv4_register_read_valhi14_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_read_valhi14_reg", bytes);
  }

  netbufferv4_register_read_valhi14_reg_result result;
  try {
    iface_->register_read_valhi14_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_read_valhi14_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_read_valhi14_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_read_valhi14_reg");
  }

  oprot->writeMessageBegin("register_read_valhi14_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_read_valhi14_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_valhi14_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_valhi14_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_valhi14_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_valhi14_reg");
  }

  netbufferv4_register_write_valhi14_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_valhi14_reg", bytes);
  }

  netbufferv4_register_write_valhi14_reg_result result;
  try {
    iface_->register_write_valhi14_reg(args.sess_hdl, args.dev_tgt, args.index, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_valhi14_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_valhi14_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_valhi14_reg");
  }

  oprot->writeMessageBegin("register_write_valhi14_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_valhi14_reg", bytes);
  }
}

void netbufferv4Processor::process_register_reset_all_valhi14_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_reset_all_valhi14_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_reset_all_valhi14_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_reset_all_valhi14_reg");
  }

  netbufferv4_register_reset_all_valhi14_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_reset_all_valhi14_reg", bytes);
  }

  netbufferv4_register_reset_all_valhi14_reg_result result;
  try {
    iface_->register_reset_all_valhi14_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_reset_all_valhi14_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_reset_all_valhi14_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_reset_all_valhi14_reg");
  }

  oprot->writeMessageBegin("register_reset_all_valhi14_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_reset_all_valhi14_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_reset_valhi14_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_reset_valhi14_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_reset_valhi14_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_reset_valhi14_reg");
  }

  netbufferv4_register_range_reset_valhi14_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_reset_valhi14_reg", bytes);
  }

  netbufferv4_register_range_reset_valhi14_reg_result result;
  try {
    iface_->register_range_reset_valhi14_reg(args.sess_hdl, args.dev_tgt, args.index, args.count);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_reset_valhi14_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_reset_valhi14_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_reset_valhi14_reg");
  }

  oprot->writeMessageBegin("register_range_reset_valhi14_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_reset_valhi14_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_all_valhi14_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_all_valhi14_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_all_valhi14_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_all_valhi14_reg");
  }

  netbufferv4_register_write_all_valhi14_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_all_valhi14_reg", bytes);
  }

  netbufferv4_register_write_all_valhi14_reg_result result;
  try {
    iface_->register_write_all_valhi14_reg(args.sess_hdl, args.dev_tgt, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_all_valhi14_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_all_valhi14_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_all_valhi14_reg");
  }

  oprot->writeMessageBegin("register_write_all_valhi14_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_all_valhi14_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_read_valhi14_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_read_valhi14_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_read_valhi14_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_read_valhi14_reg");
  }

  netbufferv4_register_range_read_valhi14_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_read_valhi14_reg", bytes);
  }

  netbufferv4_register_range_read_valhi14_reg_result result;
  try {
    iface_->register_range_read_valhi14_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.count, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_read_valhi14_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_read_valhi14_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_read_valhi14_reg");
  }

  oprot->writeMessageBegin("register_range_read_valhi14_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_read_valhi14_reg", bytes);
  }
}

void netbufferv4Processor::process_register_hw_sync_valhi3_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_hw_sync_valhi3_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_hw_sync_valhi3_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_hw_sync_valhi3_reg");
  }

  netbufferv4_register_hw_sync_valhi3_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_hw_sync_valhi3_reg", bytes);
  }

  netbufferv4_register_hw_sync_valhi3_reg_result result;
  try {
    iface_->register_hw_sync_valhi3_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_hw_sync_valhi3_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_hw_sync_valhi3_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_hw_sync_valhi3_reg");
  }

  oprot->writeMessageBegin("register_hw_sync_valhi3_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_hw_sync_valhi3_reg", bytes);
  }
}

void netbufferv4Processor::process_register_read_valhi3_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_read_valhi3_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_read_valhi3_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_read_valhi3_reg");
  }

  netbufferv4_register_read_valhi3_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_read_valhi3_reg", bytes);
  }

  netbufferv4_register_read_valhi3_reg_result result;
  try {
    iface_->register_read_valhi3_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_read_valhi3_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_read_valhi3_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_read_valhi3_reg");
  }

  oprot->writeMessageBegin("register_read_valhi3_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_read_valhi3_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_valhi3_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_valhi3_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_valhi3_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_valhi3_reg");
  }

  netbufferv4_register_write_valhi3_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_valhi3_reg", bytes);
  }

  netbufferv4_register_write_valhi3_reg_result result;
  try {
    iface_->register_write_valhi3_reg(args.sess_hdl, args.dev_tgt, args.index, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_valhi3_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_valhi3_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_valhi3_reg");
  }

  oprot->writeMessageBegin("register_write_valhi3_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_valhi3_reg", bytes);
  }
}

void netbufferv4Processor::process_register_reset_all_valhi3_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_reset_all_valhi3_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_reset_all_valhi3_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_reset_all_valhi3_reg");
  }

  netbufferv4_register_reset_all_valhi3_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_reset_all_valhi3_reg", bytes);
  }

  netbufferv4_register_reset_all_valhi3_reg_result result;
  try {
    iface_->register_reset_all_valhi3_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_reset_all_valhi3_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_reset_all_valhi3_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_reset_all_valhi3_reg");
  }

  oprot->writeMessageBegin("register_reset_all_valhi3_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_reset_all_valhi3_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_reset_valhi3_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_reset_valhi3_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_reset_valhi3_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_reset_valhi3_reg");
  }

  netbufferv4_register_range_reset_valhi3_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_reset_valhi3_reg", bytes);
  }

  netbufferv4_register_range_reset_valhi3_reg_result result;
  try {
    iface_->register_range_reset_valhi3_reg(args.sess_hdl, args.dev_tgt, args.index, args.count);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_reset_valhi3_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_reset_valhi3_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_reset_valhi3_reg");
  }

  oprot->writeMessageBegin("register_range_reset_valhi3_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_reset_valhi3_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_all_valhi3_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_all_valhi3_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_all_valhi3_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_all_valhi3_reg");
  }

  netbufferv4_register_write_all_valhi3_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_all_valhi3_reg", bytes);
  }

  netbufferv4_register_write_all_valhi3_reg_result result;
  try {
    iface_->register_write_all_valhi3_reg(args.sess_hdl, args.dev_tgt, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_all_valhi3_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_all_valhi3_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_all_valhi3_reg");
  }

  oprot->writeMessageBegin("register_write_all_valhi3_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_all_valhi3_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_read_valhi3_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_read_valhi3_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_read_valhi3_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_read_valhi3_reg");
  }

  netbufferv4_register_range_read_valhi3_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_read_valhi3_reg", bytes);
  }

  netbufferv4_register_range_read_valhi3_reg_result result;
  try {
    iface_->register_range_read_valhi3_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.count, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_read_valhi3_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_read_valhi3_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_read_valhi3_reg");
  }

  oprot->writeMessageBegin("register_range_read_valhi3_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_read_valhi3_reg", bytes);
  }
}

void netbufferv4Processor::process_register_hw_sync_vallo8_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_hw_sync_vallo8_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_hw_sync_vallo8_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_hw_sync_vallo8_reg");
  }

  netbufferv4_register_hw_sync_vallo8_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_hw_sync_vallo8_reg", bytes);
  }

  netbufferv4_register_hw_sync_vallo8_reg_result result;
  try {
    iface_->register_hw_sync_vallo8_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_hw_sync_vallo8_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_hw_sync_vallo8_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_hw_sync_vallo8_reg");
  }

  oprot->writeMessageBegin("register_hw_sync_vallo8_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_hw_sync_vallo8_reg", bytes);
  }
}

void netbufferv4Processor::process_register_read_vallo8_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_read_vallo8_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_read_vallo8_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_read_vallo8_reg");
  }

  netbufferv4_register_read_vallo8_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_read_vallo8_reg", bytes);
  }

  netbufferv4_register_read_vallo8_reg_result result;
  try {
    iface_->register_read_vallo8_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_read_vallo8_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_read_vallo8_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_read_vallo8_reg");
  }

  oprot->writeMessageBegin("register_read_vallo8_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_read_vallo8_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_vallo8_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_vallo8_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_vallo8_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_vallo8_reg");
  }

  netbufferv4_register_write_vallo8_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_vallo8_reg", bytes);
  }

  netbufferv4_register_write_vallo8_reg_result result;
  try {
    iface_->register_write_vallo8_reg(args.sess_hdl, args.dev_tgt, args.index, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_vallo8_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_vallo8_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_vallo8_reg");
  }

  oprot->writeMessageBegin("register_write_vallo8_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_vallo8_reg", bytes);
  }
}

void netbufferv4Processor::process_register_reset_all_vallo8_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_reset_all_vallo8_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_reset_all_vallo8_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_reset_all_vallo8_reg");
  }

  netbufferv4_register_reset_all_vallo8_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_reset_all_vallo8_reg", bytes);
  }

  netbufferv4_register_reset_all_vallo8_reg_result result;
  try {
    iface_->register_reset_all_vallo8_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_reset_all_vallo8_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_reset_all_vallo8_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_reset_all_vallo8_reg");
  }

  oprot->writeMessageBegin("register_reset_all_vallo8_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_reset_all_vallo8_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_reset_vallo8_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_reset_vallo8_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_reset_vallo8_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_reset_vallo8_reg");
  }

  netbufferv4_register_range_reset_vallo8_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_reset_vallo8_reg", bytes);
  }

  netbufferv4_register_range_reset_vallo8_reg_result result;
  try {
    iface_->register_range_reset_vallo8_reg(args.sess_hdl, args.dev_tgt, args.index, args.count);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_reset_vallo8_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_reset_vallo8_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_reset_vallo8_reg");
  }

  oprot->writeMessageBegin("register_range_reset_vallo8_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_reset_vallo8_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_all_vallo8_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_all_vallo8_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_all_vallo8_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_all_vallo8_reg");
  }

  netbufferv4_register_write_all_vallo8_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_all_vallo8_reg", bytes);
  }

  netbufferv4_register_write_all_vallo8_reg_result result;
  try {
    iface_->register_write_all_vallo8_reg(args.sess_hdl, args.dev_tgt, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_all_vallo8_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_all_vallo8_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_all_vallo8_reg");
  }

  oprot->writeMessageBegin("register_write_all_vallo8_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_all_vallo8_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_read_vallo8_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_read_vallo8_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_read_vallo8_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_read_vallo8_reg");
  }

  netbufferv4_register_range_read_vallo8_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_read_vallo8_reg", bytes);
  }

  netbufferv4_register_range_read_vallo8_reg_result result;
  try {
    iface_->register_range_read_vallo8_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.count, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_read_vallo8_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_read_vallo8_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_read_vallo8_reg");
  }

  oprot->writeMessageBegin("register_range_read_vallo8_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_read_vallo8_reg", bytes);
  }
}

void netbufferv4Processor::process_register_hw_sync_vallo2_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_hw_sync_vallo2_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_hw_sync_vallo2_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_hw_sync_vallo2_reg");
  }

  netbufferv4_register_hw_sync_vallo2_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_hw_sync_vallo2_reg", bytes);
  }

  netbufferv4_register_hw_sync_vallo2_reg_result result;
  try {
    iface_->register_hw_sync_vallo2_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_hw_sync_vallo2_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_hw_sync_vallo2_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_hw_sync_vallo2_reg");
  }

  oprot->writeMessageBegin("register_hw_sync_vallo2_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_hw_sync_vallo2_reg", bytes);
  }
}

void netbufferv4Processor::process_register_read_vallo2_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_read_vallo2_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_read_vallo2_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_read_vallo2_reg");
  }

  netbufferv4_register_read_vallo2_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_read_vallo2_reg", bytes);
  }

  netbufferv4_register_read_vallo2_reg_result result;
  try {
    iface_->register_read_vallo2_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_read_vallo2_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_read_vallo2_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_read_vallo2_reg");
  }

  oprot->writeMessageBegin("register_read_vallo2_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_read_vallo2_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_vallo2_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_vallo2_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_vallo2_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_vallo2_reg");
  }

  netbufferv4_register_write_vallo2_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_vallo2_reg", bytes);
  }

  netbufferv4_register_write_vallo2_reg_result result;
  try {
    iface_->register_write_vallo2_reg(args.sess_hdl, args.dev_tgt, args.index, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_vallo2_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_vallo2_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_vallo2_reg");
  }

  oprot->writeMessageBegin("register_write_vallo2_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_vallo2_reg", bytes);
  }
}

void netbufferv4Processor::process_register_reset_all_vallo2_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_reset_all_vallo2_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_reset_all_vallo2_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_reset_all_vallo2_reg");
  }

  netbufferv4_register_reset_all_vallo2_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_reset_all_vallo2_reg", bytes);
  }

  netbufferv4_register_reset_all_vallo2_reg_result result;
  try {
    iface_->register_reset_all_vallo2_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_reset_all_vallo2_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_reset_all_vallo2_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_reset_all_vallo2_reg");
  }

  oprot->writeMessageBegin("register_reset_all_vallo2_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_reset_all_vallo2_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_reset_vallo2_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_reset_vallo2_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_reset_vallo2_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_reset_vallo2_reg");
  }

  netbufferv4_register_range_reset_vallo2_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_reset_vallo2_reg", bytes);
  }

  netbufferv4_register_range_reset_vallo2_reg_result result;
  try {
    iface_->register_range_reset_vallo2_reg(args.sess_hdl, args.dev_tgt, args.index, args.count);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_reset_vallo2_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_reset_vallo2_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_reset_vallo2_reg");
  }

  oprot->writeMessageBegin("register_range_reset_vallo2_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_reset_vallo2_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_all_vallo2_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_all_vallo2_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_all_vallo2_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_all_vallo2_reg");
  }

  netbufferv4_register_write_all_vallo2_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_all_vallo2_reg", bytes);
  }

  netbufferv4_register_write_all_vallo2_reg_result result;
  try {
    iface_->register_write_all_vallo2_reg(args.sess_hdl, args.dev_tgt, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_all_vallo2_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_all_vallo2_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_all_vallo2_reg");
  }

  oprot->writeMessageBegin("register_write_all_vallo2_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_all_vallo2_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_read_vallo2_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_read_vallo2_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_read_vallo2_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_read_vallo2_reg");
  }

  netbufferv4_register_range_read_vallo2_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_read_vallo2_reg", bytes);
  }

  netbufferv4_register_range_read_vallo2_reg_result result;
  try {
    iface_->register_range_read_vallo2_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.count, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_read_vallo2_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_read_vallo2_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_read_vallo2_reg");
  }

  oprot->writeMessageBegin("register_range_read_vallo2_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_read_vallo2_reg", bytes);
  }
}

void netbufferv4Processor::process_register_hw_sync_valhi13_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_hw_sync_valhi13_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_hw_sync_valhi13_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_hw_sync_valhi13_reg");
  }

  netbufferv4_register_hw_sync_valhi13_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_hw_sync_valhi13_reg", bytes);
  }

  netbufferv4_register_hw_sync_valhi13_reg_result result;
  try {
    iface_->register_hw_sync_valhi13_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_hw_sync_valhi13_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_hw_sync_valhi13_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_hw_sync_valhi13_reg");
  }

  oprot->writeMessageBegin("register_hw_sync_valhi13_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_hw_sync_valhi13_reg", bytes);
  }
}

void netbufferv4Processor::process_register_read_valhi13_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_read_valhi13_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_read_valhi13_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_read_valhi13_reg");
  }

  netbufferv4_register_read_valhi13_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_read_valhi13_reg", bytes);
  }

  netbufferv4_register_read_valhi13_reg_result result;
  try {
    iface_->register_read_valhi13_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_read_valhi13_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_read_valhi13_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_read_valhi13_reg");
  }

  oprot->writeMessageBegin("register_read_valhi13_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_read_valhi13_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_valhi13_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_valhi13_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_valhi13_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_valhi13_reg");
  }

  netbufferv4_register_write_valhi13_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_valhi13_reg", bytes);
  }

  netbufferv4_register_write_valhi13_reg_result result;
  try {
    iface_->register_write_valhi13_reg(args.sess_hdl, args.dev_tgt, args.index, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_valhi13_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_valhi13_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_valhi13_reg");
  }

  oprot->writeMessageBegin("register_write_valhi13_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_valhi13_reg", bytes);
  }
}

void netbufferv4Processor::process_register_reset_all_valhi13_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_reset_all_valhi13_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_reset_all_valhi13_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_reset_all_valhi13_reg");
  }

  netbufferv4_register_reset_all_valhi13_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_reset_all_valhi13_reg", bytes);
  }

  netbufferv4_register_reset_all_valhi13_reg_result result;
  try {
    iface_->register_reset_all_valhi13_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_reset_all_valhi13_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_reset_all_valhi13_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_reset_all_valhi13_reg");
  }

  oprot->writeMessageBegin("register_reset_all_valhi13_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_reset_all_valhi13_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_reset_valhi13_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_reset_valhi13_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_reset_valhi13_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_reset_valhi13_reg");
  }

  netbufferv4_register_range_reset_valhi13_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_reset_valhi13_reg", bytes);
  }

  netbufferv4_register_range_reset_valhi13_reg_result result;
  try {
    iface_->register_range_reset_valhi13_reg(args.sess_hdl, args.dev_tgt, args.index, args.count);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_reset_valhi13_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_reset_valhi13_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_reset_valhi13_reg");
  }

  oprot->writeMessageBegin("register_range_reset_valhi13_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_reset_valhi13_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_all_valhi13_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_all_valhi13_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_all_valhi13_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_all_valhi13_reg");
  }

  netbufferv4_register_write_all_valhi13_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_all_valhi13_reg", bytes);
  }

  netbufferv4_register_write_all_valhi13_reg_result result;
  try {
    iface_->register_write_all_valhi13_reg(args.sess_hdl, args.dev_tgt, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_all_valhi13_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_all_valhi13_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_all_valhi13_reg");
  }

  oprot->writeMessageBegin("register_write_all_valhi13_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_all_valhi13_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_read_valhi13_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_read_valhi13_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_read_valhi13_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_read_valhi13_reg");
  }

  netbufferv4_register_range_read_valhi13_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_read_valhi13_reg", bytes);
  }

  netbufferv4_register_range_read_valhi13_reg_result result;
  try {
    iface_->register_range_read_valhi13_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.count, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_read_valhi13_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_read_valhi13_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_read_valhi13_reg");
  }

  oprot->writeMessageBegin("register_range_read_valhi13_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_read_valhi13_reg", bytes);
  }
}

void netbufferv4Processor::process_register_hw_sync_vallo9_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_hw_sync_vallo9_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_hw_sync_vallo9_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_hw_sync_vallo9_reg");
  }

  netbufferv4_register_hw_sync_vallo9_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_hw_sync_vallo9_reg", bytes);
  }

  netbufferv4_register_hw_sync_vallo9_reg_result result;
  try {
    iface_->register_hw_sync_vallo9_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_hw_sync_vallo9_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_hw_sync_vallo9_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_hw_sync_vallo9_reg");
  }

  oprot->writeMessageBegin("register_hw_sync_vallo9_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_hw_sync_vallo9_reg", bytes);
  }
}

void netbufferv4Processor::process_register_read_vallo9_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_read_vallo9_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_read_vallo9_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_read_vallo9_reg");
  }

  netbufferv4_register_read_vallo9_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_read_vallo9_reg", bytes);
  }

  netbufferv4_register_read_vallo9_reg_result result;
  try {
    iface_->register_read_vallo9_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_read_vallo9_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_read_vallo9_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_read_vallo9_reg");
  }

  oprot->writeMessageBegin("register_read_vallo9_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_read_vallo9_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_vallo9_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_vallo9_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_vallo9_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_vallo9_reg");
  }

  netbufferv4_register_write_vallo9_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_vallo9_reg", bytes);
  }

  netbufferv4_register_write_vallo9_reg_result result;
  try {
    iface_->register_write_vallo9_reg(args.sess_hdl, args.dev_tgt, args.index, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_vallo9_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_vallo9_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_vallo9_reg");
  }

  oprot->writeMessageBegin("register_write_vallo9_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_vallo9_reg", bytes);
  }
}

void netbufferv4Processor::process_register_reset_all_vallo9_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_reset_all_vallo9_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_reset_all_vallo9_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_reset_all_vallo9_reg");
  }

  netbufferv4_register_reset_all_vallo9_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_reset_all_vallo9_reg", bytes);
  }

  netbufferv4_register_reset_all_vallo9_reg_result result;
  try {
    iface_->register_reset_all_vallo9_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_reset_all_vallo9_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_reset_all_vallo9_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_reset_all_vallo9_reg");
  }

  oprot->writeMessageBegin("register_reset_all_vallo9_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_reset_all_vallo9_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_reset_vallo9_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_reset_vallo9_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_reset_vallo9_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_reset_vallo9_reg");
  }

  netbufferv4_register_range_reset_vallo9_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_reset_vallo9_reg", bytes);
  }

  netbufferv4_register_range_reset_vallo9_reg_result result;
  try {
    iface_->register_range_reset_vallo9_reg(args.sess_hdl, args.dev_tgt, args.index, args.count);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_reset_vallo9_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_reset_vallo9_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_reset_vallo9_reg");
  }

  oprot->writeMessageBegin("register_range_reset_vallo9_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_reset_vallo9_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_all_vallo9_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_all_vallo9_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_all_vallo9_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_all_vallo9_reg");
  }

  netbufferv4_register_write_all_vallo9_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_all_vallo9_reg", bytes);
  }

  netbufferv4_register_write_all_vallo9_reg_result result;
  try {
    iface_->register_write_all_vallo9_reg(args.sess_hdl, args.dev_tgt, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_all_vallo9_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_all_vallo9_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_all_vallo9_reg");
  }

  oprot->writeMessageBegin("register_write_all_vallo9_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_all_vallo9_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_read_vallo9_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_read_vallo9_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_read_vallo9_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_read_vallo9_reg");
  }

  netbufferv4_register_range_read_vallo9_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_read_vallo9_reg", bytes);
  }

  netbufferv4_register_range_read_vallo9_reg_result result;
  try {
    iface_->register_range_read_vallo9_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.count, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_read_vallo9_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_read_vallo9_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_read_vallo9_reg");
  }

  oprot->writeMessageBegin("register_range_read_vallo9_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_read_vallo9_reg", bytes);
  }
}

void netbufferv4Processor::process_register_hw_sync_vallo14_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_hw_sync_vallo14_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_hw_sync_vallo14_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_hw_sync_vallo14_reg");
  }

  netbufferv4_register_hw_sync_vallo14_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_hw_sync_vallo14_reg", bytes);
  }

  netbufferv4_register_hw_sync_vallo14_reg_result result;
  try {
    iface_->register_hw_sync_vallo14_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_hw_sync_vallo14_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_hw_sync_vallo14_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_hw_sync_vallo14_reg");
  }

  oprot->writeMessageBegin("register_hw_sync_vallo14_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_hw_sync_vallo14_reg", bytes);
  }
}

void netbufferv4Processor::process_register_read_vallo14_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_read_vallo14_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_read_vallo14_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_read_vallo14_reg");
  }

  netbufferv4_register_read_vallo14_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_read_vallo14_reg", bytes);
  }

  netbufferv4_register_read_vallo14_reg_result result;
  try {
    iface_->register_read_vallo14_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_read_vallo14_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_read_vallo14_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_read_vallo14_reg");
  }

  oprot->writeMessageBegin("register_read_vallo14_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_read_vallo14_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_vallo14_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_vallo14_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_vallo14_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_vallo14_reg");
  }

  netbufferv4_register_write_vallo14_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_vallo14_reg", bytes);
  }

  netbufferv4_register_write_vallo14_reg_result result;
  try {
    iface_->register_write_vallo14_reg(args.sess_hdl, args.dev_tgt, args.index, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_vallo14_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_vallo14_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_vallo14_reg");
  }

  oprot->writeMessageBegin("register_write_vallo14_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_vallo14_reg", bytes);
  }
}

void netbufferv4Processor::process_register_reset_all_vallo14_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_reset_all_vallo14_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_reset_all_vallo14_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_reset_all_vallo14_reg");
  }

  netbufferv4_register_reset_all_vallo14_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_reset_all_vallo14_reg", bytes);
  }

  netbufferv4_register_reset_all_vallo14_reg_result result;
  try {
    iface_->register_reset_all_vallo14_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_reset_all_vallo14_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_reset_all_vallo14_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_reset_all_vallo14_reg");
  }

  oprot->writeMessageBegin("register_reset_all_vallo14_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_reset_all_vallo14_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_reset_vallo14_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_reset_vallo14_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_reset_vallo14_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_reset_vallo14_reg");
  }

  netbufferv4_register_range_reset_vallo14_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_reset_vallo14_reg", bytes);
  }

  netbufferv4_register_range_reset_vallo14_reg_result result;
  try {
    iface_->register_range_reset_vallo14_reg(args.sess_hdl, args.dev_tgt, args.index, args.count);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_reset_vallo14_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_reset_vallo14_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_reset_vallo14_reg");
  }

  oprot->writeMessageBegin("register_range_reset_vallo14_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_reset_vallo14_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_all_vallo14_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_all_vallo14_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_all_vallo14_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_all_vallo14_reg");
  }

  netbufferv4_register_write_all_vallo14_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_all_vallo14_reg", bytes);
  }

  netbufferv4_register_write_all_vallo14_reg_result result;
  try {
    iface_->register_write_all_vallo14_reg(args.sess_hdl, args.dev_tgt, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_all_vallo14_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_all_vallo14_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_all_vallo14_reg");
  }

  oprot->writeMessageBegin("register_write_all_vallo14_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_all_vallo14_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_read_vallo14_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_read_vallo14_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_read_vallo14_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_read_vallo14_reg");
  }

  netbufferv4_register_range_read_vallo14_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_read_vallo14_reg", bytes);
  }

  netbufferv4_register_range_read_vallo14_reg_result result;
  try {
    iface_->register_range_read_vallo14_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.count, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_read_vallo14_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_read_vallo14_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_read_vallo14_reg");
  }

  oprot->writeMessageBegin("register_range_read_vallo14_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_read_vallo14_reg", bytes);
  }
}

void netbufferv4Processor::process_register_hw_sync_valhi16_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_hw_sync_valhi16_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_hw_sync_valhi16_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_hw_sync_valhi16_reg");
  }

  netbufferv4_register_hw_sync_valhi16_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_hw_sync_valhi16_reg", bytes);
  }

  netbufferv4_register_hw_sync_valhi16_reg_result result;
  try {
    iface_->register_hw_sync_valhi16_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_hw_sync_valhi16_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_hw_sync_valhi16_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_hw_sync_valhi16_reg");
  }

  oprot->writeMessageBegin("register_hw_sync_valhi16_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_hw_sync_valhi16_reg", bytes);
  }
}

void netbufferv4Processor::process_register_read_valhi16_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_read_valhi16_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_read_valhi16_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_read_valhi16_reg");
  }

  netbufferv4_register_read_valhi16_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_read_valhi16_reg", bytes);
  }

  netbufferv4_register_read_valhi16_reg_result result;
  try {
    iface_->register_read_valhi16_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_read_valhi16_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_read_valhi16_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_read_valhi16_reg");
  }

  oprot->writeMessageBegin("register_read_valhi16_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_read_valhi16_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_valhi16_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_valhi16_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_valhi16_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_valhi16_reg");
  }

  netbufferv4_register_write_valhi16_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_valhi16_reg", bytes);
  }

  netbufferv4_register_write_valhi16_reg_result result;
  try {
    iface_->register_write_valhi16_reg(args.sess_hdl, args.dev_tgt, args.index, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_valhi16_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_valhi16_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_valhi16_reg");
  }

  oprot->writeMessageBegin("register_write_valhi16_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_valhi16_reg", bytes);
  }
}

void netbufferv4Processor::process_register_reset_all_valhi16_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_reset_all_valhi16_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_reset_all_valhi16_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_reset_all_valhi16_reg");
  }

  netbufferv4_register_reset_all_valhi16_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_reset_all_valhi16_reg", bytes);
  }

  netbufferv4_register_reset_all_valhi16_reg_result result;
  try {
    iface_->register_reset_all_valhi16_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_reset_all_valhi16_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_reset_all_valhi16_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_reset_all_valhi16_reg");
  }

  oprot->writeMessageBegin("register_reset_all_valhi16_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_reset_all_valhi16_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_reset_valhi16_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_reset_valhi16_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_reset_valhi16_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_reset_valhi16_reg");
  }

  netbufferv4_register_range_reset_valhi16_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_reset_valhi16_reg", bytes);
  }

  netbufferv4_register_range_reset_valhi16_reg_result result;
  try {
    iface_->register_range_reset_valhi16_reg(args.sess_hdl, args.dev_tgt, args.index, args.count);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_reset_valhi16_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_reset_valhi16_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_reset_valhi16_reg");
  }

  oprot->writeMessageBegin("register_range_reset_valhi16_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_reset_valhi16_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_all_valhi16_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_all_valhi16_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_all_valhi16_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_all_valhi16_reg");
  }

  netbufferv4_register_write_all_valhi16_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_all_valhi16_reg", bytes);
  }

  netbufferv4_register_write_all_valhi16_reg_result result;
  try {
    iface_->register_write_all_valhi16_reg(args.sess_hdl, args.dev_tgt, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_all_valhi16_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_all_valhi16_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_all_valhi16_reg");
  }

  oprot->writeMessageBegin("register_write_all_valhi16_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_all_valhi16_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_read_valhi16_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_read_valhi16_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_read_valhi16_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_read_valhi16_reg");
  }

  netbufferv4_register_range_read_valhi16_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_read_valhi16_reg", bytes);
  }

  netbufferv4_register_range_read_valhi16_reg_result result;
  try {
    iface_->register_range_read_valhi16_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.count, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_read_valhi16_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_read_valhi16_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_read_valhi16_reg");
  }

  oprot->writeMessageBegin("register_range_read_valhi16_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_read_valhi16_reg", bytes);
  }
}

void netbufferv4Processor::process_register_hw_sync_valhi2_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_hw_sync_valhi2_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_hw_sync_valhi2_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_hw_sync_valhi2_reg");
  }

  netbufferv4_register_hw_sync_valhi2_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_hw_sync_valhi2_reg", bytes);
  }

  netbufferv4_register_hw_sync_valhi2_reg_result result;
  try {
    iface_->register_hw_sync_valhi2_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_hw_sync_valhi2_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_hw_sync_valhi2_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_hw_sync_valhi2_reg");
  }

  oprot->writeMessageBegin("register_hw_sync_valhi2_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_hw_sync_valhi2_reg", bytes);
  }
}

void netbufferv4Processor::process_register_read_valhi2_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_read_valhi2_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_read_valhi2_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_read_valhi2_reg");
  }

  netbufferv4_register_read_valhi2_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_read_valhi2_reg", bytes);
  }

  netbufferv4_register_read_valhi2_reg_result result;
  try {
    iface_->register_read_valhi2_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_read_valhi2_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_read_valhi2_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_read_valhi2_reg");
  }

  oprot->writeMessageBegin("register_read_valhi2_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_read_valhi2_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_valhi2_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_valhi2_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_valhi2_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_valhi2_reg");
  }

  netbufferv4_register_write_valhi2_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_valhi2_reg", bytes);
  }

  netbufferv4_register_write_valhi2_reg_result result;
  try {
    iface_->register_write_valhi2_reg(args.sess_hdl, args.dev_tgt, args.index, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_valhi2_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_valhi2_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_valhi2_reg");
  }

  oprot->writeMessageBegin("register_write_valhi2_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_valhi2_reg", bytes);
  }
}

void netbufferv4Processor::process_register_reset_all_valhi2_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_reset_all_valhi2_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_reset_all_valhi2_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_reset_all_valhi2_reg");
  }

  netbufferv4_register_reset_all_valhi2_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_reset_all_valhi2_reg", bytes);
  }

  netbufferv4_register_reset_all_valhi2_reg_result result;
  try {
    iface_->register_reset_all_valhi2_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_reset_all_valhi2_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_reset_all_valhi2_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_reset_all_valhi2_reg");
  }

  oprot->writeMessageBegin("register_reset_all_valhi2_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_reset_all_valhi2_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_reset_valhi2_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_reset_valhi2_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_reset_valhi2_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_reset_valhi2_reg");
  }

  netbufferv4_register_range_reset_valhi2_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_reset_valhi2_reg", bytes);
  }

  netbufferv4_register_range_reset_valhi2_reg_result result;
  try {
    iface_->register_range_reset_valhi2_reg(args.sess_hdl, args.dev_tgt, args.index, args.count);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_reset_valhi2_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_reset_valhi2_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_reset_valhi2_reg");
  }

  oprot->writeMessageBegin("register_range_reset_valhi2_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_reset_valhi2_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_all_valhi2_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_all_valhi2_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_all_valhi2_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_all_valhi2_reg");
  }

  netbufferv4_register_write_all_valhi2_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_all_valhi2_reg", bytes);
  }

  netbufferv4_register_write_all_valhi2_reg_result result;
  try {
    iface_->register_write_all_valhi2_reg(args.sess_hdl, args.dev_tgt, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_all_valhi2_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_all_valhi2_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_all_valhi2_reg");
  }

  oprot->writeMessageBegin("register_write_all_valhi2_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_all_valhi2_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_read_valhi2_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_read_valhi2_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_read_valhi2_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_read_valhi2_reg");
  }

  netbufferv4_register_range_read_valhi2_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_read_valhi2_reg", bytes);
  }

  netbufferv4_register_range_read_valhi2_reg_result result;
  try {
    iface_->register_range_read_valhi2_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.count, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_read_valhi2_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_read_valhi2_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_read_valhi2_reg");
  }

  oprot->writeMessageBegin("register_range_read_valhi2_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_read_valhi2_reg", bytes);
  }
}

void netbufferv4Processor::process_register_hw_sync_valhi10_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_hw_sync_valhi10_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_hw_sync_valhi10_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_hw_sync_valhi10_reg");
  }

  netbufferv4_register_hw_sync_valhi10_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_hw_sync_valhi10_reg", bytes);
  }

  netbufferv4_register_hw_sync_valhi10_reg_result result;
  try {
    iface_->register_hw_sync_valhi10_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_hw_sync_valhi10_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_hw_sync_valhi10_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_hw_sync_valhi10_reg");
  }

  oprot->writeMessageBegin("register_hw_sync_valhi10_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_hw_sync_valhi10_reg", bytes);
  }
}

void netbufferv4Processor::process_register_read_valhi10_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_read_valhi10_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_read_valhi10_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_read_valhi10_reg");
  }

  netbufferv4_register_read_valhi10_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_read_valhi10_reg", bytes);
  }

  netbufferv4_register_read_valhi10_reg_result result;
  try {
    iface_->register_read_valhi10_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_read_valhi10_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_read_valhi10_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_read_valhi10_reg");
  }

  oprot->writeMessageBegin("register_read_valhi10_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_read_valhi10_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_valhi10_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_valhi10_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_valhi10_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_valhi10_reg");
  }

  netbufferv4_register_write_valhi10_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_valhi10_reg", bytes);
  }

  netbufferv4_register_write_valhi10_reg_result result;
  try {
    iface_->register_write_valhi10_reg(args.sess_hdl, args.dev_tgt, args.index, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_valhi10_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_valhi10_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_valhi10_reg");
  }

  oprot->writeMessageBegin("register_write_valhi10_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_valhi10_reg", bytes);
  }
}

void netbufferv4Processor::process_register_reset_all_valhi10_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_reset_all_valhi10_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_reset_all_valhi10_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_reset_all_valhi10_reg");
  }

  netbufferv4_register_reset_all_valhi10_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_reset_all_valhi10_reg", bytes);
  }

  netbufferv4_register_reset_all_valhi10_reg_result result;
  try {
    iface_->register_reset_all_valhi10_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_reset_all_valhi10_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_reset_all_valhi10_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_reset_all_valhi10_reg");
  }

  oprot->writeMessageBegin("register_reset_all_valhi10_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_reset_all_valhi10_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_reset_valhi10_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_reset_valhi10_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_reset_valhi10_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_reset_valhi10_reg");
  }

  netbufferv4_register_range_reset_valhi10_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_reset_valhi10_reg", bytes);
  }

  netbufferv4_register_range_reset_valhi10_reg_result result;
  try {
    iface_->register_range_reset_valhi10_reg(args.sess_hdl, args.dev_tgt, args.index, args.count);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_reset_valhi10_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_reset_valhi10_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_reset_valhi10_reg");
  }

  oprot->writeMessageBegin("register_range_reset_valhi10_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_reset_valhi10_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_all_valhi10_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_all_valhi10_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_all_valhi10_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_all_valhi10_reg");
  }

  netbufferv4_register_write_all_valhi10_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_all_valhi10_reg", bytes);
  }

  netbufferv4_register_write_all_valhi10_reg_result result;
  try {
    iface_->register_write_all_valhi10_reg(args.sess_hdl, args.dev_tgt, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_all_valhi10_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_all_valhi10_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_all_valhi10_reg");
  }

  oprot->writeMessageBegin("register_write_all_valhi10_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_all_valhi10_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_read_valhi10_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_read_valhi10_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_read_valhi10_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_read_valhi10_reg");
  }

  netbufferv4_register_range_read_valhi10_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_read_valhi10_reg", bytes);
  }

  netbufferv4_register_range_read_valhi10_reg_result result;
  try {
    iface_->register_range_read_valhi10_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.count, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_read_valhi10_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_read_valhi10_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_read_valhi10_reg");
  }

  oprot->writeMessageBegin("register_range_read_valhi10_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_read_valhi10_reg", bytes);
  }
}

void netbufferv4Processor::process_register_hw_sync_valhi5_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_hw_sync_valhi5_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_hw_sync_valhi5_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_hw_sync_valhi5_reg");
  }

  netbufferv4_register_hw_sync_valhi5_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_hw_sync_valhi5_reg", bytes);
  }

  netbufferv4_register_hw_sync_valhi5_reg_result result;
  try {
    iface_->register_hw_sync_valhi5_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_hw_sync_valhi5_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_hw_sync_valhi5_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_hw_sync_valhi5_reg");
  }

  oprot->writeMessageBegin("register_hw_sync_valhi5_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_hw_sync_valhi5_reg", bytes);
  }
}

void netbufferv4Processor::process_register_read_valhi5_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_read_valhi5_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_read_valhi5_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_read_valhi5_reg");
  }

  netbufferv4_register_read_valhi5_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_read_valhi5_reg", bytes);
  }

  netbufferv4_register_read_valhi5_reg_result result;
  try {
    iface_->register_read_valhi5_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_read_valhi5_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_read_valhi5_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_read_valhi5_reg");
  }

  oprot->writeMessageBegin("register_read_valhi5_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_read_valhi5_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_valhi5_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_valhi5_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_valhi5_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_valhi5_reg");
  }

  netbufferv4_register_write_valhi5_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_valhi5_reg", bytes);
  }

  netbufferv4_register_write_valhi5_reg_result result;
  try {
    iface_->register_write_valhi5_reg(args.sess_hdl, args.dev_tgt, args.index, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_valhi5_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_valhi5_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_valhi5_reg");
  }

  oprot->writeMessageBegin("register_write_valhi5_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_valhi5_reg", bytes);
  }
}

void netbufferv4Processor::process_register_reset_all_valhi5_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_reset_all_valhi5_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_reset_all_valhi5_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_reset_all_valhi5_reg");
  }

  netbufferv4_register_reset_all_valhi5_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_reset_all_valhi5_reg", bytes);
  }

  netbufferv4_register_reset_all_valhi5_reg_result result;
  try {
    iface_->register_reset_all_valhi5_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_reset_all_valhi5_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_reset_all_valhi5_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_reset_all_valhi5_reg");
  }

  oprot->writeMessageBegin("register_reset_all_valhi5_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_reset_all_valhi5_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_reset_valhi5_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_reset_valhi5_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_reset_valhi5_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_reset_valhi5_reg");
  }

  netbufferv4_register_range_reset_valhi5_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_reset_valhi5_reg", bytes);
  }

  netbufferv4_register_range_reset_valhi5_reg_result result;
  try {
    iface_->register_range_reset_valhi5_reg(args.sess_hdl, args.dev_tgt, args.index, args.count);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_reset_valhi5_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_reset_valhi5_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_reset_valhi5_reg");
  }

  oprot->writeMessageBegin("register_range_reset_valhi5_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_reset_valhi5_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_all_valhi5_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_all_valhi5_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_all_valhi5_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_all_valhi5_reg");
  }

  netbufferv4_register_write_all_valhi5_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_all_valhi5_reg", bytes);
  }

  netbufferv4_register_write_all_valhi5_reg_result result;
  try {
    iface_->register_write_all_valhi5_reg(args.sess_hdl, args.dev_tgt, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_all_valhi5_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_all_valhi5_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_all_valhi5_reg");
  }

  oprot->writeMessageBegin("register_write_all_valhi5_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_all_valhi5_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_read_valhi5_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_read_valhi5_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_read_valhi5_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_read_valhi5_reg");
  }

  netbufferv4_register_range_read_valhi5_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_read_valhi5_reg", bytes);
  }

  netbufferv4_register_range_read_valhi5_reg_result result;
  try {
    iface_->register_range_read_valhi5_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.count, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_read_valhi5_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_read_valhi5_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_read_valhi5_reg");
  }

  oprot->writeMessageBegin("register_range_read_valhi5_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_read_valhi5_reg", bytes);
  }
}

void netbufferv4Processor::process_register_hw_sync_cm3_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_hw_sync_cm3_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_hw_sync_cm3_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_hw_sync_cm3_reg");
  }

  netbufferv4_register_hw_sync_cm3_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_hw_sync_cm3_reg", bytes);
  }

  netbufferv4_register_hw_sync_cm3_reg_result result;
  try {
    iface_->register_hw_sync_cm3_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_hw_sync_cm3_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_hw_sync_cm3_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_hw_sync_cm3_reg");
  }

  oprot->writeMessageBegin("register_hw_sync_cm3_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_hw_sync_cm3_reg", bytes);
  }
}

void netbufferv4Processor::process_register_read_cm3_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_read_cm3_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_read_cm3_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_read_cm3_reg");
  }

  netbufferv4_register_read_cm3_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_read_cm3_reg", bytes);
  }

  netbufferv4_register_read_cm3_reg_result result;
  try {
    iface_->register_read_cm3_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_read_cm3_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_read_cm3_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_read_cm3_reg");
  }

  oprot->writeMessageBegin("register_read_cm3_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_read_cm3_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_cm3_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_cm3_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_cm3_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_cm3_reg");
  }

  netbufferv4_register_write_cm3_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_cm3_reg", bytes);
  }

  netbufferv4_register_write_cm3_reg_result result;
  try {
    iface_->register_write_cm3_reg(args.sess_hdl, args.dev_tgt, args.index, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_cm3_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_cm3_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_cm3_reg");
  }

  oprot->writeMessageBegin("register_write_cm3_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_cm3_reg", bytes);
  }
}

void netbufferv4Processor::process_register_reset_all_cm3_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_reset_all_cm3_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_reset_all_cm3_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_reset_all_cm3_reg");
  }

  netbufferv4_register_reset_all_cm3_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_reset_all_cm3_reg", bytes);
  }

  netbufferv4_register_reset_all_cm3_reg_result result;
  try {
    iface_->register_reset_all_cm3_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_reset_all_cm3_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_reset_all_cm3_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_reset_all_cm3_reg");
  }

  oprot->writeMessageBegin("register_reset_all_cm3_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_reset_all_cm3_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_reset_cm3_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_reset_cm3_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_reset_cm3_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_reset_cm3_reg");
  }

  netbufferv4_register_range_reset_cm3_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_reset_cm3_reg", bytes);
  }

  netbufferv4_register_range_reset_cm3_reg_result result;
  try {
    iface_->register_range_reset_cm3_reg(args.sess_hdl, args.dev_tgt, args.index, args.count);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_reset_cm3_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_reset_cm3_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_reset_cm3_reg");
  }

  oprot->writeMessageBegin("register_range_reset_cm3_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_reset_cm3_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_all_cm3_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_all_cm3_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_all_cm3_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_all_cm3_reg");
  }

  netbufferv4_register_write_all_cm3_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_all_cm3_reg", bytes);
  }

  netbufferv4_register_write_all_cm3_reg_result result;
  try {
    iface_->register_write_all_cm3_reg(args.sess_hdl, args.dev_tgt, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_all_cm3_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_all_cm3_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_all_cm3_reg");
  }

  oprot->writeMessageBegin("register_write_all_cm3_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_all_cm3_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_read_cm3_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_read_cm3_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_read_cm3_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_read_cm3_reg");
  }

  netbufferv4_register_range_read_cm3_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_read_cm3_reg", bytes);
  }

  netbufferv4_register_range_read_cm3_reg_result result;
  try {
    iface_->register_range_read_cm3_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.count, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_read_cm3_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_read_cm3_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_read_cm3_reg");
  }

  oprot->writeMessageBegin("register_range_read_cm3_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_read_cm3_reg", bytes);
  }
}

void netbufferv4Processor::process_register_hw_sync_valhi9_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_hw_sync_valhi9_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_hw_sync_valhi9_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_hw_sync_valhi9_reg");
  }

  netbufferv4_register_hw_sync_valhi9_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_hw_sync_valhi9_reg", bytes);
  }

  netbufferv4_register_hw_sync_valhi9_reg_result result;
  try {
    iface_->register_hw_sync_valhi9_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_hw_sync_valhi9_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_hw_sync_valhi9_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_hw_sync_valhi9_reg");
  }

  oprot->writeMessageBegin("register_hw_sync_valhi9_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_hw_sync_valhi9_reg", bytes);
  }
}

void netbufferv4Processor::process_register_read_valhi9_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_read_valhi9_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_read_valhi9_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_read_valhi9_reg");
  }

  netbufferv4_register_read_valhi9_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_read_valhi9_reg", bytes);
  }

  netbufferv4_register_read_valhi9_reg_result result;
  try {
    iface_->register_read_valhi9_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_read_valhi9_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_read_valhi9_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_read_valhi9_reg");
  }

  oprot->writeMessageBegin("register_read_valhi9_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_read_valhi9_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_valhi9_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_valhi9_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_valhi9_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_valhi9_reg");
  }

  netbufferv4_register_write_valhi9_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_valhi9_reg", bytes);
  }

  netbufferv4_register_write_valhi9_reg_result result;
  try {
    iface_->register_write_valhi9_reg(args.sess_hdl, args.dev_tgt, args.index, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_valhi9_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_valhi9_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_valhi9_reg");
  }

  oprot->writeMessageBegin("register_write_valhi9_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_valhi9_reg", bytes);
  }
}

void netbufferv4Processor::process_register_reset_all_valhi9_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_reset_all_valhi9_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_reset_all_valhi9_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_reset_all_valhi9_reg");
  }

  netbufferv4_register_reset_all_valhi9_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_reset_all_valhi9_reg", bytes);
  }

  netbufferv4_register_reset_all_valhi9_reg_result result;
  try {
    iface_->register_reset_all_valhi9_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_reset_all_valhi9_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_reset_all_valhi9_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_reset_all_valhi9_reg");
  }

  oprot->writeMessageBegin("register_reset_all_valhi9_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_reset_all_valhi9_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_reset_valhi9_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_reset_valhi9_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_reset_valhi9_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_reset_valhi9_reg");
  }

  netbufferv4_register_range_reset_valhi9_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_reset_valhi9_reg", bytes);
  }

  netbufferv4_register_range_reset_valhi9_reg_result result;
  try {
    iface_->register_range_reset_valhi9_reg(args.sess_hdl, args.dev_tgt, args.index, args.count);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_reset_valhi9_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_reset_valhi9_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_reset_valhi9_reg");
  }

  oprot->writeMessageBegin("register_range_reset_valhi9_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_reset_valhi9_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_all_valhi9_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_all_valhi9_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_all_valhi9_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_all_valhi9_reg");
  }

  netbufferv4_register_write_all_valhi9_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_all_valhi9_reg", bytes);
  }

  netbufferv4_register_write_all_valhi9_reg_result result;
  try {
    iface_->register_write_all_valhi9_reg(args.sess_hdl, args.dev_tgt, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_all_valhi9_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_all_valhi9_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_all_valhi9_reg");
  }

  oprot->writeMessageBegin("register_write_all_valhi9_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_all_valhi9_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_read_valhi9_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_read_valhi9_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_read_valhi9_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_read_valhi9_reg");
  }

  netbufferv4_register_range_read_valhi9_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_read_valhi9_reg", bytes);
  }

  netbufferv4_register_range_read_valhi9_reg_result result;
  try {
    iface_->register_range_read_valhi9_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.count, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_read_valhi9_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_read_valhi9_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_read_valhi9_reg");
  }

  oprot->writeMessageBegin("register_range_read_valhi9_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_read_valhi9_reg", bytes);
  }
}

void netbufferv4Processor::process_register_hw_sync_valhi7_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_hw_sync_valhi7_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_hw_sync_valhi7_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_hw_sync_valhi7_reg");
  }

  netbufferv4_register_hw_sync_valhi7_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_hw_sync_valhi7_reg", bytes);
  }

  netbufferv4_register_hw_sync_valhi7_reg_result result;
  try {
    iface_->register_hw_sync_valhi7_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_hw_sync_valhi7_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_hw_sync_valhi7_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_hw_sync_valhi7_reg");
  }

  oprot->writeMessageBegin("register_hw_sync_valhi7_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_hw_sync_valhi7_reg", bytes);
  }
}

void netbufferv4Processor::process_register_read_valhi7_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_read_valhi7_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_read_valhi7_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_read_valhi7_reg");
  }

  netbufferv4_register_read_valhi7_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_read_valhi7_reg", bytes);
  }

  netbufferv4_register_read_valhi7_reg_result result;
  try {
    iface_->register_read_valhi7_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_read_valhi7_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_read_valhi7_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_read_valhi7_reg");
  }

  oprot->writeMessageBegin("register_read_valhi7_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_read_valhi7_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_valhi7_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_valhi7_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_valhi7_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_valhi7_reg");
  }

  netbufferv4_register_write_valhi7_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_valhi7_reg", bytes);
  }

  netbufferv4_register_write_valhi7_reg_result result;
  try {
    iface_->register_write_valhi7_reg(args.sess_hdl, args.dev_tgt, args.index, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_valhi7_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_valhi7_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_valhi7_reg");
  }

  oprot->writeMessageBegin("register_write_valhi7_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_valhi7_reg", bytes);
  }
}

void netbufferv4Processor::process_register_reset_all_valhi7_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_reset_all_valhi7_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_reset_all_valhi7_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_reset_all_valhi7_reg");
  }

  netbufferv4_register_reset_all_valhi7_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_reset_all_valhi7_reg", bytes);
  }

  netbufferv4_register_reset_all_valhi7_reg_result result;
  try {
    iface_->register_reset_all_valhi7_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_reset_all_valhi7_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_reset_all_valhi7_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_reset_all_valhi7_reg");
  }

  oprot->writeMessageBegin("register_reset_all_valhi7_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_reset_all_valhi7_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_reset_valhi7_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_reset_valhi7_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_reset_valhi7_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_reset_valhi7_reg");
  }

  netbufferv4_register_range_reset_valhi7_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_reset_valhi7_reg", bytes);
  }

  netbufferv4_register_range_reset_valhi7_reg_result result;
  try {
    iface_->register_range_reset_valhi7_reg(args.sess_hdl, args.dev_tgt, args.index, args.count);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_reset_valhi7_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_reset_valhi7_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_reset_valhi7_reg");
  }

  oprot->writeMessageBegin("register_range_reset_valhi7_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_reset_valhi7_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_all_valhi7_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_all_valhi7_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_all_valhi7_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_all_valhi7_reg");
  }

  netbufferv4_register_write_all_valhi7_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_all_valhi7_reg", bytes);
  }

  netbufferv4_register_write_all_valhi7_reg_result result;
  try {
    iface_->register_write_all_valhi7_reg(args.sess_hdl, args.dev_tgt, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_all_valhi7_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_all_valhi7_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_all_valhi7_reg");
  }

  oprot->writeMessageBegin("register_write_all_valhi7_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_all_valhi7_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_read_valhi7_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_read_valhi7_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_read_valhi7_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_read_valhi7_reg");
  }

  netbufferv4_register_range_read_valhi7_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_read_valhi7_reg", bytes);
  }

  netbufferv4_register_range_read_valhi7_reg_result result;
  try {
    iface_->register_range_read_valhi7_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.count, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_read_valhi7_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_read_valhi7_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_read_valhi7_reg");
  }

  oprot->writeMessageBegin("register_range_read_valhi7_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_read_valhi7_reg", bytes);
  }
}

void netbufferv4Processor::process_register_hw_sync_cache_frequency_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_hw_sync_cache_frequency_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_hw_sync_cache_frequency_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_hw_sync_cache_frequency_reg");
  }

  netbufferv4_register_hw_sync_cache_frequency_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_hw_sync_cache_frequency_reg", bytes);
  }

  netbufferv4_register_hw_sync_cache_frequency_reg_result result;
  try {
    iface_->register_hw_sync_cache_frequency_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_hw_sync_cache_frequency_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_hw_sync_cache_frequency_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_hw_sync_cache_frequency_reg");
  }

  oprot->writeMessageBegin("register_hw_sync_cache_frequency_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_hw_sync_cache_frequency_reg", bytes);
  }
}

void netbufferv4Processor::process_register_read_cache_frequency_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_read_cache_frequency_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_read_cache_frequency_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_read_cache_frequency_reg");
  }

  netbufferv4_register_read_cache_frequency_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_read_cache_frequency_reg", bytes);
  }

  netbufferv4_register_read_cache_frequency_reg_result result;
  try {
    iface_->register_read_cache_frequency_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_read_cache_frequency_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_read_cache_frequency_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_read_cache_frequency_reg");
  }

  oprot->writeMessageBegin("register_read_cache_frequency_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_read_cache_frequency_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_cache_frequency_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_cache_frequency_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_cache_frequency_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_cache_frequency_reg");
  }

  netbufferv4_register_write_cache_frequency_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_cache_frequency_reg", bytes);
  }

  netbufferv4_register_write_cache_frequency_reg_result result;
  try {
    iface_->register_write_cache_frequency_reg(args.sess_hdl, args.dev_tgt, args.index, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_cache_frequency_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_cache_frequency_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_cache_frequency_reg");
  }

  oprot->writeMessageBegin("register_write_cache_frequency_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_cache_frequency_reg", bytes);
  }
}

void netbufferv4Processor::process_register_reset_all_cache_frequency_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_reset_all_cache_frequency_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_reset_all_cache_frequency_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_reset_all_cache_frequency_reg");
  }

  netbufferv4_register_reset_all_cache_frequency_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_reset_all_cache_frequency_reg", bytes);
  }

  netbufferv4_register_reset_all_cache_frequency_reg_result result;
  try {
    iface_->register_reset_all_cache_frequency_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_reset_all_cache_frequency_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_reset_all_cache_frequency_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_reset_all_cache_frequency_reg");
  }

  oprot->writeMessageBegin("register_reset_all_cache_frequency_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_reset_all_cache_frequency_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_reset_cache_frequency_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_reset_cache_frequency_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_reset_cache_frequency_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_reset_cache_frequency_reg");
  }

  netbufferv4_register_range_reset_cache_frequency_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_reset_cache_frequency_reg", bytes);
  }

  netbufferv4_register_range_reset_cache_frequency_reg_result result;
  try {
    iface_->register_range_reset_cache_frequency_reg(args.sess_hdl, args.dev_tgt, args.index, args.count);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_reset_cache_frequency_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_reset_cache_frequency_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_reset_cache_frequency_reg");
  }

  oprot->writeMessageBegin("register_range_reset_cache_frequency_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_reset_cache_frequency_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_all_cache_frequency_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_all_cache_frequency_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_all_cache_frequency_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_all_cache_frequency_reg");
  }

  netbufferv4_register_write_all_cache_frequency_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_all_cache_frequency_reg", bytes);
  }

  netbufferv4_register_write_all_cache_frequency_reg_result result;
  try {
    iface_->register_write_all_cache_frequency_reg(args.sess_hdl, args.dev_tgt, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_all_cache_frequency_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_all_cache_frequency_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_all_cache_frequency_reg");
  }

  oprot->writeMessageBegin("register_write_all_cache_frequency_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_all_cache_frequency_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_read_cache_frequency_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_read_cache_frequency_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_read_cache_frequency_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_read_cache_frequency_reg");
  }

  netbufferv4_register_range_read_cache_frequency_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_read_cache_frequency_reg", bytes);
  }

  netbufferv4_register_range_read_cache_frequency_reg_result result;
  try {
    iface_->register_range_read_cache_frequency_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.count, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_read_cache_frequency_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_read_cache_frequency_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_read_cache_frequency_reg");
  }

  oprot->writeMessageBegin("register_range_read_cache_frequency_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_read_cache_frequency_reg", bytes);
  }
}

void netbufferv4Processor::process_register_hw_sync_cm2_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_hw_sync_cm2_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_hw_sync_cm2_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_hw_sync_cm2_reg");
  }

  netbufferv4_register_hw_sync_cm2_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_hw_sync_cm2_reg", bytes);
  }

  netbufferv4_register_hw_sync_cm2_reg_result result;
  try {
    iface_->register_hw_sync_cm2_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_hw_sync_cm2_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_hw_sync_cm2_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_hw_sync_cm2_reg");
  }

  oprot->writeMessageBegin("register_hw_sync_cm2_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_hw_sync_cm2_reg", bytes);
  }
}

void netbufferv4Processor::process_register_read_cm2_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_read_cm2_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_read_cm2_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_read_cm2_reg");
  }

  netbufferv4_register_read_cm2_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_read_cm2_reg", bytes);
  }

  netbufferv4_register_read_cm2_reg_result result;
  try {
    iface_->register_read_cm2_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_read_cm2_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_read_cm2_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_read_cm2_reg");
  }

  oprot->writeMessageBegin("register_read_cm2_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_read_cm2_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_cm2_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_cm2_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_cm2_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_cm2_reg");
  }

  netbufferv4_register_write_cm2_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_cm2_reg", bytes);
  }

  netbufferv4_register_write_cm2_reg_result result;
  try {
    iface_->register_write_cm2_reg(args.sess_hdl, args.dev_tgt, args.index, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_cm2_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_cm2_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_cm2_reg");
  }

  oprot->writeMessageBegin("register_write_cm2_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_cm2_reg", bytes);
  }
}

void netbufferv4Processor::process_register_reset_all_cm2_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_reset_all_cm2_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_reset_all_cm2_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_reset_all_cm2_reg");
  }

  netbufferv4_register_reset_all_cm2_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_reset_all_cm2_reg", bytes);
  }

  netbufferv4_register_reset_all_cm2_reg_result result;
  try {
    iface_->register_reset_all_cm2_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_reset_all_cm2_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_reset_all_cm2_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_reset_all_cm2_reg");
  }

  oprot->writeMessageBegin("register_reset_all_cm2_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_reset_all_cm2_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_reset_cm2_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_reset_cm2_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_reset_cm2_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_reset_cm2_reg");
  }

  netbufferv4_register_range_reset_cm2_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_reset_cm2_reg", bytes);
  }

  netbufferv4_register_range_reset_cm2_reg_result result;
  try {
    iface_->register_range_reset_cm2_reg(args.sess_hdl, args.dev_tgt, args.index, args.count);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_reset_cm2_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_reset_cm2_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_reset_cm2_reg");
  }

  oprot->writeMessageBegin("register_range_reset_cm2_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_reset_cm2_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_all_cm2_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_all_cm2_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_all_cm2_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_all_cm2_reg");
  }

  netbufferv4_register_write_all_cm2_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_all_cm2_reg", bytes);
  }

  netbufferv4_register_write_all_cm2_reg_result result;
  try {
    iface_->register_write_all_cm2_reg(args.sess_hdl, args.dev_tgt, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_all_cm2_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_all_cm2_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_all_cm2_reg");
  }

  oprot->writeMessageBegin("register_write_all_cm2_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_all_cm2_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_read_cm2_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_read_cm2_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_read_cm2_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_read_cm2_reg");
  }

  netbufferv4_register_range_read_cm2_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_read_cm2_reg", bytes);
  }

  netbufferv4_register_range_read_cm2_reg_result result;
  try {
    iface_->register_range_read_cm2_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.count, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_read_cm2_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_read_cm2_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_read_cm2_reg");
  }

  oprot->writeMessageBegin("register_range_read_cm2_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_read_cm2_reg", bytes);
  }
}

void netbufferv4Processor::process_register_hw_sync_deleted_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_hw_sync_deleted_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_hw_sync_deleted_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_hw_sync_deleted_reg");
  }

  netbufferv4_register_hw_sync_deleted_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_hw_sync_deleted_reg", bytes);
  }

  netbufferv4_register_hw_sync_deleted_reg_result result;
  try {
    iface_->register_hw_sync_deleted_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_hw_sync_deleted_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_hw_sync_deleted_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_hw_sync_deleted_reg");
  }

  oprot->writeMessageBegin("register_hw_sync_deleted_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_hw_sync_deleted_reg", bytes);
  }
}

void netbufferv4Processor::process_register_read_deleted_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_read_deleted_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_read_deleted_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_read_deleted_reg");
  }

  netbufferv4_register_read_deleted_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_read_deleted_reg", bytes);
  }

  netbufferv4_register_read_deleted_reg_result result;
  try {
    iface_->register_read_deleted_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_read_deleted_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_read_deleted_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_read_deleted_reg");
  }

  oprot->writeMessageBegin("register_read_deleted_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_read_deleted_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_deleted_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_deleted_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_deleted_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_deleted_reg");
  }

  netbufferv4_register_write_deleted_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_deleted_reg", bytes);
  }

  netbufferv4_register_write_deleted_reg_result result;
  try {
    iface_->register_write_deleted_reg(args.sess_hdl, args.dev_tgt, args.index, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_deleted_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_deleted_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_deleted_reg");
  }

  oprot->writeMessageBegin("register_write_deleted_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_deleted_reg", bytes);
  }
}

void netbufferv4Processor::process_register_reset_all_deleted_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_reset_all_deleted_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_reset_all_deleted_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_reset_all_deleted_reg");
  }

  netbufferv4_register_reset_all_deleted_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_reset_all_deleted_reg", bytes);
  }

  netbufferv4_register_reset_all_deleted_reg_result result;
  try {
    iface_->register_reset_all_deleted_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_reset_all_deleted_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_reset_all_deleted_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_reset_all_deleted_reg");
  }

  oprot->writeMessageBegin("register_reset_all_deleted_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_reset_all_deleted_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_reset_deleted_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_reset_deleted_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_reset_deleted_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_reset_deleted_reg");
  }

  netbufferv4_register_range_reset_deleted_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_reset_deleted_reg", bytes);
  }

  netbufferv4_register_range_reset_deleted_reg_result result;
  try {
    iface_->register_range_reset_deleted_reg(args.sess_hdl, args.dev_tgt, args.index, args.count);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_reset_deleted_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_reset_deleted_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_reset_deleted_reg");
  }

  oprot->writeMessageBegin("register_range_reset_deleted_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_reset_deleted_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_all_deleted_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_all_deleted_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_all_deleted_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_all_deleted_reg");
  }

  netbufferv4_register_write_all_deleted_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_all_deleted_reg", bytes);
  }

  netbufferv4_register_write_all_deleted_reg_result result;
  try {
    iface_->register_write_all_deleted_reg(args.sess_hdl, args.dev_tgt, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_all_deleted_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_all_deleted_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_all_deleted_reg");
  }

  oprot->writeMessageBegin("register_write_all_deleted_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_all_deleted_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_read_deleted_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_read_deleted_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_read_deleted_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_read_deleted_reg");
  }

  netbufferv4_register_range_read_deleted_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_read_deleted_reg", bytes);
  }

  netbufferv4_register_range_read_deleted_reg_result result;
  try {
    iface_->register_range_read_deleted_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.count, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_read_deleted_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_read_deleted_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_read_deleted_reg");
  }

  oprot->writeMessageBegin("register_range_read_deleted_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_read_deleted_reg", bytes);
  }
}

void netbufferv4Processor::process_register_hw_sync_valhi11_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_hw_sync_valhi11_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_hw_sync_valhi11_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_hw_sync_valhi11_reg");
  }

  netbufferv4_register_hw_sync_valhi11_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_hw_sync_valhi11_reg", bytes);
  }

  netbufferv4_register_hw_sync_valhi11_reg_result result;
  try {
    iface_->register_hw_sync_valhi11_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_hw_sync_valhi11_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_hw_sync_valhi11_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_hw_sync_valhi11_reg");
  }

  oprot->writeMessageBegin("register_hw_sync_valhi11_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_hw_sync_valhi11_reg", bytes);
  }
}

void netbufferv4Processor::process_register_read_valhi11_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_read_valhi11_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_read_valhi11_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_read_valhi11_reg");
  }

  netbufferv4_register_read_valhi11_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_read_valhi11_reg", bytes);
  }

  netbufferv4_register_read_valhi11_reg_result result;
  try {
    iface_->register_read_valhi11_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_read_valhi11_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_read_valhi11_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_read_valhi11_reg");
  }

  oprot->writeMessageBegin("register_read_valhi11_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_read_valhi11_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_valhi11_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_valhi11_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_valhi11_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_valhi11_reg");
  }

  netbufferv4_register_write_valhi11_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_valhi11_reg", bytes);
  }

  netbufferv4_register_write_valhi11_reg_result result;
  try {
    iface_->register_write_valhi11_reg(args.sess_hdl, args.dev_tgt, args.index, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_valhi11_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_valhi11_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_valhi11_reg");
  }

  oprot->writeMessageBegin("register_write_valhi11_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_valhi11_reg", bytes);
  }
}

void netbufferv4Processor::process_register_reset_all_valhi11_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_reset_all_valhi11_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_reset_all_valhi11_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_reset_all_valhi11_reg");
  }

  netbufferv4_register_reset_all_valhi11_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_reset_all_valhi11_reg", bytes);
  }

  netbufferv4_register_reset_all_valhi11_reg_result result;
  try {
    iface_->register_reset_all_valhi11_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_reset_all_valhi11_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_reset_all_valhi11_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_reset_all_valhi11_reg");
  }

  oprot->writeMessageBegin("register_reset_all_valhi11_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_reset_all_valhi11_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_reset_valhi11_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_reset_valhi11_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_reset_valhi11_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_reset_valhi11_reg");
  }

  netbufferv4_register_range_reset_valhi11_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_reset_valhi11_reg", bytes);
  }

  netbufferv4_register_range_reset_valhi11_reg_result result;
  try {
    iface_->register_range_reset_valhi11_reg(args.sess_hdl, args.dev_tgt, args.index, args.count);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_reset_valhi11_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_reset_valhi11_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_reset_valhi11_reg");
  }

  oprot->writeMessageBegin("register_range_reset_valhi11_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_reset_valhi11_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_all_valhi11_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_all_valhi11_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_all_valhi11_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_all_valhi11_reg");
  }

  netbufferv4_register_write_all_valhi11_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_all_valhi11_reg", bytes);
  }

  netbufferv4_register_write_all_valhi11_reg_result result;
  try {
    iface_->register_write_all_valhi11_reg(args.sess_hdl, args.dev_tgt, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_all_valhi11_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_all_valhi11_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_all_valhi11_reg");
  }

  oprot->writeMessageBegin("register_write_all_valhi11_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_all_valhi11_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_read_valhi11_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_read_valhi11_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_read_valhi11_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_read_valhi11_reg");
  }

  netbufferv4_register_range_read_valhi11_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_read_valhi11_reg", bytes);
  }

  netbufferv4_register_range_read_valhi11_reg_result result;
  try {
    iface_->register_range_read_valhi11_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.count, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_read_valhi11_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_read_valhi11_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_read_valhi11_reg");
  }

  oprot->writeMessageBegin("register_range_read_valhi11_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_read_valhi11_reg", bytes);
  }
}

void netbufferv4Processor::process_register_hw_sync_vallo13_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_hw_sync_vallo13_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_hw_sync_vallo13_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_hw_sync_vallo13_reg");
  }

  netbufferv4_register_hw_sync_vallo13_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_hw_sync_vallo13_reg", bytes);
  }

  netbufferv4_register_hw_sync_vallo13_reg_result result;
  try {
    iface_->register_hw_sync_vallo13_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_hw_sync_vallo13_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_hw_sync_vallo13_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_hw_sync_vallo13_reg");
  }

  oprot->writeMessageBegin("register_hw_sync_vallo13_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_hw_sync_vallo13_reg", bytes);
  }
}

void netbufferv4Processor::process_register_read_vallo13_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_read_vallo13_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_read_vallo13_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_read_vallo13_reg");
  }

  netbufferv4_register_read_vallo13_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_read_vallo13_reg", bytes);
  }

  netbufferv4_register_read_vallo13_reg_result result;
  try {
    iface_->register_read_vallo13_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_read_vallo13_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_read_vallo13_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_read_vallo13_reg");
  }

  oprot->writeMessageBegin("register_read_vallo13_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_read_vallo13_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_vallo13_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_vallo13_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_vallo13_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_vallo13_reg");
  }

  netbufferv4_register_write_vallo13_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_vallo13_reg", bytes);
  }

  netbufferv4_register_write_vallo13_reg_result result;
  try {
    iface_->register_write_vallo13_reg(args.sess_hdl, args.dev_tgt, args.index, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_vallo13_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_vallo13_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_vallo13_reg");
  }

  oprot->writeMessageBegin("register_write_vallo13_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_vallo13_reg", bytes);
  }
}

void netbufferv4Processor::process_register_reset_all_vallo13_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_reset_all_vallo13_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_reset_all_vallo13_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_reset_all_vallo13_reg");
  }

  netbufferv4_register_reset_all_vallo13_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_reset_all_vallo13_reg", bytes);
  }

  netbufferv4_register_reset_all_vallo13_reg_result result;
  try {
    iface_->register_reset_all_vallo13_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_reset_all_vallo13_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_reset_all_vallo13_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_reset_all_vallo13_reg");
  }

  oprot->writeMessageBegin("register_reset_all_vallo13_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_reset_all_vallo13_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_reset_vallo13_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_reset_vallo13_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_reset_vallo13_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_reset_vallo13_reg");
  }

  netbufferv4_register_range_reset_vallo13_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_reset_vallo13_reg", bytes);
  }

  netbufferv4_register_range_reset_vallo13_reg_result result;
  try {
    iface_->register_range_reset_vallo13_reg(args.sess_hdl, args.dev_tgt, args.index, args.count);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_reset_vallo13_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_reset_vallo13_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_reset_vallo13_reg");
  }

  oprot->writeMessageBegin("register_range_reset_vallo13_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_reset_vallo13_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_all_vallo13_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_all_vallo13_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_all_vallo13_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_all_vallo13_reg");
  }

  netbufferv4_register_write_all_vallo13_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_all_vallo13_reg", bytes);
  }

  netbufferv4_register_write_all_vallo13_reg_result result;
  try {
    iface_->register_write_all_vallo13_reg(args.sess_hdl, args.dev_tgt, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_all_vallo13_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_all_vallo13_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_all_vallo13_reg");
  }

  oprot->writeMessageBegin("register_write_all_vallo13_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_all_vallo13_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_read_vallo13_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_read_vallo13_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_read_vallo13_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_read_vallo13_reg");
  }

  netbufferv4_register_range_read_vallo13_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_read_vallo13_reg", bytes);
  }

  netbufferv4_register_range_read_vallo13_reg_result result;
  try {
    iface_->register_range_read_vallo13_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.count, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_read_vallo13_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_read_vallo13_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_read_vallo13_reg");
  }

  oprot->writeMessageBegin("register_range_read_vallo13_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_read_vallo13_reg", bytes);
  }
}

void netbufferv4Processor::process_register_hw_sync_vallo7_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_hw_sync_vallo7_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_hw_sync_vallo7_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_hw_sync_vallo7_reg");
  }

  netbufferv4_register_hw_sync_vallo7_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_hw_sync_vallo7_reg", bytes);
  }

  netbufferv4_register_hw_sync_vallo7_reg_result result;
  try {
    iface_->register_hw_sync_vallo7_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_hw_sync_vallo7_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_hw_sync_vallo7_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_hw_sync_vallo7_reg");
  }

  oprot->writeMessageBegin("register_hw_sync_vallo7_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_hw_sync_vallo7_reg", bytes);
  }
}

void netbufferv4Processor::process_register_read_vallo7_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_read_vallo7_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_read_vallo7_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_read_vallo7_reg");
  }

  netbufferv4_register_read_vallo7_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_read_vallo7_reg", bytes);
  }

  netbufferv4_register_read_vallo7_reg_result result;
  try {
    iface_->register_read_vallo7_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_read_vallo7_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_read_vallo7_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_read_vallo7_reg");
  }

  oprot->writeMessageBegin("register_read_vallo7_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_read_vallo7_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_vallo7_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_vallo7_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_vallo7_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_vallo7_reg");
  }

  netbufferv4_register_write_vallo7_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_vallo7_reg", bytes);
  }

  netbufferv4_register_write_vallo7_reg_result result;
  try {
    iface_->register_write_vallo7_reg(args.sess_hdl, args.dev_tgt, args.index, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_vallo7_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_vallo7_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_vallo7_reg");
  }

  oprot->writeMessageBegin("register_write_vallo7_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_vallo7_reg", bytes);
  }
}

void netbufferv4Processor::process_register_reset_all_vallo7_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_reset_all_vallo7_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_reset_all_vallo7_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_reset_all_vallo7_reg");
  }

  netbufferv4_register_reset_all_vallo7_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_reset_all_vallo7_reg", bytes);
  }

  netbufferv4_register_reset_all_vallo7_reg_result result;
  try {
    iface_->register_reset_all_vallo7_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_reset_all_vallo7_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_reset_all_vallo7_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_reset_all_vallo7_reg");
  }

  oprot->writeMessageBegin("register_reset_all_vallo7_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_reset_all_vallo7_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_reset_vallo7_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_reset_vallo7_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_reset_vallo7_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_reset_vallo7_reg");
  }

  netbufferv4_register_range_reset_vallo7_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_reset_vallo7_reg", bytes);
  }

  netbufferv4_register_range_reset_vallo7_reg_result result;
  try {
    iface_->register_range_reset_vallo7_reg(args.sess_hdl, args.dev_tgt, args.index, args.count);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_reset_vallo7_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_reset_vallo7_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_reset_vallo7_reg");
  }

  oprot->writeMessageBegin("register_range_reset_vallo7_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_reset_vallo7_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_all_vallo7_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_all_vallo7_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_all_vallo7_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_all_vallo7_reg");
  }

  netbufferv4_register_write_all_vallo7_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_all_vallo7_reg", bytes);
  }

  netbufferv4_register_write_all_vallo7_reg_result result;
  try {
    iface_->register_write_all_vallo7_reg(args.sess_hdl, args.dev_tgt, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_all_vallo7_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_all_vallo7_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_all_vallo7_reg");
  }

  oprot->writeMessageBegin("register_write_all_vallo7_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_all_vallo7_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_read_vallo7_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_read_vallo7_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_read_vallo7_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_read_vallo7_reg");
  }

  netbufferv4_register_range_read_vallo7_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_read_vallo7_reg", bytes);
  }

  netbufferv4_register_range_read_vallo7_reg_result result;
  try {
    iface_->register_range_read_vallo7_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.count, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_read_vallo7_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_read_vallo7_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_read_vallo7_reg");
  }

  oprot->writeMessageBegin("register_range_read_vallo7_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_read_vallo7_reg", bytes);
  }
}

void netbufferv4Processor::process_register_hw_sync_vallo6_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_hw_sync_vallo6_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_hw_sync_vallo6_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_hw_sync_vallo6_reg");
  }

  netbufferv4_register_hw_sync_vallo6_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_hw_sync_vallo6_reg", bytes);
  }

  netbufferv4_register_hw_sync_vallo6_reg_result result;
  try {
    iface_->register_hw_sync_vallo6_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_hw_sync_vallo6_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_hw_sync_vallo6_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_hw_sync_vallo6_reg");
  }

  oprot->writeMessageBegin("register_hw_sync_vallo6_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_hw_sync_vallo6_reg", bytes);
  }
}

void netbufferv4Processor::process_register_read_vallo6_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_read_vallo6_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_read_vallo6_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_read_vallo6_reg");
  }

  netbufferv4_register_read_vallo6_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_read_vallo6_reg", bytes);
  }

  netbufferv4_register_read_vallo6_reg_result result;
  try {
    iface_->register_read_vallo6_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_read_vallo6_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_read_vallo6_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_read_vallo6_reg");
  }

  oprot->writeMessageBegin("register_read_vallo6_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_read_vallo6_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_vallo6_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_vallo6_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_vallo6_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_vallo6_reg");
  }

  netbufferv4_register_write_vallo6_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_vallo6_reg", bytes);
  }

  netbufferv4_register_write_vallo6_reg_result result;
  try {
    iface_->register_write_vallo6_reg(args.sess_hdl, args.dev_tgt, args.index, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_vallo6_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_vallo6_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_vallo6_reg");
  }

  oprot->writeMessageBegin("register_write_vallo6_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_vallo6_reg", bytes);
  }
}

void netbufferv4Processor::process_register_reset_all_vallo6_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_reset_all_vallo6_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_reset_all_vallo6_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_reset_all_vallo6_reg");
  }

  netbufferv4_register_reset_all_vallo6_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_reset_all_vallo6_reg", bytes);
  }

  netbufferv4_register_reset_all_vallo6_reg_result result;
  try {
    iface_->register_reset_all_vallo6_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_reset_all_vallo6_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_reset_all_vallo6_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_reset_all_vallo6_reg");
  }

  oprot->writeMessageBegin("register_reset_all_vallo6_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_reset_all_vallo6_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_reset_vallo6_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_reset_vallo6_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_reset_vallo6_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_reset_vallo6_reg");
  }

  netbufferv4_register_range_reset_vallo6_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_reset_vallo6_reg", bytes);
  }

  netbufferv4_register_range_reset_vallo6_reg_result result;
  try {
    iface_->register_range_reset_vallo6_reg(args.sess_hdl, args.dev_tgt, args.index, args.count);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_reset_vallo6_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_reset_vallo6_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_reset_vallo6_reg");
  }

  oprot->writeMessageBegin("register_range_reset_vallo6_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_reset_vallo6_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_all_vallo6_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_all_vallo6_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_all_vallo6_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_all_vallo6_reg");
  }

  netbufferv4_register_write_all_vallo6_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_all_vallo6_reg", bytes);
  }

  netbufferv4_register_write_all_vallo6_reg_result result;
  try {
    iface_->register_write_all_vallo6_reg(args.sess_hdl, args.dev_tgt, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_all_vallo6_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_all_vallo6_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_all_vallo6_reg");
  }

  oprot->writeMessageBegin("register_write_all_vallo6_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_all_vallo6_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_read_vallo6_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_read_vallo6_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_read_vallo6_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_read_vallo6_reg");
  }

  netbufferv4_register_range_read_vallo6_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_read_vallo6_reg", bytes);
  }

  netbufferv4_register_range_read_vallo6_reg_result result;
  try {
    iface_->register_range_read_vallo6_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.count, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_read_vallo6_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_read_vallo6_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_read_vallo6_reg");
  }

  oprot->writeMessageBegin("register_range_read_vallo6_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_read_vallo6_reg", bytes);
  }
}

void netbufferv4Processor::process_register_hw_sync_seq_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_hw_sync_seq_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_hw_sync_seq_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_hw_sync_seq_reg");
  }

  netbufferv4_register_hw_sync_seq_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_hw_sync_seq_reg", bytes);
  }

  netbufferv4_register_hw_sync_seq_reg_result result;
  try {
    iface_->register_hw_sync_seq_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_hw_sync_seq_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_hw_sync_seq_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_hw_sync_seq_reg");
  }

  oprot->writeMessageBegin("register_hw_sync_seq_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_hw_sync_seq_reg", bytes);
  }
}

void netbufferv4Processor::process_register_read_seq_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_read_seq_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_read_seq_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_read_seq_reg");
  }

  netbufferv4_register_read_seq_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_read_seq_reg", bytes);
  }

  netbufferv4_register_read_seq_reg_result result;
  try {
    iface_->register_read_seq_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_read_seq_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_read_seq_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_read_seq_reg");
  }

  oprot->writeMessageBegin("register_read_seq_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_read_seq_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_seq_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_seq_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_seq_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_seq_reg");
  }

  netbufferv4_register_write_seq_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_seq_reg", bytes);
  }

  netbufferv4_register_write_seq_reg_result result;
  try {
    iface_->register_write_seq_reg(args.sess_hdl, args.dev_tgt, args.index, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_seq_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_seq_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_seq_reg");
  }

  oprot->writeMessageBegin("register_write_seq_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_seq_reg", bytes);
  }
}

void netbufferv4Processor::process_register_reset_all_seq_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_reset_all_seq_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_reset_all_seq_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_reset_all_seq_reg");
  }

  netbufferv4_register_reset_all_seq_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_reset_all_seq_reg", bytes);
  }

  netbufferv4_register_reset_all_seq_reg_result result;
  try {
    iface_->register_reset_all_seq_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_reset_all_seq_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_reset_all_seq_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_reset_all_seq_reg");
  }

  oprot->writeMessageBegin("register_reset_all_seq_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_reset_all_seq_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_reset_seq_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_reset_seq_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_reset_seq_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_reset_seq_reg");
  }

  netbufferv4_register_range_reset_seq_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_reset_seq_reg", bytes);
  }

  netbufferv4_register_range_reset_seq_reg_result result;
  try {
    iface_->register_range_reset_seq_reg(args.sess_hdl, args.dev_tgt, args.index, args.count);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_reset_seq_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_reset_seq_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_reset_seq_reg");
  }

  oprot->writeMessageBegin("register_range_reset_seq_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_reset_seq_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_all_seq_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_all_seq_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_all_seq_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_all_seq_reg");
  }

  netbufferv4_register_write_all_seq_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_all_seq_reg", bytes);
  }

  netbufferv4_register_write_all_seq_reg_result result;
  try {
    iface_->register_write_all_seq_reg(args.sess_hdl, args.dev_tgt, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_all_seq_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_all_seq_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_all_seq_reg");
  }

  oprot->writeMessageBegin("register_write_all_seq_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_all_seq_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_read_seq_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_read_seq_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_read_seq_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_read_seq_reg");
  }

  netbufferv4_register_range_read_seq_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_read_seq_reg", bytes);
  }

  netbufferv4_register_range_read_seq_reg_result result;
  try {
    iface_->register_range_read_seq_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.count, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_read_seq_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_read_seq_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_read_seq_reg");
  }

  oprot->writeMessageBegin("register_range_read_seq_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_read_seq_reg", bytes);
  }
}

void netbufferv4Processor::process_register_hw_sync_vallo12_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_hw_sync_vallo12_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_hw_sync_vallo12_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_hw_sync_vallo12_reg");
  }

  netbufferv4_register_hw_sync_vallo12_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_hw_sync_vallo12_reg", bytes);
  }

  netbufferv4_register_hw_sync_vallo12_reg_result result;
  try {
    iface_->register_hw_sync_vallo12_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_hw_sync_vallo12_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_hw_sync_vallo12_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_hw_sync_vallo12_reg");
  }

  oprot->writeMessageBegin("register_hw_sync_vallo12_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_hw_sync_vallo12_reg", bytes);
  }
}

void netbufferv4Processor::process_register_read_vallo12_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_read_vallo12_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_read_vallo12_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_read_vallo12_reg");
  }

  netbufferv4_register_read_vallo12_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_read_vallo12_reg", bytes);
  }

  netbufferv4_register_read_vallo12_reg_result result;
  try {
    iface_->register_read_vallo12_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_read_vallo12_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_read_vallo12_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_read_vallo12_reg");
  }

  oprot->writeMessageBegin("register_read_vallo12_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_read_vallo12_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_vallo12_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_vallo12_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_vallo12_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_vallo12_reg");
  }

  netbufferv4_register_write_vallo12_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_vallo12_reg", bytes);
  }

  netbufferv4_register_write_vallo12_reg_result result;
  try {
    iface_->register_write_vallo12_reg(args.sess_hdl, args.dev_tgt, args.index, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_vallo12_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_vallo12_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_vallo12_reg");
  }

  oprot->writeMessageBegin("register_write_vallo12_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_vallo12_reg", bytes);
  }
}

void netbufferv4Processor::process_register_reset_all_vallo12_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_reset_all_vallo12_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_reset_all_vallo12_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_reset_all_vallo12_reg");
  }

  netbufferv4_register_reset_all_vallo12_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_reset_all_vallo12_reg", bytes);
  }

  netbufferv4_register_reset_all_vallo12_reg_result result;
  try {
    iface_->register_reset_all_vallo12_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_reset_all_vallo12_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_reset_all_vallo12_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_reset_all_vallo12_reg");
  }

  oprot->writeMessageBegin("register_reset_all_vallo12_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_reset_all_vallo12_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_reset_vallo12_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_reset_vallo12_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_reset_vallo12_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_reset_vallo12_reg");
  }

  netbufferv4_register_range_reset_vallo12_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_reset_vallo12_reg", bytes);
  }

  netbufferv4_register_range_reset_vallo12_reg_result result;
  try {
    iface_->register_range_reset_vallo12_reg(args.sess_hdl, args.dev_tgt, args.index, args.count);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_reset_vallo12_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_reset_vallo12_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_reset_vallo12_reg");
  }

  oprot->writeMessageBegin("register_range_reset_vallo12_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_reset_vallo12_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_all_vallo12_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_all_vallo12_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_all_vallo12_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_all_vallo12_reg");
  }

  netbufferv4_register_write_all_vallo12_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_all_vallo12_reg", bytes);
  }

  netbufferv4_register_write_all_vallo12_reg_result result;
  try {
    iface_->register_write_all_vallo12_reg(args.sess_hdl, args.dev_tgt, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_all_vallo12_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_all_vallo12_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_all_vallo12_reg");
  }

  oprot->writeMessageBegin("register_write_all_vallo12_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_all_vallo12_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_read_vallo12_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_read_vallo12_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_read_vallo12_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_read_vallo12_reg");
  }

  netbufferv4_register_range_read_vallo12_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_read_vallo12_reg", bytes);
  }

  netbufferv4_register_range_read_vallo12_reg_result result;
  try {
    iface_->register_range_read_vallo12_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.count, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_read_vallo12_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_read_vallo12_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_read_vallo12_reg");
  }

  oprot->writeMessageBegin("register_range_read_vallo12_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_read_vallo12_reg", bytes);
  }
}

void netbufferv4Processor::process_register_hw_sync_vallo11_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_hw_sync_vallo11_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_hw_sync_vallo11_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_hw_sync_vallo11_reg");
  }

  netbufferv4_register_hw_sync_vallo11_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_hw_sync_vallo11_reg", bytes);
  }

  netbufferv4_register_hw_sync_vallo11_reg_result result;
  try {
    iface_->register_hw_sync_vallo11_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_hw_sync_vallo11_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_hw_sync_vallo11_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_hw_sync_vallo11_reg");
  }

  oprot->writeMessageBegin("register_hw_sync_vallo11_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_hw_sync_vallo11_reg", bytes);
  }
}

void netbufferv4Processor::process_register_read_vallo11_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_read_vallo11_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_read_vallo11_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_read_vallo11_reg");
  }

  netbufferv4_register_read_vallo11_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_read_vallo11_reg", bytes);
  }

  netbufferv4_register_read_vallo11_reg_result result;
  try {
    iface_->register_read_vallo11_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_read_vallo11_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_read_vallo11_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_read_vallo11_reg");
  }

  oprot->writeMessageBegin("register_read_vallo11_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_read_vallo11_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_vallo11_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_vallo11_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_vallo11_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_vallo11_reg");
  }

  netbufferv4_register_write_vallo11_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_vallo11_reg", bytes);
  }

  netbufferv4_register_write_vallo11_reg_result result;
  try {
    iface_->register_write_vallo11_reg(args.sess_hdl, args.dev_tgt, args.index, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_vallo11_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_vallo11_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_vallo11_reg");
  }

  oprot->writeMessageBegin("register_write_vallo11_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_vallo11_reg", bytes);
  }
}

void netbufferv4Processor::process_register_reset_all_vallo11_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_reset_all_vallo11_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_reset_all_vallo11_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_reset_all_vallo11_reg");
  }

  netbufferv4_register_reset_all_vallo11_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_reset_all_vallo11_reg", bytes);
  }

  netbufferv4_register_reset_all_vallo11_reg_result result;
  try {
    iface_->register_reset_all_vallo11_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_reset_all_vallo11_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_reset_all_vallo11_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_reset_all_vallo11_reg");
  }

  oprot->writeMessageBegin("register_reset_all_vallo11_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_reset_all_vallo11_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_reset_vallo11_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_reset_vallo11_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_reset_vallo11_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_reset_vallo11_reg");
  }

  netbufferv4_register_range_reset_vallo11_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_reset_vallo11_reg", bytes);
  }

  netbufferv4_register_range_reset_vallo11_reg_result result;
  try {
    iface_->register_range_reset_vallo11_reg(args.sess_hdl, args.dev_tgt, args.index, args.count);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_reset_vallo11_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_reset_vallo11_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_reset_vallo11_reg");
  }

  oprot->writeMessageBegin("register_range_reset_vallo11_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_reset_vallo11_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_all_vallo11_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_all_vallo11_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_all_vallo11_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_all_vallo11_reg");
  }

  netbufferv4_register_write_all_vallo11_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_all_vallo11_reg", bytes);
  }

  netbufferv4_register_write_all_vallo11_reg_result result;
  try {
    iface_->register_write_all_vallo11_reg(args.sess_hdl, args.dev_tgt, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_all_vallo11_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_all_vallo11_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_all_vallo11_reg");
  }

  oprot->writeMessageBegin("register_write_all_vallo11_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_all_vallo11_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_read_vallo11_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_read_vallo11_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_read_vallo11_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_read_vallo11_reg");
  }

  netbufferv4_register_range_read_vallo11_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_read_vallo11_reg", bytes);
  }

  netbufferv4_register_range_read_vallo11_reg_result result;
  try {
    iface_->register_range_read_vallo11_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.count, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_read_vallo11_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_read_vallo11_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_read_vallo11_reg");
  }

  oprot->writeMessageBegin("register_range_read_vallo11_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_read_vallo11_reg", bytes);
  }
}

void netbufferv4Processor::process_register_hw_sync_vallo5_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_hw_sync_vallo5_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_hw_sync_vallo5_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_hw_sync_vallo5_reg");
  }

  netbufferv4_register_hw_sync_vallo5_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_hw_sync_vallo5_reg", bytes);
  }

  netbufferv4_register_hw_sync_vallo5_reg_result result;
  try {
    iface_->register_hw_sync_vallo5_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_hw_sync_vallo5_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_hw_sync_vallo5_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_hw_sync_vallo5_reg");
  }

  oprot->writeMessageBegin("register_hw_sync_vallo5_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_hw_sync_vallo5_reg", bytes);
  }
}

void netbufferv4Processor::process_register_read_vallo5_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_read_vallo5_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_read_vallo5_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_read_vallo5_reg");
  }

  netbufferv4_register_read_vallo5_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_read_vallo5_reg", bytes);
  }

  netbufferv4_register_read_vallo5_reg_result result;
  try {
    iface_->register_read_vallo5_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_read_vallo5_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_read_vallo5_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_read_vallo5_reg");
  }

  oprot->writeMessageBegin("register_read_vallo5_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_read_vallo5_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_vallo5_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_vallo5_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_vallo5_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_vallo5_reg");
  }

  netbufferv4_register_write_vallo5_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_vallo5_reg", bytes);
  }

  netbufferv4_register_write_vallo5_reg_result result;
  try {
    iface_->register_write_vallo5_reg(args.sess_hdl, args.dev_tgt, args.index, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_vallo5_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_vallo5_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_vallo5_reg");
  }

  oprot->writeMessageBegin("register_write_vallo5_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_vallo5_reg", bytes);
  }
}

void netbufferv4Processor::process_register_reset_all_vallo5_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_reset_all_vallo5_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_reset_all_vallo5_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_reset_all_vallo5_reg");
  }

  netbufferv4_register_reset_all_vallo5_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_reset_all_vallo5_reg", bytes);
  }

  netbufferv4_register_reset_all_vallo5_reg_result result;
  try {
    iface_->register_reset_all_vallo5_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_reset_all_vallo5_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_reset_all_vallo5_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_reset_all_vallo5_reg");
  }

  oprot->writeMessageBegin("register_reset_all_vallo5_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_reset_all_vallo5_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_reset_vallo5_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_reset_vallo5_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_reset_vallo5_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_reset_vallo5_reg");
  }

  netbufferv4_register_range_reset_vallo5_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_reset_vallo5_reg", bytes);
  }

  netbufferv4_register_range_reset_vallo5_reg_result result;
  try {
    iface_->register_range_reset_vallo5_reg(args.sess_hdl, args.dev_tgt, args.index, args.count);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_reset_vallo5_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_reset_vallo5_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_reset_vallo5_reg");
  }

  oprot->writeMessageBegin("register_range_reset_vallo5_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_reset_vallo5_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_all_vallo5_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_all_vallo5_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_all_vallo5_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_all_vallo5_reg");
  }

  netbufferv4_register_write_all_vallo5_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_all_vallo5_reg", bytes);
  }

  netbufferv4_register_write_all_vallo5_reg_result result;
  try {
    iface_->register_write_all_vallo5_reg(args.sess_hdl, args.dev_tgt, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_all_vallo5_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_all_vallo5_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_all_vallo5_reg");
  }

  oprot->writeMessageBegin("register_write_all_vallo5_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_all_vallo5_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_read_vallo5_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_read_vallo5_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_read_vallo5_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_read_vallo5_reg");
  }

  netbufferv4_register_range_read_vallo5_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_read_vallo5_reg", bytes);
  }

  netbufferv4_register_range_read_vallo5_reg_result result;
  try {
    iface_->register_range_read_vallo5_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.count, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_read_vallo5_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_read_vallo5_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_read_vallo5_reg");
  }

  oprot->writeMessageBegin("register_range_read_vallo5_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_read_vallo5_reg", bytes);
  }
}

void netbufferv4Processor::process_register_hw_sync_cm1_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_hw_sync_cm1_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_hw_sync_cm1_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_hw_sync_cm1_reg");
  }

  netbufferv4_register_hw_sync_cm1_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_hw_sync_cm1_reg", bytes);
  }

  netbufferv4_register_hw_sync_cm1_reg_result result;
  try {
    iface_->register_hw_sync_cm1_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_hw_sync_cm1_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_hw_sync_cm1_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_hw_sync_cm1_reg");
  }

  oprot->writeMessageBegin("register_hw_sync_cm1_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_hw_sync_cm1_reg", bytes);
  }
}

void netbufferv4Processor::process_register_read_cm1_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_read_cm1_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_read_cm1_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_read_cm1_reg");
  }

  netbufferv4_register_read_cm1_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_read_cm1_reg", bytes);
  }

  netbufferv4_register_read_cm1_reg_result result;
  try {
    iface_->register_read_cm1_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_read_cm1_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_read_cm1_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_read_cm1_reg");
  }

  oprot->writeMessageBegin("register_read_cm1_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_read_cm1_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_cm1_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_cm1_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_cm1_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_cm1_reg");
  }

  netbufferv4_register_write_cm1_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_cm1_reg", bytes);
  }

  netbufferv4_register_write_cm1_reg_result result;
  try {
    iface_->register_write_cm1_reg(args.sess_hdl, args.dev_tgt, args.index, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_cm1_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_cm1_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_cm1_reg");
  }

  oprot->writeMessageBegin("register_write_cm1_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_cm1_reg", bytes);
  }
}

void netbufferv4Processor::process_register_reset_all_cm1_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_reset_all_cm1_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_reset_all_cm1_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_reset_all_cm1_reg");
  }

  netbufferv4_register_reset_all_cm1_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_reset_all_cm1_reg", bytes);
  }

  netbufferv4_register_reset_all_cm1_reg_result result;
  try {
    iface_->register_reset_all_cm1_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_reset_all_cm1_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_reset_all_cm1_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_reset_all_cm1_reg");
  }

  oprot->writeMessageBegin("register_reset_all_cm1_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_reset_all_cm1_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_reset_cm1_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_reset_cm1_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_reset_cm1_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_reset_cm1_reg");
  }

  netbufferv4_register_range_reset_cm1_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_reset_cm1_reg", bytes);
  }

  netbufferv4_register_range_reset_cm1_reg_result result;
  try {
    iface_->register_range_reset_cm1_reg(args.sess_hdl, args.dev_tgt, args.index, args.count);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_reset_cm1_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_reset_cm1_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_reset_cm1_reg");
  }

  oprot->writeMessageBegin("register_range_reset_cm1_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_reset_cm1_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_all_cm1_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_all_cm1_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_all_cm1_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_all_cm1_reg");
  }

  netbufferv4_register_write_all_cm1_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_all_cm1_reg", bytes);
  }

  netbufferv4_register_write_all_cm1_reg_result result;
  try {
    iface_->register_write_all_cm1_reg(args.sess_hdl, args.dev_tgt, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_all_cm1_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_all_cm1_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_all_cm1_reg");
  }

  oprot->writeMessageBegin("register_write_all_cm1_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_all_cm1_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_read_cm1_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_read_cm1_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_read_cm1_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_read_cm1_reg");
  }

  netbufferv4_register_range_read_cm1_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_read_cm1_reg", bytes);
  }

  netbufferv4_register_range_read_cm1_reg_result result;
  try {
    iface_->register_range_read_cm1_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.count, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_read_cm1_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_read_cm1_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_read_cm1_reg");
  }

  oprot->writeMessageBegin("register_range_read_cm1_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_read_cm1_reg", bytes);
  }
}

void netbufferv4Processor::process_register_hw_sync_validvalue_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_hw_sync_validvalue_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_hw_sync_validvalue_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_hw_sync_validvalue_reg");
  }

  netbufferv4_register_hw_sync_validvalue_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_hw_sync_validvalue_reg", bytes);
  }

  netbufferv4_register_hw_sync_validvalue_reg_result result;
  try {
    iface_->register_hw_sync_validvalue_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_hw_sync_validvalue_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_hw_sync_validvalue_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_hw_sync_validvalue_reg");
  }

  oprot->writeMessageBegin("register_hw_sync_validvalue_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_hw_sync_validvalue_reg", bytes);
  }
}

void netbufferv4Processor::process_register_read_validvalue_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_read_validvalue_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_read_validvalue_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_read_validvalue_reg");
  }

  netbufferv4_register_read_validvalue_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_read_validvalue_reg", bytes);
  }

  netbufferv4_register_read_validvalue_reg_result result;
  try {
    iface_->register_read_validvalue_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_read_validvalue_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_read_validvalue_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_read_validvalue_reg");
  }

  oprot->writeMessageBegin("register_read_validvalue_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_read_validvalue_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_validvalue_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_validvalue_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_validvalue_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_validvalue_reg");
  }

  netbufferv4_register_write_validvalue_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_validvalue_reg", bytes);
  }

  netbufferv4_register_write_validvalue_reg_result result;
  try {
    iface_->register_write_validvalue_reg(args.sess_hdl, args.dev_tgt, args.index, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_validvalue_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_validvalue_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_validvalue_reg");
  }

  oprot->writeMessageBegin("register_write_validvalue_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_validvalue_reg", bytes);
  }
}

void netbufferv4Processor::process_register_reset_all_validvalue_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_reset_all_validvalue_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_reset_all_validvalue_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_reset_all_validvalue_reg");
  }

  netbufferv4_register_reset_all_validvalue_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_reset_all_validvalue_reg", bytes);
  }

  netbufferv4_register_reset_all_validvalue_reg_result result;
  try {
    iface_->register_reset_all_validvalue_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_reset_all_validvalue_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_reset_all_validvalue_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_reset_all_validvalue_reg");
  }

  oprot->writeMessageBegin("register_reset_all_validvalue_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_reset_all_validvalue_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_reset_validvalue_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_reset_validvalue_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_reset_validvalue_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_reset_validvalue_reg");
  }

  netbufferv4_register_range_reset_validvalue_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_reset_validvalue_reg", bytes);
  }

  netbufferv4_register_range_reset_validvalue_reg_result result;
  try {
    iface_->register_range_reset_validvalue_reg(args.sess_hdl, args.dev_tgt, args.index, args.count);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_reset_validvalue_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_reset_validvalue_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_reset_validvalue_reg");
  }

  oprot->writeMessageBegin("register_range_reset_validvalue_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_reset_validvalue_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_all_validvalue_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_all_validvalue_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_all_validvalue_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_all_validvalue_reg");
  }

  netbufferv4_register_write_all_validvalue_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_all_validvalue_reg", bytes);
  }

  netbufferv4_register_write_all_validvalue_reg_result result;
  try {
    iface_->register_write_all_validvalue_reg(args.sess_hdl, args.dev_tgt, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_all_validvalue_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_all_validvalue_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_all_validvalue_reg");
  }

  oprot->writeMessageBegin("register_write_all_validvalue_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_all_validvalue_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_read_validvalue_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_read_validvalue_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_read_validvalue_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_read_validvalue_reg");
  }

  netbufferv4_register_range_read_validvalue_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_read_validvalue_reg", bytes);
  }

  netbufferv4_register_range_read_validvalue_reg_result result;
  try {
    iface_->register_range_read_validvalue_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.count, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_read_validvalue_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_read_validvalue_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_read_validvalue_reg");
  }

  oprot->writeMessageBegin("register_range_read_validvalue_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_read_validvalue_reg", bytes);
  }
}

void netbufferv4Processor::process_register_hw_sync_valhi4_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_hw_sync_valhi4_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_hw_sync_valhi4_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_hw_sync_valhi4_reg");
  }

  netbufferv4_register_hw_sync_valhi4_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_hw_sync_valhi4_reg", bytes);
  }

  netbufferv4_register_hw_sync_valhi4_reg_result result;
  try {
    iface_->register_hw_sync_valhi4_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_hw_sync_valhi4_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_hw_sync_valhi4_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_hw_sync_valhi4_reg");
  }

  oprot->writeMessageBegin("register_hw_sync_valhi4_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_hw_sync_valhi4_reg", bytes);
  }
}

void netbufferv4Processor::process_register_read_valhi4_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_read_valhi4_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_read_valhi4_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_read_valhi4_reg");
  }

  netbufferv4_register_read_valhi4_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_read_valhi4_reg", bytes);
  }

  netbufferv4_register_read_valhi4_reg_result result;
  try {
    iface_->register_read_valhi4_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_read_valhi4_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_read_valhi4_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_read_valhi4_reg");
  }

  oprot->writeMessageBegin("register_read_valhi4_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_read_valhi4_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_valhi4_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_valhi4_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_valhi4_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_valhi4_reg");
  }

  netbufferv4_register_write_valhi4_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_valhi4_reg", bytes);
  }

  netbufferv4_register_write_valhi4_reg_result result;
  try {
    iface_->register_write_valhi4_reg(args.sess_hdl, args.dev_tgt, args.index, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_valhi4_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_valhi4_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_valhi4_reg");
  }

  oprot->writeMessageBegin("register_write_valhi4_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_valhi4_reg", bytes);
  }
}

void netbufferv4Processor::process_register_reset_all_valhi4_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_reset_all_valhi4_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_reset_all_valhi4_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_reset_all_valhi4_reg");
  }

  netbufferv4_register_reset_all_valhi4_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_reset_all_valhi4_reg", bytes);
  }

  netbufferv4_register_reset_all_valhi4_reg_result result;
  try {
    iface_->register_reset_all_valhi4_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_reset_all_valhi4_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_reset_all_valhi4_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_reset_all_valhi4_reg");
  }

  oprot->writeMessageBegin("register_reset_all_valhi4_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_reset_all_valhi4_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_reset_valhi4_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_reset_valhi4_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_reset_valhi4_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_reset_valhi4_reg");
  }

  netbufferv4_register_range_reset_valhi4_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_reset_valhi4_reg", bytes);
  }

  netbufferv4_register_range_reset_valhi4_reg_result result;
  try {
    iface_->register_range_reset_valhi4_reg(args.sess_hdl, args.dev_tgt, args.index, args.count);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_reset_valhi4_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_reset_valhi4_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_reset_valhi4_reg");
  }

  oprot->writeMessageBegin("register_range_reset_valhi4_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_reset_valhi4_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_all_valhi4_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_all_valhi4_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_all_valhi4_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_all_valhi4_reg");
  }

  netbufferv4_register_write_all_valhi4_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_all_valhi4_reg", bytes);
  }

  netbufferv4_register_write_all_valhi4_reg_result result;
  try {
    iface_->register_write_all_valhi4_reg(args.sess_hdl, args.dev_tgt, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_all_valhi4_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_all_valhi4_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_all_valhi4_reg");
  }

  oprot->writeMessageBegin("register_write_all_valhi4_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_all_valhi4_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_read_valhi4_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_read_valhi4_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_read_valhi4_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_read_valhi4_reg");
  }

  netbufferv4_register_range_read_valhi4_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_read_valhi4_reg", bytes);
  }

  netbufferv4_register_range_read_valhi4_reg_result result;
  try {
    iface_->register_range_read_valhi4_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.count, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_read_valhi4_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_read_valhi4_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_read_valhi4_reg");
  }

  oprot->writeMessageBegin("register_range_read_valhi4_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_read_valhi4_reg", bytes);
  }
}

void netbufferv4Processor::process_register_hw_sync_vallo15_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_hw_sync_vallo15_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_hw_sync_vallo15_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_hw_sync_vallo15_reg");
  }

  netbufferv4_register_hw_sync_vallo15_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_hw_sync_vallo15_reg", bytes);
  }

  netbufferv4_register_hw_sync_vallo15_reg_result result;
  try {
    iface_->register_hw_sync_vallo15_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_hw_sync_vallo15_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_hw_sync_vallo15_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_hw_sync_vallo15_reg");
  }

  oprot->writeMessageBegin("register_hw_sync_vallo15_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_hw_sync_vallo15_reg", bytes);
  }
}

void netbufferv4Processor::process_register_read_vallo15_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_read_vallo15_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_read_vallo15_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_read_vallo15_reg");
  }

  netbufferv4_register_read_vallo15_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_read_vallo15_reg", bytes);
  }

  netbufferv4_register_read_vallo15_reg_result result;
  try {
    iface_->register_read_vallo15_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_read_vallo15_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_read_vallo15_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_read_vallo15_reg");
  }

  oprot->writeMessageBegin("register_read_vallo15_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_read_vallo15_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_vallo15_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_vallo15_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_vallo15_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_vallo15_reg");
  }

  netbufferv4_register_write_vallo15_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_vallo15_reg", bytes);
  }

  netbufferv4_register_write_vallo15_reg_result result;
  try {
    iface_->register_write_vallo15_reg(args.sess_hdl, args.dev_tgt, args.index, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_vallo15_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_vallo15_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_vallo15_reg");
  }

  oprot->writeMessageBegin("register_write_vallo15_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_vallo15_reg", bytes);
  }
}

void netbufferv4Processor::process_register_reset_all_vallo15_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_reset_all_vallo15_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_reset_all_vallo15_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_reset_all_vallo15_reg");
  }

  netbufferv4_register_reset_all_vallo15_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_reset_all_vallo15_reg", bytes);
  }

  netbufferv4_register_reset_all_vallo15_reg_result result;
  try {
    iface_->register_reset_all_vallo15_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_reset_all_vallo15_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_reset_all_vallo15_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_reset_all_vallo15_reg");
  }

  oprot->writeMessageBegin("register_reset_all_vallo15_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_reset_all_vallo15_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_reset_vallo15_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_reset_vallo15_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_reset_vallo15_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_reset_vallo15_reg");
  }

  netbufferv4_register_range_reset_vallo15_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_reset_vallo15_reg", bytes);
  }

  netbufferv4_register_range_reset_vallo15_reg_result result;
  try {
    iface_->register_range_reset_vallo15_reg(args.sess_hdl, args.dev_tgt, args.index, args.count);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_reset_vallo15_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_reset_vallo15_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_reset_vallo15_reg");
  }

  oprot->writeMessageBegin("register_range_reset_vallo15_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_reset_vallo15_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_all_vallo15_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_all_vallo15_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_all_vallo15_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_all_vallo15_reg");
  }

  netbufferv4_register_write_all_vallo15_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_all_vallo15_reg", bytes);
  }

  netbufferv4_register_write_all_vallo15_reg_result result;
  try {
    iface_->register_write_all_vallo15_reg(args.sess_hdl, args.dev_tgt, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_all_vallo15_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_all_vallo15_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_all_vallo15_reg");
  }

  oprot->writeMessageBegin("register_write_all_vallo15_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_all_vallo15_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_read_vallo15_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_read_vallo15_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_read_vallo15_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_read_vallo15_reg");
  }

  netbufferv4_register_range_read_vallo15_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_read_vallo15_reg", bytes);
  }

  netbufferv4_register_range_read_vallo15_reg_result result;
  try {
    iface_->register_range_read_vallo15_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.count, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_read_vallo15_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_read_vallo15_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_read_vallo15_reg");
  }

  oprot->writeMessageBegin("register_range_read_vallo15_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_read_vallo15_reg", bytes);
  }
}

void netbufferv4Processor::process_register_hw_sync_valhi12_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_hw_sync_valhi12_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_hw_sync_valhi12_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_hw_sync_valhi12_reg");
  }

  netbufferv4_register_hw_sync_valhi12_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_hw_sync_valhi12_reg", bytes);
  }

  netbufferv4_register_hw_sync_valhi12_reg_result result;
  try {
    iface_->register_hw_sync_valhi12_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_hw_sync_valhi12_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_hw_sync_valhi12_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_hw_sync_valhi12_reg");
  }

  oprot->writeMessageBegin("register_hw_sync_valhi12_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_hw_sync_valhi12_reg", bytes);
  }
}

void netbufferv4Processor::process_register_read_valhi12_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_read_valhi12_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_read_valhi12_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_read_valhi12_reg");
  }

  netbufferv4_register_read_valhi12_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_read_valhi12_reg", bytes);
  }

  netbufferv4_register_read_valhi12_reg_result result;
  try {
    iface_->register_read_valhi12_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_read_valhi12_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_read_valhi12_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_read_valhi12_reg");
  }

  oprot->writeMessageBegin("register_read_valhi12_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_read_valhi12_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_valhi12_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_valhi12_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_valhi12_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_valhi12_reg");
  }

  netbufferv4_register_write_valhi12_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_valhi12_reg", bytes);
  }

  netbufferv4_register_write_valhi12_reg_result result;
  try {
    iface_->register_write_valhi12_reg(args.sess_hdl, args.dev_tgt, args.index, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_valhi12_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_valhi12_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_valhi12_reg");
  }

  oprot->writeMessageBegin("register_write_valhi12_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_valhi12_reg", bytes);
  }
}

void netbufferv4Processor::process_register_reset_all_valhi12_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_reset_all_valhi12_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_reset_all_valhi12_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_reset_all_valhi12_reg");
  }

  netbufferv4_register_reset_all_valhi12_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_reset_all_valhi12_reg", bytes);
  }

  netbufferv4_register_reset_all_valhi12_reg_result result;
  try {
    iface_->register_reset_all_valhi12_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_reset_all_valhi12_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_reset_all_valhi12_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_reset_all_valhi12_reg");
  }

  oprot->writeMessageBegin("register_reset_all_valhi12_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_reset_all_valhi12_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_reset_valhi12_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_reset_valhi12_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_reset_valhi12_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_reset_valhi12_reg");
  }

  netbufferv4_register_range_reset_valhi12_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_reset_valhi12_reg", bytes);
  }

  netbufferv4_register_range_reset_valhi12_reg_result result;
  try {
    iface_->register_range_reset_valhi12_reg(args.sess_hdl, args.dev_tgt, args.index, args.count);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_reset_valhi12_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_reset_valhi12_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_reset_valhi12_reg");
  }

  oprot->writeMessageBegin("register_range_reset_valhi12_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_reset_valhi12_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_all_valhi12_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_all_valhi12_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_all_valhi12_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_all_valhi12_reg");
  }

  netbufferv4_register_write_all_valhi12_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_all_valhi12_reg", bytes);
  }

  netbufferv4_register_write_all_valhi12_reg_result result;
  try {
    iface_->register_write_all_valhi12_reg(args.sess_hdl, args.dev_tgt, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_all_valhi12_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_all_valhi12_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_all_valhi12_reg");
  }

  oprot->writeMessageBegin("register_write_all_valhi12_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_all_valhi12_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_read_valhi12_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_read_valhi12_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_read_valhi12_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_read_valhi12_reg");
  }

  netbufferv4_register_range_read_valhi12_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_read_valhi12_reg", bytes);
  }

  netbufferv4_register_range_read_valhi12_reg_result result;
  try {
    iface_->register_range_read_valhi12_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.count, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_read_valhi12_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_read_valhi12_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_read_valhi12_reg");
  }

  oprot->writeMessageBegin("register_range_read_valhi12_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_read_valhi12_reg", bytes);
  }
}

void netbufferv4Processor::process_register_hw_sync_latest_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_hw_sync_latest_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_hw_sync_latest_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_hw_sync_latest_reg");
  }

  netbufferv4_register_hw_sync_latest_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_hw_sync_latest_reg", bytes);
  }

  netbufferv4_register_hw_sync_latest_reg_result result;
  try {
    iface_->register_hw_sync_latest_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_hw_sync_latest_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_hw_sync_latest_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_hw_sync_latest_reg");
  }

  oprot->writeMessageBegin("register_hw_sync_latest_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_hw_sync_latest_reg", bytes);
  }
}

void netbufferv4Processor::process_register_read_latest_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_read_latest_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_read_latest_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_read_latest_reg");
  }

  netbufferv4_register_read_latest_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_read_latest_reg", bytes);
  }

  netbufferv4_register_read_latest_reg_result result;
  try {
    iface_->register_read_latest_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_read_latest_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_read_latest_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_read_latest_reg");
  }

  oprot->writeMessageBegin("register_read_latest_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_read_latest_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_latest_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_latest_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_latest_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_latest_reg");
  }

  netbufferv4_register_write_latest_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_latest_reg", bytes);
  }

  netbufferv4_register_write_latest_reg_result result;
  try {
    iface_->register_write_latest_reg(args.sess_hdl, args.dev_tgt, args.index, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_latest_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_latest_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_latest_reg");
  }

  oprot->writeMessageBegin("register_write_latest_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_latest_reg", bytes);
  }
}

void netbufferv4Processor::process_register_reset_all_latest_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_reset_all_latest_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_reset_all_latest_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_reset_all_latest_reg");
  }

  netbufferv4_register_reset_all_latest_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_reset_all_latest_reg", bytes);
  }

  netbufferv4_register_reset_all_latest_reg_result result;
  try {
    iface_->register_reset_all_latest_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_reset_all_latest_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_reset_all_latest_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_reset_all_latest_reg");
  }

  oprot->writeMessageBegin("register_reset_all_latest_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_reset_all_latest_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_reset_latest_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_reset_latest_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_reset_latest_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_reset_latest_reg");
  }

  netbufferv4_register_range_reset_latest_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_reset_latest_reg", bytes);
  }

  netbufferv4_register_range_reset_latest_reg_result result;
  try {
    iface_->register_range_reset_latest_reg(args.sess_hdl, args.dev_tgt, args.index, args.count);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_reset_latest_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_reset_latest_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_reset_latest_reg");
  }

  oprot->writeMessageBegin("register_range_reset_latest_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_reset_latest_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_all_latest_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_all_latest_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_all_latest_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_all_latest_reg");
  }

  netbufferv4_register_write_all_latest_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_all_latest_reg", bytes);
  }

  netbufferv4_register_write_all_latest_reg_result result;
  try {
    iface_->register_write_all_latest_reg(args.sess_hdl, args.dev_tgt, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_all_latest_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_all_latest_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_all_latest_reg");
  }

  oprot->writeMessageBegin("register_write_all_latest_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_all_latest_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_read_latest_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_read_latest_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_read_latest_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_read_latest_reg");
  }

  netbufferv4_register_range_read_latest_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_read_latest_reg", bytes);
  }

  netbufferv4_register_range_read_latest_reg_result result;
  try {
    iface_->register_range_read_latest_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.count, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_read_latest_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_read_latest_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_read_latest_reg");
  }

  oprot->writeMessageBegin("register_range_read_latest_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_read_latest_reg", bytes);
  }
}

void netbufferv4Processor::process_register_hw_sync_vallo10_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_hw_sync_vallo10_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_hw_sync_vallo10_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_hw_sync_vallo10_reg");
  }

  netbufferv4_register_hw_sync_vallo10_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_hw_sync_vallo10_reg", bytes);
  }

  netbufferv4_register_hw_sync_vallo10_reg_result result;
  try {
    iface_->register_hw_sync_vallo10_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_hw_sync_vallo10_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_hw_sync_vallo10_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_hw_sync_vallo10_reg");
  }

  oprot->writeMessageBegin("register_hw_sync_vallo10_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_hw_sync_vallo10_reg", bytes);
  }
}

void netbufferv4Processor::process_register_read_vallo10_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_read_vallo10_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_read_vallo10_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_read_vallo10_reg");
  }

  netbufferv4_register_read_vallo10_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_read_vallo10_reg", bytes);
  }

  netbufferv4_register_read_vallo10_reg_result result;
  try {
    iface_->register_read_vallo10_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_read_vallo10_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_read_vallo10_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_read_vallo10_reg");
  }

  oprot->writeMessageBegin("register_read_vallo10_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_read_vallo10_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_vallo10_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_vallo10_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_vallo10_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_vallo10_reg");
  }

  netbufferv4_register_write_vallo10_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_vallo10_reg", bytes);
  }

  netbufferv4_register_write_vallo10_reg_result result;
  try {
    iface_->register_write_vallo10_reg(args.sess_hdl, args.dev_tgt, args.index, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_vallo10_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_vallo10_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_vallo10_reg");
  }

  oprot->writeMessageBegin("register_write_vallo10_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_vallo10_reg", bytes);
  }
}

void netbufferv4Processor::process_register_reset_all_vallo10_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_reset_all_vallo10_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_reset_all_vallo10_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_reset_all_vallo10_reg");
  }

  netbufferv4_register_reset_all_vallo10_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_reset_all_vallo10_reg", bytes);
  }

  netbufferv4_register_reset_all_vallo10_reg_result result;
  try {
    iface_->register_reset_all_vallo10_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_reset_all_vallo10_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_reset_all_vallo10_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_reset_all_vallo10_reg");
  }

  oprot->writeMessageBegin("register_reset_all_vallo10_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_reset_all_vallo10_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_reset_vallo10_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_reset_vallo10_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_reset_vallo10_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_reset_vallo10_reg");
  }

  netbufferv4_register_range_reset_vallo10_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_reset_vallo10_reg", bytes);
  }

  netbufferv4_register_range_reset_vallo10_reg_result result;
  try {
    iface_->register_range_reset_vallo10_reg(args.sess_hdl, args.dev_tgt, args.index, args.count);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_reset_vallo10_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_reset_vallo10_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_reset_vallo10_reg");
  }

  oprot->writeMessageBegin("register_range_reset_vallo10_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_reset_vallo10_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_all_vallo10_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_all_vallo10_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_all_vallo10_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_all_vallo10_reg");
  }

  netbufferv4_register_write_all_vallo10_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_all_vallo10_reg", bytes);
  }

  netbufferv4_register_write_all_vallo10_reg_result result;
  try {
    iface_->register_write_all_vallo10_reg(args.sess_hdl, args.dev_tgt, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_all_vallo10_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_all_vallo10_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_all_vallo10_reg");
  }

  oprot->writeMessageBegin("register_write_all_vallo10_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_all_vallo10_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_read_vallo10_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_read_vallo10_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_read_vallo10_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_read_vallo10_reg");
  }

  netbufferv4_register_range_read_vallo10_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_read_vallo10_reg", bytes);
  }

  netbufferv4_register_range_read_vallo10_reg_result result;
  try {
    iface_->register_range_read_vallo10_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.count, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_read_vallo10_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_read_vallo10_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_read_vallo10_reg");
  }

  oprot->writeMessageBegin("register_range_read_vallo10_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_read_vallo10_reg", bytes);
  }
}

void netbufferv4Processor::process_register_hw_sync_vallo4_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_hw_sync_vallo4_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_hw_sync_vallo4_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_hw_sync_vallo4_reg");
  }

  netbufferv4_register_hw_sync_vallo4_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_hw_sync_vallo4_reg", bytes);
  }

  netbufferv4_register_hw_sync_vallo4_reg_result result;
  try {
    iface_->register_hw_sync_vallo4_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_hw_sync_vallo4_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_hw_sync_vallo4_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_hw_sync_vallo4_reg");
  }

  oprot->writeMessageBegin("register_hw_sync_vallo4_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_hw_sync_vallo4_reg", bytes);
  }
}

void netbufferv4Processor::process_register_read_vallo4_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_read_vallo4_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_read_vallo4_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_read_vallo4_reg");
  }

  netbufferv4_register_read_vallo4_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_read_vallo4_reg", bytes);
  }

  netbufferv4_register_read_vallo4_reg_result result;
  try {
    iface_->register_read_vallo4_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_read_vallo4_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_read_vallo4_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_read_vallo4_reg");
  }

  oprot->writeMessageBegin("register_read_vallo4_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_read_vallo4_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_vallo4_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_vallo4_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_vallo4_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_vallo4_reg");
  }

  netbufferv4_register_write_vallo4_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_vallo4_reg", bytes);
  }

  netbufferv4_register_write_vallo4_reg_result result;
  try {
    iface_->register_write_vallo4_reg(args.sess_hdl, args.dev_tgt, args.index, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_vallo4_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_vallo4_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_vallo4_reg");
  }

  oprot->writeMessageBegin("register_write_vallo4_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_vallo4_reg", bytes);
  }
}

void netbufferv4Processor::process_register_reset_all_vallo4_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_reset_all_vallo4_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_reset_all_vallo4_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_reset_all_vallo4_reg");
  }

  netbufferv4_register_reset_all_vallo4_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_reset_all_vallo4_reg", bytes);
  }

  netbufferv4_register_reset_all_vallo4_reg_result result;
  try {
    iface_->register_reset_all_vallo4_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_reset_all_vallo4_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_reset_all_vallo4_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_reset_all_vallo4_reg");
  }

  oprot->writeMessageBegin("register_reset_all_vallo4_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_reset_all_vallo4_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_reset_vallo4_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_reset_vallo4_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_reset_vallo4_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_reset_vallo4_reg");
  }

  netbufferv4_register_range_reset_vallo4_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_reset_vallo4_reg", bytes);
  }

  netbufferv4_register_range_reset_vallo4_reg_result result;
  try {
    iface_->register_range_reset_vallo4_reg(args.sess_hdl, args.dev_tgt, args.index, args.count);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_reset_vallo4_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_reset_vallo4_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_reset_vallo4_reg");
  }

  oprot->writeMessageBegin("register_range_reset_vallo4_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_reset_vallo4_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_all_vallo4_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_all_vallo4_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_all_vallo4_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_all_vallo4_reg");
  }

  netbufferv4_register_write_all_vallo4_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_all_vallo4_reg", bytes);
  }

  netbufferv4_register_write_all_vallo4_reg_result result;
  try {
    iface_->register_write_all_vallo4_reg(args.sess_hdl, args.dev_tgt, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_all_vallo4_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_all_vallo4_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_all_vallo4_reg");
  }

  oprot->writeMessageBegin("register_write_all_vallo4_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_all_vallo4_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_read_vallo4_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_read_vallo4_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_read_vallo4_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_read_vallo4_reg");
  }

  netbufferv4_register_range_read_vallo4_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_read_vallo4_reg", bytes);
  }

  netbufferv4_register_range_read_vallo4_reg_result result;
  try {
    iface_->register_range_read_vallo4_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.count, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_read_vallo4_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_read_vallo4_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_read_vallo4_reg");
  }

  oprot->writeMessageBegin("register_range_read_vallo4_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_read_vallo4_reg", bytes);
  }
}

void netbufferv4Processor::process_register_hw_sync_vallo16_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_hw_sync_vallo16_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_hw_sync_vallo16_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_hw_sync_vallo16_reg");
  }

  netbufferv4_register_hw_sync_vallo16_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_hw_sync_vallo16_reg", bytes);
  }

  netbufferv4_register_hw_sync_vallo16_reg_result result;
  try {
    iface_->register_hw_sync_vallo16_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_hw_sync_vallo16_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_hw_sync_vallo16_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_hw_sync_vallo16_reg");
  }

  oprot->writeMessageBegin("register_hw_sync_vallo16_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_hw_sync_vallo16_reg", bytes);
  }
}

void netbufferv4Processor::process_register_read_vallo16_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_read_vallo16_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_read_vallo16_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_read_vallo16_reg");
  }

  netbufferv4_register_read_vallo16_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_read_vallo16_reg", bytes);
  }

  netbufferv4_register_read_vallo16_reg_result result;
  try {
    iface_->register_read_vallo16_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_read_vallo16_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_read_vallo16_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_read_vallo16_reg");
  }

  oprot->writeMessageBegin("register_read_vallo16_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_read_vallo16_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_vallo16_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_vallo16_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_vallo16_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_vallo16_reg");
  }

  netbufferv4_register_write_vallo16_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_vallo16_reg", bytes);
  }

  netbufferv4_register_write_vallo16_reg_result result;
  try {
    iface_->register_write_vallo16_reg(args.sess_hdl, args.dev_tgt, args.index, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_vallo16_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_vallo16_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_vallo16_reg");
  }

  oprot->writeMessageBegin("register_write_vallo16_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_vallo16_reg", bytes);
  }
}

void netbufferv4Processor::process_register_reset_all_vallo16_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_reset_all_vallo16_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_reset_all_vallo16_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_reset_all_vallo16_reg");
  }

  netbufferv4_register_reset_all_vallo16_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_reset_all_vallo16_reg", bytes);
  }

  netbufferv4_register_reset_all_vallo16_reg_result result;
  try {
    iface_->register_reset_all_vallo16_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_reset_all_vallo16_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_reset_all_vallo16_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_reset_all_vallo16_reg");
  }

  oprot->writeMessageBegin("register_reset_all_vallo16_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_reset_all_vallo16_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_reset_vallo16_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_reset_vallo16_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_reset_vallo16_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_reset_vallo16_reg");
  }

  netbufferv4_register_range_reset_vallo16_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_reset_vallo16_reg", bytes);
  }

  netbufferv4_register_range_reset_vallo16_reg_result result;
  try {
    iface_->register_range_reset_vallo16_reg(args.sess_hdl, args.dev_tgt, args.index, args.count);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_reset_vallo16_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_reset_vallo16_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_reset_vallo16_reg");
  }

  oprot->writeMessageBegin("register_range_reset_vallo16_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_reset_vallo16_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_all_vallo16_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_all_vallo16_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_all_vallo16_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_all_vallo16_reg");
  }

  netbufferv4_register_write_all_vallo16_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_all_vallo16_reg", bytes);
  }

  netbufferv4_register_write_all_vallo16_reg_result result;
  try {
    iface_->register_write_all_vallo16_reg(args.sess_hdl, args.dev_tgt, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_all_vallo16_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_all_vallo16_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_all_vallo16_reg");
  }

  oprot->writeMessageBegin("register_write_all_vallo16_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_all_vallo16_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_read_vallo16_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_read_vallo16_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_read_vallo16_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_read_vallo16_reg");
  }

  netbufferv4_register_range_read_vallo16_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_read_vallo16_reg", bytes);
  }

  netbufferv4_register_range_read_vallo16_reg_result result;
  try {
    iface_->register_range_read_vallo16_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.count, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_read_vallo16_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_read_vallo16_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_read_vallo16_reg");
  }

  oprot->writeMessageBegin("register_range_read_vallo16_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_read_vallo16_reg", bytes);
  }
}

void netbufferv4Processor::process_register_hw_sync_vallo3_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_hw_sync_vallo3_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_hw_sync_vallo3_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_hw_sync_vallo3_reg");
  }

  netbufferv4_register_hw_sync_vallo3_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_hw_sync_vallo3_reg", bytes);
  }

  netbufferv4_register_hw_sync_vallo3_reg_result result;
  try {
    iface_->register_hw_sync_vallo3_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_hw_sync_vallo3_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_hw_sync_vallo3_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_hw_sync_vallo3_reg");
  }

  oprot->writeMessageBegin("register_hw_sync_vallo3_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_hw_sync_vallo3_reg", bytes);
  }
}

void netbufferv4Processor::process_register_read_vallo3_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_read_vallo3_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_read_vallo3_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_read_vallo3_reg");
  }

  netbufferv4_register_read_vallo3_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_read_vallo3_reg", bytes);
  }

  netbufferv4_register_read_vallo3_reg_result result;
  try {
    iface_->register_read_vallo3_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_read_vallo3_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_read_vallo3_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_read_vallo3_reg");
  }

  oprot->writeMessageBegin("register_read_vallo3_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_read_vallo3_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_vallo3_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_vallo3_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_vallo3_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_vallo3_reg");
  }

  netbufferv4_register_write_vallo3_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_vallo3_reg", bytes);
  }

  netbufferv4_register_write_vallo3_reg_result result;
  try {
    iface_->register_write_vallo3_reg(args.sess_hdl, args.dev_tgt, args.index, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_vallo3_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_vallo3_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_vallo3_reg");
  }

  oprot->writeMessageBegin("register_write_vallo3_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_vallo3_reg", bytes);
  }
}

void netbufferv4Processor::process_register_reset_all_vallo3_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_reset_all_vallo3_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_reset_all_vallo3_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_reset_all_vallo3_reg");
  }

  netbufferv4_register_reset_all_vallo3_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_reset_all_vallo3_reg", bytes);
  }

  netbufferv4_register_reset_all_vallo3_reg_result result;
  try {
    iface_->register_reset_all_vallo3_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_reset_all_vallo3_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_reset_all_vallo3_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_reset_all_vallo3_reg");
  }

  oprot->writeMessageBegin("register_reset_all_vallo3_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_reset_all_vallo3_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_reset_vallo3_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_reset_vallo3_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_reset_vallo3_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_reset_vallo3_reg");
  }

  netbufferv4_register_range_reset_vallo3_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_reset_vallo3_reg", bytes);
  }

  netbufferv4_register_range_reset_vallo3_reg_result result;
  try {
    iface_->register_range_reset_vallo3_reg(args.sess_hdl, args.dev_tgt, args.index, args.count);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_reset_vallo3_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_reset_vallo3_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_reset_vallo3_reg");
  }

  oprot->writeMessageBegin("register_range_reset_vallo3_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_reset_vallo3_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_all_vallo3_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_all_vallo3_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_all_vallo3_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_all_vallo3_reg");
  }

  netbufferv4_register_write_all_vallo3_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_all_vallo3_reg", bytes);
  }

  netbufferv4_register_write_all_vallo3_reg_result result;
  try {
    iface_->register_write_all_vallo3_reg(args.sess_hdl, args.dev_tgt, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_all_vallo3_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_all_vallo3_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_all_vallo3_reg");
  }

  oprot->writeMessageBegin("register_write_all_vallo3_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_all_vallo3_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_read_vallo3_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_read_vallo3_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_read_vallo3_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_read_vallo3_reg");
  }

  netbufferv4_register_range_read_vallo3_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_read_vallo3_reg", bytes);
  }

  netbufferv4_register_range_read_vallo3_reg_result result;
  try {
    iface_->register_range_read_vallo3_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.count, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_read_vallo3_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_read_vallo3_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_read_vallo3_reg");
  }

  oprot->writeMessageBegin("register_range_read_vallo3_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_read_vallo3_reg", bytes);
  }
}

void netbufferv4Processor::process_register_hw_sync_valhi8_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_hw_sync_valhi8_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_hw_sync_valhi8_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_hw_sync_valhi8_reg");
  }

  netbufferv4_register_hw_sync_valhi8_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_hw_sync_valhi8_reg", bytes);
  }

  netbufferv4_register_hw_sync_valhi8_reg_result result;
  try {
    iface_->register_hw_sync_valhi8_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_hw_sync_valhi8_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_hw_sync_valhi8_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_hw_sync_valhi8_reg");
  }

  oprot->writeMessageBegin("register_hw_sync_valhi8_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_hw_sync_valhi8_reg", bytes);
  }
}

void netbufferv4Processor::process_register_read_valhi8_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_read_valhi8_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_read_valhi8_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_read_valhi8_reg");
  }

  netbufferv4_register_read_valhi8_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_read_valhi8_reg", bytes);
  }

  netbufferv4_register_read_valhi8_reg_result result;
  try {
    iface_->register_read_valhi8_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_read_valhi8_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_read_valhi8_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_read_valhi8_reg");
  }

  oprot->writeMessageBegin("register_read_valhi8_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_read_valhi8_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_valhi8_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_valhi8_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_valhi8_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_valhi8_reg");
  }

  netbufferv4_register_write_valhi8_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_valhi8_reg", bytes);
  }

  netbufferv4_register_write_valhi8_reg_result result;
  try {
    iface_->register_write_valhi8_reg(args.sess_hdl, args.dev_tgt, args.index, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_valhi8_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_valhi8_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_valhi8_reg");
  }

  oprot->writeMessageBegin("register_write_valhi8_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_valhi8_reg", bytes);
  }
}

void netbufferv4Processor::process_register_reset_all_valhi8_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_reset_all_valhi8_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_reset_all_valhi8_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_reset_all_valhi8_reg");
  }

  netbufferv4_register_reset_all_valhi8_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_reset_all_valhi8_reg", bytes);
  }

  netbufferv4_register_reset_all_valhi8_reg_result result;
  try {
    iface_->register_reset_all_valhi8_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_reset_all_valhi8_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_reset_all_valhi8_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_reset_all_valhi8_reg");
  }

  oprot->writeMessageBegin("register_reset_all_valhi8_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_reset_all_valhi8_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_reset_valhi8_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_reset_valhi8_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_reset_valhi8_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_reset_valhi8_reg");
  }

  netbufferv4_register_range_reset_valhi8_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_reset_valhi8_reg", bytes);
  }

  netbufferv4_register_range_reset_valhi8_reg_result result;
  try {
    iface_->register_range_reset_valhi8_reg(args.sess_hdl, args.dev_tgt, args.index, args.count);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_reset_valhi8_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_reset_valhi8_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_reset_valhi8_reg");
  }

  oprot->writeMessageBegin("register_range_reset_valhi8_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_reset_valhi8_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_all_valhi8_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_all_valhi8_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_all_valhi8_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_all_valhi8_reg");
  }

  netbufferv4_register_write_all_valhi8_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_all_valhi8_reg", bytes);
  }

  netbufferv4_register_write_all_valhi8_reg_result result;
  try {
    iface_->register_write_all_valhi8_reg(args.sess_hdl, args.dev_tgt, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_all_valhi8_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_all_valhi8_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_all_valhi8_reg");
  }

  oprot->writeMessageBegin("register_write_all_valhi8_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_all_valhi8_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_read_valhi8_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_read_valhi8_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_read_valhi8_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_read_valhi8_reg");
  }

  netbufferv4_register_range_read_valhi8_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_read_valhi8_reg", bytes);
  }

  netbufferv4_register_range_read_valhi8_reg_result result;
  try {
    iface_->register_range_read_valhi8_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.count, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_read_valhi8_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_read_valhi8_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_read_valhi8_reg");
  }

  oprot->writeMessageBegin("register_range_read_valhi8_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_read_valhi8_reg", bytes);
  }
}

void netbufferv4Processor::process_register_hw_sync_vallen_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_hw_sync_vallen_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_hw_sync_vallen_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_hw_sync_vallen_reg");
  }

  netbufferv4_register_hw_sync_vallen_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_hw_sync_vallen_reg", bytes);
  }

  netbufferv4_register_hw_sync_vallen_reg_result result;
  try {
    iface_->register_hw_sync_vallen_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_hw_sync_vallen_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_hw_sync_vallen_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_hw_sync_vallen_reg");
  }

  oprot->writeMessageBegin("register_hw_sync_vallen_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_hw_sync_vallen_reg", bytes);
  }
}

void netbufferv4Processor::process_register_read_vallen_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_read_vallen_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_read_vallen_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_read_vallen_reg");
  }

  netbufferv4_register_read_vallen_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_read_vallen_reg", bytes);
  }

  netbufferv4_register_read_vallen_reg_result result;
  try {
    iface_->register_read_vallen_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_read_vallen_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_read_vallen_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_read_vallen_reg");
  }

  oprot->writeMessageBegin("register_read_vallen_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_read_vallen_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_vallen_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_vallen_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_vallen_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_vallen_reg");
  }

  netbufferv4_register_write_vallen_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_vallen_reg", bytes);
  }

  netbufferv4_register_write_vallen_reg_result result;
  try {
    iface_->register_write_vallen_reg(args.sess_hdl, args.dev_tgt, args.index, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_vallen_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_vallen_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_vallen_reg");
  }

  oprot->writeMessageBegin("register_write_vallen_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_vallen_reg", bytes);
  }
}

void netbufferv4Processor::process_register_reset_all_vallen_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_reset_all_vallen_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_reset_all_vallen_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_reset_all_vallen_reg");
  }

  netbufferv4_register_reset_all_vallen_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_reset_all_vallen_reg", bytes);
  }

  netbufferv4_register_reset_all_vallen_reg_result result;
  try {
    iface_->register_reset_all_vallen_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_reset_all_vallen_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_reset_all_vallen_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_reset_all_vallen_reg");
  }

  oprot->writeMessageBegin("register_reset_all_vallen_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_reset_all_vallen_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_reset_vallen_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_reset_vallen_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_reset_vallen_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_reset_vallen_reg");
  }

  netbufferv4_register_range_reset_vallen_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_reset_vallen_reg", bytes);
  }

  netbufferv4_register_range_reset_vallen_reg_result result;
  try {
    iface_->register_range_reset_vallen_reg(args.sess_hdl, args.dev_tgt, args.index, args.count);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_reset_vallen_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_reset_vallen_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_reset_vallen_reg");
  }

  oprot->writeMessageBegin("register_range_reset_vallen_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_reset_vallen_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_all_vallen_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_all_vallen_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_all_vallen_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_all_vallen_reg");
  }

  netbufferv4_register_write_all_vallen_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_all_vallen_reg", bytes);
  }

  netbufferv4_register_write_all_vallen_reg_result result;
  try {
    iface_->register_write_all_vallen_reg(args.sess_hdl, args.dev_tgt, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_all_vallen_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_all_vallen_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_all_vallen_reg");
  }

  oprot->writeMessageBegin("register_write_all_vallen_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_all_vallen_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_read_vallen_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_read_vallen_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_read_vallen_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_read_vallen_reg");
  }

  netbufferv4_register_range_read_vallen_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_read_vallen_reg", bytes);
  }

  netbufferv4_register_range_read_vallen_reg_result result;
  try {
    iface_->register_range_read_vallen_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.count, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_read_vallen_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_read_vallen_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_read_vallen_reg");
  }

  oprot->writeMessageBegin("register_range_read_vallen_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_read_vallen_reg", bytes);
  }
}

void netbufferv4Processor::process_register_hw_sync_vallo1_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_hw_sync_vallo1_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_hw_sync_vallo1_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_hw_sync_vallo1_reg");
  }

  netbufferv4_register_hw_sync_vallo1_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_hw_sync_vallo1_reg", bytes);
  }

  netbufferv4_register_hw_sync_vallo1_reg_result result;
  try {
    iface_->register_hw_sync_vallo1_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_hw_sync_vallo1_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_hw_sync_vallo1_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_hw_sync_vallo1_reg");
  }

  oprot->writeMessageBegin("register_hw_sync_vallo1_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_hw_sync_vallo1_reg", bytes);
  }
}

void netbufferv4Processor::process_register_read_vallo1_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_read_vallo1_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_read_vallo1_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_read_vallo1_reg");
  }

  netbufferv4_register_read_vallo1_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_read_vallo1_reg", bytes);
  }

  netbufferv4_register_read_vallo1_reg_result result;
  try {
    iface_->register_read_vallo1_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_read_vallo1_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_read_vallo1_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_read_vallo1_reg");
  }

  oprot->writeMessageBegin("register_read_vallo1_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_read_vallo1_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_vallo1_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_vallo1_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_vallo1_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_vallo1_reg");
  }

  netbufferv4_register_write_vallo1_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_vallo1_reg", bytes);
  }

  netbufferv4_register_write_vallo1_reg_result result;
  try {
    iface_->register_write_vallo1_reg(args.sess_hdl, args.dev_tgt, args.index, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_vallo1_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_vallo1_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_vallo1_reg");
  }

  oprot->writeMessageBegin("register_write_vallo1_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_vallo1_reg", bytes);
  }
}

void netbufferv4Processor::process_register_reset_all_vallo1_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_reset_all_vallo1_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_reset_all_vallo1_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_reset_all_vallo1_reg");
  }

  netbufferv4_register_reset_all_vallo1_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_reset_all_vallo1_reg", bytes);
  }

  netbufferv4_register_reset_all_vallo1_reg_result result;
  try {
    iface_->register_reset_all_vallo1_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_reset_all_vallo1_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_reset_all_vallo1_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_reset_all_vallo1_reg");
  }

  oprot->writeMessageBegin("register_reset_all_vallo1_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_reset_all_vallo1_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_reset_vallo1_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_reset_vallo1_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_reset_vallo1_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_reset_vallo1_reg");
  }

  netbufferv4_register_range_reset_vallo1_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_reset_vallo1_reg", bytes);
  }

  netbufferv4_register_range_reset_vallo1_reg_result result;
  try {
    iface_->register_range_reset_vallo1_reg(args.sess_hdl, args.dev_tgt, args.index, args.count);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_reset_vallo1_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_reset_vallo1_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_reset_vallo1_reg");
  }

  oprot->writeMessageBegin("register_range_reset_vallo1_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_reset_vallo1_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_all_vallo1_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_all_vallo1_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_all_vallo1_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_all_vallo1_reg");
  }

  netbufferv4_register_write_all_vallo1_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_all_vallo1_reg", bytes);
  }

  netbufferv4_register_write_all_vallo1_reg_result result;
  try {
    iface_->register_write_all_vallo1_reg(args.sess_hdl, args.dev_tgt, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_all_vallo1_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_all_vallo1_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_all_vallo1_reg");
  }

  oprot->writeMessageBegin("register_write_all_vallo1_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_all_vallo1_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_read_vallo1_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_read_vallo1_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_read_vallo1_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_read_vallo1_reg");
  }

  netbufferv4_register_range_read_vallo1_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_read_vallo1_reg", bytes);
  }

  netbufferv4_register_range_read_vallo1_reg_result result;
  try {
    iface_->register_range_read_vallo1_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.count, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_read_vallo1_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_read_vallo1_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_read_vallo1_reg");
  }

  oprot->writeMessageBegin("register_range_read_vallo1_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_read_vallo1_reg", bytes);
  }
}

void netbufferv4Processor::process_register_hw_sync_savedseq_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_hw_sync_savedseq_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_hw_sync_savedseq_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_hw_sync_savedseq_reg");
  }

  netbufferv4_register_hw_sync_savedseq_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_hw_sync_savedseq_reg", bytes);
  }

  netbufferv4_register_hw_sync_savedseq_reg_result result;
  try {
    iface_->register_hw_sync_savedseq_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_hw_sync_savedseq_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_hw_sync_savedseq_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_hw_sync_savedseq_reg");
  }

  oprot->writeMessageBegin("register_hw_sync_savedseq_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_hw_sync_savedseq_reg", bytes);
  }
}

void netbufferv4Processor::process_register_read_savedseq_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_read_savedseq_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_read_savedseq_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_read_savedseq_reg");
  }

  netbufferv4_register_read_savedseq_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_read_savedseq_reg", bytes);
  }

  netbufferv4_register_read_savedseq_reg_result result;
  try {
    iface_->register_read_savedseq_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_read_savedseq_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_read_savedseq_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_read_savedseq_reg");
  }

  oprot->writeMessageBegin("register_read_savedseq_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_read_savedseq_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_savedseq_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_savedseq_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_savedseq_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_savedseq_reg");
  }

  netbufferv4_register_write_savedseq_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_savedseq_reg", bytes);
  }

  netbufferv4_register_write_savedseq_reg_result result;
  try {
    iface_->register_write_savedseq_reg(args.sess_hdl, args.dev_tgt, args.index, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_savedseq_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_savedseq_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_savedseq_reg");
  }

  oprot->writeMessageBegin("register_write_savedseq_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_savedseq_reg", bytes);
  }
}

void netbufferv4Processor::process_register_reset_all_savedseq_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_reset_all_savedseq_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_reset_all_savedseq_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_reset_all_savedseq_reg");
  }

  netbufferv4_register_reset_all_savedseq_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_reset_all_savedseq_reg", bytes);
  }

  netbufferv4_register_reset_all_savedseq_reg_result result;
  try {
    iface_->register_reset_all_savedseq_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_reset_all_savedseq_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_reset_all_savedseq_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_reset_all_savedseq_reg");
  }

  oprot->writeMessageBegin("register_reset_all_savedseq_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_reset_all_savedseq_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_reset_savedseq_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_reset_savedseq_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_reset_savedseq_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_reset_savedseq_reg");
  }

  netbufferv4_register_range_reset_savedseq_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_reset_savedseq_reg", bytes);
  }

  netbufferv4_register_range_reset_savedseq_reg_result result;
  try {
    iface_->register_range_reset_savedseq_reg(args.sess_hdl, args.dev_tgt, args.index, args.count);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_reset_savedseq_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_reset_savedseq_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_reset_savedseq_reg");
  }

  oprot->writeMessageBegin("register_range_reset_savedseq_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_reset_savedseq_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_all_savedseq_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_all_savedseq_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_all_savedseq_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_all_savedseq_reg");
  }

  netbufferv4_register_write_all_savedseq_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_all_savedseq_reg", bytes);
  }

  netbufferv4_register_write_all_savedseq_reg_result result;
  try {
    iface_->register_write_all_savedseq_reg(args.sess_hdl, args.dev_tgt, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_all_savedseq_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_all_savedseq_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_all_savedseq_reg");
  }

  oprot->writeMessageBegin("register_write_all_savedseq_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_all_savedseq_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_read_savedseq_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_read_savedseq_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_read_savedseq_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_read_savedseq_reg");
  }

  netbufferv4_register_range_read_savedseq_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_read_savedseq_reg", bytes);
  }

  netbufferv4_register_range_read_savedseq_reg_result result;
  try {
    iface_->register_range_read_savedseq_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.count, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_read_savedseq_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_read_savedseq_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_read_savedseq_reg");
  }

  oprot->writeMessageBegin("register_range_read_savedseq_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_read_savedseq_reg", bytes);
  }
}

void netbufferv4Processor::process_register_hw_sync_valhi15_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_hw_sync_valhi15_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_hw_sync_valhi15_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_hw_sync_valhi15_reg");
  }

  netbufferv4_register_hw_sync_valhi15_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_hw_sync_valhi15_reg", bytes);
  }

  netbufferv4_register_hw_sync_valhi15_reg_result result;
  try {
    iface_->register_hw_sync_valhi15_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_hw_sync_valhi15_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_hw_sync_valhi15_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_hw_sync_valhi15_reg");
  }

  oprot->writeMessageBegin("register_hw_sync_valhi15_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_hw_sync_valhi15_reg", bytes);
  }
}

void netbufferv4Processor::process_register_read_valhi15_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_read_valhi15_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_read_valhi15_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_read_valhi15_reg");
  }

  netbufferv4_register_read_valhi15_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_read_valhi15_reg", bytes);
  }

  netbufferv4_register_read_valhi15_reg_result result;
  try {
    iface_->register_read_valhi15_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_read_valhi15_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_read_valhi15_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_read_valhi15_reg");
  }

  oprot->writeMessageBegin("register_read_valhi15_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_read_valhi15_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_valhi15_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_valhi15_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_valhi15_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_valhi15_reg");
  }

  netbufferv4_register_write_valhi15_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_valhi15_reg", bytes);
  }

  netbufferv4_register_write_valhi15_reg_result result;
  try {
    iface_->register_write_valhi15_reg(args.sess_hdl, args.dev_tgt, args.index, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_valhi15_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_valhi15_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_valhi15_reg");
  }

  oprot->writeMessageBegin("register_write_valhi15_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_valhi15_reg", bytes);
  }
}

void netbufferv4Processor::process_register_reset_all_valhi15_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_reset_all_valhi15_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_reset_all_valhi15_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_reset_all_valhi15_reg");
  }

  netbufferv4_register_reset_all_valhi15_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_reset_all_valhi15_reg", bytes);
  }

  netbufferv4_register_reset_all_valhi15_reg_result result;
  try {
    iface_->register_reset_all_valhi15_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_reset_all_valhi15_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_reset_all_valhi15_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_reset_all_valhi15_reg");
  }

  oprot->writeMessageBegin("register_reset_all_valhi15_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_reset_all_valhi15_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_reset_valhi15_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_reset_valhi15_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_reset_valhi15_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_reset_valhi15_reg");
  }

  netbufferv4_register_range_reset_valhi15_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_reset_valhi15_reg", bytes);
  }

  netbufferv4_register_range_reset_valhi15_reg_result result;
  try {
    iface_->register_range_reset_valhi15_reg(args.sess_hdl, args.dev_tgt, args.index, args.count);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_reset_valhi15_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_reset_valhi15_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_reset_valhi15_reg");
  }

  oprot->writeMessageBegin("register_range_reset_valhi15_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_reset_valhi15_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_all_valhi15_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_all_valhi15_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_all_valhi15_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_all_valhi15_reg");
  }

  netbufferv4_register_write_all_valhi15_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_all_valhi15_reg", bytes);
  }

  netbufferv4_register_write_all_valhi15_reg_result result;
  try {
    iface_->register_write_all_valhi15_reg(args.sess_hdl, args.dev_tgt, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_all_valhi15_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_all_valhi15_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_all_valhi15_reg");
  }

  oprot->writeMessageBegin("register_write_all_valhi15_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_all_valhi15_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_read_valhi15_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_read_valhi15_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_read_valhi15_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_read_valhi15_reg");
  }

  netbufferv4_register_range_read_valhi15_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_read_valhi15_reg", bytes);
  }

  netbufferv4_register_range_read_valhi15_reg_result result;
  try {
    iface_->register_range_read_valhi15_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.count, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_read_valhi15_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_read_valhi15_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_read_valhi15_reg");
  }

  oprot->writeMessageBegin("register_range_read_valhi15_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_read_valhi15_reg", bytes);
  }
}

void netbufferv4Processor::process_register_hw_sync_case1_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_hw_sync_case1_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_hw_sync_case1_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_hw_sync_case1_reg");
  }

  netbufferv4_register_hw_sync_case1_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_hw_sync_case1_reg", bytes);
  }

  netbufferv4_register_hw_sync_case1_reg_result result;
  try {
    iface_->register_hw_sync_case1_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_hw_sync_case1_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_hw_sync_case1_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_hw_sync_case1_reg");
  }

  oprot->writeMessageBegin("register_hw_sync_case1_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_hw_sync_case1_reg", bytes);
  }
}

void netbufferv4Processor::process_register_read_case1_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_read_case1_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_read_case1_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_read_case1_reg");
  }

  netbufferv4_register_read_case1_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_read_case1_reg", bytes);
  }

  netbufferv4_register_read_case1_reg_result result;
  try {
    iface_->register_read_case1_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_read_case1_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_read_case1_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_read_case1_reg");
  }

  oprot->writeMessageBegin("register_read_case1_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_read_case1_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_case1_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_case1_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_case1_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_case1_reg");
  }

  netbufferv4_register_write_case1_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_case1_reg", bytes);
  }

  netbufferv4_register_write_case1_reg_result result;
  try {
    iface_->register_write_case1_reg(args.sess_hdl, args.dev_tgt, args.index, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_case1_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_case1_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_case1_reg");
  }

  oprot->writeMessageBegin("register_write_case1_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_case1_reg", bytes);
  }
}

void netbufferv4Processor::process_register_reset_all_case1_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_reset_all_case1_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_reset_all_case1_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_reset_all_case1_reg");
  }

  netbufferv4_register_reset_all_case1_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_reset_all_case1_reg", bytes);
  }

  netbufferv4_register_reset_all_case1_reg_result result;
  try {
    iface_->register_reset_all_case1_reg(args.sess_hdl, args.dev_tgt);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_reset_all_case1_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_reset_all_case1_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_reset_all_case1_reg");
  }

  oprot->writeMessageBegin("register_reset_all_case1_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_reset_all_case1_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_reset_case1_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_reset_case1_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_reset_case1_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_reset_case1_reg");
  }

  netbufferv4_register_range_reset_case1_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_reset_case1_reg", bytes);
  }

  netbufferv4_register_range_reset_case1_reg_result result;
  try {
    iface_->register_range_reset_case1_reg(args.sess_hdl, args.dev_tgt, args.index, args.count);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_reset_case1_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_reset_case1_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_reset_case1_reg");
  }

  oprot->writeMessageBegin("register_range_reset_case1_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_reset_case1_reg", bytes);
  }
}

void netbufferv4Processor::process_register_write_all_case1_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_write_all_case1_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_write_all_case1_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_write_all_case1_reg");
  }

  netbufferv4_register_write_all_case1_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_write_all_case1_reg", bytes);
  }

  netbufferv4_register_write_all_case1_reg_result result;
  try {
    iface_->register_write_all_case1_reg(args.sess_hdl, args.dev_tgt, args.register_value);
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_write_all_case1_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_write_all_case1_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_write_all_case1_reg");
  }

  oprot->writeMessageBegin("register_write_all_case1_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_write_all_case1_reg", bytes);
  }
}

void netbufferv4Processor::process_register_range_read_case1_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.register_range_read_case1_reg", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.register_range_read_case1_reg");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.register_range_read_case1_reg");
  }

  netbufferv4_register_range_read_case1_reg_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.register_range_read_case1_reg", bytes);
  }

  netbufferv4_register_range_read_case1_reg_result result;
  try {
    iface_->register_range_read_case1_reg(result.success, args.sess_hdl, args.dev_tgt, args.index, args.count, args.flags);
    result.__isset.success = true;
  } catch (InvalidRegisterOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.register_range_read_case1_reg");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("register_range_read_case1_reg", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.register_range_read_case1_reg");
  }

  oprot->writeMessageBegin("register_range_read_case1_reg", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.register_range_read_case1_reg", bytes);
  }
}

::boost::shared_ptr< ::apache::thrift::TProcessor > netbufferv4ProcessorFactory::getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) {
  ::apache::thrift::ReleaseHandler< netbufferv4IfFactory > cleanup(handlerFactory_);
  ::boost::shared_ptr< netbufferv4If > handler(handlerFactory_->getHandler(connInfo), cleanup);
  ::boost::shared_ptr< ::apache::thrift::TProcessor > processor(new netbufferv4Processor(handler));
  return processor;
}
} // namespace

