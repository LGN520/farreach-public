/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef p4_pd_rpc_TYPES_H
#define p4_pd_rpc_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "res_types.h"


namespace p4_pd_rpc {

struct netbufferv4_lpf_type {
  enum type {
    TYPE_RATE = 0,
    TYPE_SAMPLE = 1
  };
};

extern const std::map<int, const char*> _netbufferv4_lpf_type_VALUES_TO_NAMES;

struct netbufferv4_idle_time_mode {
  enum type {
    POLL_MODE = 0,
    NOTIFY_MODE = 1,
    INVALID_MODE = 2
  };
};

extern const std::map<int, const char*> _netbufferv4_idle_time_mode_VALUES_TO_NAMES;

struct netbufferv4_idle_time_hit_state {
  enum type {
    ENTRY_IDLE = 0,
    ENTRY_ACTIVE = 1
  };
};

extern const std::map<int, const char*> _netbufferv4_idle_time_hit_state_VALUES_TO_NAMES;

struct netbufferv4_grp_mbr_state {
  enum type {
    MBR_ACTIVE = 0,
    MBR_INACTIVE = 1
  };
};

extern const std::map<int, const char*> _netbufferv4_grp_mbr_state_VALUES_TO_NAMES;

struct tbl_property_t {
  enum type {
    TBL_PROP_TBL_ENTRY_SCOPE = 1,
    TBL_PROP_TERN_TABLE_ENTRY_PLACEMENT = 2,
    TBL_PROP_DUPLICATE_ENTRY_CHECK = 3,
    TBL_PROP_IDLETIME_REPEATED_NOTIFICATION = 4
  };
};

extern const std::map<int, const char*> _tbl_property_t_VALUES_TO_NAMES;

struct tbl_property_value_t {
  enum type {
    ENTRY_SCOPE_ALL_PIPELINES = 0,
    ENTRY_SCOPE_SINGLE_PIPELINE = 1,
    ENTRY_SCOPE_USER_DEFINED = 2,
    TERN_ENTRY_PLACEMENT_DRV_MANAGED = 0,
    TERN_ENTRY_PLACEMENT_APP_MANAGED = 1,
    DUPLICATE_ENTRY_CHECK_DISABLE = 0,
    DUPLICATE_ENTRY_CHECK_ENABLE = 1,
    IDLETIME_REPEATED_NOTIFICATION_DISABLE = 0,
    IDLETIME_REPEATED_NOTIFICATION_ENABLE = 1
  };
};

extern const std::map<int, const char*> _tbl_property_value_t_VALUES_TO_NAMES;

struct pvs_gress_t {
  enum type {
    PVS_GRESS_INGRESS = 0,
    PVS_GRESS_EGRESS = 1,
    PVS_GRESS_ALL = 255
  };
};

extern const std::map<int, const char*> _pvs_gress_t_VALUES_TO_NAMES;

struct pvs_property_t {
  enum type {
    PVS_PROP_NONE = 0,
    PVS_GRESS_SCOPE = 1,
    PVS_PIPE_SCOPE = 2,
    PVS_PARSER_SCOPE = 3
  };
};

extern const std::map<int, const char*> _pvs_property_t_VALUES_TO_NAMES;

struct pvs_property_value_t {
  enum type {
    PVS_SCOPE_ALL_GRESS = 0,
    PVS_SCOPE_SINGLE_GRESS = 1,
    PVS_SCOPE_ALL_PIPELINES = 0,
    PVS_SCOPE_SINGLE_PIPELINE = 1,
    PVS_SCOPE_ALL_PARSERS = 0,
    PVS_SCOPE_SINGLE_PARSER = 1
  };
};

extern const std::map<int, const char*> _pvs_property_value_t_VALUES_TO_NAMES;

struct tbl_dbg_counter_type_t {
  enum type {
    TBL_DBG_CNTR_DISABLED = 0,
    TBL_DBG_CNTR_LOG_TBL_MISS = 1,
    TBL_DBG_CNTR_LOG_TBL_HIT = 2,
    TBL_DBG_CNTR_GW_TBL_MISS = 3,
    TBL_DBG_CNTR_GW_TBL_HIT = 4,
    TBL_DBG_CNTR_GW_TBL_INHIBIT = 5,
    TBL_DBG_CNTR_MAX = 6
  };
};

extern const std::map<int, const char*> _tbl_dbg_counter_type_t_VALUES_TO_NAMES;

struct netbufferv4_input_field_attr_type_t {
  enum type {
    INPUT_FIELD_ATTR_TYPE_MASK = 0
  };
};

extern const std::map<int, const char*> _netbufferv4_input_field_attr_type_t_VALUES_TO_NAMES;

struct netbufferv4_input_field_attr_value_mask_t {
  enum type {
    INPUT_FIELD_EXCLUDED = 0,
    INPUT_FIELD_INCLUDED = 1
  };
};

extern const std::map<int, const char*> _netbufferv4_input_field_attr_value_mask_t_VALUES_TO_NAMES;

typedef int32_t EntryHandle_t;

typedef int32_t MemberHandle_t;

typedef int32_t GroupHandle_t;

typedef std::string MacAddr_t;

typedef std::string IPv6_t;

typedef int32_t SnapshotHandle_t;

typedef int32_t PvsHandle_t;

class netbufferv4_counter_value_t;

class netbufferv4_packets_meter_spec_t;

class netbufferv4_bytes_meter_spec_t;

class netbufferv4_lpf_spec_t;

class netbufferv4_wred_spec_t;

class netbufferv4_idle_time_params_t;

class netbufferv4_idle_tmo_expired_t;

class netbufferv4_sel_update_t;

class tbl_property_value_args_t;

class PVSSpec_t;

class TblCntrInfo_t;

class TblDbgStageInfo_t;

class netbufferv4_counter_flags_t;

class netbufferv4_register_flags_t;

class netbufferv4_snapshot_trig_spec_t;

class netbufferv4_snapshot_tbl_data_t;

class netbufferv4_access_cache_frequency_tbl_match_spec_t;

class netbufferv4_access_case1_tbl_match_spec_t;

class netbufferv4_access_cm1_tbl_match_spec_t;

class netbufferv4_access_cm2_tbl_match_spec_t;

class netbufferv4_access_cm3_tbl_match_spec_t;

class netbufferv4_access_cm4_tbl_match_spec_t;

class netbufferv4_access_deleted_tbl_match_spec_t;

class netbufferv4_access_latest_tbl_match_spec_t;

class netbufferv4_access_savedseq_tbl_match_spec_t;

class netbufferv4_access_seq_tbl_match_spec_t;

class netbufferv4_access_validvalue_tbl_match_spec_t;

class netbufferv4_add_and_remove_value_header_tbl_match_spec_t;

class netbufferv4_cache_lookup_tbl_match_spec_t;

class netbufferv4_drop_tbl_match_spec_t;

class netbufferv4_eg_port_forward_tbl_match_spec_t;

class netbufferv4_hash_for_cm1_tbl_match_spec_t;

class netbufferv4_hash_for_cm2_tbl_match_spec_t;

class netbufferv4_hash_for_cm3_tbl_match_spec_t;

class netbufferv4_hash_for_cm4_tbl_match_spec_t;

class netbufferv4_hash_for_partition_tbl_match_spec_t;

class netbufferv4_hash_for_seq_tbl_match_spec_t;

class netbufferv4_hash_partition_tbl_match_spec_t;

class netbufferv4_ig_port_forward_tbl_match_spec_t;

class netbufferv4_ipv4_forward_tbl_match_spec_t;

class netbufferv4_is_hot_tbl_match_spec_t;

class netbufferv4_lastclone_lastscansplit_tbl_match_spec_t;

class netbufferv4_need_recirculate_tbl_match_spec_t;

class netbufferv4_prepare_for_cachehit_tbl_match_spec_t;

class netbufferv4_recirculate_tbl_match_spec_t;

class netbufferv4_sample_tbl_match_spec_t;

class netbufferv4_save_client_udpport_tbl_match_spec_t;

class netbufferv4_snapshot_flag_tbl_match_spec_t;

class netbufferv4_update_ipmac_srcport_tbl_match_spec_t;

class netbufferv4_update_pktlen_tbl_match_spec_t;

class netbufferv4_update_valhi10_tbl_match_spec_t;

class netbufferv4_update_valhi11_tbl_match_spec_t;

class netbufferv4_update_valhi12_tbl_match_spec_t;

class netbufferv4_update_valhi13_tbl_match_spec_t;

class netbufferv4_update_valhi14_tbl_match_spec_t;

class netbufferv4_update_valhi15_tbl_match_spec_t;

class netbufferv4_update_valhi16_tbl_match_spec_t;

class netbufferv4_update_valhi1_tbl_match_spec_t;

class netbufferv4_update_valhi2_tbl_match_spec_t;

class netbufferv4_update_valhi3_tbl_match_spec_t;

class netbufferv4_update_valhi4_tbl_match_spec_t;

class netbufferv4_update_valhi5_tbl_match_spec_t;

class netbufferv4_update_valhi6_tbl_match_spec_t;

class netbufferv4_update_valhi7_tbl_match_spec_t;

class netbufferv4_update_valhi8_tbl_match_spec_t;

class netbufferv4_update_valhi9_tbl_match_spec_t;

class netbufferv4_update_vallen_tbl_match_spec_t;

class netbufferv4_update_vallo10_tbl_match_spec_t;

class netbufferv4_update_vallo11_tbl_match_spec_t;

class netbufferv4_update_vallo12_tbl_match_spec_t;

class netbufferv4_update_vallo13_tbl_match_spec_t;

class netbufferv4_update_vallo14_tbl_match_spec_t;

class netbufferv4_update_vallo15_tbl_match_spec_t;

class netbufferv4_update_vallo16_tbl_match_spec_t;

class netbufferv4_update_vallo1_tbl_match_spec_t;

class netbufferv4_update_vallo2_tbl_match_spec_t;

class netbufferv4_update_vallo3_tbl_match_spec_t;

class netbufferv4_update_vallo4_tbl_match_spec_t;

class netbufferv4_update_vallo5_tbl_match_spec_t;

class netbufferv4_update_vallo6_tbl_match_spec_t;

class netbufferv4_update_vallo7_tbl_match_spec_t;

class netbufferv4_update_vallo8_tbl_match_spec_t;

class netbufferv4_update_vallo9_tbl_match_spec_t;

class netbufferv4_cached_action_action_spec_t;

class netbufferv4_update_getreq_inswitch_to_getres_by_mirroring_action_spec_t;

class netbufferv4_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t;

class netbufferv4_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t;

class netbufferv4_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t;

class netbufferv4_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t;

class netbufferv4_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_action_spec_t;

class netbufferv4_update_putreq_inswitch_to_putres_by_mirroring_action_spec_t;

class netbufferv4_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t;

class netbufferv4_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t;

class netbufferv4_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_action_spec_t;

class netbufferv4_update_delreq_inswitch_to_delres_by_mirroring_action_spec_t;

class netbufferv4_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t;

class netbufferv4_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t;

class netbufferv4_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_action_spec_t;

class netbufferv4_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_action_spec_t;

class netbufferv4_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_action_spec_t;

class netbufferv4_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_action_spec_t;

class netbufferv4_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_action_spec_t;

class netbufferv4_hash_partition_action_spec_t;

class netbufferv4_forward_normal_response_action_spec_t;

class netbufferv4_forward_special_get_response_action_spec_t;

class netbufferv4_set_client_sid_action_spec_t;

class netbufferv4_recirculate_pkt_action_spec_t;

class netbufferv4_set_hot_threshold_action_spec_t;

class netbufferv4_update_ipmac_srcport_server2client_action_spec_t;

class netbufferv4_update_ipmac_srcport_switch2switchos_action_spec_t;

class netbufferv4_update_dstipmac_client2server_action_spec_t;

class netbufferv4_update_pktlen_action_spec_t;

class netbufferv4_action_specs_t;

class netbufferv4_action_desc_t;

class netbufferv4_access_cache_frequency_tbl_entry_desc_t;

class netbufferv4_access_case1_tbl_entry_desc_t;

class netbufferv4_access_cm1_tbl_entry_desc_t;

class netbufferv4_access_cm2_tbl_entry_desc_t;

class netbufferv4_access_cm3_tbl_entry_desc_t;

class netbufferv4_access_cm4_tbl_entry_desc_t;

class netbufferv4_access_deleted_tbl_entry_desc_t;

class netbufferv4_access_latest_tbl_entry_desc_t;

class netbufferv4_access_savedseq_tbl_entry_desc_t;

class netbufferv4_access_seq_tbl_entry_desc_t;

class netbufferv4_access_validvalue_tbl_entry_desc_t;

class netbufferv4_add_and_remove_value_header_tbl_entry_desc_t;

class netbufferv4_cache_lookup_tbl_entry_desc_t;

class netbufferv4_drop_tbl_entry_desc_t;

class netbufferv4_eg_port_forward_tbl_entry_desc_t;

class netbufferv4_hash_for_cm1_tbl_entry_desc_t;

class netbufferv4_hash_for_cm2_tbl_entry_desc_t;

class netbufferv4_hash_for_cm3_tbl_entry_desc_t;

class netbufferv4_hash_for_cm4_tbl_entry_desc_t;

class netbufferv4_hash_for_partition_tbl_entry_desc_t;

class netbufferv4_hash_for_seq_tbl_entry_desc_t;

class netbufferv4_hash_partition_tbl_entry_desc_t;

class netbufferv4_ig_port_forward_tbl_entry_desc_t;

class netbufferv4_ipv4_forward_tbl_entry_desc_t;

class netbufferv4_is_hot_tbl_entry_desc_t;

class netbufferv4_lastclone_lastscansplit_tbl_entry_desc_t;

class netbufferv4_need_recirculate_tbl_entry_desc_t;

class netbufferv4_prepare_for_cachehit_tbl_entry_desc_t;

class netbufferv4_recirculate_tbl_entry_desc_t;

class netbufferv4_sample_tbl_entry_desc_t;

class netbufferv4_save_client_udpport_tbl_entry_desc_t;

class netbufferv4_set_hot_threshold_tbl_entry_desc_t;

class netbufferv4_snapshot_flag_tbl_entry_desc_t;

class netbufferv4_update_ipmac_srcport_tbl_entry_desc_t;

class netbufferv4_update_pktlen_tbl_entry_desc_t;

class netbufferv4_update_valhi10_tbl_entry_desc_t;

class netbufferv4_update_valhi11_tbl_entry_desc_t;

class netbufferv4_update_valhi12_tbl_entry_desc_t;

class netbufferv4_update_valhi13_tbl_entry_desc_t;

class netbufferv4_update_valhi14_tbl_entry_desc_t;

class netbufferv4_update_valhi15_tbl_entry_desc_t;

class netbufferv4_update_valhi16_tbl_entry_desc_t;

class netbufferv4_update_valhi1_tbl_entry_desc_t;

class netbufferv4_update_valhi2_tbl_entry_desc_t;

class netbufferv4_update_valhi3_tbl_entry_desc_t;

class netbufferv4_update_valhi4_tbl_entry_desc_t;

class netbufferv4_update_valhi5_tbl_entry_desc_t;

class netbufferv4_update_valhi6_tbl_entry_desc_t;

class netbufferv4_update_valhi7_tbl_entry_desc_t;

class netbufferv4_update_valhi8_tbl_entry_desc_t;

class netbufferv4_update_valhi9_tbl_entry_desc_t;

class netbufferv4_update_vallen_tbl_entry_desc_t;

class netbufferv4_update_vallo10_tbl_entry_desc_t;

class netbufferv4_update_vallo11_tbl_entry_desc_t;

class netbufferv4_update_vallo12_tbl_entry_desc_t;

class netbufferv4_update_vallo13_tbl_entry_desc_t;

class netbufferv4_update_vallo14_tbl_entry_desc_t;

class netbufferv4_update_vallo15_tbl_entry_desc_t;

class netbufferv4_update_vallo16_tbl_entry_desc_t;

class netbufferv4_update_vallo1_tbl_entry_desc_t;

class netbufferv4_update_vallo2_tbl_entry_desc_t;

class netbufferv4_update_vallo3_tbl_entry_desc_t;

class netbufferv4_update_vallo4_tbl_entry_desc_t;

class netbufferv4_update_vallo5_tbl_entry_desc_t;

class netbufferv4_update_vallo6_tbl_entry_desc_t;

class netbufferv4_update_vallo7_tbl_entry_desc_t;

class netbufferv4_update_vallo8_tbl_entry_desc_t;

class netbufferv4_update_vallo9_tbl_entry_desc_t;

class InvalidTableOperation;

class InvalidLearnOperation;

class InvalidDbgOperation;

class InvalidSnapshotOperation;

class InvalidCounterOperation;

class InvalidRegisterOperation;

class InvalidMeterOperation;

class InvalidLPFOperation;

class InvalidWREDOperation;


class netbufferv4_counter_value_t {
 public:

  static const char* ascii_fingerprint; // = "F33135321253DAEB67B0E79E416CA831";
  static const uint8_t binary_fingerprint[16]; // = {0xF3,0x31,0x35,0x32,0x12,0x53,0xDA,0xEB,0x67,0xB0,0xE7,0x9E,0x41,0x6C,0xA8,0x31};

  netbufferv4_counter_value_t(const netbufferv4_counter_value_t&);
  netbufferv4_counter_value_t& operator=(const netbufferv4_counter_value_t&);
  netbufferv4_counter_value_t() : packets(0), bytes(0) {
  }

  virtual ~netbufferv4_counter_value_t() throw();
  int64_t packets;
  int64_t bytes;

  void __set_packets(const int64_t val);

  void __set_bytes(const int64_t val);

  bool operator == (const netbufferv4_counter_value_t & rhs) const
  {
    if (!(packets == rhs.packets))
      return false;
    if (!(bytes == rhs.bytes))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_counter_value_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_counter_value_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_counter_value_t& obj);
};

void swap(netbufferv4_counter_value_t &a, netbufferv4_counter_value_t &b);

typedef struct _netbufferv4_packets_meter_spec_t__isset {
  _netbufferv4_packets_meter_spec_t__isset() : is_set(true) {}
  bool is_set :1;
} _netbufferv4_packets_meter_spec_t__isset;

class netbufferv4_packets_meter_spec_t {
 public:

  static const char* ascii_fingerprint; // = "BBB56A17251091FEA11CE564F9CD9BB9";
  static const uint8_t binary_fingerprint[16]; // = {0xBB,0xB5,0x6A,0x17,0x25,0x10,0x91,0xFE,0xA1,0x1C,0xE5,0x64,0xF9,0xCD,0x9B,0xB9};

  netbufferv4_packets_meter_spec_t(const netbufferv4_packets_meter_spec_t&);
  netbufferv4_packets_meter_spec_t& operator=(const netbufferv4_packets_meter_spec_t&);
  netbufferv4_packets_meter_spec_t() : cir_pps(0), cburst_pkts(0), pir_pps(0), pburst_pkts(0), color_aware(0), is_set(true) {
  }

  virtual ~netbufferv4_packets_meter_spec_t() throw();
  int64_t cir_pps;
  int64_t cburst_pkts;
  int64_t pir_pps;
  int64_t pburst_pkts;
  bool color_aware;
  bool is_set;

  _netbufferv4_packets_meter_spec_t__isset __isset;

  void __set_cir_pps(const int64_t val);

  void __set_cburst_pkts(const int64_t val);

  void __set_pir_pps(const int64_t val);

  void __set_pburst_pkts(const int64_t val);

  void __set_color_aware(const bool val);

  void __set_is_set(const bool val);

  bool operator == (const netbufferv4_packets_meter_spec_t & rhs) const
  {
    if (!(cir_pps == rhs.cir_pps))
      return false;
    if (!(cburst_pkts == rhs.cburst_pkts))
      return false;
    if (!(pir_pps == rhs.pir_pps))
      return false;
    if (!(pburst_pkts == rhs.pburst_pkts))
      return false;
    if (!(color_aware == rhs.color_aware))
      return false;
    if (__isset.is_set != rhs.__isset.is_set)
      return false;
    else if (__isset.is_set && !(is_set == rhs.is_set))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_packets_meter_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_packets_meter_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_packets_meter_spec_t& obj);
};

void swap(netbufferv4_packets_meter_spec_t &a, netbufferv4_packets_meter_spec_t &b);

typedef struct _netbufferv4_bytes_meter_spec_t__isset {
  _netbufferv4_bytes_meter_spec_t__isset() : is_set(true) {}
  bool is_set :1;
} _netbufferv4_bytes_meter_spec_t__isset;

class netbufferv4_bytes_meter_spec_t {
 public:

  static const char* ascii_fingerprint; // = "BBB56A17251091FEA11CE564F9CD9BB9";
  static const uint8_t binary_fingerprint[16]; // = {0xBB,0xB5,0x6A,0x17,0x25,0x10,0x91,0xFE,0xA1,0x1C,0xE5,0x64,0xF9,0xCD,0x9B,0xB9};

  netbufferv4_bytes_meter_spec_t(const netbufferv4_bytes_meter_spec_t&);
  netbufferv4_bytes_meter_spec_t& operator=(const netbufferv4_bytes_meter_spec_t&);
  netbufferv4_bytes_meter_spec_t() : cir_kbps(0), cburst_kbits(0), pir_kbps(0), pburst_kbits(0), color_aware(0), is_set(true) {
  }

  virtual ~netbufferv4_bytes_meter_spec_t() throw();
  int64_t cir_kbps;
  int64_t cburst_kbits;
  int64_t pir_kbps;
  int64_t pburst_kbits;
  bool color_aware;
  bool is_set;

  _netbufferv4_bytes_meter_spec_t__isset __isset;

  void __set_cir_kbps(const int64_t val);

  void __set_cburst_kbits(const int64_t val);

  void __set_pir_kbps(const int64_t val);

  void __set_pburst_kbits(const int64_t val);

  void __set_color_aware(const bool val);

  void __set_is_set(const bool val);

  bool operator == (const netbufferv4_bytes_meter_spec_t & rhs) const
  {
    if (!(cir_kbps == rhs.cir_kbps))
      return false;
    if (!(cburst_kbits == rhs.cburst_kbits))
      return false;
    if (!(pir_kbps == rhs.pir_kbps))
      return false;
    if (!(pburst_kbits == rhs.pburst_kbits))
      return false;
    if (!(color_aware == rhs.color_aware))
      return false;
    if (__isset.is_set != rhs.__isset.is_set)
      return false;
    else if (__isset.is_set && !(is_set == rhs.is_set))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_bytes_meter_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_bytes_meter_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_bytes_meter_spec_t& obj);
};

void swap(netbufferv4_bytes_meter_spec_t &a, netbufferv4_bytes_meter_spec_t &b);

typedef struct _netbufferv4_lpf_spec_t__isset {
  _netbufferv4_lpf_spec_t__isset() : is_set(true) {}
  bool is_set :1;
} _netbufferv4_lpf_spec_t__isset;

class netbufferv4_lpf_spec_t {
 public:

  static const char* ascii_fingerprint; // = "E8AF5BCC17C96A248B9A03E9DB6C9AC9";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0xAF,0x5B,0xCC,0x17,0xC9,0x6A,0x24,0x8B,0x9A,0x03,0xE9,0xDB,0x6C,0x9A,0xC9};

  netbufferv4_lpf_spec_t(const netbufferv4_lpf_spec_t&);
  netbufferv4_lpf_spec_t& operator=(const netbufferv4_lpf_spec_t&);
  netbufferv4_lpf_spec_t() : gain_decay_separate_time_constant(0), gain_time_constant(0), decay_time_constant(0), time_constant(0), output_scale_down_factor(0), lpf_type((netbufferv4_lpf_type::type)0), is_set(true) {
  }

  virtual ~netbufferv4_lpf_spec_t() throw();
  bool gain_decay_separate_time_constant;
  double gain_time_constant;
  double decay_time_constant;
  double time_constant;
  int32_t output_scale_down_factor;
  netbufferv4_lpf_type::type lpf_type;
  bool is_set;

  _netbufferv4_lpf_spec_t__isset __isset;

  void __set_gain_decay_separate_time_constant(const bool val);

  void __set_gain_time_constant(const double val);

  void __set_decay_time_constant(const double val);

  void __set_time_constant(const double val);

  void __set_output_scale_down_factor(const int32_t val);

  void __set_lpf_type(const netbufferv4_lpf_type::type val);

  void __set_is_set(const bool val);

  bool operator == (const netbufferv4_lpf_spec_t & rhs) const
  {
    if (!(gain_decay_separate_time_constant == rhs.gain_decay_separate_time_constant))
      return false;
    if (!(gain_time_constant == rhs.gain_time_constant))
      return false;
    if (!(decay_time_constant == rhs.decay_time_constant))
      return false;
    if (!(time_constant == rhs.time_constant))
      return false;
    if (!(output_scale_down_factor == rhs.output_scale_down_factor))
      return false;
    if (!(lpf_type == rhs.lpf_type))
      return false;
    if (__isset.is_set != rhs.__isset.is_set)
      return false;
    else if (__isset.is_set && !(is_set == rhs.is_set))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_lpf_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_lpf_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_lpf_spec_t& obj);
};

void swap(netbufferv4_lpf_spec_t &a, netbufferv4_lpf_spec_t &b);

typedef struct _netbufferv4_wred_spec_t__isset {
  _netbufferv4_wred_spec_t__isset() : is_set(true) {}
  bool is_set :1;
} _netbufferv4_wred_spec_t__isset;

class netbufferv4_wred_spec_t {
 public:

  static const char* ascii_fingerprint; // = "0C4369BBCA61785A6C72E7611B08D5F2";
  static const uint8_t binary_fingerprint[16]; // = {0x0C,0x43,0x69,0xBB,0xCA,0x61,0x78,0x5A,0x6C,0x72,0xE7,0x61,0x1B,0x08,0xD5,0xF2};

  netbufferv4_wred_spec_t(const netbufferv4_wred_spec_t&);
  netbufferv4_wred_spec_t& operator=(const netbufferv4_wred_spec_t&);
  netbufferv4_wred_spec_t() : time_constant(0), red_min_threshold(0), red_max_threshold(0), max_probability(0), is_set(true) {
  }

  virtual ~netbufferv4_wred_spec_t() throw();
  double time_constant;
  int32_t red_min_threshold;
  int32_t red_max_threshold;
  double max_probability;
  bool is_set;

  _netbufferv4_wred_spec_t__isset __isset;

  void __set_time_constant(const double val);

  void __set_red_min_threshold(const int32_t val);

  void __set_red_max_threshold(const int32_t val);

  void __set_max_probability(const double val);

  void __set_is_set(const bool val);

  bool operator == (const netbufferv4_wred_spec_t & rhs) const
  {
    if (!(time_constant == rhs.time_constant))
      return false;
    if (!(red_min_threshold == rhs.red_min_threshold))
      return false;
    if (!(red_max_threshold == rhs.red_max_threshold))
      return false;
    if (!(max_probability == rhs.max_probability))
      return false;
    if (__isset.is_set != rhs.__isset.is_set)
      return false;
    else if (__isset.is_set && !(is_set == rhs.is_set))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_wred_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_wred_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_wred_spec_t& obj);
};

void swap(netbufferv4_wred_spec_t &a, netbufferv4_wred_spec_t &b);

typedef struct _netbufferv4_idle_time_params_t__isset {
  _netbufferv4_idle_time_params_t__isset() : ttl_query_interval(false), max_ttl(false), min_ttl(false), cookie(false) {}
  bool ttl_query_interval :1;
  bool max_ttl :1;
  bool min_ttl :1;
  bool cookie :1;
} _netbufferv4_idle_time_params_t__isset;

class netbufferv4_idle_time_params_t {
 public:

  static const char* ascii_fingerprint; // = "14A95739CD626524C62C041C65B9B6B7";
  static const uint8_t binary_fingerprint[16]; // = {0x14,0xA9,0x57,0x39,0xCD,0x62,0x65,0x24,0xC6,0x2C,0x04,0x1C,0x65,0xB9,0xB6,0xB7};

  netbufferv4_idle_time_params_t(const netbufferv4_idle_time_params_t&);
  netbufferv4_idle_time_params_t& operator=(const netbufferv4_idle_time_params_t&);
  netbufferv4_idle_time_params_t() : mode((netbufferv4_idle_time_mode::type)0), ttl_query_interval(0), max_ttl(0), min_ttl(0), cookie(0) {
  }

  virtual ~netbufferv4_idle_time_params_t() throw();
  netbufferv4_idle_time_mode::type mode;
  int32_t ttl_query_interval;
  int32_t max_ttl;
  int32_t min_ttl;
  int32_t cookie;

  _netbufferv4_idle_time_params_t__isset __isset;

  void __set_mode(const netbufferv4_idle_time_mode::type val);

  void __set_ttl_query_interval(const int32_t val);

  void __set_max_ttl(const int32_t val);

  void __set_min_ttl(const int32_t val);

  void __set_cookie(const int32_t val);

  bool operator == (const netbufferv4_idle_time_params_t & rhs) const
  {
    if (!(mode == rhs.mode))
      return false;
    if (__isset.ttl_query_interval != rhs.__isset.ttl_query_interval)
      return false;
    else if (__isset.ttl_query_interval && !(ttl_query_interval == rhs.ttl_query_interval))
      return false;
    if (__isset.max_ttl != rhs.__isset.max_ttl)
      return false;
    else if (__isset.max_ttl && !(max_ttl == rhs.max_ttl))
      return false;
    if (__isset.min_ttl != rhs.__isset.min_ttl)
      return false;
    else if (__isset.min_ttl && !(min_ttl == rhs.min_ttl))
      return false;
    if (__isset.cookie != rhs.__isset.cookie)
      return false;
    else if (__isset.cookie && !(cookie == rhs.cookie))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_idle_time_params_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_idle_time_params_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_idle_time_params_t& obj);
};

void swap(netbufferv4_idle_time_params_t &a, netbufferv4_idle_time_params_t &b);


class netbufferv4_idle_tmo_expired_t {
 public:

  static const char* ascii_fingerprint; // = "6435B39C87AB0E30F30BEDEFD7328C0D";
  static const uint8_t binary_fingerprint[16]; // = {0x64,0x35,0xB3,0x9C,0x87,0xAB,0x0E,0x30,0xF3,0x0B,0xED,0xEF,0xD7,0x32,0x8C,0x0D};

  netbufferv4_idle_tmo_expired_t(const netbufferv4_idle_tmo_expired_t&);
  netbufferv4_idle_tmo_expired_t& operator=(const netbufferv4_idle_tmo_expired_t&);
  netbufferv4_idle_tmo_expired_t() : dev_id(0), entry(0), cookie(0) {
  }

  virtual ~netbufferv4_idle_tmo_expired_t() throw();
  int32_t dev_id;
  EntryHandle_t entry;
  int32_t cookie;

  void __set_dev_id(const int32_t val);

  void __set_entry(const EntryHandle_t val);

  void __set_cookie(const int32_t val);

  bool operator == (const netbufferv4_idle_tmo_expired_t & rhs) const
  {
    if (!(dev_id == rhs.dev_id))
      return false;
    if (!(entry == rhs.entry))
      return false;
    if (!(cookie == rhs.cookie))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_idle_tmo_expired_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_idle_tmo_expired_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_idle_tmo_expired_t& obj);
};

void swap(netbufferv4_idle_tmo_expired_t &a, netbufferv4_idle_tmo_expired_t &b);


class netbufferv4_sel_update_t {
 public:

  static const char* ascii_fingerprint; // = "C476DACBD2ED169BE75C1627D02A5868";
  static const uint8_t binary_fingerprint[16]; // = {0xC4,0x76,0xDA,0xCB,0xD2,0xED,0x16,0x9B,0xE7,0x5C,0x16,0x27,0xD0,0x2A,0x58,0x68};

  netbufferv4_sel_update_t(const netbufferv4_sel_update_t&);
  netbufferv4_sel_update_t& operator=(const netbufferv4_sel_update_t&);
  netbufferv4_sel_update_t() : sess_hdl(0), cookie(0), grp_hdl(0), mbr_hdl(0), index(0), is_add(0) {
  }

  virtual ~netbufferv4_sel_update_t() throw();
   ::res_pd_rpc::SessionHandle_t sess_hdl;
   ::res_pd_rpc::DevTarget_t dev_tgt;
  int32_t cookie;
  int32_t grp_hdl;
  int32_t mbr_hdl;
  int32_t index;
  bool is_add;

  void __set_sess_hdl(const  ::res_pd_rpc::SessionHandle_t val);

  void __set_dev_tgt(const  ::res_pd_rpc::DevTarget_t& val);

  void __set_cookie(const int32_t val);

  void __set_grp_hdl(const int32_t val);

  void __set_mbr_hdl(const int32_t val);

  void __set_index(const int32_t val);

  void __set_is_add(const bool val);

  bool operator == (const netbufferv4_sel_update_t & rhs) const
  {
    if (!(sess_hdl == rhs.sess_hdl))
      return false;
    if (!(dev_tgt == rhs.dev_tgt))
      return false;
    if (!(cookie == rhs.cookie))
      return false;
    if (!(grp_hdl == rhs.grp_hdl))
      return false;
    if (!(mbr_hdl == rhs.mbr_hdl))
      return false;
    if (!(index == rhs.index))
      return false;
    if (!(is_add == rhs.is_add))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_sel_update_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_sel_update_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_sel_update_t& obj);
};

void swap(netbufferv4_sel_update_t &a, netbufferv4_sel_update_t &b);


class tbl_property_value_args_t {
 public:

  static const char* ascii_fingerprint; // = "46A703A33337BED2F62F386FC66B2A5F";
  static const uint8_t binary_fingerprint[16]; // = {0x46,0xA7,0x03,0xA3,0x33,0x37,0xBE,0xD2,0xF6,0x2F,0x38,0x6F,0xC6,0x6B,0x2A,0x5F};

  tbl_property_value_args_t(const tbl_property_value_args_t&);
  tbl_property_value_args_t& operator=(const tbl_property_value_args_t&);
  tbl_property_value_args_t() : value((tbl_property_value_t::type)0), scope_args(0) {
  }

  virtual ~tbl_property_value_args_t() throw();
  tbl_property_value_t::type value;
  int32_t scope_args;

  void __set_value(const tbl_property_value_t::type val);

  void __set_scope_args(const int32_t val);

  bool operator == (const tbl_property_value_args_t & rhs) const
  {
    if (!(value == rhs.value))
      return false;
    if (!(scope_args == rhs.scope_args))
      return false;
    return true;
  }
  bool operator != (const tbl_property_value_args_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const tbl_property_value_args_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const tbl_property_value_args_t& obj);
};

void swap(tbl_property_value_args_t &a, tbl_property_value_args_t &b);


class PVSSpec_t {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

  PVSSpec_t(const PVSSpec_t&);
  PVSSpec_t& operator=(const PVSSpec_t&);
  PVSSpec_t() : parser_value(0), parser_value_mask(0) {
  }

  virtual ~PVSSpec_t() throw();
  int32_t parser_value;
  int32_t parser_value_mask;

  void __set_parser_value(const int32_t val);

  void __set_parser_value_mask(const int32_t val);

  bool operator == (const PVSSpec_t & rhs) const
  {
    if (!(parser_value == rhs.parser_value))
      return false;
    if (!(parser_value_mask == rhs.parser_value_mask))
      return false;
    return true;
  }
  bool operator != (const PVSSpec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PVSSpec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PVSSpec_t& obj);
};

void swap(PVSSpec_t &a, PVSSpec_t &b);


class TblCntrInfo_t {
 public:

  static const char* ascii_fingerprint; // = "46A703A33337BED2F62F386FC66B2A5F";
  static const uint8_t binary_fingerprint[16]; // = {0x46,0xA7,0x03,0xA3,0x33,0x37,0xBE,0xD2,0xF6,0x2F,0x38,0x6F,0xC6,0x6B,0x2A,0x5F};

  TblCntrInfo_t(const TblCntrInfo_t&);
  TblCntrInfo_t& operator=(const TblCntrInfo_t&);
  TblCntrInfo_t() : type((tbl_dbg_counter_type_t::type)0), value(0) {
  }

  virtual ~TblCntrInfo_t() throw();
  tbl_dbg_counter_type_t::type type;
  int32_t value;

  void __set_type(const tbl_dbg_counter_type_t::type val);

  void __set_value(const int32_t val);

  bool operator == (const TblCntrInfo_t & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const TblCntrInfo_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TblCntrInfo_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TblCntrInfo_t& obj);
};

void swap(TblCntrInfo_t &a, TblCntrInfo_t &b);


class TblDbgStageInfo_t {
 public:

  static const char* ascii_fingerprint; // = "FF2230B0F5F1063AD487F5E7696D6D0B";
  static const uint8_t binary_fingerprint[16]; // = {0xFF,0x22,0x30,0xB0,0xF5,0xF1,0x06,0x3A,0xD4,0x87,0xF5,0xE7,0x69,0x6D,0x6D,0x0B};

  TblDbgStageInfo_t(const TblDbgStageInfo_t&);
  TblDbgStageInfo_t& operator=(const TblDbgStageInfo_t&);
  TblDbgStageInfo_t() : num_counters(0) {
  }

  virtual ~TblDbgStageInfo_t() throw();
  int32_t num_counters;
  std::vector<std::string>  tbl_name;
  std::vector<tbl_dbg_counter_type_t::type>  type;
  std::vector<int32_t>  value;

  void __set_num_counters(const int32_t val);

  void __set_tbl_name(const std::vector<std::string> & val);

  void __set_type(const std::vector<tbl_dbg_counter_type_t::type> & val);

  void __set_value(const std::vector<int32_t> & val);

  bool operator == (const TblDbgStageInfo_t & rhs) const
  {
    if (!(num_counters == rhs.num_counters))
      return false;
    if (!(tbl_name == rhs.tbl_name))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const TblDbgStageInfo_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TblDbgStageInfo_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TblDbgStageInfo_t& obj);
};

void swap(TblDbgStageInfo_t &a, TblDbgStageInfo_t &b);


class netbufferv4_counter_flags_t {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  netbufferv4_counter_flags_t(const netbufferv4_counter_flags_t&);
  netbufferv4_counter_flags_t& operator=(const netbufferv4_counter_flags_t&);
  netbufferv4_counter_flags_t() : read_hw_sync(0) {
  }

  virtual ~netbufferv4_counter_flags_t() throw();
  bool read_hw_sync;

  void __set_read_hw_sync(const bool val);

  bool operator == (const netbufferv4_counter_flags_t & rhs) const
  {
    if (!(read_hw_sync == rhs.read_hw_sync))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_counter_flags_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_counter_flags_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_counter_flags_t& obj);
};

void swap(netbufferv4_counter_flags_t &a, netbufferv4_counter_flags_t &b);


class netbufferv4_register_flags_t {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  netbufferv4_register_flags_t(const netbufferv4_register_flags_t&);
  netbufferv4_register_flags_t& operator=(const netbufferv4_register_flags_t&);
  netbufferv4_register_flags_t() : read_hw_sync(0) {
  }

  virtual ~netbufferv4_register_flags_t() throw();
  bool read_hw_sync;

  void __set_read_hw_sync(const bool val);

  bool operator == (const netbufferv4_register_flags_t & rhs) const
  {
    if (!(read_hw_sync == rhs.read_hw_sync))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_register_flags_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_register_flags_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_register_flags_t& obj);
};

void swap(netbufferv4_register_flags_t &a, netbufferv4_register_flags_t &b);


class netbufferv4_snapshot_trig_spec_t {
 public:

  static const char* ascii_fingerprint; // = "A4B0EC7D8E2C91B205150169F789382C";
  static const uint8_t binary_fingerprint[16]; // = {0xA4,0xB0,0xEC,0x7D,0x8E,0x2C,0x91,0xB2,0x05,0x15,0x01,0x69,0xF7,0x89,0x38,0x2C};

  netbufferv4_snapshot_trig_spec_t(const netbufferv4_snapshot_trig_spec_t&);
  netbufferv4_snapshot_trig_spec_t& operator=(const netbufferv4_snapshot_trig_spec_t&);
  netbufferv4_snapshot_trig_spec_t() : field_name(), field_value(0), field_mask(0) {
  }

  virtual ~netbufferv4_snapshot_trig_spec_t() throw();
  std::string field_name;
  int64_t field_value;
  int64_t field_mask;

  void __set_field_name(const std::string& val);

  void __set_field_value(const int64_t val);

  void __set_field_mask(const int64_t val);

  bool operator == (const netbufferv4_snapshot_trig_spec_t & rhs) const
  {
    if (!(field_name == rhs.field_name))
      return false;
    if (!(field_value == rhs.field_value))
      return false;
    if (!(field_mask == rhs.field_mask))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_snapshot_trig_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_snapshot_trig_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_snapshot_trig_spec_t& obj);
};

void swap(netbufferv4_snapshot_trig_spec_t &a, netbufferv4_snapshot_trig_spec_t &b);


class netbufferv4_snapshot_tbl_data_t {
 public:

  static const char* ascii_fingerprint; // = "6576DFF3016227B9C3A4776D48DB696E";
  static const uint8_t binary_fingerprint[16]; // = {0x65,0x76,0xDF,0xF3,0x01,0x62,0x27,0xB9,0xC3,0xA4,0x77,0x6D,0x48,0xDB,0x69,0x6E};

  netbufferv4_snapshot_tbl_data_t(const netbufferv4_snapshot_tbl_data_t&);
  netbufferv4_snapshot_tbl_data_t& operator=(const netbufferv4_snapshot_tbl_data_t&);
  netbufferv4_snapshot_tbl_data_t() : hit(0), inhibited(0), executed(0), hit_entry_handle(0) {
  }

  virtual ~netbufferv4_snapshot_tbl_data_t() throw();
  bool hit;
  bool inhibited;
  bool executed;
  int32_t hit_entry_handle;

  void __set_hit(const bool val);

  void __set_inhibited(const bool val);

  void __set_executed(const bool val);

  void __set_hit_entry_handle(const int32_t val);

  bool operator == (const netbufferv4_snapshot_tbl_data_t & rhs) const
  {
    if (!(hit == rhs.hit))
      return false;
    if (!(inhibited == rhs.inhibited))
      return false;
    if (!(executed == rhs.executed))
      return false;
    if (!(hit_entry_handle == rhs.hit_entry_handle))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_snapshot_tbl_data_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_snapshot_tbl_data_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_snapshot_tbl_data_t& obj);
};

void swap(netbufferv4_snapshot_tbl_data_t &a, netbufferv4_snapshot_tbl_data_t &b);


class netbufferv4_access_cache_frequency_tbl_match_spec_t {
 public:

  static const char* ascii_fingerprint; // = "874362235FCCF77E284413CBBBA335FE";
  static const uint8_t binary_fingerprint[16]; // = {0x87,0x43,0x62,0x23,0x5F,0xCC,0xF7,0x7E,0x28,0x44,0x13,0xCB,0xBB,0xA3,0x35,0xFE};

  netbufferv4_access_cache_frequency_tbl_match_spec_t(const netbufferv4_access_cache_frequency_tbl_match_spec_t&);
  netbufferv4_access_cache_frequency_tbl_match_spec_t& operator=(const netbufferv4_access_cache_frequency_tbl_match_spec_t&);
  netbufferv4_access_cache_frequency_tbl_match_spec_t() : op_hdr_optype(0), inswitch_hdr_is_sampled(0), inswitch_hdr_is_cached(0) {
  }

  virtual ~netbufferv4_access_cache_frequency_tbl_match_spec_t() throw();
  int16_t op_hdr_optype;
  int8_t inswitch_hdr_is_sampled;
  int8_t inswitch_hdr_is_cached;

  void __set_op_hdr_optype(const int16_t val);

  void __set_inswitch_hdr_is_sampled(const int8_t val);

  void __set_inswitch_hdr_is_cached(const int8_t val);

  bool operator == (const netbufferv4_access_cache_frequency_tbl_match_spec_t & rhs) const
  {
    if (!(op_hdr_optype == rhs.op_hdr_optype))
      return false;
    if (!(inswitch_hdr_is_sampled == rhs.inswitch_hdr_is_sampled))
      return false;
    if (!(inswitch_hdr_is_cached == rhs.inswitch_hdr_is_cached))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_access_cache_frequency_tbl_match_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_access_cache_frequency_tbl_match_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_access_cache_frequency_tbl_match_spec_t& obj);
};

void swap(netbufferv4_access_cache_frequency_tbl_match_spec_t &a, netbufferv4_access_cache_frequency_tbl_match_spec_t &b);


class netbufferv4_access_case1_tbl_match_spec_t {
 public:

  static const char* ascii_fingerprint; // = "1A64E2C212329F011BFE09BD9335DFDC";
  static const uint8_t binary_fingerprint[16]; // = {0x1A,0x64,0xE2,0xC2,0x12,0x32,0x9F,0x01,0x1B,0xFE,0x09,0xBD,0x93,0x35,0xDF,0xDC};

  netbufferv4_access_case1_tbl_match_spec_t(const netbufferv4_access_case1_tbl_match_spec_t&);
  netbufferv4_access_case1_tbl_match_spec_t& operator=(const netbufferv4_access_case1_tbl_match_spec_t&);
  netbufferv4_access_case1_tbl_match_spec_t() : op_hdr_optype(0), inswitch_hdr_is_cached(0), validvalue_hdr_validvalue(0), meta_is_latest(0), inswitch_hdr_snapshot_flag(0) {
  }

  virtual ~netbufferv4_access_case1_tbl_match_spec_t() throw();
  int16_t op_hdr_optype;
  int8_t inswitch_hdr_is_cached;
  int8_t validvalue_hdr_validvalue;
  int8_t meta_is_latest;
  int8_t inswitch_hdr_snapshot_flag;

  void __set_op_hdr_optype(const int16_t val);

  void __set_inswitch_hdr_is_cached(const int8_t val);

  void __set_validvalue_hdr_validvalue(const int8_t val);

  void __set_meta_is_latest(const int8_t val);

  void __set_inswitch_hdr_snapshot_flag(const int8_t val);

  bool operator == (const netbufferv4_access_case1_tbl_match_spec_t & rhs) const
  {
    if (!(op_hdr_optype == rhs.op_hdr_optype))
      return false;
    if (!(inswitch_hdr_is_cached == rhs.inswitch_hdr_is_cached))
      return false;
    if (!(validvalue_hdr_validvalue == rhs.validvalue_hdr_validvalue))
      return false;
    if (!(meta_is_latest == rhs.meta_is_latest))
      return false;
    if (!(inswitch_hdr_snapshot_flag == rhs.inswitch_hdr_snapshot_flag))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_access_case1_tbl_match_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_access_case1_tbl_match_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_access_case1_tbl_match_spec_t& obj);
};

void swap(netbufferv4_access_case1_tbl_match_spec_t &a, netbufferv4_access_case1_tbl_match_spec_t &b);


class netbufferv4_access_cm1_tbl_match_spec_t {
 public:

  static const char* ascii_fingerprint; // = "874362235FCCF77E284413CBBBA335FE";
  static const uint8_t binary_fingerprint[16]; // = {0x87,0x43,0x62,0x23,0x5F,0xCC,0xF7,0x7E,0x28,0x44,0x13,0xCB,0xBB,0xA3,0x35,0xFE};

  netbufferv4_access_cm1_tbl_match_spec_t(const netbufferv4_access_cm1_tbl_match_spec_t&);
  netbufferv4_access_cm1_tbl_match_spec_t& operator=(const netbufferv4_access_cm1_tbl_match_spec_t&);
  netbufferv4_access_cm1_tbl_match_spec_t() : op_hdr_optype(0), inswitch_hdr_is_sampled(0), inswitch_hdr_is_cached(0) {
  }

  virtual ~netbufferv4_access_cm1_tbl_match_spec_t() throw();
  int16_t op_hdr_optype;
  int8_t inswitch_hdr_is_sampled;
  int8_t inswitch_hdr_is_cached;

  void __set_op_hdr_optype(const int16_t val);

  void __set_inswitch_hdr_is_sampled(const int8_t val);

  void __set_inswitch_hdr_is_cached(const int8_t val);

  bool operator == (const netbufferv4_access_cm1_tbl_match_spec_t & rhs) const
  {
    if (!(op_hdr_optype == rhs.op_hdr_optype))
      return false;
    if (!(inswitch_hdr_is_sampled == rhs.inswitch_hdr_is_sampled))
      return false;
    if (!(inswitch_hdr_is_cached == rhs.inswitch_hdr_is_cached))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_access_cm1_tbl_match_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_access_cm1_tbl_match_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_access_cm1_tbl_match_spec_t& obj);
};

void swap(netbufferv4_access_cm1_tbl_match_spec_t &a, netbufferv4_access_cm1_tbl_match_spec_t &b);


class netbufferv4_access_cm2_tbl_match_spec_t {
 public:

  static const char* ascii_fingerprint; // = "874362235FCCF77E284413CBBBA335FE";
  static const uint8_t binary_fingerprint[16]; // = {0x87,0x43,0x62,0x23,0x5F,0xCC,0xF7,0x7E,0x28,0x44,0x13,0xCB,0xBB,0xA3,0x35,0xFE};

  netbufferv4_access_cm2_tbl_match_spec_t(const netbufferv4_access_cm2_tbl_match_spec_t&);
  netbufferv4_access_cm2_tbl_match_spec_t& operator=(const netbufferv4_access_cm2_tbl_match_spec_t&);
  netbufferv4_access_cm2_tbl_match_spec_t() : op_hdr_optype(0), inswitch_hdr_is_sampled(0), inswitch_hdr_is_cached(0) {
  }

  virtual ~netbufferv4_access_cm2_tbl_match_spec_t() throw();
  int16_t op_hdr_optype;
  int8_t inswitch_hdr_is_sampled;
  int8_t inswitch_hdr_is_cached;

  void __set_op_hdr_optype(const int16_t val);

  void __set_inswitch_hdr_is_sampled(const int8_t val);

  void __set_inswitch_hdr_is_cached(const int8_t val);

  bool operator == (const netbufferv4_access_cm2_tbl_match_spec_t & rhs) const
  {
    if (!(op_hdr_optype == rhs.op_hdr_optype))
      return false;
    if (!(inswitch_hdr_is_sampled == rhs.inswitch_hdr_is_sampled))
      return false;
    if (!(inswitch_hdr_is_cached == rhs.inswitch_hdr_is_cached))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_access_cm2_tbl_match_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_access_cm2_tbl_match_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_access_cm2_tbl_match_spec_t& obj);
};

void swap(netbufferv4_access_cm2_tbl_match_spec_t &a, netbufferv4_access_cm2_tbl_match_spec_t &b);


class netbufferv4_access_cm3_tbl_match_spec_t {
 public:

  static const char* ascii_fingerprint; // = "874362235FCCF77E284413CBBBA335FE";
  static const uint8_t binary_fingerprint[16]; // = {0x87,0x43,0x62,0x23,0x5F,0xCC,0xF7,0x7E,0x28,0x44,0x13,0xCB,0xBB,0xA3,0x35,0xFE};

  netbufferv4_access_cm3_tbl_match_spec_t(const netbufferv4_access_cm3_tbl_match_spec_t&);
  netbufferv4_access_cm3_tbl_match_spec_t& operator=(const netbufferv4_access_cm3_tbl_match_spec_t&);
  netbufferv4_access_cm3_tbl_match_spec_t() : op_hdr_optype(0), inswitch_hdr_is_sampled(0), inswitch_hdr_is_cached(0) {
  }

  virtual ~netbufferv4_access_cm3_tbl_match_spec_t() throw();
  int16_t op_hdr_optype;
  int8_t inswitch_hdr_is_sampled;
  int8_t inswitch_hdr_is_cached;

  void __set_op_hdr_optype(const int16_t val);

  void __set_inswitch_hdr_is_sampled(const int8_t val);

  void __set_inswitch_hdr_is_cached(const int8_t val);

  bool operator == (const netbufferv4_access_cm3_tbl_match_spec_t & rhs) const
  {
    if (!(op_hdr_optype == rhs.op_hdr_optype))
      return false;
    if (!(inswitch_hdr_is_sampled == rhs.inswitch_hdr_is_sampled))
      return false;
    if (!(inswitch_hdr_is_cached == rhs.inswitch_hdr_is_cached))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_access_cm3_tbl_match_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_access_cm3_tbl_match_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_access_cm3_tbl_match_spec_t& obj);
};

void swap(netbufferv4_access_cm3_tbl_match_spec_t &a, netbufferv4_access_cm3_tbl_match_spec_t &b);


class netbufferv4_access_cm4_tbl_match_spec_t {
 public:

  static const char* ascii_fingerprint; // = "874362235FCCF77E284413CBBBA335FE";
  static const uint8_t binary_fingerprint[16]; // = {0x87,0x43,0x62,0x23,0x5F,0xCC,0xF7,0x7E,0x28,0x44,0x13,0xCB,0xBB,0xA3,0x35,0xFE};

  netbufferv4_access_cm4_tbl_match_spec_t(const netbufferv4_access_cm4_tbl_match_spec_t&);
  netbufferv4_access_cm4_tbl_match_spec_t& operator=(const netbufferv4_access_cm4_tbl_match_spec_t&);
  netbufferv4_access_cm4_tbl_match_spec_t() : op_hdr_optype(0), inswitch_hdr_is_sampled(0), inswitch_hdr_is_cached(0) {
  }

  virtual ~netbufferv4_access_cm4_tbl_match_spec_t() throw();
  int16_t op_hdr_optype;
  int8_t inswitch_hdr_is_sampled;
  int8_t inswitch_hdr_is_cached;

  void __set_op_hdr_optype(const int16_t val);

  void __set_inswitch_hdr_is_sampled(const int8_t val);

  void __set_inswitch_hdr_is_cached(const int8_t val);

  bool operator == (const netbufferv4_access_cm4_tbl_match_spec_t & rhs) const
  {
    if (!(op_hdr_optype == rhs.op_hdr_optype))
      return false;
    if (!(inswitch_hdr_is_sampled == rhs.inswitch_hdr_is_sampled))
      return false;
    if (!(inswitch_hdr_is_cached == rhs.inswitch_hdr_is_cached))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_access_cm4_tbl_match_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_access_cm4_tbl_match_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_access_cm4_tbl_match_spec_t& obj);
};

void swap(netbufferv4_access_cm4_tbl_match_spec_t &a, netbufferv4_access_cm4_tbl_match_spec_t &b);


class netbufferv4_access_deleted_tbl_match_spec_t {
 public:

  static const char* ascii_fingerprint; // = "FA15C7D77CA497D65C649057DED15F08";
  static const uint8_t binary_fingerprint[16]; // = {0xFA,0x15,0xC7,0xD7,0x7C,0xA4,0x97,0xD6,0x5C,0x64,0x90,0x57,0xDE,0xD1,0x5F,0x08};

  netbufferv4_access_deleted_tbl_match_spec_t(const netbufferv4_access_deleted_tbl_match_spec_t&);
  netbufferv4_access_deleted_tbl_match_spec_t& operator=(const netbufferv4_access_deleted_tbl_match_spec_t&);
  netbufferv4_access_deleted_tbl_match_spec_t() : op_hdr_optype(0), inswitch_hdr_is_cached(0), validvalue_hdr_validvalue(0), meta_is_latest(0) {
  }

  virtual ~netbufferv4_access_deleted_tbl_match_spec_t() throw();
  int16_t op_hdr_optype;
  int8_t inswitch_hdr_is_cached;
  int8_t validvalue_hdr_validvalue;
  int8_t meta_is_latest;

  void __set_op_hdr_optype(const int16_t val);

  void __set_inswitch_hdr_is_cached(const int8_t val);

  void __set_validvalue_hdr_validvalue(const int8_t val);

  void __set_meta_is_latest(const int8_t val);

  bool operator == (const netbufferv4_access_deleted_tbl_match_spec_t & rhs) const
  {
    if (!(op_hdr_optype == rhs.op_hdr_optype))
      return false;
    if (!(inswitch_hdr_is_cached == rhs.inswitch_hdr_is_cached))
      return false;
    if (!(validvalue_hdr_validvalue == rhs.validvalue_hdr_validvalue))
      return false;
    if (!(meta_is_latest == rhs.meta_is_latest))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_access_deleted_tbl_match_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_access_deleted_tbl_match_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_access_deleted_tbl_match_spec_t& obj);
};

void swap(netbufferv4_access_deleted_tbl_match_spec_t &a, netbufferv4_access_deleted_tbl_match_spec_t &b);


class netbufferv4_access_latest_tbl_match_spec_t {
 public:

  static const char* ascii_fingerprint; // = "874362235FCCF77E284413CBBBA335FE";
  static const uint8_t binary_fingerprint[16]; // = {0x87,0x43,0x62,0x23,0x5F,0xCC,0xF7,0x7E,0x28,0x44,0x13,0xCB,0xBB,0xA3,0x35,0xFE};

  netbufferv4_access_latest_tbl_match_spec_t(const netbufferv4_access_latest_tbl_match_spec_t&);
  netbufferv4_access_latest_tbl_match_spec_t& operator=(const netbufferv4_access_latest_tbl_match_spec_t&);
  netbufferv4_access_latest_tbl_match_spec_t() : op_hdr_optype(0), inswitch_hdr_is_cached(0), validvalue_hdr_validvalue(0) {
  }

  virtual ~netbufferv4_access_latest_tbl_match_spec_t() throw();
  int16_t op_hdr_optype;
  int8_t inswitch_hdr_is_cached;
  int8_t validvalue_hdr_validvalue;

  void __set_op_hdr_optype(const int16_t val);

  void __set_inswitch_hdr_is_cached(const int8_t val);

  void __set_validvalue_hdr_validvalue(const int8_t val);

  bool operator == (const netbufferv4_access_latest_tbl_match_spec_t & rhs) const
  {
    if (!(op_hdr_optype == rhs.op_hdr_optype))
      return false;
    if (!(inswitch_hdr_is_cached == rhs.inswitch_hdr_is_cached))
      return false;
    if (!(validvalue_hdr_validvalue == rhs.validvalue_hdr_validvalue))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_access_latest_tbl_match_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_access_latest_tbl_match_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_access_latest_tbl_match_spec_t& obj);
};

void swap(netbufferv4_access_latest_tbl_match_spec_t &a, netbufferv4_access_latest_tbl_match_spec_t &b);


class netbufferv4_access_savedseq_tbl_match_spec_t {
 public:

  static const char* ascii_fingerprint; // = "FA15C7D77CA497D65C649057DED15F08";
  static const uint8_t binary_fingerprint[16]; // = {0xFA,0x15,0xC7,0xD7,0x7C,0xA4,0x97,0xD6,0x5C,0x64,0x90,0x57,0xDE,0xD1,0x5F,0x08};

  netbufferv4_access_savedseq_tbl_match_spec_t(const netbufferv4_access_savedseq_tbl_match_spec_t&);
  netbufferv4_access_savedseq_tbl_match_spec_t& operator=(const netbufferv4_access_savedseq_tbl_match_spec_t&);
  netbufferv4_access_savedseq_tbl_match_spec_t() : op_hdr_optype(0), inswitch_hdr_is_cached(0), validvalue_hdr_validvalue(0), meta_is_latest(0) {
  }

  virtual ~netbufferv4_access_savedseq_tbl_match_spec_t() throw();
  int16_t op_hdr_optype;
  int8_t inswitch_hdr_is_cached;
  int8_t validvalue_hdr_validvalue;
  int8_t meta_is_latest;

  void __set_op_hdr_optype(const int16_t val);

  void __set_inswitch_hdr_is_cached(const int8_t val);

  void __set_validvalue_hdr_validvalue(const int8_t val);

  void __set_meta_is_latest(const int8_t val);

  bool operator == (const netbufferv4_access_savedseq_tbl_match_spec_t & rhs) const
  {
    if (!(op_hdr_optype == rhs.op_hdr_optype))
      return false;
    if (!(inswitch_hdr_is_cached == rhs.inswitch_hdr_is_cached))
      return false;
    if (!(validvalue_hdr_validvalue == rhs.validvalue_hdr_validvalue))
      return false;
    if (!(meta_is_latest == rhs.meta_is_latest))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_access_savedseq_tbl_match_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_access_savedseq_tbl_match_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_access_savedseq_tbl_match_spec_t& obj);
};

void swap(netbufferv4_access_savedseq_tbl_match_spec_t &a, netbufferv4_access_savedseq_tbl_match_spec_t &b);


class netbufferv4_access_seq_tbl_match_spec_t {
 public:

  static const char* ascii_fingerprint; // = "565787C31CF2D774B532CB755189BF39";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0x57,0x87,0xC3,0x1C,0xF2,0xD7,0x74,0xB5,0x32,0xCB,0x75,0x51,0x89,0xBF,0x39};

  netbufferv4_access_seq_tbl_match_spec_t(const netbufferv4_access_seq_tbl_match_spec_t&);
  netbufferv4_access_seq_tbl_match_spec_t& operator=(const netbufferv4_access_seq_tbl_match_spec_t&);
  netbufferv4_access_seq_tbl_match_spec_t() : op_hdr_optype(0) {
  }

  virtual ~netbufferv4_access_seq_tbl_match_spec_t() throw();
  int16_t op_hdr_optype;

  void __set_op_hdr_optype(const int16_t val);

  bool operator == (const netbufferv4_access_seq_tbl_match_spec_t & rhs) const
  {
    if (!(op_hdr_optype == rhs.op_hdr_optype))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_access_seq_tbl_match_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_access_seq_tbl_match_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_access_seq_tbl_match_spec_t& obj);
};

void swap(netbufferv4_access_seq_tbl_match_spec_t &a, netbufferv4_access_seq_tbl_match_spec_t &b);


class netbufferv4_access_validvalue_tbl_match_spec_t {
 public:

  static const char* ascii_fingerprint; // = "2F32B8B152B4427223DB9D670291659B";
  static const uint8_t binary_fingerprint[16]; // = {0x2F,0x32,0xB8,0xB1,0x52,0xB4,0x42,0x72,0x23,0xDB,0x9D,0x67,0x02,0x91,0x65,0x9B};

  netbufferv4_access_validvalue_tbl_match_spec_t(const netbufferv4_access_validvalue_tbl_match_spec_t&);
  netbufferv4_access_validvalue_tbl_match_spec_t& operator=(const netbufferv4_access_validvalue_tbl_match_spec_t&);
  netbufferv4_access_validvalue_tbl_match_spec_t() : op_hdr_optype(0), inswitch_hdr_is_cached(0) {
  }

  virtual ~netbufferv4_access_validvalue_tbl_match_spec_t() throw();
  int16_t op_hdr_optype;
  int8_t inswitch_hdr_is_cached;

  void __set_op_hdr_optype(const int16_t val);

  void __set_inswitch_hdr_is_cached(const int8_t val);

  bool operator == (const netbufferv4_access_validvalue_tbl_match_spec_t & rhs) const
  {
    if (!(op_hdr_optype == rhs.op_hdr_optype))
      return false;
    if (!(inswitch_hdr_is_cached == rhs.inswitch_hdr_is_cached))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_access_validvalue_tbl_match_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_access_validvalue_tbl_match_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_access_validvalue_tbl_match_spec_t& obj);
};

void swap(netbufferv4_access_validvalue_tbl_match_spec_t &a, netbufferv4_access_validvalue_tbl_match_spec_t &b);


class netbufferv4_add_and_remove_value_header_tbl_match_spec_t {
 public:

  static const char* ascii_fingerprint; // = "EEBEE5F2DAE75B1AB615147C163DCA93";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xBE,0xE5,0xF2,0xDA,0xE7,0x5B,0x1A,0xB6,0x15,0x14,0x7C,0x16,0x3D,0xCA,0x93};

  netbufferv4_add_and_remove_value_header_tbl_match_spec_t(const netbufferv4_add_and_remove_value_header_tbl_match_spec_t&);
  netbufferv4_add_and_remove_value_header_tbl_match_spec_t& operator=(const netbufferv4_add_and_remove_value_header_tbl_match_spec_t&);
  netbufferv4_add_and_remove_value_header_tbl_match_spec_t() : op_hdr_optype(0), vallen_hdr_vallen_start(0), vallen_hdr_vallen_end(0) {
  }

  virtual ~netbufferv4_add_and_remove_value_header_tbl_match_spec_t() throw();
  int16_t op_hdr_optype;
  int16_t vallen_hdr_vallen_start;
  int16_t vallen_hdr_vallen_end;

  void __set_op_hdr_optype(const int16_t val);

  void __set_vallen_hdr_vallen_start(const int16_t val);

  void __set_vallen_hdr_vallen_end(const int16_t val);

  bool operator == (const netbufferv4_add_and_remove_value_header_tbl_match_spec_t & rhs) const
  {
    if (!(op_hdr_optype == rhs.op_hdr_optype))
      return false;
    if (!(vallen_hdr_vallen_start == rhs.vallen_hdr_vallen_start))
      return false;
    if (!(vallen_hdr_vallen_end == rhs.vallen_hdr_vallen_end))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_add_and_remove_value_header_tbl_match_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_add_and_remove_value_header_tbl_match_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& obj);
};

void swap(netbufferv4_add_and_remove_value_header_tbl_match_spec_t &a, netbufferv4_add_and_remove_value_header_tbl_match_spec_t &b);


class netbufferv4_cache_lookup_tbl_match_spec_t {
 public:

  static const char* ascii_fingerprint; // = "CB7F5B7A6B1A7616850FBCE2FE09CDFE";
  static const uint8_t binary_fingerprint[16]; // = {0xCB,0x7F,0x5B,0x7A,0x6B,0x1A,0x76,0x16,0x85,0x0F,0xBC,0xE2,0xFE,0x09,0xCD,0xFE};

  netbufferv4_cache_lookup_tbl_match_spec_t(const netbufferv4_cache_lookup_tbl_match_spec_t&);
  netbufferv4_cache_lookup_tbl_match_spec_t& operator=(const netbufferv4_cache_lookup_tbl_match_spec_t&);
  netbufferv4_cache_lookup_tbl_match_spec_t() : op_hdr_keylolo(0), op_hdr_keylohi(0), op_hdr_keyhilo(0), op_hdr_keyhihilo(0), op_hdr_keyhihihi(0), meta_need_recirculate(0) {
  }

  virtual ~netbufferv4_cache_lookup_tbl_match_spec_t() throw();
  int32_t op_hdr_keylolo;
  int32_t op_hdr_keylohi;
  int32_t op_hdr_keyhilo;
  int16_t op_hdr_keyhihilo;
  int16_t op_hdr_keyhihihi;
  int8_t meta_need_recirculate;

  void __set_op_hdr_keylolo(const int32_t val);

  void __set_op_hdr_keylohi(const int32_t val);

  void __set_op_hdr_keyhilo(const int32_t val);

  void __set_op_hdr_keyhihilo(const int16_t val);

  void __set_op_hdr_keyhihihi(const int16_t val);

  void __set_meta_need_recirculate(const int8_t val);

  bool operator == (const netbufferv4_cache_lookup_tbl_match_spec_t & rhs) const
  {
    if (!(op_hdr_keylolo == rhs.op_hdr_keylolo))
      return false;
    if (!(op_hdr_keylohi == rhs.op_hdr_keylohi))
      return false;
    if (!(op_hdr_keyhilo == rhs.op_hdr_keyhilo))
      return false;
    if (!(op_hdr_keyhihilo == rhs.op_hdr_keyhihilo))
      return false;
    if (!(op_hdr_keyhihihi == rhs.op_hdr_keyhihihi))
      return false;
    if (!(meta_need_recirculate == rhs.meta_need_recirculate))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_cache_lookup_tbl_match_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_cache_lookup_tbl_match_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_cache_lookup_tbl_match_spec_t& obj);
};

void swap(netbufferv4_cache_lookup_tbl_match_spec_t &a, netbufferv4_cache_lookup_tbl_match_spec_t &b);


class netbufferv4_drop_tbl_match_spec_t {
 public:

  static const char* ascii_fingerprint; // = "565787C31CF2D774B532CB755189BF39";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0x57,0x87,0xC3,0x1C,0xF2,0xD7,0x74,0xB5,0x32,0xCB,0x75,0x51,0x89,0xBF,0x39};

  netbufferv4_drop_tbl_match_spec_t(const netbufferv4_drop_tbl_match_spec_t&);
  netbufferv4_drop_tbl_match_spec_t& operator=(const netbufferv4_drop_tbl_match_spec_t&);
  netbufferv4_drop_tbl_match_spec_t() : op_hdr_optype(0) {
  }

  virtual ~netbufferv4_drop_tbl_match_spec_t() throw();
  int16_t op_hdr_optype;

  void __set_op_hdr_optype(const int16_t val);

  bool operator == (const netbufferv4_drop_tbl_match_spec_t & rhs) const
  {
    if (!(op_hdr_optype == rhs.op_hdr_optype))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_drop_tbl_match_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_drop_tbl_match_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_drop_tbl_match_spec_t& obj);
};

void swap(netbufferv4_drop_tbl_match_spec_t &a, netbufferv4_drop_tbl_match_spec_t &b);


class netbufferv4_eg_port_forward_tbl_match_spec_t {
 public:

  static const char* ascii_fingerprint; // = "0BED6BB8D94A8217B31BEB38663461A2";
  static const uint8_t binary_fingerprint[16]; // = {0x0B,0xED,0x6B,0xB8,0xD9,0x4A,0x82,0x17,0xB3,0x1B,0xEB,0x38,0x66,0x34,0x61,0xA2};

  netbufferv4_eg_port_forward_tbl_match_spec_t(const netbufferv4_eg_port_forward_tbl_match_spec_t&);
  netbufferv4_eg_port_forward_tbl_match_spec_t& operator=(const netbufferv4_eg_port_forward_tbl_match_spec_t&);
  netbufferv4_eg_port_forward_tbl_match_spec_t() : op_hdr_optype(0), inswitch_hdr_is_cached(0), meta_is_hot(0), validvalue_hdr_validvalue(0), meta_is_latest(0), meta_is_deleted(0), inswitch_hdr_client_sid(0), meta_is_lastclone_for_pktloss(0), inswitch_hdr_snapshot_flag(0), meta_is_case1(0) {
  }

  virtual ~netbufferv4_eg_port_forward_tbl_match_spec_t() throw();
  int16_t op_hdr_optype;
  int8_t inswitch_hdr_is_cached;
  int8_t meta_is_hot;
  int8_t validvalue_hdr_validvalue;
  int8_t meta_is_latest;
  int8_t meta_is_deleted;
  int16_t inswitch_hdr_client_sid;
  int8_t meta_is_lastclone_for_pktloss;
  int8_t inswitch_hdr_snapshot_flag;
  int8_t meta_is_case1;

  void __set_op_hdr_optype(const int16_t val);

  void __set_inswitch_hdr_is_cached(const int8_t val);

  void __set_meta_is_hot(const int8_t val);

  void __set_validvalue_hdr_validvalue(const int8_t val);

  void __set_meta_is_latest(const int8_t val);

  void __set_meta_is_deleted(const int8_t val);

  void __set_inswitch_hdr_client_sid(const int16_t val);

  void __set_meta_is_lastclone_for_pktloss(const int8_t val);

  void __set_inswitch_hdr_snapshot_flag(const int8_t val);

  void __set_meta_is_case1(const int8_t val);

  bool operator == (const netbufferv4_eg_port_forward_tbl_match_spec_t & rhs) const
  {
    if (!(op_hdr_optype == rhs.op_hdr_optype))
      return false;
    if (!(inswitch_hdr_is_cached == rhs.inswitch_hdr_is_cached))
      return false;
    if (!(meta_is_hot == rhs.meta_is_hot))
      return false;
    if (!(validvalue_hdr_validvalue == rhs.validvalue_hdr_validvalue))
      return false;
    if (!(meta_is_latest == rhs.meta_is_latest))
      return false;
    if (!(meta_is_deleted == rhs.meta_is_deleted))
      return false;
    if (!(inswitch_hdr_client_sid == rhs.inswitch_hdr_client_sid))
      return false;
    if (!(meta_is_lastclone_for_pktloss == rhs.meta_is_lastclone_for_pktloss))
      return false;
    if (!(inswitch_hdr_snapshot_flag == rhs.inswitch_hdr_snapshot_flag))
      return false;
    if (!(meta_is_case1 == rhs.meta_is_case1))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_eg_port_forward_tbl_match_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_eg_port_forward_tbl_match_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_eg_port_forward_tbl_match_spec_t& obj);
};

void swap(netbufferv4_eg_port_forward_tbl_match_spec_t &a, netbufferv4_eg_port_forward_tbl_match_spec_t &b);


class netbufferv4_hash_for_cm1_tbl_match_spec_t {
 public:

  static const char* ascii_fingerprint; // = "2F32B8B152B4427223DB9D670291659B";
  static const uint8_t binary_fingerprint[16]; // = {0x2F,0x32,0xB8,0xB1,0x52,0xB4,0x42,0x72,0x23,0xDB,0x9D,0x67,0x02,0x91,0x65,0x9B};

  netbufferv4_hash_for_cm1_tbl_match_spec_t(const netbufferv4_hash_for_cm1_tbl_match_spec_t&);
  netbufferv4_hash_for_cm1_tbl_match_spec_t& operator=(const netbufferv4_hash_for_cm1_tbl_match_spec_t&);
  netbufferv4_hash_for_cm1_tbl_match_spec_t() : op_hdr_optype(0), meta_need_recirculate(0) {
  }

  virtual ~netbufferv4_hash_for_cm1_tbl_match_spec_t() throw();
  int16_t op_hdr_optype;
  int8_t meta_need_recirculate;

  void __set_op_hdr_optype(const int16_t val);

  void __set_meta_need_recirculate(const int8_t val);

  bool operator == (const netbufferv4_hash_for_cm1_tbl_match_spec_t & rhs) const
  {
    if (!(op_hdr_optype == rhs.op_hdr_optype))
      return false;
    if (!(meta_need_recirculate == rhs.meta_need_recirculate))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_hash_for_cm1_tbl_match_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_hash_for_cm1_tbl_match_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_hash_for_cm1_tbl_match_spec_t& obj);
};

void swap(netbufferv4_hash_for_cm1_tbl_match_spec_t &a, netbufferv4_hash_for_cm1_tbl_match_spec_t &b);


class netbufferv4_hash_for_cm2_tbl_match_spec_t {
 public:

  static const char* ascii_fingerprint; // = "2F32B8B152B4427223DB9D670291659B";
  static const uint8_t binary_fingerprint[16]; // = {0x2F,0x32,0xB8,0xB1,0x52,0xB4,0x42,0x72,0x23,0xDB,0x9D,0x67,0x02,0x91,0x65,0x9B};

  netbufferv4_hash_for_cm2_tbl_match_spec_t(const netbufferv4_hash_for_cm2_tbl_match_spec_t&);
  netbufferv4_hash_for_cm2_tbl_match_spec_t& operator=(const netbufferv4_hash_for_cm2_tbl_match_spec_t&);
  netbufferv4_hash_for_cm2_tbl_match_spec_t() : op_hdr_optype(0), meta_need_recirculate(0) {
  }

  virtual ~netbufferv4_hash_for_cm2_tbl_match_spec_t() throw();
  int16_t op_hdr_optype;
  int8_t meta_need_recirculate;

  void __set_op_hdr_optype(const int16_t val);

  void __set_meta_need_recirculate(const int8_t val);

  bool operator == (const netbufferv4_hash_for_cm2_tbl_match_spec_t & rhs) const
  {
    if (!(op_hdr_optype == rhs.op_hdr_optype))
      return false;
    if (!(meta_need_recirculate == rhs.meta_need_recirculate))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_hash_for_cm2_tbl_match_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_hash_for_cm2_tbl_match_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_hash_for_cm2_tbl_match_spec_t& obj);
};

void swap(netbufferv4_hash_for_cm2_tbl_match_spec_t &a, netbufferv4_hash_for_cm2_tbl_match_spec_t &b);


class netbufferv4_hash_for_cm3_tbl_match_spec_t {
 public:

  static const char* ascii_fingerprint; // = "2F32B8B152B4427223DB9D670291659B";
  static const uint8_t binary_fingerprint[16]; // = {0x2F,0x32,0xB8,0xB1,0x52,0xB4,0x42,0x72,0x23,0xDB,0x9D,0x67,0x02,0x91,0x65,0x9B};

  netbufferv4_hash_for_cm3_tbl_match_spec_t(const netbufferv4_hash_for_cm3_tbl_match_spec_t&);
  netbufferv4_hash_for_cm3_tbl_match_spec_t& operator=(const netbufferv4_hash_for_cm3_tbl_match_spec_t&);
  netbufferv4_hash_for_cm3_tbl_match_spec_t() : op_hdr_optype(0), meta_need_recirculate(0) {
  }

  virtual ~netbufferv4_hash_for_cm3_tbl_match_spec_t() throw();
  int16_t op_hdr_optype;
  int8_t meta_need_recirculate;

  void __set_op_hdr_optype(const int16_t val);

  void __set_meta_need_recirculate(const int8_t val);

  bool operator == (const netbufferv4_hash_for_cm3_tbl_match_spec_t & rhs) const
  {
    if (!(op_hdr_optype == rhs.op_hdr_optype))
      return false;
    if (!(meta_need_recirculate == rhs.meta_need_recirculate))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_hash_for_cm3_tbl_match_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_hash_for_cm3_tbl_match_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_hash_for_cm3_tbl_match_spec_t& obj);
};

void swap(netbufferv4_hash_for_cm3_tbl_match_spec_t &a, netbufferv4_hash_for_cm3_tbl_match_spec_t &b);


class netbufferv4_hash_for_cm4_tbl_match_spec_t {
 public:

  static const char* ascii_fingerprint; // = "2F32B8B152B4427223DB9D670291659B";
  static const uint8_t binary_fingerprint[16]; // = {0x2F,0x32,0xB8,0xB1,0x52,0xB4,0x42,0x72,0x23,0xDB,0x9D,0x67,0x02,0x91,0x65,0x9B};

  netbufferv4_hash_for_cm4_tbl_match_spec_t(const netbufferv4_hash_for_cm4_tbl_match_spec_t&);
  netbufferv4_hash_for_cm4_tbl_match_spec_t& operator=(const netbufferv4_hash_for_cm4_tbl_match_spec_t&);
  netbufferv4_hash_for_cm4_tbl_match_spec_t() : op_hdr_optype(0), meta_need_recirculate(0) {
  }

  virtual ~netbufferv4_hash_for_cm4_tbl_match_spec_t() throw();
  int16_t op_hdr_optype;
  int8_t meta_need_recirculate;

  void __set_op_hdr_optype(const int16_t val);

  void __set_meta_need_recirculate(const int8_t val);

  bool operator == (const netbufferv4_hash_for_cm4_tbl_match_spec_t & rhs) const
  {
    if (!(op_hdr_optype == rhs.op_hdr_optype))
      return false;
    if (!(meta_need_recirculate == rhs.meta_need_recirculate))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_hash_for_cm4_tbl_match_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_hash_for_cm4_tbl_match_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_hash_for_cm4_tbl_match_spec_t& obj);
};

void swap(netbufferv4_hash_for_cm4_tbl_match_spec_t &a, netbufferv4_hash_for_cm4_tbl_match_spec_t &b);


class netbufferv4_hash_for_partition_tbl_match_spec_t {
 public:

  static const char* ascii_fingerprint; // = "2F32B8B152B4427223DB9D670291659B";
  static const uint8_t binary_fingerprint[16]; // = {0x2F,0x32,0xB8,0xB1,0x52,0xB4,0x42,0x72,0x23,0xDB,0x9D,0x67,0x02,0x91,0x65,0x9B};

  netbufferv4_hash_for_partition_tbl_match_spec_t(const netbufferv4_hash_for_partition_tbl_match_spec_t&);
  netbufferv4_hash_for_partition_tbl_match_spec_t& operator=(const netbufferv4_hash_for_partition_tbl_match_spec_t&);
  netbufferv4_hash_for_partition_tbl_match_spec_t() : op_hdr_optype(0), meta_need_recirculate(0) {
  }

  virtual ~netbufferv4_hash_for_partition_tbl_match_spec_t() throw();
  int16_t op_hdr_optype;
  int8_t meta_need_recirculate;

  void __set_op_hdr_optype(const int16_t val);

  void __set_meta_need_recirculate(const int8_t val);

  bool operator == (const netbufferv4_hash_for_partition_tbl_match_spec_t & rhs) const
  {
    if (!(op_hdr_optype == rhs.op_hdr_optype))
      return false;
    if (!(meta_need_recirculate == rhs.meta_need_recirculate))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_hash_for_partition_tbl_match_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_hash_for_partition_tbl_match_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_hash_for_partition_tbl_match_spec_t& obj);
};

void swap(netbufferv4_hash_for_partition_tbl_match_spec_t &a, netbufferv4_hash_for_partition_tbl_match_spec_t &b);


class netbufferv4_hash_for_seq_tbl_match_spec_t {
 public:

  static const char* ascii_fingerprint; // = "2F32B8B152B4427223DB9D670291659B";
  static const uint8_t binary_fingerprint[16]; // = {0x2F,0x32,0xB8,0xB1,0x52,0xB4,0x42,0x72,0x23,0xDB,0x9D,0x67,0x02,0x91,0x65,0x9B};

  netbufferv4_hash_for_seq_tbl_match_spec_t(const netbufferv4_hash_for_seq_tbl_match_spec_t&);
  netbufferv4_hash_for_seq_tbl_match_spec_t& operator=(const netbufferv4_hash_for_seq_tbl_match_spec_t&);
  netbufferv4_hash_for_seq_tbl_match_spec_t() : op_hdr_optype(0), meta_need_recirculate(0) {
  }

  virtual ~netbufferv4_hash_for_seq_tbl_match_spec_t() throw();
  int16_t op_hdr_optype;
  int8_t meta_need_recirculate;

  void __set_op_hdr_optype(const int16_t val);

  void __set_meta_need_recirculate(const int8_t val);

  bool operator == (const netbufferv4_hash_for_seq_tbl_match_spec_t & rhs) const
  {
    if (!(op_hdr_optype == rhs.op_hdr_optype))
      return false;
    if (!(meta_need_recirculate == rhs.meta_need_recirculate))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_hash_for_seq_tbl_match_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_hash_for_seq_tbl_match_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_hash_for_seq_tbl_match_spec_t& obj);
};

void swap(netbufferv4_hash_for_seq_tbl_match_spec_t &a, netbufferv4_hash_for_seq_tbl_match_spec_t &b);


class netbufferv4_hash_partition_tbl_match_spec_t {
 public:

  static const char* ascii_fingerprint; // = "B32F1D5F4172180F8FE2208C2F43FCE1";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0x2F,0x1D,0x5F,0x41,0x72,0x18,0x0F,0x8F,0xE2,0x20,0x8C,0x2F,0x43,0xFC,0xE1};

  netbufferv4_hash_partition_tbl_match_spec_t(const netbufferv4_hash_partition_tbl_match_spec_t&);
  netbufferv4_hash_partition_tbl_match_spec_t& operator=(const netbufferv4_hash_partition_tbl_match_spec_t&);
  netbufferv4_hash_partition_tbl_match_spec_t() : op_hdr_optype(0), meta_hashval_for_partition_start(0), meta_hashval_for_partition_end(0), meta_need_recirculate(0) {
  }

  virtual ~netbufferv4_hash_partition_tbl_match_spec_t() throw();
  int16_t op_hdr_optype;
  int16_t meta_hashval_for_partition_start;
  int16_t meta_hashval_for_partition_end;
  int8_t meta_need_recirculate;

  void __set_op_hdr_optype(const int16_t val);

  void __set_meta_hashval_for_partition_start(const int16_t val);

  void __set_meta_hashval_for_partition_end(const int16_t val);

  void __set_meta_need_recirculate(const int8_t val);

  bool operator == (const netbufferv4_hash_partition_tbl_match_spec_t & rhs) const
  {
    if (!(op_hdr_optype == rhs.op_hdr_optype))
      return false;
    if (!(meta_hashval_for_partition_start == rhs.meta_hashval_for_partition_start))
      return false;
    if (!(meta_hashval_for_partition_end == rhs.meta_hashval_for_partition_end))
      return false;
    if (!(meta_need_recirculate == rhs.meta_need_recirculate))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_hash_partition_tbl_match_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_hash_partition_tbl_match_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_hash_partition_tbl_match_spec_t& obj);
};

void swap(netbufferv4_hash_partition_tbl_match_spec_t &a, netbufferv4_hash_partition_tbl_match_spec_t &b);


class netbufferv4_ig_port_forward_tbl_match_spec_t {
 public:

  static const char* ascii_fingerprint; // = "2F32B8B152B4427223DB9D670291659B";
  static const uint8_t binary_fingerprint[16]; // = {0x2F,0x32,0xB8,0xB1,0x52,0xB4,0x42,0x72,0x23,0xDB,0x9D,0x67,0x02,0x91,0x65,0x9B};

  netbufferv4_ig_port_forward_tbl_match_spec_t(const netbufferv4_ig_port_forward_tbl_match_spec_t&);
  netbufferv4_ig_port_forward_tbl_match_spec_t& operator=(const netbufferv4_ig_port_forward_tbl_match_spec_t&);
  netbufferv4_ig_port_forward_tbl_match_spec_t() : op_hdr_optype(0), meta_need_recirculate(0) {
  }

  virtual ~netbufferv4_ig_port_forward_tbl_match_spec_t() throw();
  int16_t op_hdr_optype;
  int8_t meta_need_recirculate;

  void __set_op_hdr_optype(const int16_t val);

  void __set_meta_need_recirculate(const int8_t val);

  bool operator == (const netbufferv4_ig_port_forward_tbl_match_spec_t & rhs) const
  {
    if (!(op_hdr_optype == rhs.op_hdr_optype))
      return false;
    if (!(meta_need_recirculate == rhs.meta_need_recirculate))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_ig_port_forward_tbl_match_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_ig_port_forward_tbl_match_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_ig_port_forward_tbl_match_spec_t& obj);
};

void swap(netbufferv4_ig_port_forward_tbl_match_spec_t &a, netbufferv4_ig_port_forward_tbl_match_spec_t &b);


class netbufferv4_ipv4_forward_tbl_match_spec_t {
 public:

  static const char* ascii_fingerprint; // = "E1AFF8138A70C2749C771AC733FAF500";
  static const uint8_t binary_fingerprint[16]; // = {0xE1,0xAF,0xF8,0x13,0x8A,0x70,0xC2,0x74,0x9C,0x77,0x1A,0xC7,0x33,0xFA,0xF5,0x00};

  netbufferv4_ipv4_forward_tbl_match_spec_t(const netbufferv4_ipv4_forward_tbl_match_spec_t&);
  netbufferv4_ipv4_forward_tbl_match_spec_t& operator=(const netbufferv4_ipv4_forward_tbl_match_spec_t&);
  netbufferv4_ipv4_forward_tbl_match_spec_t() : op_hdr_optype(0), ipv4_hdr_dstAddr(0), ipv4_hdr_dstAddr_prefix_length(0), meta_need_recirculate(0) {
  }

  virtual ~netbufferv4_ipv4_forward_tbl_match_spec_t() throw();
  int16_t op_hdr_optype;
  int32_t ipv4_hdr_dstAddr;
  int16_t ipv4_hdr_dstAddr_prefix_length;
  int8_t meta_need_recirculate;

  void __set_op_hdr_optype(const int16_t val);

  void __set_ipv4_hdr_dstAddr(const int32_t val);

  void __set_ipv4_hdr_dstAddr_prefix_length(const int16_t val);

  void __set_meta_need_recirculate(const int8_t val);

  bool operator == (const netbufferv4_ipv4_forward_tbl_match_spec_t & rhs) const
  {
    if (!(op_hdr_optype == rhs.op_hdr_optype))
      return false;
    if (!(ipv4_hdr_dstAddr == rhs.ipv4_hdr_dstAddr))
      return false;
    if (!(ipv4_hdr_dstAddr_prefix_length == rhs.ipv4_hdr_dstAddr_prefix_length))
      return false;
    if (!(meta_need_recirculate == rhs.meta_need_recirculate))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_ipv4_forward_tbl_match_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_ipv4_forward_tbl_match_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_ipv4_forward_tbl_match_spec_t& obj);
};

void swap(netbufferv4_ipv4_forward_tbl_match_spec_t &a, netbufferv4_ipv4_forward_tbl_match_spec_t &b);


class netbufferv4_is_hot_tbl_match_spec_t {
 public:

  static const char* ascii_fingerprint; // = "FE6EEA0EE646C9880F01CB7CB8D8504D";
  static const uint8_t binary_fingerprint[16]; // = {0xFE,0x6E,0xEA,0x0E,0xE6,0x46,0xC9,0x88,0x0F,0x01,0xCB,0x7C,0xB8,0xD8,0x50,0x4D};

  netbufferv4_is_hot_tbl_match_spec_t(const netbufferv4_is_hot_tbl_match_spec_t&);
  netbufferv4_is_hot_tbl_match_spec_t& operator=(const netbufferv4_is_hot_tbl_match_spec_t&);
  netbufferv4_is_hot_tbl_match_spec_t() : meta_cm1_predicate(0), meta_cm2_predicate(0), meta_cm3_predicate(0), meta_cm4_predicate(0) {
  }

  virtual ~netbufferv4_is_hot_tbl_match_spec_t() throw();
  int8_t meta_cm1_predicate;
  int8_t meta_cm2_predicate;
  int8_t meta_cm3_predicate;
  int8_t meta_cm4_predicate;

  void __set_meta_cm1_predicate(const int8_t val);

  void __set_meta_cm2_predicate(const int8_t val);

  void __set_meta_cm3_predicate(const int8_t val);

  void __set_meta_cm4_predicate(const int8_t val);

  bool operator == (const netbufferv4_is_hot_tbl_match_spec_t & rhs) const
  {
    if (!(meta_cm1_predicate == rhs.meta_cm1_predicate))
      return false;
    if (!(meta_cm2_predicate == rhs.meta_cm2_predicate))
      return false;
    if (!(meta_cm3_predicate == rhs.meta_cm3_predicate))
      return false;
    if (!(meta_cm4_predicate == rhs.meta_cm4_predicate))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_is_hot_tbl_match_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_is_hot_tbl_match_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_is_hot_tbl_match_spec_t& obj);
};

void swap(netbufferv4_is_hot_tbl_match_spec_t &a, netbufferv4_is_hot_tbl_match_spec_t &b);


class netbufferv4_lastclone_lastscansplit_tbl_match_spec_t {
 public:

  static const char* ascii_fingerprint; // = "2F32B8B152B4427223DB9D670291659B";
  static const uint8_t binary_fingerprint[16]; // = {0x2F,0x32,0xB8,0xB1,0x52,0xB4,0x42,0x72,0x23,0xDB,0x9D,0x67,0x02,0x91,0x65,0x9B};

  netbufferv4_lastclone_lastscansplit_tbl_match_spec_t(const netbufferv4_lastclone_lastscansplit_tbl_match_spec_t&);
  netbufferv4_lastclone_lastscansplit_tbl_match_spec_t& operator=(const netbufferv4_lastclone_lastscansplit_tbl_match_spec_t&);
  netbufferv4_lastclone_lastscansplit_tbl_match_spec_t() : op_hdr_optype(0), clone_hdr_clonenum_for_pktloss(0) {
  }

  virtual ~netbufferv4_lastclone_lastscansplit_tbl_match_spec_t() throw();
  int16_t op_hdr_optype;
  int8_t clone_hdr_clonenum_for_pktloss;

  void __set_op_hdr_optype(const int16_t val);

  void __set_clone_hdr_clonenum_for_pktloss(const int8_t val);

  bool operator == (const netbufferv4_lastclone_lastscansplit_tbl_match_spec_t & rhs) const
  {
    if (!(op_hdr_optype == rhs.op_hdr_optype))
      return false;
    if (!(clone_hdr_clonenum_for_pktloss == rhs.clone_hdr_clonenum_for_pktloss))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_lastclone_lastscansplit_tbl_match_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_lastclone_lastscansplit_tbl_match_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_lastclone_lastscansplit_tbl_match_spec_t& obj);
};

void swap(netbufferv4_lastclone_lastscansplit_tbl_match_spec_t &a, netbufferv4_lastclone_lastscansplit_tbl_match_spec_t &b);


class netbufferv4_need_recirculate_tbl_match_spec_t {
 public:

  static const char* ascii_fingerprint; // = "C88FB7958D86460D03E699333A272947";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x8F,0xB7,0x95,0x8D,0x86,0x46,0x0D,0x03,0xE6,0x99,0x33,0x3A,0x27,0x29,0x47};

  netbufferv4_need_recirculate_tbl_match_spec_t(const netbufferv4_need_recirculate_tbl_match_spec_t&);
  netbufferv4_need_recirculate_tbl_match_spec_t& operator=(const netbufferv4_need_recirculate_tbl_match_spec_t&);
  netbufferv4_need_recirculate_tbl_match_spec_t() : op_hdr_optype(0), ig_intr_md_ingress_port(0) {
  }

  virtual ~netbufferv4_need_recirculate_tbl_match_spec_t() throw();
  int16_t op_hdr_optype;
  int16_t ig_intr_md_ingress_port;

  void __set_op_hdr_optype(const int16_t val);

  void __set_ig_intr_md_ingress_port(const int16_t val);

  bool operator == (const netbufferv4_need_recirculate_tbl_match_spec_t & rhs) const
  {
    if (!(op_hdr_optype == rhs.op_hdr_optype))
      return false;
    if (!(ig_intr_md_ingress_port == rhs.ig_intr_md_ingress_port))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_need_recirculate_tbl_match_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_need_recirculate_tbl_match_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_need_recirculate_tbl_match_spec_t& obj);
};

void swap(netbufferv4_need_recirculate_tbl_match_spec_t &a, netbufferv4_need_recirculate_tbl_match_spec_t &b);


class netbufferv4_prepare_for_cachehit_tbl_match_spec_t {
 public:

  static const char* ascii_fingerprint; // = "47122A80B641FECF98DEC5A7D2B1FC3F";
  static const uint8_t binary_fingerprint[16]; // = {0x47,0x12,0x2A,0x80,0xB6,0x41,0xFE,0xCF,0x98,0xDE,0xC5,0xA7,0xD2,0xB1,0xFC,0x3F};

  netbufferv4_prepare_for_cachehit_tbl_match_spec_t(const netbufferv4_prepare_for_cachehit_tbl_match_spec_t&);
  netbufferv4_prepare_for_cachehit_tbl_match_spec_t& operator=(const netbufferv4_prepare_for_cachehit_tbl_match_spec_t&);
  netbufferv4_prepare_for_cachehit_tbl_match_spec_t() : op_hdr_optype(0), ig_intr_md_ingress_port(0), meta_need_recirculate(0) {
  }

  virtual ~netbufferv4_prepare_for_cachehit_tbl_match_spec_t() throw();
  int16_t op_hdr_optype;
  int16_t ig_intr_md_ingress_port;
  int8_t meta_need_recirculate;

  void __set_op_hdr_optype(const int16_t val);

  void __set_ig_intr_md_ingress_port(const int16_t val);

  void __set_meta_need_recirculate(const int8_t val);

  bool operator == (const netbufferv4_prepare_for_cachehit_tbl_match_spec_t & rhs) const
  {
    if (!(op_hdr_optype == rhs.op_hdr_optype))
      return false;
    if (!(ig_intr_md_ingress_port == rhs.ig_intr_md_ingress_port))
      return false;
    if (!(meta_need_recirculate == rhs.meta_need_recirculate))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_prepare_for_cachehit_tbl_match_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_prepare_for_cachehit_tbl_match_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_prepare_for_cachehit_tbl_match_spec_t& obj);
};

void swap(netbufferv4_prepare_for_cachehit_tbl_match_spec_t &a, netbufferv4_prepare_for_cachehit_tbl_match_spec_t &b);


class netbufferv4_recirculate_tbl_match_spec_t {
 public:

  static const char* ascii_fingerprint; // = "2F32B8B152B4427223DB9D670291659B";
  static const uint8_t binary_fingerprint[16]; // = {0x2F,0x32,0xB8,0xB1,0x52,0xB4,0x42,0x72,0x23,0xDB,0x9D,0x67,0x02,0x91,0x65,0x9B};

  netbufferv4_recirculate_tbl_match_spec_t(const netbufferv4_recirculate_tbl_match_spec_t&);
  netbufferv4_recirculate_tbl_match_spec_t& operator=(const netbufferv4_recirculate_tbl_match_spec_t&);
  netbufferv4_recirculate_tbl_match_spec_t() : op_hdr_optype(0), meta_need_recirculate(0) {
  }

  virtual ~netbufferv4_recirculate_tbl_match_spec_t() throw();
  int16_t op_hdr_optype;
  int8_t meta_need_recirculate;

  void __set_op_hdr_optype(const int16_t val);

  void __set_meta_need_recirculate(const int8_t val);

  bool operator == (const netbufferv4_recirculate_tbl_match_spec_t & rhs) const
  {
    if (!(op_hdr_optype == rhs.op_hdr_optype))
      return false;
    if (!(meta_need_recirculate == rhs.meta_need_recirculate))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_recirculate_tbl_match_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_recirculate_tbl_match_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_recirculate_tbl_match_spec_t& obj);
};

void swap(netbufferv4_recirculate_tbl_match_spec_t &a, netbufferv4_recirculate_tbl_match_spec_t &b);


class netbufferv4_sample_tbl_match_spec_t {
 public:

  static const char* ascii_fingerprint; // = "2F32B8B152B4427223DB9D670291659B";
  static const uint8_t binary_fingerprint[16]; // = {0x2F,0x32,0xB8,0xB1,0x52,0xB4,0x42,0x72,0x23,0xDB,0x9D,0x67,0x02,0x91,0x65,0x9B};

  netbufferv4_sample_tbl_match_spec_t(const netbufferv4_sample_tbl_match_spec_t&);
  netbufferv4_sample_tbl_match_spec_t& operator=(const netbufferv4_sample_tbl_match_spec_t&);
  netbufferv4_sample_tbl_match_spec_t() : op_hdr_optype(0), meta_need_recirculate(0) {
  }

  virtual ~netbufferv4_sample_tbl_match_spec_t() throw();
  int16_t op_hdr_optype;
  int8_t meta_need_recirculate;

  void __set_op_hdr_optype(const int16_t val);

  void __set_meta_need_recirculate(const int8_t val);

  bool operator == (const netbufferv4_sample_tbl_match_spec_t & rhs) const
  {
    if (!(op_hdr_optype == rhs.op_hdr_optype))
      return false;
    if (!(meta_need_recirculate == rhs.meta_need_recirculate))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_sample_tbl_match_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_sample_tbl_match_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_sample_tbl_match_spec_t& obj);
};

void swap(netbufferv4_sample_tbl_match_spec_t &a, netbufferv4_sample_tbl_match_spec_t &b);


class netbufferv4_save_client_udpport_tbl_match_spec_t {
 public:

  static const char* ascii_fingerprint; // = "565787C31CF2D774B532CB755189BF39";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0x57,0x87,0xC3,0x1C,0xF2,0xD7,0x74,0xB5,0x32,0xCB,0x75,0x51,0x89,0xBF,0x39};

  netbufferv4_save_client_udpport_tbl_match_spec_t(const netbufferv4_save_client_udpport_tbl_match_spec_t&);
  netbufferv4_save_client_udpport_tbl_match_spec_t& operator=(const netbufferv4_save_client_udpport_tbl_match_spec_t&);
  netbufferv4_save_client_udpport_tbl_match_spec_t() : op_hdr_optype(0) {
  }

  virtual ~netbufferv4_save_client_udpport_tbl_match_spec_t() throw();
  int16_t op_hdr_optype;

  void __set_op_hdr_optype(const int16_t val);

  bool operator == (const netbufferv4_save_client_udpport_tbl_match_spec_t & rhs) const
  {
    if (!(op_hdr_optype == rhs.op_hdr_optype))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_save_client_udpport_tbl_match_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_save_client_udpport_tbl_match_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_save_client_udpport_tbl_match_spec_t& obj);
};

void swap(netbufferv4_save_client_udpport_tbl_match_spec_t &a, netbufferv4_save_client_udpport_tbl_match_spec_t &b);


class netbufferv4_snapshot_flag_tbl_match_spec_t {
 public:

  static const char* ascii_fingerprint; // = "2F32B8B152B4427223DB9D670291659B";
  static const uint8_t binary_fingerprint[16]; // = {0x2F,0x32,0xB8,0xB1,0x52,0xB4,0x42,0x72,0x23,0xDB,0x9D,0x67,0x02,0x91,0x65,0x9B};

  netbufferv4_snapshot_flag_tbl_match_spec_t(const netbufferv4_snapshot_flag_tbl_match_spec_t&);
  netbufferv4_snapshot_flag_tbl_match_spec_t& operator=(const netbufferv4_snapshot_flag_tbl_match_spec_t&);
  netbufferv4_snapshot_flag_tbl_match_spec_t() : op_hdr_optype(0), meta_need_recirculate(0) {
  }

  virtual ~netbufferv4_snapshot_flag_tbl_match_spec_t() throw();
  int16_t op_hdr_optype;
  int8_t meta_need_recirculate;

  void __set_op_hdr_optype(const int16_t val);

  void __set_meta_need_recirculate(const int8_t val);

  bool operator == (const netbufferv4_snapshot_flag_tbl_match_spec_t & rhs) const
  {
    if (!(op_hdr_optype == rhs.op_hdr_optype))
      return false;
    if (!(meta_need_recirculate == rhs.meta_need_recirculate))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_snapshot_flag_tbl_match_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_snapshot_flag_tbl_match_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_snapshot_flag_tbl_match_spec_t& obj);
};

void swap(netbufferv4_snapshot_flag_tbl_match_spec_t &a, netbufferv4_snapshot_flag_tbl_match_spec_t &b);


class netbufferv4_update_ipmac_srcport_tbl_match_spec_t {
 public:

  static const char* ascii_fingerprint; // = "C88FB7958D86460D03E699333A272947";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x8F,0xB7,0x95,0x8D,0x86,0x46,0x0D,0x03,0xE6,0x99,0x33,0x3A,0x27,0x29,0x47};

  netbufferv4_update_ipmac_srcport_tbl_match_spec_t(const netbufferv4_update_ipmac_srcport_tbl_match_spec_t&);
  netbufferv4_update_ipmac_srcport_tbl_match_spec_t& operator=(const netbufferv4_update_ipmac_srcport_tbl_match_spec_t&);
  netbufferv4_update_ipmac_srcport_tbl_match_spec_t() : op_hdr_optype(0), eg_intr_md_egress_port(0) {
  }

  virtual ~netbufferv4_update_ipmac_srcport_tbl_match_spec_t() throw();
  int16_t op_hdr_optype;
  int16_t eg_intr_md_egress_port;

  void __set_op_hdr_optype(const int16_t val);

  void __set_eg_intr_md_egress_port(const int16_t val);

  bool operator == (const netbufferv4_update_ipmac_srcport_tbl_match_spec_t & rhs) const
  {
    if (!(op_hdr_optype == rhs.op_hdr_optype))
      return false;
    if (!(eg_intr_md_egress_port == rhs.eg_intr_md_egress_port))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_ipmac_srcport_tbl_match_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_ipmac_srcport_tbl_match_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_ipmac_srcport_tbl_match_spec_t& obj);
};

void swap(netbufferv4_update_ipmac_srcport_tbl_match_spec_t &a, netbufferv4_update_ipmac_srcport_tbl_match_spec_t &b);


class netbufferv4_update_pktlen_tbl_match_spec_t {
 public:

  static const char* ascii_fingerprint; // = "EEBEE5F2DAE75B1AB615147C163DCA93";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xBE,0xE5,0xF2,0xDA,0xE7,0x5B,0x1A,0xB6,0x15,0x14,0x7C,0x16,0x3D,0xCA,0x93};

  netbufferv4_update_pktlen_tbl_match_spec_t(const netbufferv4_update_pktlen_tbl_match_spec_t&);
  netbufferv4_update_pktlen_tbl_match_spec_t& operator=(const netbufferv4_update_pktlen_tbl_match_spec_t&);
  netbufferv4_update_pktlen_tbl_match_spec_t() : op_hdr_optype(0), vallen_hdr_vallen_start(0), vallen_hdr_vallen_end(0) {
  }

  virtual ~netbufferv4_update_pktlen_tbl_match_spec_t() throw();
  int16_t op_hdr_optype;
  int16_t vallen_hdr_vallen_start;
  int16_t vallen_hdr_vallen_end;

  void __set_op_hdr_optype(const int16_t val);

  void __set_vallen_hdr_vallen_start(const int16_t val);

  void __set_vallen_hdr_vallen_end(const int16_t val);

  bool operator == (const netbufferv4_update_pktlen_tbl_match_spec_t & rhs) const
  {
    if (!(op_hdr_optype == rhs.op_hdr_optype))
      return false;
    if (!(vallen_hdr_vallen_start == rhs.vallen_hdr_vallen_start))
      return false;
    if (!(vallen_hdr_vallen_end == rhs.vallen_hdr_vallen_end))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_pktlen_tbl_match_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_pktlen_tbl_match_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_pktlen_tbl_match_spec_t& obj);
};

void swap(netbufferv4_update_pktlen_tbl_match_spec_t &a, netbufferv4_update_pktlen_tbl_match_spec_t &b);


class netbufferv4_update_valhi10_tbl_match_spec_t {
 public:

  static const char* ascii_fingerprint; // = "A7D440367E85134EBDBAA7BCA01056D0";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

  netbufferv4_update_valhi10_tbl_match_spec_t(const netbufferv4_update_valhi10_tbl_match_spec_t&);
  netbufferv4_update_valhi10_tbl_match_spec_t& operator=(const netbufferv4_update_valhi10_tbl_match_spec_t&);
  netbufferv4_update_valhi10_tbl_match_spec_t() : meta_access_val_mode(0) {
  }

  virtual ~netbufferv4_update_valhi10_tbl_match_spec_t() throw();
  int8_t meta_access_val_mode;

  void __set_meta_access_val_mode(const int8_t val);

  bool operator == (const netbufferv4_update_valhi10_tbl_match_spec_t & rhs) const
  {
    if (!(meta_access_val_mode == rhs.meta_access_val_mode))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_valhi10_tbl_match_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_valhi10_tbl_match_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_valhi10_tbl_match_spec_t& obj);
};

void swap(netbufferv4_update_valhi10_tbl_match_spec_t &a, netbufferv4_update_valhi10_tbl_match_spec_t &b);


class netbufferv4_update_valhi11_tbl_match_spec_t {
 public:

  static const char* ascii_fingerprint; // = "A7D440367E85134EBDBAA7BCA01056D0";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

  netbufferv4_update_valhi11_tbl_match_spec_t(const netbufferv4_update_valhi11_tbl_match_spec_t&);
  netbufferv4_update_valhi11_tbl_match_spec_t& operator=(const netbufferv4_update_valhi11_tbl_match_spec_t&);
  netbufferv4_update_valhi11_tbl_match_spec_t() : meta_access_val_mode(0) {
  }

  virtual ~netbufferv4_update_valhi11_tbl_match_spec_t() throw();
  int8_t meta_access_val_mode;

  void __set_meta_access_val_mode(const int8_t val);

  bool operator == (const netbufferv4_update_valhi11_tbl_match_spec_t & rhs) const
  {
    if (!(meta_access_val_mode == rhs.meta_access_val_mode))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_valhi11_tbl_match_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_valhi11_tbl_match_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_valhi11_tbl_match_spec_t& obj);
};

void swap(netbufferv4_update_valhi11_tbl_match_spec_t &a, netbufferv4_update_valhi11_tbl_match_spec_t &b);


class netbufferv4_update_valhi12_tbl_match_spec_t {
 public:

  static const char* ascii_fingerprint; // = "A7D440367E85134EBDBAA7BCA01056D0";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

  netbufferv4_update_valhi12_tbl_match_spec_t(const netbufferv4_update_valhi12_tbl_match_spec_t&);
  netbufferv4_update_valhi12_tbl_match_spec_t& operator=(const netbufferv4_update_valhi12_tbl_match_spec_t&);
  netbufferv4_update_valhi12_tbl_match_spec_t() : meta_access_val_mode(0) {
  }

  virtual ~netbufferv4_update_valhi12_tbl_match_spec_t() throw();
  int8_t meta_access_val_mode;

  void __set_meta_access_val_mode(const int8_t val);

  bool operator == (const netbufferv4_update_valhi12_tbl_match_spec_t & rhs) const
  {
    if (!(meta_access_val_mode == rhs.meta_access_val_mode))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_valhi12_tbl_match_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_valhi12_tbl_match_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_valhi12_tbl_match_spec_t& obj);
};

void swap(netbufferv4_update_valhi12_tbl_match_spec_t &a, netbufferv4_update_valhi12_tbl_match_spec_t &b);


class netbufferv4_update_valhi13_tbl_match_spec_t {
 public:

  static const char* ascii_fingerprint; // = "A7D440367E85134EBDBAA7BCA01056D0";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

  netbufferv4_update_valhi13_tbl_match_spec_t(const netbufferv4_update_valhi13_tbl_match_spec_t&);
  netbufferv4_update_valhi13_tbl_match_spec_t& operator=(const netbufferv4_update_valhi13_tbl_match_spec_t&);
  netbufferv4_update_valhi13_tbl_match_spec_t() : meta_access_val_mode(0) {
  }

  virtual ~netbufferv4_update_valhi13_tbl_match_spec_t() throw();
  int8_t meta_access_val_mode;

  void __set_meta_access_val_mode(const int8_t val);

  bool operator == (const netbufferv4_update_valhi13_tbl_match_spec_t & rhs) const
  {
    if (!(meta_access_val_mode == rhs.meta_access_val_mode))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_valhi13_tbl_match_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_valhi13_tbl_match_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_valhi13_tbl_match_spec_t& obj);
};

void swap(netbufferv4_update_valhi13_tbl_match_spec_t &a, netbufferv4_update_valhi13_tbl_match_spec_t &b);


class netbufferv4_update_valhi14_tbl_match_spec_t {
 public:

  static const char* ascii_fingerprint; // = "A7D440367E85134EBDBAA7BCA01056D0";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

  netbufferv4_update_valhi14_tbl_match_spec_t(const netbufferv4_update_valhi14_tbl_match_spec_t&);
  netbufferv4_update_valhi14_tbl_match_spec_t& operator=(const netbufferv4_update_valhi14_tbl_match_spec_t&);
  netbufferv4_update_valhi14_tbl_match_spec_t() : meta_access_val_mode(0) {
  }

  virtual ~netbufferv4_update_valhi14_tbl_match_spec_t() throw();
  int8_t meta_access_val_mode;

  void __set_meta_access_val_mode(const int8_t val);

  bool operator == (const netbufferv4_update_valhi14_tbl_match_spec_t & rhs) const
  {
    if (!(meta_access_val_mode == rhs.meta_access_val_mode))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_valhi14_tbl_match_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_valhi14_tbl_match_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_valhi14_tbl_match_spec_t& obj);
};

void swap(netbufferv4_update_valhi14_tbl_match_spec_t &a, netbufferv4_update_valhi14_tbl_match_spec_t &b);


class netbufferv4_update_valhi15_tbl_match_spec_t {
 public:

  static const char* ascii_fingerprint; // = "A7D440367E85134EBDBAA7BCA01056D0";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

  netbufferv4_update_valhi15_tbl_match_spec_t(const netbufferv4_update_valhi15_tbl_match_spec_t&);
  netbufferv4_update_valhi15_tbl_match_spec_t& operator=(const netbufferv4_update_valhi15_tbl_match_spec_t&);
  netbufferv4_update_valhi15_tbl_match_spec_t() : meta_access_val_mode(0) {
  }

  virtual ~netbufferv4_update_valhi15_tbl_match_spec_t() throw();
  int8_t meta_access_val_mode;

  void __set_meta_access_val_mode(const int8_t val);

  bool operator == (const netbufferv4_update_valhi15_tbl_match_spec_t & rhs) const
  {
    if (!(meta_access_val_mode == rhs.meta_access_val_mode))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_valhi15_tbl_match_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_valhi15_tbl_match_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_valhi15_tbl_match_spec_t& obj);
};

void swap(netbufferv4_update_valhi15_tbl_match_spec_t &a, netbufferv4_update_valhi15_tbl_match_spec_t &b);


class netbufferv4_update_valhi16_tbl_match_spec_t {
 public:

  static const char* ascii_fingerprint; // = "A7D440367E85134EBDBAA7BCA01056D0";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

  netbufferv4_update_valhi16_tbl_match_spec_t(const netbufferv4_update_valhi16_tbl_match_spec_t&);
  netbufferv4_update_valhi16_tbl_match_spec_t& operator=(const netbufferv4_update_valhi16_tbl_match_spec_t&);
  netbufferv4_update_valhi16_tbl_match_spec_t() : meta_access_val_mode(0) {
  }

  virtual ~netbufferv4_update_valhi16_tbl_match_spec_t() throw();
  int8_t meta_access_val_mode;

  void __set_meta_access_val_mode(const int8_t val);

  bool operator == (const netbufferv4_update_valhi16_tbl_match_spec_t & rhs) const
  {
    if (!(meta_access_val_mode == rhs.meta_access_val_mode))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_valhi16_tbl_match_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_valhi16_tbl_match_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_valhi16_tbl_match_spec_t& obj);
};

void swap(netbufferv4_update_valhi16_tbl_match_spec_t &a, netbufferv4_update_valhi16_tbl_match_spec_t &b);


class netbufferv4_update_valhi1_tbl_match_spec_t {
 public:

  static const char* ascii_fingerprint; // = "A7D440367E85134EBDBAA7BCA01056D0";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

  netbufferv4_update_valhi1_tbl_match_spec_t(const netbufferv4_update_valhi1_tbl_match_spec_t&);
  netbufferv4_update_valhi1_tbl_match_spec_t& operator=(const netbufferv4_update_valhi1_tbl_match_spec_t&);
  netbufferv4_update_valhi1_tbl_match_spec_t() : meta_access_val_mode(0) {
  }

  virtual ~netbufferv4_update_valhi1_tbl_match_spec_t() throw();
  int8_t meta_access_val_mode;

  void __set_meta_access_val_mode(const int8_t val);

  bool operator == (const netbufferv4_update_valhi1_tbl_match_spec_t & rhs) const
  {
    if (!(meta_access_val_mode == rhs.meta_access_val_mode))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_valhi1_tbl_match_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_valhi1_tbl_match_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_valhi1_tbl_match_spec_t& obj);
};

void swap(netbufferv4_update_valhi1_tbl_match_spec_t &a, netbufferv4_update_valhi1_tbl_match_spec_t &b);


class netbufferv4_update_valhi2_tbl_match_spec_t {
 public:

  static const char* ascii_fingerprint; // = "A7D440367E85134EBDBAA7BCA01056D0";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

  netbufferv4_update_valhi2_tbl_match_spec_t(const netbufferv4_update_valhi2_tbl_match_spec_t&);
  netbufferv4_update_valhi2_tbl_match_spec_t& operator=(const netbufferv4_update_valhi2_tbl_match_spec_t&);
  netbufferv4_update_valhi2_tbl_match_spec_t() : meta_access_val_mode(0) {
  }

  virtual ~netbufferv4_update_valhi2_tbl_match_spec_t() throw();
  int8_t meta_access_val_mode;

  void __set_meta_access_val_mode(const int8_t val);

  bool operator == (const netbufferv4_update_valhi2_tbl_match_spec_t & rhs) const
  {
    if (!(meta_access_val_mode == rhs.meta_access_val_mode))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_valhi2_tbl_match_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_valhi2_tbl_match_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_valhi2_tbl_match_spec_t& obj);
};

void swap(netbufferv4_update_valhi2_tbl_match_spec_t &a, netbufferv4_update_valhi2_tbl_match_spec_t &b);


class netbufferv4_update_valhi3_tbl_match_spec_t {
 public:

  static const char* ascii_fingerprint; // = "A7D440367E85134EBDBAA7BCA01056D0";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

  netbufferv4_update_valhi3_tbl_match_spec_t(const netbufferv4_update_valhi3_tbl_match_spec_t&);
  netbufferv4_update_valhi3_tbl_match_spec_t& operator=(const netbufferv4_update_valhi3_tbl_match_spec_t&);
  netbufferv4_update_valhi3_tbl_match_spec_t() : meta_access_val_mode(0) {
  }

  virtual ~netbufferv4_update_valhi3_tbl_match_spec_t() throw();
  int8_t meta_access_val_mode;

  void __set_meta_access_val_mode(const int8_t val);

  bool operator == (const netbufferv4_update_valhi3_tbl_match_spec_t & rhs) const
  {
    if (!(meta_access_val_mode == rhs.meta_access_val_mode))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_valhi3_tbl_match_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_valhi3_tbl_match_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_valhi3_tbl_match_spec_t& obj);
};

void swap(netbufferv4_update_valhi3_tbl_match_spec_t &a, netbufferv4_update_valhi3_tbl_match_spec_t &b);


class netbufferv4_update_valhi4_tbl_match_spec_t {
 public:

  static const char* ascii_fingerprint; // = "A7D440367E85134EBDBAA7BCA01056D0";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

  netbufferv4_update_valhi4_tbl_match_spec_t(const netbufferv4_update_valhi4_tbl_match_spec_t&);
  netbufferv4_update_valhi4_tbl_match_spec_t& operator=(const netbufferv4_update_valhi4_tbl_match_spec_t&);
  netbufferv4_update_valhi4_tbl_match_spec_t() : meta_access_val_mode(0) {
  }

  virtual ~netbufferv4_update_valhi4_tbl_match_spec_t() throw();
  int8_t meta_access_val_mode;

  void __set_meta_access_val_mode(const int8_t val);

  bool operator == (const netbufferv4_update_valhi4_tbl_match_spec_t & rhs) const
  {
    if (!(meta_access_val_mode == rhs.meta_access_val_mode))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_valhi4_tbl_match_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_valhi4_tbl_match_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_valhi4_tbl_match_spec_t& obj);
};

void swap(netbufferv4_update_valhi4_tbl_match_spec_t &a, netbufferv4_update_valhi4_tbl_match_spec_t &b);


class netbufferv4_update_valhi5_tbl_match_spec_t {
 public:

  static const char* ascii_fingerprint; // = "A7D440367E85134EBDBAA7BCA01056D0";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

  netbufferv4_update_valhi5_tbl_match_spec_t(const netbufferv4_update_valhi5_tbl_match_spec_t&);
  netbufferv4_update_valhi5_tbl_match_spec_t& operator=(const netbufferv4_update_valhi5_tbl_match_spec_t&);
  netbufferv4_update_valhi5_tbl_match_spec_t() : meta_access_val_mode(0) {
  }

  virtual ~netbufferv4_update_valhi5_tbl_match_spec_t() throw();
  int8_t meta_access_val_mode;

  void __set_meta_access_val_mode(const int8_t val);

  bool operator == (const netbufferv4_update_valhi5_tbl_match_spec_t & rhs) const
  {
    if (!(meta_access_val_mode == rhs.meta_access_val_mode))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_valhi5_tbl_match_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_valhi5_tbl_match_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_valhi5_tbl_match_spec_t& obj);
};

void swap(netbufferv4_update_valhi5_tbl_match_spec_t &a, netbufferv4_update_valhi5_tbl_match_spec_t &b);


class netbufferv4_update_valhi6_tbl_match_spec_t {
 public:

  static const char* ascii_fingerprint; // = "A7D440367E85134EBDBAA7BCA01056D0";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

  netbufferv4_update_valhi6_tbl_match_spec_t(const netbufferv4_update_valhi6_tbl_match_spec_t&);
  netbufferv4_update_valhi6_tbl_match_spec_t& operator=(const netbufferv4_update_valhi6_tbl_match_spec_t&);
  netbufferv4_update_valhi6_tbl_match_spec_t() : meta_access_val_mode(0) {
  }

  virtual ~netbufferv4_update_valhi6_tbl_match_spec_t() throw();
  int8_t meta_access_val_mode;

  void __set_meta_access_val_mode(const int8_t val);

  bool operator == (const netbufferv4_update_valhi6_tbl_match_spec_t & rhs) const
  {
    if (!(meta_access_val_mode == rhs.meta_access_val_mode))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_valhi6_tbl_match_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_valhi6_tbl_match_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_valhi6_tbl_match_spec_t& obj);
};

void swap(netbufferv4_update_valhi6_tbl_match_spec_t &a, netbufferv4_update_valhi6_tbl_match_spec_t &b);


class netbufferv4_update_valhi7_tbl_match_spec_t {
 public:

  static const char* ascii_fingerprint; // = "A7D440367E85134EBDBAA7BCA01056D0";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

  netbufferv4_update_valhi7_tbl_match_spec_t(const netbufferv4_update_valhi7_tbl_match_spec_t&);
  netbufferv4_update_valhi7_tbl_match_spec_t& operator=(const netbufferv4_update_valhi7_tbl_match_spec_t&);
  netbufferv4_update_valhi7_tbl_match_spec_t() : meta_access_val_mode(0) {
  }

  virtual ~netbufferv4_update_valhi7_tbl_match_spec_t() throw();
  int8_t meta_access_val_mode;

  void __set_meta_access_val_mode(const int8_t val);

  bool operator == (const netbufferv4_update_valhi7_tbl_match_spec_t & rhs) const
  {
    if (!(meta_access_val_mode == rhs.meta_access_val_mode))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_valhi7_tbl_match_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_valhi7_tbl_match_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_valhi7_tbl_match_spec_t& obj);
};

void swap(netbufferv4_update_valhi7_tbl_match_spec_t &a, netbufferv4_update_valhi7_tbl_match_spec_t &b);


class netbufferv4_update_valhi8_tbl_match_spec_t {
 public:

  static const char* ascii_fingerprint; // = "A7D440367E85134EBDBAA7BCA01056D0";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

  netbufferv4_update_valhi8_tbl_match_spec_t(const netbufferv4_update_valhi8_tbl_match_spec_t&);
  netbufferv4_update_valhi8_tbl_match_spec_t& operator=(const netbufferv4_update_valhi8_tbl_match_spec_t&);
  netbufferv4_update_valhi8_tbl_match_spec_t() : meta_access_val_mode(0) {
  }

  virtual ~netbufferv4_update_valhi8_tbl_match_spec_t() throw();
  int8_t meta_access_val_mode;

  void __set_meta_access_val_mode(const int8_t val);

  bool operator == (const netbufferv4_update_valhi8_tbl_match_spec_t & rhs) const
  {
    if (!(meta_access_val_mode == rhs.meta_access_val_mode))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_valhi8_tbl_match_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_valhi8_tbl_match_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_valhi8_tbl_match_spec_t& obj);
};

void swap(netbufferv4_update_valhi8_tbl_match_spec_t &a, netbufferv4_update_valhi8_tbl_match_spec_t &b);


class netbufferv4_update_valhi9_tbl_match_spec_t {
 public:

  static const char* ascii_fingerprint; // = "A7D440367E85134EBDBAA7BCA01056D0";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

  netbufferv4_update_valhi9_tbl_match_spec_t(const netbufferv4_update_valhi9_tbl_match_spec_t&);
  netbufferv4_update_valhi9_tbl_match_spec_t& operator=(const netbufferv4_update_valhi9_tbl_match_spec_t&);
  netbufferv4_update_valhi9_tbl_match_spec_t() : meta_access_val_mode(0) {
  }

  virtual ~netbufferv4_update_valhi9_tbl_match_spec_t() throw();
  int8_t meta_access_val_mode;

  void __set_meta_access_val_mode(const int8_t val);

  bool operator == (const netbufferv4_update_valhi9_tbl_match_spec_t & rhs) const
  {
    if (!(meta_access_val_mode == rhs.meta_access_val_mode))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_valhi9_tbl_match_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_valhi9_tbl_match_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_valhi9_tbl_match_spec_t& obj);
};

void swap(netbufferv4_update_valhi9_tbl_match_spec_t &a, netbufferv4_update_valhi9_tbl_match_spec_t &b);


class netbufferv4_update_vallen_tbl_match_spec_t {
 public:

  static const char* ascii_fingerprint; // = "FA15C7D77CA497D65C649057DED15F08";
  static const uint8_t binary_fingerprint[16]; // = {0xFA,0x15,0xC7,0xD7,0x7C,0xA4,0x97,0xD6,0x5C,0x64,0x90,0x57,0xDE,0xD1,0x5F,0x08};

  netbufferv4_update_vallen_tbl_match_spec_t(const netbufferv4_update_vallen_tbl_match_spec_t&);
  netbufferv4_update_vallen_tbl_match_spec_t& operator=(const netbufferv4_update_vallen_tbl_match_spec_t&);
  netbufferv4_update_vallen_tbl_match_spec_t() : op_hdr_optype(0), inswitch_hdr_is_cached(0), validvalue_hdr_validvalue(0), meta_is_latest(0) {
  }

  virtual ~netbufferv4_update_vallen_tbl_match_spec_t() throw();
  int16_t op_hdr_optype;
  int8_t inswitch_hdr_is_cached;
  int8_t validvalue_hdr_validvalue;
  int8_t meta_is_latest;

  void __set_op_hdr_optype(const int16_t val);

  void __set_inswitch_hdr_is_cached(const int8_t val);

  void __set_validvalue_hdr_validvalue(const int8_t val);

  void __set_meta_is_latest(const int8_t val);

  bool operator == (const netbufferv4_update_vallen_tbl_match_spec_t & rhs) const
  {
    if (!(op_hdr_optype == rhs.op_hdr_optype))
      return false;
    if (!(inswitch_hdr_is_cached == rhs.inswitch_hdr_is_cached))
      return false;
    if (!(validvalue_hdr_validvalue == rhs.validvalue_hdr_validvalue))
      return false;
    if (!(meta_is_latest == rhs.meta_is_latest))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_vallen_tbl_match_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_vallen_tbl_match_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_vallen_tbl_match_spec_t& obj);
};

void swap(netbufferv4_update_vallen_tbl_match_spec_t &a, netbufferv4_update_vallen_tbl_match_spec_t &b);


class netbufferv4_update_vallo10_tbl_match_spec_t {
 public:

  static const char* ascii_fingerprint; // = "A7D440367E85134EBDBAA7BCA01056D0";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

  netbufferv4_update_vallo10_tbl_match_spec_t(const netbufferv4_update_vallo10_tbl_match_spec_t&);
  netbufferv4_update_vallo10_tbl_match_spec_t& operator=(const netbufferv4_update_vallo10_tbl_match_spec_t&);
  netbufferv4_update_vallo10_tbl_match_spec_t() : meta_access_val_mode(0) {
  }

  virtual ~netbufferv4_update_vallo10_tbl_match_spec_t() throw();
  int8_t meta_access_val_mode;

  void __set_meta_access_val_mode(const int8_t val);

  bool operator == (const netbufferv4_update_vallo10_tbl_match_spec_t & rhs) const
  {
    if (!(meta_access_val_mode == rhs.meta_access_val_mode))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_vallo10_tbl_match_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_vallo10_tbl_match_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_vallo10_tbl_match_spec_t& obj);
};

void swap(netbufferv4_update_vallo10_tbl_match_spec_t &a, netbufferv4_update_vallo10_tbl_match_spec_t &b);


class netbufferv4_update_vallo11_tbl_match_spec_t {
 public:

  static const char* ascii_fingerprint; // = "A7D440367E85134EBDBAA7BCA01056D0";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

  netbufferv4_update_vallo11_tbl_match_spec_t(const netbufferv4_update_vallo11_tbl_match_spec_t&);
  netbufferv4_update_vallo11_tbl_match_spec_t& operator=(const netbufferv4_update_vallo11_tbl_match_spec_t&);
  netbufferv4_update_vallo11_tbl_match_spec_t() : meta_access_val_mode(0) {
  }

  virtual ~netbufferv4_update_vallo11_tbl_match_spec_t() throw();
  int8_t meta_access_val_mode;

  void __set_meta_access_val_mode(const int8_t val);

  bool operator == (const netbufferv4_update_vallo11_tbl_match_spec_t & rhs) const
  {
    if (!(meta_access_val_mode == rhs.meta_access_val_mode))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_vallo11_tbl_match_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_vallo11_tbl_match_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_vallo11_tbl_match_spec_t& obj);
};

void swap(netbufferv4_update_vallo11_tbl_match_spec_t &a, netbufferv4_update_vallo11_tbl_match_spec_t &b);


class netbufferv4_update_vallo12_tbl_match_spec_t {
 public:

  static const char* ascii_fingerprint; // = "A7D440367E85134EBDBAA7BCA01056D0";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

  netbufferv4_update_vallo12_tbl_match_spec_t(const netbufferv4_update_vallo12_tbl_match_spec_t&);
  netbufferv4_update_vallo12_tbl_match_spec_t& operator=(const netbufferv4_update_vallo12_tbl_match_spec_t&);
  netbufferv4_update_vallo12_tbl_match_spec_t() : meta_access_val_mode(0) {
  }

  virtual ~netbufferv4_update_vallo12_tbl_match_spec_t() throw();
  int8_t meta_access_val_mode;

  void __set_meta_access_val_mode(const int8_t val);

  bool operator == (const netbufferv4_update_vallo12_tbl_match_spec_t & rhs) const
  {
    if (!(meta_access_val_mode == rhs.meta_access_val_mode))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_vallo12_tbl_match_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_vallo12_tbl_match_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_vallo12_tbl_match_spec_t& obj);
};

void swap(netbufferv4_update_vallo12_tbl_match_spec_t &a, netbufferv4_update_vallo12_tbl_match_spec_t &b);


class netbufferv4_update_vallo13_tbl_match_spec_t {
 public:

  static const char* ascii_fingerprint; // = "A7D440367E85134EBDBAA7BCA01056D0";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

  netbufferv4_update_vallo13_tbl_match_spec_t(const netbufferv4_update_vallo13_tbl_match_spec_t&);
  netbufferv4_update_vallo13_tbl_match_spec_t& operator=(const netbufferv4_update_vallo13_tbl_match_spec_t&);
  netbufferv4_update_vallo13_tbl_match_spec_t() : meta_access_val_mode(0) {
  }

  virtual ~netbufferv4_update_vallo13_tbl_match_spec_t() throw();
  int8_t meta_access_val_mode;

  void __set_meta_access_val_mode(const int8_t val);

  bool operator == (const netbufferv4_update_vallo13_tbl_match_spec_t & rhs) const
  {
    if (!(meta_access_val_mode == rhs.meta_access_val_mode))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_vallo13_tbl_match_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_vallo13_tbl_match_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_vallo13_tbl_match_spec_t& obj);
};

void swap(netbufferv4_update_vallo13_tbl_match_spec_t &a, netbufferv4_update_vallo13_tbl_match_spec_t &b);


class netbufferv4_update_vallo14_tbl_match_spec_t {
 public:

  static const char* ascii_fingerprint; // = "A7D440367E85134EBDBAA7BCA01056D0";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

  netbufferv4_update_vallo14_tbl_match_spec_t(const netbufferv4_update_vallo14_tbl_match_spec_t&);
  netbufferv4_update_vallo14_tbl_match_spec_t& operator=(const netbufferv4_update_vallo14_tbl_match_spec_t&);
  netbufferv4_update_vallo14_tbl_match_spec_t() : meta_access_val_mode(0) {
  }

  virtual ~netbufferv4_update_vallo14_tbl_match_spec_t() throw();
  int8_t meta_access_val_mode;

  void __set_meta_access_val_mode(const int8_t val);

  bool operator == (const netbufferv4_update_vallo14_tbl_match_spec_t & rhs) const
  {
    if (!(meta_access_val_mode == rhs.meta_access_val_mode))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_vallo14_tbl_match_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_vallo14_tbl_match_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_vallo14_tbl_match_spec_t& obj);
};

void swap(netbufferv4_update_vallo14_tbl_match_spec_t &a, netbufferv4_update_vallo14_tbl_match_spec_t &b);


class netbufferv4_update_vallo15_tbl_match_spec_t {
 public:

  static const char* ascii_fingerprint; // = "A7D440367E85134EBDBAA7BCA01056D0";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

  netbufferv4_update_vallo15_tbl_match_spec_t(const netbufferv4_update_vallo15_tbl_match_spec_t&);
  netbufferv4_update_vallo15_tbl_match_spec_t& operator=(const netbufferv4_update_vallo15_tbl_match_spec_t&);
  netbufferv4_update_vallo15_tbl_match_spec_t() : meta_access_val_mode(0) {
  }

  virtual ~netbufferv4_update_vallo15_tbl_match_spec_t() throw();
  int8_t meta_access_val_mode;

  void __set_meta_access_val_mode(const int8_t val);

  bool operator == (const netbufferv4_update_vallo15_tbl_match_spec_t & rhs) const
  {
    if (!(meta_access_val_mode == rhs.meta_access_val_mode))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_vallo15_tbl_match_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_vallo15_tbl_match_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_vallo15_tbl_match_spec_t& obj);
};

void swap(netbufferv4_update_vallo15_tbl_match_spec_t &a, netbufferv4_update_vallo15_tbl_match_spec_t &b);


class netbufferv4_update_vallo16_tbl_match_spec_t {
 public:

  static const char* ascii_fingerprint; // = "A7D440367E85134EBDBAA7BCA01056D0";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

  netbufferv4_update_vallo16_tbl_match_spec_t(const netbufferv4_update_vallo16_tbl_match_spec_t&);
  netbufferv4_update_vallo16_tbl_match_spec_t& operator=(const netbufferv4_update_vallo16_tbl_match_spec_t&);
  netbufferv4_update_vallo16_tbl_match_spec_t() : meta_access_val_mode(0) {
  }

  virtual ~netbufferv4_update_vallo16_tbl_match_spec_t() throw();
  int8_t meta_access_val_mode;

  void __set_meta_access_val_mode(const int8_t val);

  bool operator == (const netbufferv4_update_vallo16_tbl_match_spec_t & rhs) const
  {
    if (!(meta_access_val_mode == rhs.meta_access_val_mode))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_vallo16_tbl_match_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_vallo16_tbl_match_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_vallo16_tbl_match_spec_t& obj);
};

void swap(netbufferv4_update_vallo16_tbl_match_spec_t &a, netbufferv4_update_vallo16_tbl_match_spec_t &b);


class netbufferv4_update_vallo1_tbl_match_spec_t {
 public:

  static const char* ascii_fingerprint; // = "A7D440367E85134EBDBAA7BCA01056D0";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

  netbufferv4_update_vallo1_tbl_match_spec_t(const netbufferv4_update_vallo1_tbl_match_spec_t&);
  netbufferv4_update_vallo1_tbl_match_spec_t& operator=(const netbufferv4_update_vallo1_tbl_match_spec_t&);
  netbufferv4_update_vallo1_tbl_match_spec_t() : meta_access_val_mode(0) {
  }

  virtual ~netbufferv4_update_vallo1_tbl_match_spec_t() throw();
  int8_t meta_access_val_mode;

  void __set_meta_access_val_mode(const int8_t val);

  bool operator == (const netbufferv4_update_vallo1_tbl_match_spec_t & rhs) const
  {
    if (!(meta_access_val_mode == rhs.meta_access_val_mode))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_vallo1_tbl_match_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_vallo1_tbl_match_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_vallo1_tbl_match_spec_t& obj);
};

void swap(netbufferv4_update_vallo1_tbl_match_spec_t &a, netbufferv4_update_vallo1_tbl_match_spec_t &b);


class netbufferv4_update_vallo2_tbl_match_spec_t {
 public:

  static const char* ascii_fingerprint; // = "A7D440367E85134EBDBAA7BCA01056D0";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

  netbufferv4_update_vallo2_tbl_match_spec_t(const netbufferv4_update_vallo2_tbl_match_spec_t&);
  netbufferv4_update_vallo2_tbl_match_spec_t& operator=(const netbufferv4_update_vallo2_tbl_match_spec_t&);
  netbufferv4_update_vallo2_tbl_match_spec_t() : meta_access_val_mode(0) {
  }

  virtual ~netbufferv4_update_vallo2_tbl_match_spec_t() throw();
  int8_t meta_access_val_mode;

  void __set_meta_access_val_mode(const int8_t val);

  bool operator == (const netbufferv4_update_vallo2_tbl_match_spec_t & rhs) const
  {
    if (!(meta_access_val_mode == rhs.meta_access_val_mode))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_vallo2_tbl_match_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_vallo2_tbl_match_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_vallo2_tbl_match_spec_t& obj);
};

void swap(netbufferv4_update_vallo2_tbl_match_spec_t &a, netbufferv4_update_vallo2_tbl_match_spec_t &b);


class netbufferv4_update_vallo3_tbl_match_spec_t {
 public:

  static const char* ascii_fingerprint; // = "A7D440367E85134EBDBAA7BCA01056D0";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

  netbufferv4_update_vallo3_tbl_match_spec_t(const netbufferv4_update_vallo3_tbl_match_spec_t&);
  netbufferv4_update_vallo3_tbl_match_spec_t& operator=(const netbufferv4_update_vallo3_tbl_match_spec_t&);
  netbufferv4_update_vallo3_tbl_match_spec_t() : meta_access_val_mode(0) {
  }

  virtual ~netbufferv4_update_vallo3_tbl_match_spec_t() throw();
  int8_t meta_access_val_mode;

  void __set_meta_access_val_mode(const int8_t val);

  bool operator == (const netbufferv4_update_vallo3_tbl_match_spec_t & rhs) const
  {
    if (!(meta_access_val_mode == rhs.meta_access_val_mode))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_vallo3_tbl_match_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_vallo3_tbl_match_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_vallo3_tbl_match_spec_t& obj);
};

void swap(netbufferv4_update_vallo3_tbl_match_spec_t &a, netbufferv4_update_vallo3_tbl_match_spec_t &b);


class netbufferv4_update_vallo4_tbl_match_spec_t {
 public:

  static const char* ascii_fingerprint; // = "A7D440367E85134EBDBAA7BCA01056D0";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

  netbufferv4_update_vallo4_tbl_match_spec_t(const netbufferv4_update_vallo4_tbl_match_spec_t&);
  netbufferv4_update_vallo4_tbl_match_spec_t& operator=(const netbufferv4_update_vallo4_tbl_match_spec_t&);
  netbufferv4_update_vallo4_tbl_match_spec_t() : meta_access_val_mode(0) {
  }

  virtual ~netbufferv4_update_vallo4_tbl_match_spec_t() throw();
  int8_t meta_access_val_mode;

  void __set_meta_access_val_mode(const int8_t val);

  bool operator == (const netbufferv4_update_vallo4_tbl_match_spec_t & rhs) const
  {
    if (!(meta_access_val_mode == rhs.meta_access_val_mode))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_vallo4_tbl_match_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_vallo4_tbl_match_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_vallo4_tbl_match_spec_t& obj);
};

void swap(netbufferv4_update_vallo4_tbl_match_spec_t &a, netbufferv4_update_vallo4_tbl_match_spec_t &b);


class netbufferv4_update_vallo5_tbl_match_spec_t {
 public:

  static const char* ascii_fingerprint; // = "A7D440367E85134EBDBAA7BCA01056D0";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

  netbufferv4_update_vallo5_tbl_match_spec_t(const netbufferv4_update_vallo5_tbl_match_spec_t&);
  netbufferv4_update_vallo5_tbl_match_spec_t& operator=(const netbufferv4_update_vallo5_tbl_match_spec_t&);
  netbufferv4_update_vallo5_tbl_match_spec_t() : meta_access_val_mode(0) {
  }

  virtual ~netbufferv4_update_vallo5_tbl_match_spec_t() throw();
  int8_t meta_access_val_mode;

  void __set_meta_access_val_mode(const int8_t val);

  bool operator == (const netbufferv4_update_vallo5_tbl_match_spec_t & rhs) const
  {
    if (!(meta_access_val_mode == rhs.meta_access_val_mode))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_vallo5_tbl_match_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_vallo5_tbl_match_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_vallo5_tbl_match_spec_t& obj);
};

void swap(netbufferv4_update_vallo5_tbl_match_spec_t &a, netbufferv4_update_vallo5_tbl_match_spec_t &b);


class netbufferv4_update_vallo6_tbl_match_spec_t {
 public:

  static const char* ascii_fingerprint; // = "A7D440367E85134EBDBAA7BCA01056D0";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

  netbufferv4_update_vallo6_tbl_match_spec_t(const netbufferv4_update_vallo6_tbl_match_spec_t&);
  netbufferv4_update_vallo6_tbl_match_spec_t& operator=(const netbufferv4_update_vallo6_tbl_match_spec_t&);
  netbufferv4_update_vallo6_tbl_match_spec_t() : meta_access_val_mode(0) {
  }

  virtual ~netbufferv4_update_vallo6_tbl_match_spec_t() throw();
  int8_t meta_access_val_mode;

  void __set_meta_access_val_mode(const int8_t val);

  bool operator == (const netbufferv4_update_vallo6_tbl_match_spec_t & rhs) const
  {
    if (!(meta_access_val_mode == rhs.meta_access_val_mode))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_vallo6_tbl_match_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_vallo6_tbl_match_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_vallo6_tbl_match_spec_t& obj);
};

void swap(netbufferv4_update_vallo6_tbl_match_spec_t &a, netbufferv4_update_vallo6_tbl_match_spec_t &b);


class netbufferv4_update_vallo7_tbl_match_spec_t {
 public:

  static const char* ascii_fingerprint; // = "A7D440367E85134EBDBAA7BCA01056D0";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

  netbufferv4_update_vallo7_tbl_match_spec_t(const netbufferv4_update_vallo7_tbl_match_spec_t&);
  netbufferv4_update_vallo7_tbl_match_spec_t& operator=(const netbufferv4_update_vallo7_tbl_match_spec_t&);
  netbufferv4_update_vallo7_tbl_match_spec_t() : meta_access_val_mode(0) {
  }

  virtual ~netbufferv4_update_vallo7_tbl_match_spec_t() throw();
  int8_t meta_access_val_mode;

  void __set_meta_access_val_mode(const int8_t val);

  bool operator == (const netbufferv4_update_vallo7_tbl_match_spec_t & rhs) const
  {
    if (!(meta_access_val_mode == rhs.meta_access_val_mode))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_vallo7_tbl_match_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_vallo7_tbl_match_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_vallo7_tbl_match_spec_t& obj);
};

void swap(netbufferv4_update_vallo7_tbl_match_spec_t &a, netbufferv4_update_vallo7_tbl_match_spec_t &b);


class netbufferv4_update_vallo8_tbl_match_spec_t {
 public:

  static const char* ascii_fingerprint; // = "A7D440367E85134EBDBAA7BCA01056D0";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

  netbufferv4_update_vallo8_tbl_match_spec_t(const netbufferv4_update_vallo8_tbl_match_spec_t&);
  netbufferv4_update_vallo8_tbl_match_spec_t& operator=(const netbufferv4_update_vallo8_tbl_match_spec_t&);
  netbufferv4_update_vallo8_tbl_match_spec_t() : meta_access_val_mode(0) {
  }

  virtual ~netbufferv4_update_vallo8_tbl_match_spec_t() throw();
  int8_t meta_access_val_mode;

  void __set_meta_access_val_mode(const int8_t val);

  bool operator == (const netbufferv4_update_vallo8_tbl_match_spec_t & rhs) const
  {
    if (!(meta_access_val_mode == rhs.meta_access_val_mode))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_vallo8_tbl_match_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_vallo8_tbl_match_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_vallo8_tbl_match_spec_t& obj);
};

void swap(netbufferv4_update_vallo8_tbl_match_spec_t &a, netbufferv4_update_vallo8_tbl_match_spec_t &b);


class netbufferv4_update_vallo9_tbl_match_spec_t {
 public:

  static const char* ascii_fingerprint; // = "A7D440367E85134EBDBAA7BCA01056D0";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

  netbufferv4_update_vallo9_tbl_match_spec_t(const netbufferv4_update_vallo9_tbl_match_spec_t&);
  netbufferv4_update_vallo9_tbl_match_spec_t& operator=(const netbufferv4_update_vallo9_tbl_match_spec_t&);
  netbufferv4_update_vallo9_tbl_match_spec_t() : meta_access_val_mode(0) {
  }

  virtual ~netbufferv4_update_vallo9_tbl_match_spec_t() throw();
  int8_t meta_access_val_mode;

  void __set_meta_access_val_mode(const int8_t val);

  bool operator == (const netbufferv4_update_vallo9_tbl_match_spec_t & rhs) const
  {
    if (!(meta_access_val_mode == rhs.meta_access_val_mode))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_vallo9_tbl_match_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_vallo9_tbl_match_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_vallo9_tbl_match_spec_t& obj);
};

void swap(netbufferv4_update_vallo9_tbl_match_spec_t &a, netbufferv4_update_vallo9_tbl_match_spec_t &b);


class netbufferv4_cached_action_action_spec_t {
 public:

  static const char* ascii_fingerprint; // = "565787C31CF2D774B532CB755189BF39";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0x57,0x87,0xC3,0x1C,0xF2,0xD7,0x74,0xB5,0x32,0xCB,0x75,0x51,0x89,0xBF,0x39};

  netbufferv4_cached_action_action_spec_t(const netbufferv4_cached_action_action_spec_t&);
  netbufferv4_cached_action_action_spec_t& operator=(const netbufferv4_cached_action_action_spec_t&);
  netbufferv4_cached_action_action_spec_t() : action_idx(0) {
  }

  virtual ~netbufferv4_cached_action_action_spec_t() throw();
  int16_t action_idx;

  void __set_action_idx(const int16_t val);

  bool operator == (const netbufferv4_cached_action_action_spec_t & rhs) const
  {
    if (!(action_idx == rhs.action_idx))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_cached_action_action_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_cached_action_action_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_cached_action_action_spec_t& obj);
};

void swap(netbufferv4_cached_action_action_spec_t &a, netbufferv4_cached_action_action_spec_t &b);


class netbufferv4_update_getreq_inswitch_to_getres_by_mirroring_action_spec_t {
 public:

  static const char* ascii_fingerprint; // = "CF61E7A3956E3D6B3BD04841C5A945B2";
  static const uint8_t binary_fingerprint[16]; // = {0xCF,0x61,0xE7,0xA3,0x95,0x6E,0x3D,0x6B,0x3B,0xD0,0x48,0x41,0xC5,0xA9,0x45,0xB2};

  netbufferv4_update_getreq_inswitch_to_getres_by_mirroring_action_spec_t(const netbufferv4_update_getreq_inswitch_to_getres_by_mirroring_action_spec_t&);
  netbufferv4_update_getreq_inswitch_to_getres_by_mirroring_action_spec_t& operator=(const netbufferv4_update_getreq_inswitch_to_getres_by_mirroring_action_spec_t&);
  netbufferv4_update_getreq_inswitch_to_getres_by_mirroring_action_spec_t() : action_client_sid(0), action_server_port(0), action_stat(0) {
  }

  virtual ~netbufferv4_update_getreq_inswitch_to_getres_by_mirroring_action_spec_t() throw();
  int32_t action_client_sid;
  int16_t action_server_port;
  int8_t action_stat;

  void __set_action_client_sid(const int32_t val);

  void __set_action_server_port(const int16_t val);

  void __set_action_stat(const int8_t val);

  bool operator == (const netbufferv4_update_getreq_inswitch_to_getres_by_mirroring_action_spec_t & rhs) const
  {
    if (!(action_client_sid == rhs.action_client_sid))
      return false;
    if (!(action_server_port == rhs.action_server_port))
      return false;
    if (!(action_stat == rhs.action_stat))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_getreq_inswitch_to_getres_by_mirroring_action_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_getreq_inswitch_to_getres_by_mirroring_action_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_getreq_inswitch_to_getres_by_mirroring_action_spec_t& obj);
};

void swap(netbufferv4_update_getreq_inswitch_to_getres_by_mirroring_action_spec_t &a, netbufferv4_update_getreq_inswitch_to_getres_by_mirroring_action_spec_t &b);


class netbufferv4_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t {
 public:

  static const char* ascii_fingerprint; // = "D536F5DEB62A50F7527407B12DB84888";
  static const uint8_t binary_fingerprint[16]; // = {0xD5,0x36,0xF5,0xDE,0xB6,0x2A,0x50,0xF7,0x52,0x74,0x07,0xB1,0x2D,0xB8,0x48,0x88};

  netbufferv4_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t(const netbufferv4_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t&);
  netbufferv4_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t& operator=(const netbufferv4_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t&);
  netbufferv4_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t() : action_switchos_sid(0), action_stat(0), action_reflector_port(0) {
  }

  virtual ~netbufferv4_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t() throw();
  int32_t action_switchos_sid;
  int8_t action_stat;
  int16_t action_reflector_port;

  void __set_action_switchos_sid(const int32_t val);

  void __set_action_stat(const int8_t val);

  void __set_action_reflector_port(const int16_t val);

  bool operator == (const netbufferv4_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t & rhs) const
  {
    if (!(action_switchos_sid == rhs.action_switchos_sid))
      return false;
    if (!(action_stat == rhs.action_stat))
      return false;
    if (!(action_reflector_port == rhs.action_reflector_port))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t& obj);
};

void swap(netbufferv4_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t &a, netbufferv4_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t &b);


class netbufferv4_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  netbufferv4_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t(const netbufferv4_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t&);
  netbufferv4_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t& operator=(const netbufferv4_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t&);
  netbufferv4_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t() : action_switchos_sid(0) {
  }

  virtual ~netbufferv4_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t() throw();
  int32_t action_switchos_sid;

  void __set_action_switchos_sid(const int32_t val);

  bool operator == (const netbufferv4_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t & rhs) const
  {
    if (!(action_switchos_sid == rhs.action_switchos_sid))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t& obj);
};

void swap(netbufferv4_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t &a, netbufferv4_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t &b);


class netbufferv4_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t {
 public:

  static const char* ascii_fingerprint; // = "D536F5DEB62A50F7527407B12DB84888";
  static const uint8_t binary_fingerprint[16]; // = {0xD5,0x36,0xF5,0xDE,0xB6,0x2A,0x50,0xF7,0x52,0x74,0x07,0xB1,0x2D,0xB8,0x48,0x88};

  netbufferv4_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t(const netbufferv4_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t&);
  netbufferv4_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t& operator=(const netbufferv4_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t&);
  netbufferv4_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t() : action_switchos_sid(0), action_stat(0), action_reflector_port(0) {
  }

  virtual ~netbufferv4_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t() throw();
  int32_t action_switchos_sid;
  int8_t action_stat;
  int16_t action_reflector_port;

  void __set_action_switchos_sid(const int32_t val);

  void __set_action_stat(const int8_t val);

  void __set_action_reflector_port(const int16_t val);

  bool operator == (const netbufferv4_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t & rhs) const
  {
    if (!(action_switchos_sid == rhs.action_switchos_sid))
      return false;
    if (!(action_stat == rhs.action_stat))
      return false;
    if (!(action_reflector_port == rhs.action_reflector_port))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t& obj);
};

void swap(netbufferv4_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t &a, netbufferv4_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t &b);


class netbufferv4_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  netbufferv4_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t(const netbufferv4_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t&);
  netbufferv4_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t& operator=(const netbufferv4_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t&);
  netbufferv4_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t() : action_switchos_sid(0) {
  }

  virtual ~netbufferv4_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t() throw();
  int32_t action_switchos_sid;

  void __set_action_switchos_sid(const int32_t val);

  bool operator == (const netbufferv4_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t & rhs) const
  {
    if (!(action_switchos_sid == rhs.action_switchos_sid))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t& obj);
};

void swap(netbufferv4_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t &a, netbufferv4_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t &b);


class netbufferv4_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_action_spec_t {
 public:

  static const char* ascii_fingerprint; // = "422C35A5D98C69C9CDE50568C7E3028F";
  static const uint8_t binary_fingerprint[16]; // = {0x42,0x2C,0x35,0xA5,0xD9,0x8C,0x69,0xC9,0xCD,0xE5,0x05,0x68,0xC7,0xE3,0x02,0x8F};

  netbufferv4_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_action_spec_t(const netbufferv4_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_action_spec_t&);
  netbufferv4_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_action_spec_t& operator=(const netbufferv4_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_action_spec_t&);
  netbufferv4_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_action_spec_t() : action_switchos_sid(0), action_reflector_port(0) {
  }

  virtual ~netbufferv4_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_action_spec_t() throw();
  int32_t action_switchos_sid;
  int16_t action_reflector_port;

  void __set_action_switchos_sid(const int32_t val);

  void __set_action_reflector_port(const int16_t val);

  bool operator == (const netbufferv4_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_action_spec_t & rhs) const
  {
    if (!(action_switchos_sid == rhs.action_switchos_sid))
      return false;
    if (!(action_reflector_port == rhs.action_reflector_port))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_action_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_action_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_action_spec_t& obj);
};

void swap(netbufferv4_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_action_spec_t &a, netbufferv4_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_action_spec_t &b);


class netbufferv4_update_putreq_inswitch_to_putres_by_mirroring_action_spec_t {
 public:

  static const char* ascii_fingerprint; // = "422C35A5D98C69C9CDE50568C7E3028F";
  static const uint8_t binary_fingerprint[16]; // = {0x42,0x2C,0x35,0xA5,0xD9,0x8C,0x69,0xC9,0xCD,0xE5,0x05,0x68,0xC7,0xE3,0x02,0x8F};

  netbufferv4_update_putreq_inswitch_to_putres_by_mirroring_action_spec_t(const netbufferv4_update_putreq_inswitch_to_putres_by_mirroring_action_spec_t&);
  netbufferv4_update_putreq_inswitch_to_putres_by_mirroring_action_spec_t& operator=(const netbufferv4_update_putreq_inswitch_to_putres_by_mirroring_action_spec_t&);
  netbufferv4_update_putreq_inswitch_to_putres_by_mirroring_action_spec_t() : action_client_sid(0), action_server_port(0) {
  }

  virtual ~netbufferv4_update_putreq_inswitch_to_putres_by_mirroring_action_spec_t() throw();
  int32_t action_client_sid;
  int16_t action_server_port;

  void __set_action_client_sid(const int32_t val);

  void __set_action_server_port(const int16_t val);

  bool operator == (const netbufferv4_update_putreq_inswitch_to_putres_by_mirroring_action_spec_t & rhs) const
  {
    if (!(action_client_sid == rhs.action_client_sid))
      return false;
    if (!(action_server_port == rhs.action_server_port))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_putreq_inswitch_to_putres_by_mirroring_action_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_putreq_inswitch_to_putres_by_mirroring_action_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_putreq_inswitch_to_putres_by_mirroring_action_spec_t& obj);
};

void swap(netbufferv4_update_putreq_inswitch_to_putres_by_mirroring_action_spec_t &a, netbufferv4_update_putreq_inswitch_to_putres_by_mirroring_action_spec_t &b);


class netbufferv4_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t {
 public:

  static const char* ascii_fingerprint; // = "D536F5DEB62A50F7527407B12DB84888";
  static const uint8_t binary_fingerprint[16]; // = {0xD5,0x36,0xF5,0xDE,0xB6,0x2A,0x50,0xF7,0x52,0x74,0x07,0xB1,0x2D,0xB8,0x48,0x88};

  netbufferv4_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t(const netbufferv4_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t&);
  netbufferv4_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t& operator=(const netbufferv4_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t&);
  netbufferv4_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t() : action_switchos_sid(0), action_stat(0), action_reflector_port(0) {
  }

  virtual ~netbufferv4_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t() throw();
  int32_t action_switchos_sid;
  int8_t action_stat;
  int16_t action_reflector_port;

  void __set_action_switchos_sid(const int32_t val);

  void __set_action_stat(const int8_t val);

  void __set_action_reflector_port(const int16_t val);

  bool operator == (const netbufferv4_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t & rhs) const
  {
    if (!(action_switchos_sid == rhs.action_switchos_sid))
      return false;
    if (!(action_stat == rhs.action_stat))
      return false;
    if (!(action_reflector_port == rhs.action_reflector_port))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t& obj);
};

void swap(netbufferv4_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t &a, netbufferv4_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t &b);


class netbufferv4_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  netbufferv4_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t(const netbufferv4_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t&);
  netbufferv4_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t& operator=(const netbufferv4_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t&);
  netbufferv4_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t() : action_switchos_sid(0) {
  }

  virtual ~netbufferv4_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t() throw();
  int32_t action_switchos_sid;

  void __set_action_switchos_sid(const int32_t val);

  bool operator == (const netbufferv4_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t & rhs) const
  {
    if (!(action_switchos_sid == rhs.action_switchos_sid))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t& obj);
};

void swap(netbufferv4_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t &a, netbufferv4_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t &b);


class netbufferv4_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_action_spec_t {
 public:

  static const char* ascii_fingerprint; // = "422C35A5D98C69C9CDE50568C7E3028F";
  static const uint8_t binary_fingerprint[16]; // = {0x42,0x2C,0x35,0xA5,0xD9,0x8C,0x69,0xC9,0xCD,0xE5,0x05,0x68,0xC7,0xE3,0x02,0x8F};

  netbufferv4_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_action_spec_t(const netbufferv4_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_action_spec_t&);
  netbufferv4_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_action_spec_t& operator=(const netbufferv4_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_action_spec_t&);
  netbufferv4_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_action_spec_t() : action_client_sid(0), action_server_port(0) {
  }

  virtual ~netbufferv4_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_action_spec_t() throw();
  int32_t action_client_sid;
  int16_t action_server_port;

  void __set_action_client_sid(const int32_t val);

  void __set_action_server_port(const int16_t val);

  bool operator == (const netbufferv4_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_action_spec_t & rhs) const
  {
    if (!(action_client_sid == rhs.action_client_sid))
      return false;
    if (!(action_server_port == rhs.action_server_port))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_action_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_action_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_action_spec_t& obj);
};

void swap(netbufferv4_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_action_spec_t &a, netbufferv4_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_action_spec_t &b);


class netbufferv4_update_delreq_inswitch_to_delres_by_mirroring_action_spec_t {
 public:

  static const char* ascii_fingerprint; // = "422C35A5D98C69C9CDE50568C7E3028F";
  static const uint8_t binary_fingerprint[16]; // = {0x42,0x2C,0x35,0xA5,0xD9,0x8C,0x69,0xC9,0xCD,0xE5,0x05,0x68,0xC7,0xE3,0x02,0x8F};

  netbufferv4_update_delreq_inswitch_to_delres_by_mirroring_action_spec_t(const netbufferv4_update_delreq_inswitch_to_delres_by_mirroring_action_spec_t&);
  netbufferv4_update_delreq_inswitch_to_delres_by_mirroring_action_spec_t& operator=(const netbufferv4_update_delreq_inswitch_to_delres_by_mirroring_action_spec_t&);
  netbufferv4_update_delreq_inswitch_to_delres_by_mirroring_action_spec_t() : action_client_sid(0), action_server_port(0) {
  }

  virtual ~netbufferv4_update_delreq_inswitch_to_delres_by_mirroring_action_spec_t() throw();
  int32_t action_client_sid;
  int16_t action_server_port;

  void __set_action_client_sid(const int32_t val);

  void __set_action_server_port(const int16_t val);

  bool operator == (const netbufferv4_update_delreq_inswitch_to_delres_by_mirroring_action_spec_t & rhs) const
  {
    if (!(action_client_sid == rhs.action_client_sid))
      return false;
    if (!(action_server_port == rhs.action_server_port))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_delreq_inswitch_to_delres_by_mirroring_action_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_delreq_inswitch_to_delres_by_mirroring_action_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_delreq_inswitch_to_delres_by_mirroring_action_spec_t& obj);
};

void swap(netbufferv4_update_delreq_inswitch_to_delres_by_mirroring_action_spec_t &a, netbufferv4_update_delreq_inswitch_to_delres_by_mirroring_action_spec_t &b);


class netbufferv4_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t {
 public:

  static const char* ascii_fingerprint; // = "D536F5DEB62A50F7527407B12DB84888";
  static const uint8_t binary_fingerprint[16]; // = {0xD5,0x36,0xF5,0xDE,0xB6,0x2A,0x50,0xF7,0x52,0x74,0x07,0xB1,0x2D,0xB8,0x48,0x88};

  netbufferv4_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t(const netbufferv4_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t&);
  netbufferv4_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t& operator=(const netbufferv4_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t&);
  netbufferv4_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t() : action_switchos_sid(0), action_stat(0), action_reflector_port(0) {
  }

  virtual ~netbufferv4_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t() throw();
  int32_t action_switchos_sid;
  int8_t action_stat;
  int16_t action_reflector_port;

  void __set_action_switchos_sid(const int32_t val);

  void __set_action_stat(const int8_t val);

  void __set_action_reflector_port(const int16_t val);

  bool operator == (const netbufferv4_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t & rhs) const
  {
    if (!(action_switchos_sid == rhs.action_switchos_sid))
      return false;
    if (!(action_stat == rhs.action_stat))
      return false;
    if (!(action_reflector_port == rhs.action_reflector_port))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t& obj);
};

void swap(netbufferv4_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t &a, netbufferv4_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t &b);


class netbufferv4_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  netbufferv4_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t(const netbufferv4_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t&);
  netbufferv4_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t& operator=(const netbufferv4_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t&);
  netbufferv4_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t() : action_switchos_sid(0) {
  }

  virtual ~netbufferv4_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t() throw();
  int32_t action_switchos_sid;

  void __set_action_switchos_sid(const int32_t val);

  bool operator == (const netbufferv4_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t & rhs) const
  {
    if (!(action_switchos_sid == rhs.action_switchos_sid))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t& obj);
};

void swap(netbufferv4_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t &a, netbufferv4_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t &b);


class netbufferv4_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_action_spec_t {
 public:

  static const char* ascii_fingerprint; // = "422C35A5D98C69C9CDE50568C7E3028F";
  static const uint8_t binary_fingerprint[16]; // = {0x42,0x2C,0x35,0xA5,0xD9,0x8C,0x69,0xC9,0xCD,0xE5,0x05,0x68,0xC7,0xE3,0x02,0x8F};

  netbufferv4_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_action_spec_t(const netbufferv4_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_action_spec_t&);
  netbufferv4_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_action_spec_t& operator=(const netbufferv4_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_action_spec_t&);
  netbufferv4_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_action_spec_t() : action_client_sid(0), action_server_port(0) {
  }

  virtual ~netbufferv4_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_action_spec_t() throw();
  int32_t action_client_sid;
  int16_t action_server_port;

  void __set_action_client_sid(const int32_t val);

  void __set_action_server_port(const int16_t val);

  bool operator == (const netbufferv4_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_action_spec_t & rhs) const
  {
    if (!(action_client_sid == rhs.action_client_sid))
      return false;
    if (!(action_server_port == rhs.action_server_port))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_action_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_action_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_action_spec_t& obj);
};

void swap(netbufferv4_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_action_spec_t &a, netbufferv4_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_action_spec_t &b);


class netbufferv4_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_action_spec_t {
 public:

  static const char* ascii_fingerprint; // = "422C35A5D98C69C9CDE50568C7E3028F";
  static const uint8_t binary_fingerprint[16]; // = {0x42,0x2C,0x35,0xA5,0xD9,0x8C,0x69,0xC9,0xCD,0xE5,0x05,0x68,0xC7,0xE3,0x02,0x8F};

  netbufferv4_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_action_spec_t(const netbufferv4_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_action_spec_t&);
  netbufferv4_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_action_spec_t& operator=(const netbufferv4_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_action_spec_t&);
  netbufferv4_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_action_spec_t() : action_switchos_sid(0), action_reflector_port(0) {
  }

  virtual ~netbufferv4_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_action_spec_t() throw();
  int32_t action_switchos_sid;
  int16_t action_reflector_port;

  void __set_action_switchos_sid(const int32_t val);

  void __set_action_reflector_port(const int16_t val);

  bool operator == (const netbufferv4_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_action_spec_t & rhs) const
  {
    if (!(action_switchos_sid == rhs.action_switchos_sid))
      return false;
    if (!(action_reflector_port == rhs.action_reflector_port))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_action_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_action_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_action_spec_t& obj);
};

void swap(netbufferv4_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_action_spec_t &a, netbufferv4_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_action_spec_t &b);


class netbufferv4_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_action_spec_t {
 public:

  static const char* ascii_fingerprint; // = "CF61E7A3956E3D6B3BD04841C5A945B2";
  static const uint8_t binary_fingerprint[16]; // = {0xCF,0x61,0xE7,0xA3,0x95,0x6E,0x3D,0x6B,0x3B,0xD0,0x48,0x41,0xC5,0xA9,0x45,0xB2};

  netbufferv4_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_action_spec_t(const netbufferv4_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_action_spec_t&);
  netbufferv4_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_action_spec_t& operator=(const netbufferv4_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_action_spec_t&);
  netbufferv4_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_action_spec_t() : action_switchos_sid(0), action_reflector_port(0), action_stat(0) {
  }

  virtual ~netbufferv4_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_action_spec_t() throw();
  int32_t action_switchos_sid;
  int16_t action_reflector_port;
  int8_t action_stat;

  void __set_action_switchos_sid(const int32_t val);

  void __set_action_reflector_port(const int16_t val);

  void __set_action_stat(const int8_t val);

  bool operator == (const netbufferv4_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_action_spec_t & rhs) const
  {
    if (!(action_switchos_sid == rhs.action_switchos_sid))
      return false;
    if (!(action_reflector_port == rhs.action_reflector_port))
      return false;
    if (!(action_stat == rhs.action_stat))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_action_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_action_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_action_spec_t& obj);
};

void swap(netbufferv4_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_action_spec_t &a, netbufferv4_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_action_spec_t &b);


class netbufferv4_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_action_spec_t {
 public:

  static const char* ascii_fingerprint; // = "EA248E25891B87F14BDE0F5335C5E434";
  static const uint8_t binary_fingerprint[16]; // = {0xEA,0x24,0x8E,0x25,0x89,0x1B,0x87,0xF1,0x4B,0xDE,0x0F,0x53,0x35,0xC5,0xE4,0x34};

  netbufferv4_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_action_spec_t(const netbufferv4_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_action_spec_t&);
  netbufferv4_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_action_spec_t& operator=(const netbufferv4_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_action_spec_t&);
  netbufferv4_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_action_spec_t() : action_switchos_sid(0), action_reflector_port(0), action_stat(0) {
  }

  virtual ~netbufferv4_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_action_spec_t() throw();
  int32_t action_switchos_sid;
  int16_t action_reflector_port;
  int32_t action_stat;

  void __set_action_switchos_sid(const int32_t val);

  void __set_action_reflector_port(const int16_t val);

  void __set_action_stat(const int32_t val);

  bool operator == (const netbufferv4_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_action_spec_t & rhs) const
  {
    if (!(action_switchos_sid == rhs.action_switchos_sid))
      return false;
    if (!(action_reflector_port == rhs.action_reflector_port))
      return false;
    if (!(action_stat == rhs.action_stat))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_action_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_action_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_action_spec_t& obj);
};

void swap(netbufferv4_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_action_spec_t &a, netbufferv4_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_action_spec_t &b);


class netbufferv4_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_action_spec_t {
 public:

  static const char* ascii_fingerprint; // = "422C35A5D98C69C9CDE50568C7E3028F";
  static const uint8_t binary_fingerprint[16]; // = {0x42,0x2C,0x35,0xA5,0xD9,0x8C,0x69,0xC9,0xCD,0xE5,0x05,0x68,0xC7,0xE3,0x02,0x8F};

  netbufferv4_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_action_spec_t(const netbufferv4_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_action_spec_t&);
  netbufferv4_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_action_spec_t& operator=(const netbufferv4_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_action_spec_t&);
  netbufferv4_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_action_spec_t() : action_switchos_sid(0), action_reflector_port(0) {
  }

  virtual ~netbufferv4_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_action_spec_t() throw();
  int32_t action_switchos_sid;
  int16_t action_reflector_port;

  void __set_action_switchos_sid(const int32_t val);

  void __set_action_reflector_port(const int16_t val);

  bool operator == (const netbufferv4_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_action_spec_t & rhs) const
  {
    if (!(action_switchos_sid == rhs.action_switchos_sid))
      return false;
    if (!(action_reflector_port == rhs.action_reflector_port))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_action_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_action_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_action_spec_t& obj);
};

void swap(netbufferv4_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_action_spec_t &a, netbufferv4_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_action_spec_t &b);


class netbufferv4_hash_partition_action_spec_t {
 public:

  static const char* ascii_fingerprint; // = "C88FB7958D86460D03E699333A272947";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x8F,0xB7,0x95,0x8D,0x86,0x46,0x0D,0x03,0xE6,0x99,0x33,0x3A,0x27,0x29,0x47};

  netbufferv4_hash_partition_action_spec_t(const netbufferv4_hash_partition_action_spec_t&);
  netbufferv4_hash_partition_action_spec_t& operator=(const netbufferv4_hash_partition_action_spec_t&);
  netbufferv4_hash_partition_action_spec_t() : action_udpport(0), action_eport(0) {
  }

  virtual ~netbufferv4_hash_partition_action_spec_t() throw();
  int16_t action_udpport;
  int16_t action_eport;

  void __set_action_udpport(const int16_t val);

  void __set_action_eport(const int16_t val);

  bool operator == (const netbufferv4_hash_partition_action_spec_t & rhs) const
  {
    if (!(action_udpport == rhs.action_udpport))
      return false;
    if (!(action_eport == rhs.action_eport))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_hash_partition_action_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_hash_partition_action_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_hash_partition_action_spec_t& obj);
};

void swap(netbufferv4_hash_partition_action_spec_t &a, netbufferv4_hash_partition_action_spec_t &b);


class netbufferv4_forward_normal_response_action_spec_t {
 public:

  static const char* ascii_fingerprint; // = "565787C31CF2D774B532CB755189BF39";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0x57,0x87,0xC3,0x1C,0xF2,0xD7,0x74,0xB5,0x32,0xCB,0x75,0x51,0x89,0xBF,0x39};

  netbufferv4_forward_normal_response_action_spec_t(const netbufferv4_forward_normal_response_action_spec_t&);
  netbufferv4_forward_normal_response_action_spec_t& operator=(const netbufferv4_forward_normal_response_action_spec_t&);
  netbufferv4_forward_normal_response_action_spec_t() : action_eport(0) {
  }

  virtual ~netbufferv4_forward_normal_response_action_spec_t() throw();
  int16_t action_eport;

  void __set_action_eport(const int16_t val);

  bool operator == (const netbufferv4_forward_normal_response_action_spec_t & rhs) const
  {
    if (!(action_eport == rhs.action_eport))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_forward_normal_response_action_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_forward_normal_response_action_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_forward_normal_response_action_spec_t& obj);
};

void swap(netbufferv4_forward_normal_response_action_spec_t &a, netbufferv4_forward_normal_response_action_spec_t &b);


class netbufferv4_forward_special_get_response_action_spec_t {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  netbufferv4_forward_special_get_response_action_spec_t(const netbufferv4_forward_special_get_response_action_spec_t&);
  netbufferv4_forward_special_get_response_action_spec_t& operator=(const netbufferv4_forward_special_get_response_action_spec_t&);
  netbufferv4_forward_special_get_response_action_spec_t() : action_client_sid(0) {
  }

  virtual ~netbufferv4_forward_special_get_response_action_spec_t() throw();
  int32_t action_client_sid;

  void __set_action_client_sid(const int32_t val);

  bool operator == (const netbufferv4_forward_special_get_response_action_spec_t & rhs) const
  {
    if (!(action_client_sid == rhs.action_client_sid))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_forward_special_get_response_action_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_forward_special_get_response_action_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_forward_special_get_response_action_spec_t& obj);
};

void swap(netbufferv4_forward_special_get_response_action_spec_t &a, netbufferv4_forward_special_get_response_action_spec_t &b);


class netbufferv4_set_client_sid_action_spec_t {
 public:

  static const char* ascii_fingerprint; // = "565787C31CF2D774B532CB755189BF39";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0x57,0x87,0xC3,0x1C,0xF2,0xD7,0x74,0xB5,0x32,0xCB,0x75,0x51,0x89,0xBF,0x39};

  netbufferv4_set_client_sid_action_spec_t(const netbufferv4_set_client_sid_action_spec_t&);
  netbufferv4_set_client_sid_action_spec_t& operator=(const netbufferv4_set_client_sid_action_spec_t&);
  netbufferv4_set_client_sid_action_spec_t() : action_client_sid(0) {
  }

  virtual ~netbufferv4_set_client_sid_action_spec_t() throw();
  int16_t action_client_sid;

  void __set_action_client_sid(const int16_t val);

  bool operator == (const netbufferv4_set_client_sid_action_spec_t & rhs) const
  {
    if (!(action_client_sid == rhs.action_client_sid))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_set_client_sid_action_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_set_client_sid_action_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_set_client_sid_action_spec_t& obj);
};

void swap(netbufferv4_set_client_sid_action_spec_t &a, netbufferv4_set_client_sid_action_spec_t &b);


class netbufferv4_recirculate_pkt_action_spec_t {
 public:

  static const char* ascii_fingerprint; // = "A7D440367E85134EBDBAA7BCA01056D0";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

  netbufferv4_recirculate_pkt_action_spec_t(const netbufferv4_recirculate_pkt_action_spec_t&);
  netbufferv4_recirculate_pkt_action_spec_t& operator=(const netbufferv4_recirculate_pkt_action_spec_t&);
  netbufferv4_recirculate_pkt_action_spec_t() : action_port(0) {
  }

  virtual ~netbufferv4_recirculate_pkt_action_spec_t() throw();
  int8_t action_port;

  void __set_action_port(const int8_t val);

  bool operator == (const netbufferv4_recirculate_pkt_action_spec_t & rhs) const
  {
    if (!(action_port == rhs.action_port))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_recirculate_pkt_action_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_recirculate_pkt_action_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_recirculate_pkt_action_spec_t& obj);
};

void swap(netbufferv4_recirculate_pkt_action_spec_t &a, netbufferv4_recirculate_pkt_action_spec_t &b);


class netbufferv4_set_hot_threshold_action_spec_t {
 public:

  static const char* ascii_fingerprint; // = "565787C31CF2D774B532CB755189BF39";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0x57,0x87,0xC3,0x1C,0xF2,0xD7,0x74,0xB5,0x32,0xCB,0x75,0x51,0x89,0xBF,0x39};

  netbufferv4_set_hot_threshold_action_spec_t(const netbufferv4_set_hot_threshold_action_spec_t&);
  netbufferv4_set_hot_threshold_action_spec_t& operator=(const netbufferv4_set_hot_threshold_action_spec_t&);
  netbufferv4_set_hot_threshold_action_spec_t() : action_hot_threshold(0) {
  }

  virtual ~netbufferv4_set_hot_threshold_action_spec_t() throw();
  int16_t action_hot_threshold;

  void __set_action_hot_threshold(const int16_t val);

  bool operator == (const netbufferv4_set_hot_threshold_action_spec_t & rhs) const
  {
    if (!(action_hot_threshold == rhs.action_hot_threshold))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_set_hot_threshold_action_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_set_hot_threshold_action_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_set_hot_threshold_action_spec_t& obj);
};

void swap(netbufferv4_set_hot_threshold_action_spec_t &a, netbufferv4_set_hot_threshold_action_spec_t &b);


class netbufferv4_update_ipmac_srcport_server2client_action_spec_t {
 public:

  static const char* ascii_fingerprint; // = "993955C1B8251D6CC4D5D80F1D239651";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x39,0x55,0xC1,0xB8,0x25,0x1D,0x6C,0xC4,0xD5,0xD8,0x0F,0x1D,0x23,0x96,0x51};

  netbufferv4_update_ipmac_srcport_server2client_action_spec_t(const netbufferv4_update_ipmac_srcport_server2client_action_spec_t&);
  netbufferv4_update_ipmac_srcport_server2client_action_spec_t& operator=(const netbufferv4_update_ipmac_srcport_server2client_action_spec_t&);
  netbufferv4_update_ipmac_srcport_server2client_action_spec_t() : action_client_mac(), action_server_mac(), action_client_ip(0), action_server_ip(0), action_server_port(0) {
  }

  virtual ~netbufferv4_update_ipmac_srcport_server2client_action_spec_t() throw();
  MacAddr_t action_client_mac;
  MacAddr_t action_server_mac;
  int32_t action_client_ip;
  int32_t action_server_ip;
  int16_t action_server_port;

  void __set_action_client_mac(const MacAddr_t& val);

  void __set_action_server_mac(const MacAddr_t& val);

  void __set_action_client_ip(const int32_t val);

  void __set_action_server_ip(const int32_t val);

  void __set_action_server_port(const int16_t val);

  bool operator == (const netbufferv4_update_ipmac_srcport_server2client_action_spec_t & rhs) const
  {
    if (!(action_client_mac == rhs.action_client_mac))
      return false;
    if (!(action_server_mac == rhs.action_server_mac))
      return false;
    if (!(action_client_ip == rhs.action_client_ip))
      return false;
    if (!(action_server_ip == rhs.action_server_ip))
      return false;
    if (!(action_server_port == rhs.action_server_port))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_ipmac_srcport_server2client_action_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_ipmac_srcport_server2client_action_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_ipmac_srcport_server2client_action_spec_t& obj);
};

void swap(netbufferv4_update_ipmac_srcport_server2client_action_spec_t &a, netbufferv4_update_ipmac_srcport_server2client_action_spec_t &b);


class netbufferv4_update_ipmac_srcport_switch2switchos_action_spec_t {
 public:

  static const char* ascii_fingerprint; // = "993955C1B8251D6CC4D5D80F1D239651";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x39,0x55,0xC1,0xB8,0x25,0x1D,0x6C,0xC4,0xD5,0xD8,0x0F,0x1D,0x23,0x96,0x51};

  netbufferv4_update_ipmac_srcport_switch2switchos_action_spec_t(const netbufferv4_update_ipmac_srcport_switch2switchos_action_spec_t&);
  netbufferv4_update_ipmac_srcport_switch2switchos_action_spec_t& operator=(const netbufferv4_update_ipmac_srcport_switch2switchos_action_spec_t&);
  netbufferv4_update_ipmac_srcport_switch2switchos_action_spec_t() : action_client_mac(), action_switch_mac(), action_client_ip(0), action_switch_ip(0), action_client_port(0) {
  }

  virtual ~netbufferv4_update_ipmac_srcport_switch2switchos_action_spec_t() throw();
  MacAddr_t action_client_mac;
  MacAddr_t action_switch_mac;
  int32_t action_client_ip;
  int32_t action_switch_ip;
  int16_t action_client_port;

  void __set_action_client_mac(const MacAddr_t& val);

  void __set_action_switch_mac(const MacAddr_t& val);

  void __set_action_client_ip(const int32_t val);

  void __set_action_switch_ip(const int32_t val);

  void __set_action_client_port(const int16_t val);

  bool operator == (const netbufferv4_update_ipmac_srcport_switch2switchos_action_spec_t & rhs) const
  {
    if (!(action_client_mac == rhs.action_client_mac))
      return false;
    if (!(action_switch_mac == rhs.action_switch_mac))
      return false;
    if (!(action_client_ip == rhs.action_client_ip))
      return false;
    if (!(action_switch_ip == rhs.action_switch_ip))
      return false;
    if (!(action_client_port == rhs.action_client_port))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_ipmac_srcport_switch2switchos_action_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_ipmac_srcport_switch2switchos_action_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_ipmac_srcport_switch2switchos_action_spec_t& obj);
};

void swap(netbufferv4_update_ipmac_srcport_switch2switchos_action_spec_t &a, netbufferv4_update_ipmac_srcport_switch2switchos_action_spec_t &b);


class netbufferv4_update_dstipmac_client2server_action_spec_t {
 public:

  static const char* ascii_fingerprint; // = "EEBC915CE44901401D881E6091423036";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

  netbufferv4_update_dstipmac_client2server_action_spec_t(const netbufferv4_update_dstipmac_client2server_action_spec_t&);
  netbufferv4_update_dstipmac_client2server_action_spec_t& operator=(const netbufferv4_update_dstipmac_client2server_action_spec_t&);
  netbufferv4_update_dstipmac_client2server_action_spec_t() : action_server_mac(), action_server_ip(0) {
  }

  virtual ~netbufferv4_update_dstipmac_client2server_action_spec_t() throw();
  MacAddr_t action_server_mac;
  int32_t action_server_ip;

  void __set_action_server_mac(const MacAddr_t& val);

  void __set_action_server_ip(const int32_t val);

  bool operator == (const netbufferv4_update_dstipmac_client2server_action_spec_t & rhs) const
  {
    if (!(action_server_mac == rhs.action_server_mac))
      return false;
    if (!(action_server_ip == rhs.action_server_ip))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_dstipmac_client2server_action_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_dstipmac_client2server_action_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_dstipmac_client2server_action_spec_t& obj);
};

void swap(netbufferv4_update_dstipmac_client2server_action_spec_t &a, netbufferv4_update_dstipmac_client2server_action_spec_t &b);


class netbufferv4_update_pktlen_action_spec_t {
 public:

  static const char* ascii_fingerprint; // = "C88FB7958D86460D03E699333A272947";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x8F,0xB7,0x95,0x8D,0x86,0x46,0x0D,0x03,0xE6,0x99,0x33,0x3A,0x27,0x29,0x47};

  netbufferv4_update_pktlen_action_spec_t(const netbufferv4_update_pktlen_action_spec_t&);
  netbufferv4_update_pktlen_action_spec_t& operator=(const netbufferv4_update_pktlen_action_spec_t&);
  netbufferv4_update_pktlen_action_spec_t() : action_udplen(0), action_iplen(0) {
  }

  virtual ~netbufferv4_update_pktlen_action_spec_t() throw();
  int16_t action_udplen;
  int16_t action_iplen;

  void __set_action_udplen(const int16_t val);

  void __set_action_iplen(const int16_t val);

  bool operator == (const netbufferv4_update_pktlen_action_spec_t & rhs) const
  {
    if (!(action_udplen == rhs.action_udplen))
      return false;
    if (!(action_iplen == rhs.action_iplen))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_pktlen_action_spec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_pktlen_action_spec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_pktlen_action_spec_t& obj);
};

void swap(netbufferv4_update_pktlen_action_spec_t &a, netbufferv4_update_pktlen_action_spec_t &b);

typedef struct _netbufferv4_action_specs_t__isset {
  _netbufferv4_action_specs_t__isset() : netbufferv4_cached_action(false), netbufferv4_update_getreq_inswitch_to_getres_by_mirroring(false), netbufferv4_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss(false), netbufferv4_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss(false), netbufferv4_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss(false), netbufferv4_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss(false), netbufferv4_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone(false), netbufferv4_update_putreq_inswitch_to_putres_by_mirroring(false), netbufferv4_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres(false), netbufferv4_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres(false), netbufferv4_update_putreq_seq_inswitch_case1_to_putres_by_mirroring(false), netbufferv4_update_delreq_inswitch_to_delres_by_mirroring(false), netbufferv4_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres(false), netbufferv4_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres(false), netbufferv4_update_delreq_seq_inswitch_case1_to_delres_by_mirroring(false), netbufferv4_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone(false), netbufferv4_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone(false), netbufferv4_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone(false), netbufferv4_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone(false), netbufferv4_hash_partition(false), netbufferv4_forward_normal_response(false), netbufferv4_forward_special_get_response(false), netbufferv4_set_client_sid(false), netbufferv4_recirculate_pkt(false), netbufferv4_set_hot_threshold(false), netbufferv4_update_ipmac_srcport_server2client(false), netbufferv4_update_ipmac_srcport_switch2switchos(false), netbufferv4_update_dstipmac_client2server(false), netbufferv4_update_pktlen(false) {}
  bool netbufferv4_cached_action :1;
  bool netbufferv4_update_getreq_inswitch_to_getres_by_mirroring :1;
  bool netbufferv4_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss :1;
  bool netbufferv4_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss :1;
  bool netbufferv4_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss :1;
  bool netbufferv4_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss :1;
  bool netbufferv4_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone :1;
  bool netbufferv4_update_putreq_inswitch_to_putres_by_mirroring :1;
  bool netbufferv4_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres :1;
  bool netbufferv4_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres :1;
  bool netbufferv4_update_putreq_seq_inswitch_case1_to_putres_by_mirroring :1;
  bool netbufferv4_update_delreq_inswitch_to_delres_by_mirroring :1;
  bool netbufferv4_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres :1;
  bool netbufferv4_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres :1;
  bool netbufferv4_update_delreq_seq_inswitch_case1_to_delres_by_mirroring :1;
  bool netbufferv4_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone :1;
  bool netbufferv4_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone :1;
  bool netbufferv4_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone :1;
  bool netbufferv4_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone :1;
  bool netbufferv4_hash_partition :1;
  bool netbufferv4_forward_normal_response :1;
  bool netbufferv4_forward_special_get_response :1;
  bool netbufferv4_set_client_sid :1;
  bool netbufferv4_recirculate_pkt :1;
  bool netbufferv4_set_hot_threshold :1;
  bool netbufferv4_update_ipmac_srcport_server2client :1;
  bool netbufferv4_update_ipmac_srcport_switch2switchos :1;
  bool netbufferv4_update_dstipmac_client2server :1;
  bool netbufferv4_update_pktlen :1;
} _netbufferv4_action_specs_t__isset;

class netbufferv4_action_specs_t {
 public:

  static const char* ascii_fingerprint; // = "8B24B122377D2082CD3368AE471BB6B2";
  static const uint8_t binary_fingerprint[16]; // = {0x8B,0x24,0xB1,0x22,0x37,0x7D,0x20,0x82,0xCD,0x33,0x68,0xAE,0x47,0x1B,0xB6,0xB2};

  netbufferv4_action_specs_t(const netbufferv4_action_specs_t&);
  netbufferv4_action_specs_t& operator=(const netbufferv4_action_specs_t&);
  netbufferv4_action_specs_t() {
  }

  virtual ~netbufferv4_action_specs_t() throw();
  netbufferv4_cached_action_action_spec_t netbufferv4_cached_action;
  netbufferv4_update_getreq_inswitch_to_getres_by_mirroring_action_spec_t netbufferv4_update_getreq_inswitch_to_getres_by_mirroring;
  netbufferv4_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t netbufferv4_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss;
  netbufferv4_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t netbufferv4_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss;
  netbufferv4_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t netbufferv4_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss;
  netbufferv4_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t netbufferv4_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss;
  netbufferv4_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_action_spec_t netbufferv4_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone;
  netbufferv4_update_putreq_inswitch_to_putres_by_mirroring_action_spec_t netbufferv4_update_putreq_inswitch_to_putres_by_mirroring;
  netbufferv4_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t netbufferv4_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres;
  netbufferv4_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t netbufferv4_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres;
  netbufferv4_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_action_spec_t netbufferv4_update_putreq_seq_inswitch_case1_to_putres_by_mirroring;
  netbufferv4_update_delreq_inswitch_to_delres_by_mirroring_action_spec_t netbufferv4_update_delreq_inswitch_to_delres_by_mirroring;
  netbufferv4_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t netbufferv4_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres;
  netbufferv4_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t netbufferv4_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres;
  netbufferv4_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_action_spec_t netbufferv4_update_delreq_seq_inswitch_case1_to_delres_by_mirroring;
  netbufferv4_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_action_spec_t netbufferv4_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone;
  netbufferv4_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_action_spec_t netbufferv4_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone;
  netbufferv4_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_action_spec_t netbufferv4_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone;
  netbufferv4_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_action_spec_t netbufferv4_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone;
  netbufferv4_hash_partition_action_spec_t netbufferv4_hash_partition;
  netbufferv4_forward_normal_response_action_spec_t netbufferv4_forward_normal_response;
  netbufferv4_forward_special_get_response_action_spec_t netbufferv4_forward_special_get_response;
  netbufferv4_set_client_sid_action_spec_t netbufferv4_set_client_sid;
  netbufferv4_recirculate_pkt_action_spec_t netbufferv4_recirculate_pkt;
  netbufferv4_set_hot_threshold_action_spec_t netbufferv4_set_hot_threshold;
  netbufferv4_update_ipmac_srcport_server2client_action_spec_t netbufferv4_update_ipmac_srcport_server2client;
  netbufferv4_update_ipmac_srcport_switch2switchos_action_spec_t netbufferv4_update_ipmac_srcport_switch2switchos;
  netbufferv4_update_dstipmac_client2server_action_spec_t netbufferv4_update_dstipmac_client2server;
  netbufferv4_update_pktlen_action_spec_t netbufferv4_update_pktlen;

  _netbufferv4_action_specs_t__isset __isset;

  void __set_netbufferv4_cached_action(const netbufferv4_cached_action_action_spec_t& val);

  void __set_netbufferv4_update_getreq_inswitch_to_getres_by_mirroring(const netbufferv4_update_getreq_inswitch_to_getres_by_mirroring_action_spec_t& val);

  void __set_netbufferv4_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss(const netbufferv4_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t& val);

  void __set_netbufferv4_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss(const netbufferv4_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t& val);

  void __set_netbufferv4_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss(const netbufferv4_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t& val);

  void __set_netbufferv4_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss(const netbufferv4_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t& val);

  void __set_netbufferv4_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone(const netbufferv4_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_action_spec_t& val);

  void __set_netbufferv4_update_putreq_inswitch_to_putres_by_mirroring(const netbufferv4_update_putreq_inswitch_to_putres_by_mirroring_action_spec_t& val);

  void __set_netbufferv4_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres(const netbufferv4_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t& val);

  void __set_netbufferv4_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres(const netbufferv4_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t& val);

  void __set_netbufferv4_update_putreq_seq_inswitch_case1_to_putres_by_mirroring(const netbufferv4_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_action_spec_t& val);

  void __set_netbufferv4_update_delreq_inswitch_to_delres_by_mirroring(const netbufferv4_update_delreq_inswitch_to_delres_by_mirroring_action_spec_t& val);

  void __set_netbufferv4_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres(const netbufferv4_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t& val);

  void __set_netbufferv4_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres(const netbufferv4_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t& val);

  void __set_netbufferv4_update_delreq_seq_inswitch_case1_to_delres_by_mirroring(const netbufferv4_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_action_spec_t& val);

  void __set_netbufferv4_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone(const netbufferv4_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_action_spec_t& val);

  void __set_netbufferv4_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone(const netbufferv4_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_action_spec_t& val);

  void __set_netbufferv4_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone(const netbufferv4_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_action_spec_t& val);

  void __set_netbufferv4_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone(const netbufferv4_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_action_spec_t& val);

  void __set_netbufferv4_hash_partition(const netbufferv4_hash_partition_action_spec_t& val);

  void __set_netbufferv4_forward_normal_response(const netbufferv4_forward_normal_response_action_spec_t& val);

  void __set_netbufferv4_forward_special_get_response(const netbufferv4_forward_special_get_response_action_spec_t& val);

  void __set_netbufferv4_set_client_sid(const netbufferv4_set_client_sid_action_spec_t& val);

  void __set_netbufferv4_recirculate_pkt(const netbufferv4_recirculate_pkt_action_spec_t& val);

  void __set_netbufferv4_set_hot_threshold(const netbufferv4_set_hot_threshold_action_spec_t& val);

  void __set_netbufferv4_update_ipmac_srcport_server2client(const netbufferv4_update_ipmac_srcport_server2client_action_spec_t& val);

  void __set_netbufferv4_update_ipmac_srcport_switch2switchos(const netbufferv4_update_ipmac_srcport_switch2switchos_action_spec_t& val);

  void __set_netbufferv4_update_dstipmac_client2server(const netbufferv4_update_dstipmac_client2server_action_spec_t& val);

  void __set_netbufferv4_update_pktlen(const netbufferv4_update_pktlen_action_spec_t& val);

  bool operator == (const netbufferv4_action_specs_t & rhs) const
  {
    if (!(netbufferv4_cached_action == rhs.netbufferv4_cached_action))
      return false;
    if (!(netbufferv4_update_getreq_inswitch_to_getres_by_mirroring == rhs.netbufferv4_update_getreq_inswitch_to_getres_by_mirroring))
      return false;
    if (!(netbufferv4_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss == rhs.netbufferv4_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss))
      return false;
    if (!(netbufferv4_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss == rhs.netbufferv4_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss))
      return false;
    if (!(netbufferv4_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss == rhs.netbufferv4_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss))
      return false;
    if (!(netbufferv4_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss == rhs.netbufferv4_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss))
      return false;
    if (!(netbufferv4_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone == rhs.netbufferv4_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone))
      return false;
    if (!(netbufferv4_update_putreq_inswitch_to_putres_by_mirroring == rhs.netbufferv4_update_putreq_inswitch_to_putres_by_mirroring))
      return false;
    if (!(netbufferv4_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres == rhs.netbufferv4_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres))
      return false;
    if (!(netbufferv4_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres == rhs.netbufferv4_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres))
      return false;
    if (!(netbufferv4_update_putreq_seq_inswitch_case1_to_putres_by_mirroring == rhs.netbufferv4_update_putreq_seq_inswitch_case1_to_putres_by_mirroring))
      return false;
    if (!(netbufferv4_update_delreq_inswitch_to_delres_by_mirroring == rhs.netbufferv4_update_delreq_inswitch_to_delres_by_mirroring))
      return false;
    if (!(netbufferv4_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres == rhs.netbufferv4_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres))
      return false;
    if (!(netbufferv4_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres == rhs.netbufferv4_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres))
      return false;
    if (!(netbufferv4_update_delreq_seq_inswitch_case1_to_delres_by_mirroring == rhs.netbufferv4_update_delreq_seq_inswitch_case1_to_delres_by_mirroring))
      return false;
    if (!(netbufferv4_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone == rhs.netbufferv4_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone))
      return false;
    if (!(netbufferv4_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone == rhs.netbufferv4_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone))
      return false;
    if (!(netbufferv4_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone == rhs.netbufferv4_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone))
      return false;
    if (!(netbufferv4_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone == rhs.netbufferv4_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone))
      return false;
    if (!(netbufferv4_hash_partition == rhs.netbufferv4_hash_partition))
      return false;
    if (!(netbufferv4_forward_normal_response == rhs.netbufferv4_forward_normal_response))
      return false;
    if (!(netbufferv4_forward_special_get_response == rhs.netbufferv4_forward_special_get_response))
      return false;
    if (!(netbufferv4_set_client_sid == rhs.netbufferv4_set_client_sid))
      return false;
    if (!(netbufferv4_recirculate_pkt == rhs.netbufferv4_recirculate_pkt))
      return false;
    if (!(netbufferv4_set_hot_threshold == rhs.netbufferv4_set_hot_threshold))
      return false;
    if (!(netbufferv4_update_ipmac_srcport_server2client == rhs.netbufferv4_update_ipmac_srcport_server2client))
      return false;
    if (!(netbufferv4_update_ipmac_srcport_switch2switchos == rhs.netbufferv4_update_ipmac_srcport_switch2switchos))
      return false;
    if (!(netbufferv4_update_dstipmac_client2server == rhs.netbufferv4_update_dstipmac_client2server))
      return false;
    if (!(netbufferv4_update_pktlen == rhs.netbufferv4_update_pktlen))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_action_specs_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_action_specs_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_action_specs_t& obj);
};

void swap(netbufferv4_action_specs_t &a, netbufferv4_action_specs_t &b);


class netbufferv4_action_desc_t {
 public:

  static const char* ascii_fingerprint; // = "D78B64CEAF6B1D8C19939714380D0F13";
  static const uint8_t binary_fingerprint[16]; // = {0xD7,0x8B,0x64,0xCE,0xAF,0x6B,0x1D,0x8C,0x19,0x93,0x97,0x14,0x38,0x0D,0x0F,0x13};

  netbufferv4_action_desc_t(const netbufferv4_action_desc_t&);
  netbufferv4_action_desc_t& operator=(const netbufferv4_action_desc_t&);
  netbufferv4_action_desc_t() : name() {
  }

  virtual ~netbufferv4_action_desc_t() throw();
  std::string name;
  netbufferv4_action_specs_t data;

  void __set_name(const std::string& val);

  void __set_data(const netbufferv4_action_specs_t& val);

  bool operator == (const netbufferv4_action_desc_t & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_action_desc_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_action_desc_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_action_desc_t& obj);
};

void swap(netbufferv4_action_desc_t &a, netbufferv4_action_desc_t &b);


class netbufferv4_access_cache_frequency_tbl_entry_desc_t {
 public:

  static const char* ascii_fingerprint; // = "6BE23B308092D50367CB03FA5F4AB97B";
  static const uint8_t binary_fingerprint[16]; // = {0x6B,0xE2,0x3B,0x30,0x80,0x92,0xD5,0x03,0x67,0xCB,0x03,0xFA,0x5F,0x4A,0xB9,0x7B};

  netbufferv4_access_cache_frequency_tbl_entry_desc_t(const netbufferv4_access_cache_frequency_tbl_entry_desc_t&);
  netbufferv4_access_cache_frequency_tbl_entry_desc_t& operator=(const netbufferv4_access_cache_frequency_tbl_entry_desc_t&);
  netbufferv4_access_cache_frequency_tbl_entry_desc_t() : has_mbr_hdl(0), has_grp_hdl(0), selector_grp_hdl(0), action_mbr_hdl(0) {
  }

  virtual ~netbufferv4_access_cache_frequency_tbl_entry_desc_t() throw();
  netbufferv4_access_cache_frequency_tbl_match_spec_t match_spec;
  bool has_mbr_hdl;
  bool has_grp_hdl;
  MemberHandle_t selector_grp_hdl;
  MemberHandle_t action_mbr_hdl;
  netbufferv4_action_desc_t action_desc;

  void __set_match_spec(const netbufferv4_access_cache_frequency_tbl_match_spec_t& val);

  void __set_has_mbr_hdl(const bool val);

  void __set_has_grp_hdl(const bool val);

  void __set_selector_grp_hdl(const MemberHandle_t val);

  void __set_action_mbr_hdl(const MemberHandle_t val);

  void __set_action_desc(const netbufferv4_action_desc_t& val);

  bool operator == (const netbufferv4_access_cache_frequency_tbl_entry_desc_t & rhs) const
  {
    if (!(match_spec == rhs.match_spec))
      return false;
    if (!(has_mbr_hdl == rhs.has_mbr_hdl))
      return false;
    if (!(has_grp_hdl == rhs.has_grp_hdl))
      return false;
    if (!(selector_grp_hdl == rhs.selector_grp_hdl))
      return false;
    if (!(action_mbr_hdl == rhs.action_mbr_hdl))
      return false;
    if (!(action_desc == rhs.action_desc))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_access_cache_frequency_tbl_entry_desc_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_access_cache_frequency_tbl_entry_desc_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_access_cache_frequency_tbl_entry_desc_t& obj);
};

void swap(netbufferv4_access_cache_frequency_tbl_entry_desc_t &a, netbufferv4_access_cache_frequency_tbl_entry_desc_t &b);


class netbufferv4_access_case1_tbl_entry_desc_t {
 public:

  static const char* ascii_fingerprint; // = "709A19CC597FC9864EFD231EC2D751C1";
  static const uint8_t binary_fingerprint[16]; // = {0x70,0x9A,0x19,0xCC,0x59,0x7F,0xC9,0x86,0x4E,0xFD,0x23,0x1E,0xC2,0xD7,0x51,0xC1};

  netbufferv4_access_case1_tbl_entry_desc_t(const netbufferv4_access_case1_tbl_entry_desc_t&);
  netbufferv4_access_case1_tbl_entry_desc_t& operator=(const netbufferv4_access_case1_tbl_entry_desc_t&);
  netbufferv4_access_case1_tbl_entry_desc_t() : has_mbr_hdl(0), has_grp_hdl(0), selector_grp_hdl(0), action_mbr_hdl(0) {
  }

  virtual ~netbufferv4_access_case1_tbl_entry_desc_t() throw();
  netbufferv4_access_case1_tbl_match_spec_t match_spec;
  bool has_mbr_hdl;
  bool has_grp_hdl;
  MemberHandle_t selector_grp_hdl;
  MemberHandle_t action_mbr_hdl;
  netbufferv4_action_desc_t action_desc;

  void __set_match_spec(const netbufferv4_access_case1_tbl_match_spec_t& val);

  void __set_has_mbr_hdl(const bool val);

  void __set_has_grp_hdl(const bool val);

  void __set_selector_grp_hdl(const MemberHandle_t val);

  void __set_action_mbr_hdl(const MemberHandle_t val);

  void __set_action_desc(const netbufferv4_action_desc_t& val);

  bool operator == (const netbufferv4_access_case1_tbl_entry_desc_t & rhs) const
  {
    if (!(match_spec == rhs.match_spec))
      return false;
    if (!(has_mbr_hdl == rhs.has_mbr_hdl))
      return false;
    if (!(has_grp_hdl == rhs.has_grp_hdl))
      return false;
    if (!(selector_grp_hdl == rhs.selector_grp_hdl))
      return false;
    if (!(action_mbr_hdl == rhs.action_mbr_hdl))
      return false;
    if (!(action_desc == rhs.action_desc))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_access_case1_tbl_entry_desc_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_access_case1_tbl_entry_desc_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_access_case1_tbl_entry_desc_t& obj);
};

void swap(netbufferv4_access_case1_tbl_entry_desc_t &a, netbufferv4_access_case1_tbl_entry_desc_t &b);


class netbufferv4_access_cm1_tbl_entry_desc_t {
 public:

  static const char* ascii_fingerprint; // = "6BE23B308092D50367CB03FA5F4AB97B";
  static const uint8_t binary_fingerprint[16]; // = {0x6B,0xE2,0x3B,0x30,0x80,0x92,0xD5,0x03,0x67,0xCB,0x03,0xFA,0x5F,0x4A,0xB9,0x7B};

  netbufferv4_access_cm1_tbl_entry_desc_t(const netbufferv4_access_cm1_tbl_entry_desc_t&);
  netbufferv4_access_cm1_tbl_entry_desc_t& operator=(const netbufferv4_access_cm1_tbl_entry_desc_t&);
  netbufferv4_access_cm1_tbl_entry_desc_t() : has_mbr_hdl(0), has_grp_hdl(0), selector_grp_hdl(0), action_mbr_hdl(0) {
  }

  virtual ~netbufferv4_access_cm1_tbl_entry_desc_t() throw();
  netbufferv4_access_cm1_tbl_match_spec_t match_spec;
  bool has_mbr_hdl;
  bool has_grp_hdl;
  MemberHandle_t selector_grp_hdl;
  MemberHandle_t action_mbr_hdl;
  netbufferv4_action_desc_t action_desc;

  void __set_match_spec(const netbufferv4_access_cm1_tbl_match_spec_t& val);

  void __set_has_mbr_hdl(const bool val);

  void __set_has_grp_hdl(const bool val);

  void __set_selector_grp_hdl(const MemberHandle_t val);

  void __set_action_mbr_hdl(const MemberHandle_t val);

  void __set_action_desc(const netbufferv4_action_desc_t& val);

  bool operator == (const netbufferv4_access_cm1_tbl_entry_desc_t & rhs) const
  {
    if (!(match_spec == rhs.match_spec))
      return false;
    if (!(has_mbr_hdl == rhs.has_mbr_hdl))
      return false;
    if (!(has_grp_hdl == rhs.has_grp_hdl))
      return false;
    if (!(selector_grp_hdl == rhs.selector_grp_hdl))
      return false;
    if (!(action_mbr_hdl == rhs.action_mbr_hdl))
      return false;
    if (!(action_desc == rhs.action_desc))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_access_cm1_tbl_entry_desc_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_access_cm1_tbl_entry_desc_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_access_cm1_tbl_entry_desc_t& obj);
};

void swap(netbufferv4_access_cm1_tbl_entry_desc_t &a, netbufferv4_access_cm1_tbl_entry_desc_t &b);


class netbufferv4_access_cm2_tbl_entry_desc_t {
 public:

  static const char* ascii_fingerprint; // = "6BE23B308092D50367CB03FA5F4AB97B";
  static const uint8_t binary_fingerprint[16]; // = {0x6B,0xE2,0x3B,0x30,0x80,0x92,0xD5,0x03,0x67,0xCB,0x03,0xFA,0x5F,0x4A,0xB9,0x7B};

  netbufferv4_access_cm2_tbl_entry_desc_t(const netbufferv4_access_cm2_tbl_entry_desc_t&);
  netbufferv4_access_cm2_tbl_entry_desc_t& operator=(const netbufferv4_access_cm2_tbl_entry_desc_t&);
  netbufferv4_access_cm2_tbl_entry_desc_t() : has_mbr_hdl(0), has_grp_hdl(0), selector_grp_hdl(0), action_mbr_hdl(0) {
  }

  virtual ~netbufferv4_access_cm2_tbl_entry_desc_t() throw();
  netbufferv4_access_cm2_tbl_match_spec_t match_spec;
  bool has_mbr_hdl;
  bool has_grp_hdl;
  MemberHandle_t selector_grp_hdl;
  MemberHandle_t action_mbr_hdl;
  netbufferv4_action_desc_t action_desc;

  void __set_match_spec(const netbufferv4_access_cm2_tbl_match_spec_t& val);

  void __set_has_mbr_hdl(const bool val);

  void __set_has_grp_hdl(const bool val);

  void __set_selector_grp_hdl(const MemberHandle_t val);

  void __set_action_mbr_hdl(const MemberHandle_t val);

  void __set_action_desc(const netbufferv4_action_desc_t& val);

  bool operator == (const netbufferv4_access_cm2_tbl_entry_desc_t & rhs) const
  {
    if (!(match_spec == rhs.match_spec))
      return false;
    if (!(has_mbr_hdl == rhs.has_mbr_hdl))
      return false;
    if (!(has_grp_hdl == rhs.has_grp_hdl))
      return false;
    if (!(selector_grp_hdl == rhs.selector_grp_hdl))
      return false;
    if (!(action_mbr_hdl == rhs.action_mbr_hdl))
      return false;
    if (!(action_desc == rhs.action_desc))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_access_cm2_tbl_entry_desc_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_access_cm2_tbl_entry_desc_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_access_cm2_tbl_entry_desc_t& obj);
};

void swap(netbufferv4_access_cm2_tbl_entry_desc_t &a, netbufferv4_access_cm2_tbl_entry_desc_t &b);


class netbufferv4_access_cm3_tbl_entry_desc_t {
 public:

  static const char* ascii_fingerprint; // = "6BE23B308092D50367CB03FA5F4AB97B";
  static const uint8_t binary_fingerprint[16]; // = {0x6B,0xE2,0x3B,0x30,0x80,0x92,0xD5,0x03,0x67,0xCB,0x03,0xFA,0x5F,0x4A,0xB9,0x7B};

  netbufferv4_access_cm3_tbl_entry_desc_t(const netbufferv4_access_cm3_tbl_entry_desc_t&);
  netbufferv4_access_cm3_tbl_entry_desc_t& operator=(const netbufferv4_access_cm3_tbl_entry_desc_t&);
  netbufferv4_access_cm3_tbl_entry_desc_t() : has_mbr_hdl(0), has_grp_hdl(0), selector_grp_hdl(0), action_mbr_hdl(0) {
  }

  virtual ~netbufferv4_access_cm3_tbl_entry_desc_t() throw();
  netbufferv4_access_cm3_tbl_match_spec_t match_spec;
  bool has_mbr_hdl;
  bool has_grp_hdl;
  MemberHandle_t selector_grp_hdl;
  MemberHandle_t action_mbr_hdl;
  netbufferv4_action_desc_t action_desc;

  void __set_match_spec(const netbufferv4_access_cm3_tbl_match_spec_t& val);

  void __set_has_mbr_hdl(const bool val);

  void __set_has_grp_hdl(const bool val);

  void __set_selector_grp_hdl(const MemberHandle_t val);

  void __set_action_mbr_hdl(const MemberHandle_t val);

  void __set_action_desc(const netbufferv4_action_desc_t& val);

  bool operator == (const netbufferv4_access_cm3_tbl_entry_desc_t & rhs) const
  {
    if (!(match_spec == rhs.match_spec))
      return false;
    if (!(has_mbr_hdl == rhs.has_mbr_hdl))
      return false;
    if (!(has_grp_hdl == rhs.has_grp_hdl))
      return false;
    if (!(selector_grp_hdl == rhs.selector_grp_hdl))
      return false;
    if (!(action_mbr_hdl == rhs.action_mbr_hdl))
      return false;
    if (!(action_desc == rhs.action_desc))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_access_cm3_tbl_entry_desc_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_access_cm3_tbl_entry_desc_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_access_cm3_tbl_entry_desc_t& obj);
};

void swap(netbufferv4_access_cm3_tbl_entry_desc_t &a, netbufferv4_access_cm3_tbl_entry_desc_t &b);


class netbufferv4_access_cm4_tbl_entry_desc_t {
 public:

  static const char* ascii_fingerprint; // = "6BE23B308092D50367CB03FA5F4AB97B";
  static const uint8_t binary_fingerprint[16]; // = {0x6B,0xE2,0x3B,0x30,0x80,0x92,0xD5,0x03,0x67,0xCB,0x03,0xFA,0x5F,0x4A,0xB9,0x7B};

  netbufferv4_access_cm4_tbl_entry_desc_t(const netbufferv4_access_cm4_tbl_entry_desc_t&);
  netbufferv4_access_cm4_tbl_entry_desc_t& operator=(const netbufferv4_access_cm4_tbl_entry_desc_t&);
  netbufferv4_access_cm4_tbl_entry_desc_t() : has_mbr_hdl(0), has_grp_hdl(0), selector_grp_hdl(0), action_mbr_hdl(0) {
  }

  virtual ~netbufferv4_access_cm4_tbl_entry_desc_t() throw();
  netbufferv4_access_cm4_tbl_match_spec_t match_spec;
  bool has_mbr_hdl;
  bool has_grp_hdl;
  MemberHandle_t selector_grp_hdl;
  MemberHandle_t action_mbr_hdl;
  netbufferv4_action_desc_t action_desc;

  void __set_match_spec(const netbufferv4_access_cm4_tbl_match_spec_t& val);

  void __set_has_mbr_hdl(const bool val);

  void __set_has_grp_hdl(const bool val);

  void __set_selector_grp_hdl(const MemberHandle_t val);

  void __set_action_mbr_hdl(const MemberHandle_t val);

  void __set_action_desc(const netbufferv4_action_desc_t& val);

  bool operator == (const netbufferv4_access_cm4_tbl_entry_desc_t & rhs) const
  {
    if (!(match_spec == rhs.match_spec))
      return false;
    if (!(has_mbr_hdl == rhs.has_mbr_hdl))
      return false;
    if (!(has_grp_hdl == rhs.has_grp_hdl))
      return false;
    if (!(selector_grp_hdl == rhs.selector_grp_hdl))
      return false;
    if (!(action_mbr_hdl == rhs.action_mbr_hdl))
      return false;
    if (!(action_desc == rhs.action_desc))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_access_cm4_tbl_entry_desc_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_access_cm4_tbl_entry_desc_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_access_cm4_tbl_entry_desc_t& obj);
};

void swap(netbufferv4_access_cm4_tbl_entry_desc_t &a, netbufferv4_access_cm4_tbl_entry_desc_t &b);


class netbufferv4_access_deleted_tbl_entry_desc_t {
 public:

  static const char* ascii_fingerprint; // = "35BEF31FF63A6EDE4C7F4DACCA44BC4F";
  static const uint8_t binary_fingerprint[16]; // = {0x35,0xBE,0xF3,0x1F,0xF6,0x3A,0x6E,0xDE,0x4C,0x7F,0x4D,0xAC,0xCA,0x44,0xBC,0x4F};

  netbufferv4_access_deleted_tbl_entry_desc_t(const netbufferv4_access_deleted_tbl_entry_desc_t&);
  netbufferv4_access_deleted_tbl_entry_desc_t& operator=(const netbufferv4_access_deleted_tbl_entry_desc_t&);
  netbufferv4_access_deleted_tbl_entry_desc_t() : has_mbr_hdl(0), has_grp_hdl(0), selector_grp_hdl(0), action_mbr_hdl(0) {
  }

  virtual ~netbufferv4_access_deleted_tbl_entry_desc_t() throw();
  netbufferv4_access_deleted_tbl_match_spec_t match_spec;
  bool has_mbr_hdl;
  bool has_grp_hdl;
  MemberHandle_t selector_grp_hdl;
  MemberHandle_t action_mbr_hdl;
  netbufferv4_action_desc_t action_desc;

  void __set_match_spec(const netbufferv4_access_deleted_tbl_match_spec_t& val);

  void __set_has_mbr_hdl(const bool val);

  void __set_has_grp_hdl(const bool val);

  void __set_selector_grp_hdl(const MemberHandle_t val);

  void __set_action_mbr_hdl(const MemberHandle_t val);

  void __set_action_desc(const netbufferv4_action_desc_t& val);

  bool operator == (const netbufferv4_access_deleted_tbl_entry_desc_t & rhs) const
  {
    if (!(match_spec == rhs.match_spec))
      return false;
    if (!(has_mbr_hdl == rhs.has_mbr_hdl))
      return false;
    if (!(has_grp_hdl == rhs.has_grp_hdl))
      return false;
    if (!(selector_grp_hdl == rhs.selector_grp_hdl))
      return false;
    if (!(action_mbr_hdl == rhs.action_mbr_hdl))
      return false;
    if (!(action_desc == rhs.action_desc))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_access_deleted_tbl_entry_desc_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_access_deleted_tbl_entry_desc_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_access_deleted_tbl_entry_desc_t& obj);
};

void swap(netbufferv4_access_deleted_tbl_entry_desc_t &a, netbufferv4_access_deleted_tbl_entry_desc_t &b);


class netbufferv4_access_latest_tbl_entry_desc_t {
 public:

  static const char* ascii_fingerprint; // = "6BE23B308092D50367CB03FA5F4AB97B";
  static const uint8_t binary_fingerprint[16]; // = {0x6B,0xE2,0x3B,0x30,0x80,0x92,0xD5,0x03,0x67,0xCB,0x03,0xFA,0x5F,0x4A,0xB9,0x7B};

  netbufferv4_access_latest_tbl_entry_desc_t(const netbufferv4_access_latest_tbl_entry_desc_t&);
  netbufferv4_access_latest_tbl_entry_desc_t& operator=(const netbufferv4_access_latest_tbl_entry_desc_t&);
  netbufferv4_access_latest_tbl_entry_desc_t() : has_mbr_hdl(0), has_grp_hdl(0), selector_grp_hdl(0), action_mbr_hdl(0) {
  }

  virtual ~netbufferv4_access_latest_tbl_entry_desc_t() throw();
  netbufferv4_access_latest_tbl_match_spec_t match_spec;
  bool has_mbr_hdl;
  bool has_grp_hdl;
  MemberHandle_t selector_grp_hdl;
  MemberHandle_t action_mbr_hdl;
  netbufferv4_action_desc_t action_desc;

  void __set_match_spec(const netbufferv4_access_latest_tbl_match_spec_t& val);

  void __set_has_mbr_hdl(const bool val);

  void __set_has_grp_hdl(const bool val);

  void __set_selector_grp_hdl(const MemberHandle_t val);

  void __set_action_mbr_hdl(const MemberHandle_t val);

  void __set_action_desc(const netbufferv4_action_desc_t& val);

  bool operator == (const netbufferv4_access_latest_tbl_entry_desc_t & rhs) const
  {
    if (!(match_spec == rhs.match_spec))
      return false;
    if (!(has_mbr_hdl == rhs.has_mbr_hdl))
      return false;
    if (!(has_grp_hdl == rhs.has_grp_hdl))
      return false;
    if (!(selector_grp_hdl == rhs.selector_grp_hdl))
      return false;
    if (!(action_mbr_hdl == rhs.action_mbr_hdl))
      return false;
    if (!(action_desc == rhs.action_desc))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_access_latest_tbl_entry_desc_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_access_latest_tbl_entry_desc_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_access_latest_tbl_entry_desc_t& obj);
};

void swap(netbufferv4_access_latest_tbl_entry_desc_t &a, netbufferv4_access_latest_tbl_entry_desc_t &b);


class netbufferv4_access_savedseq_tbl_entry_desc_t {
 public:

  static const char* ascii_fingerprint; // = "35BEF31FF63A6EDE4C7F4DACCA44BC4F";
  static const uint8_t binary_fingerprint[16]; // = {0x35,0xBE,0xF3,0x1F,0xF6,0x3A,0x6E,0xDE,0x4C,0x7F,0x4D,0xAC,0xCA,0x44,0xBC,0x4F};

  netbufferv4_access_savedseq_tbl_entry_desc_t(const netbufferv4_access_savedseq_tbl_entry_desc_t&);
  netbufferv4_access_savedseq_tbl_entry_desc_t& operator=(const netbufferv4_access_savedseq_tbl_entry_desc_t&);
  netbufferv4_access_savedseq_tbl_entry_desc_t() : has_mbr_hdl(0), has_grp_hdl(0), selector_grp_hdl(0), action_mbr_hdl(0) {
  }

  virtual ~netbufferv4_access_savedseq_tbl_entry_desc_t() throw();
  netbufferv4_access_savedseq_tbl_match_spec_t match_spec;
  bool has_mbr_hdl;
  bool has_grp_hdl;
  MemberHandle_t selector_grp_hdl;
  MemberHandle_t action_mbr_hdl;
  netbufferv4_action_desc_t action_desc;

  void __set_match_spec(const netbufferv4_access_savedseq_tbl_match_spec_t& val);

  void __set_has_mbr_hdl(const bool val);

  void __set_has_grp_hdl(const bool val);

  void __set_selector_grp_hdl(const MemberHandle_t val);

  void __set_action_mbr_hdl(const MemberHandle_t val);

  void __set_action_desc(const netbufferv4_action_desc_t& val);

  bool operator == (const netbufferv4_access_savedseq_tbl_entry_desc_t & rhs) const
  {
    if (!(match_spec == rhs.match_spec))
      return false;
    if (!(has_mbr_hdl == rhs.has_mbr_hdl))
      return false;
    if (!(has_grp_hdl == rhs.has_grp_hdl))
      return false;
    if (!(selector_grp_hdl == rhs.selector_grp_hdl))
      return false;
    if (!(action_mbr_hdl == rhs.action_mbr_hdl))
      return false;
    if (!(action_desc == rhs.action_desc))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_access_savedseq_tbl_entry_desc_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_access_savedseq_tbl_entry_desc_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_access_savedseq_tbl_entry_desc_t& obj);
};

void swap(netbufferv4_access_savedseq_tbl_entry_desc_t &a, netbufferv4_access_savedseq_tbl_entry_desc_t &b);


class netbufferv4_access_seq_tbl_entry_desc_t {
 public:

  static const char* ascii_fingerprint; // = "8F4B39D2F0C2AFA86671D0C1E2E0A0E8";
  static const uint8_t binary_fingerprint[16]; // = {0x8F,0x4B,0x39,0xD2,0xF0,0xC2,0xAF,0xA8,0x66,0x71,0xD0,0xC1,0xE2,0xE0,0xA0,0xE8};

  netbufferv4_access_seq_tbl_entry_desc_t(const netbufferv4_access_seq_tbl_entry_desc_t&);
  netbufferv4_access_seq_tbl_entry_desc_t& operator=(const netbufferv4_access_seq_tbl_entry_desc_t&);
  netbufferv4_access_seq_tbl_entry_desc_t() : has_mbr_hdl(0), has_grp_hdl(0), selector_grp_hdl(0), action_mbr_hdl(0) {
  }

  virtual ~netbufferv4_access_seq_tbl_entry_desc_t() throw();
  netbufferv4_access_seq_tbl_match_spec_t match_spec;
  bool has_mbr_hdl;
  bool has_grp_hdl;
  MemberHandle_t selector_grp_hdl;
  MemberHandle_t action_mbr_hdl;
  netbufferv4_action_desc_t action_desc;

  void __set_match_spec(const netbufferv4_access_seq_tbl_match_spec_t& val);

  void __set_has_mbr_hdl(const bool val);

  void __set_has_grp_hdl(const bool val);

  void __set_selector_grp_hdl(const MemberHandle_t val);

  void __set_action_mbr_hdl(const MemberHandle_t val);

  void __set_action_desc(const netbufferv4_action_desc_t& val);

  bool operator == (const netbufferv4_access_seq_tbl_entry_desc_t & rhs) const
  {
    if (!(match_spec == rhs.match_spec))
      return false;
    if (!(has_mbr_hdl == rhs.has_mbr_hdl))
      return false;
    if (!(has_grp_hdl == rhs.has_grp_hdl))
      return false;
    if (!(selector_grp_hdl == rhs.selector_grp_hdl))
      return false;
    if (!(action_mbr_hdl == rhs.action_mbr_hdl))
      return false;
    if (!(action_desc == rhs.action_desc))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_access_seq_tbl_entry_desc_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_access_seq_tbl_entry_desc_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_access_seq_tbl_entry_desc_t& obj);
};

void swap(netbufferv4_access_seq_tbl_entry_desc_t &a, netbufferv4_access_seq_tbl_entry_desc_t &b);


class netbufferv4_access_validvalue_tbl_entry_desc_t {
 public:

  static const char* ascii_fingerprint; // = "0ABA8C15BF35BCFA86A3F90D1B386898";
  static const uint8_t binary_fingerprint[16]; // = {0x0A,0xBA,0x8C,0x15,0xBF,0x35,0xBC,0xFA,0x86,0xA3,0xF9,0x0D,0x1B,0x38,0x68,0x98};

  netbufferv4_access_validvalue_tbl_entry_desc_t(const netbufferv4_access_validvalue_tbl_entry_desc_t&);
  netbufferv4_access_validvalue_tbl_entry_desc_t& operator=(const netbufferv4_access_validvalue_tbl_entry_desc_t&);
  netbufferv4_access_validvalue_tbl_entry_desc_t() : has_mbr_hdl(0), has_grp_hdl(0), selector_grp_hdl(0), action_mbr_hdl(0) {
  }

  virtual ~netbufferv4_access_validvalue_tbl_entry_desc_t() throw();
  netbufferv4_access_validvalue_tbl_match_spec_t match_spec;
  bool has_mbr_hdl;
  bool has_grp_hdl;
  MemberHandle_t selector_grp_hdl;
  MemberHandle_t action_mbr_hdl;
  netbufferv4_action_desc_t action_desc;

  void __set_match_spec(const netbufferv4_access_validvalue_tbl_match_spec_t& val);

  void __set_has_mbr_hdl(const bool val);

  void __set_has_grp_hdl(const bool val);

  void __set_selector_grp_hdl(const MemberHandle_t val);

  void __set_action_mbr_hdl(const MemberHandle_t val);

  void __set_action_desc(const netbufferv4_action_desc_t& val);

  bool operator == (const netbufferv4_access_validvalue_tbl_entry_desc_t & rhs) const
  {
    if (!(match_spec == rhs.match_spec))
      return false;
    if (!(has_mbr_hdl == rhs.has_mbr_hdl))
      return false;
    if (!(has_grp_hdl == rhs.has_grp_hdl))
      return false;
    if (!(selector_grp_hdl == rhs.selector_grp_hdl))
      return false;
    if (!(action_mbr_hdl == rhs.action_mbr_hdl))
      return false;
    if (!(action_desc == rhs.action_desc))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_access_validvalue_tbl_entry_desc_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_access_validvalue_tbl_entry_desc_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_access_validvalue_tbl_entry_desc_t& obj);
};

void swap(netbufferv4_access_validvalue_tbl_entry_desc_t &a, netbufferv4_access_validvalue_tbl_entry_desc_t &b);


class netbufferv4_add_and_remove_value_header_tbl_entry_desc_t {
 public:

  static const char* ascii_fingerprint; // = "D9F106F3CC1961DC5C7A7EFDF108F5DF";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xF1,0x06,0xF3,0xCC,0x19,0x61,0xDC,0x5C,0x7A,0x7E,0xFD,0xF1,0x08,0xF5,0xDF};

  netbufferv4_add_and_remove_value_header_tbl_entry_desc_t(const netbufferv4_add_and_remove_value_header_tbl_entry_desc_t&);
  netbufferv4_add_and_remove_value_header_tbl_entry_desc_t& operator=(const netbufferv4_add_and_remove_value_header_tbl_entry_desc_t&);
  netbufferv4_add_and_remove_value_header_tbl_entry_desc_t() : has_mbr_hdl(0), has_grp_hdl(0), selector_grp_hdl(0), action_mbr_hdl(0), priority(0) {
  }

  virtual ~netbufferv4_add_and_remove_value_header_tbl_entry_desc_t() throw();
  netbufferv4_add_and_remove_value_header_tbl_match_spec_t match_spec;
  bool has_mbr_hdl;
  bool has_grp_hdl;
  MemberHandle_t selector_grp_hdl;
  MemberHandle_t action_mbr_hdl;
  int32_t priority;
  netbufferv4_action_desc_t action_desc;

  void __set_match_spec(const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& val);

  void __set_has_mbr_hdl(const bool val);

  void __set_has_grp_hdl(const bool val);

  void __set_selector_grp_hdl(const MemberHandle_t val);

  void __set_action_mbr_hdl(const MemberHandle_t val);

  void __set_priority(const int32_t val);

  void __set_action_desc(const netbufferv4_action_desc_t& val);

  bool operator == (const netbufferv4_add_and_remove_value_header_tbl_entry_desc_t & rhs) const
  {
    if (!(match_spec == rhs.match_spec))
      return false;
    if (!(has_mbr_hdl == rhs.has_mbr_hdl))
      return false;
    if (!(has_grp_hdl == rhs.has_grp_hdl))
      return false;
    if (!(selector_grp_hdl == rhs.selector_grp_hdl))
      return false;
    if (!(action_mbr_hdl == rhs.action_mbr_hdl))
      return false;
    if (!(priority == rhs.priority))
      return false;
    if (!(action_desc == rhs.action_desc))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_add_and_remove_value_header_tbl_entry_desc_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_add_and_remove_value_header_tbl_entry_desc_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_add_and_remove_value_header_tbl_entry_desc_t& obj);
};

void swap(netbufferv4_add_and_remove_value_header_tbl_entry_desc_t &a, netbufferv4_add_and_remove_value_header_tbl_entry_desc_t &b);


class netbufferv4_cache_lookup_tbl_entry_desc_t {
 public:

  static const char* ascii_fingerprint; // = "C4516C72A5D7D6BD5B38F6FC844FB680";
  static const uint8_t binary_fingerprint[16]; // = {0xC4,0x51,0x6C,0x72,0xA5,0xD7,0xD6,0xBD,0x5B,0x38,0xF6,0xFC,0x84,0x4F,0xB6,0x80};

  netbufferv4_cache_lookup_tbl_entry_desc_t(const netbufferv4_cache_lookup_tbl_entry_desc_t&);
  netbufferv4_cache_lookup_tbl_entry_desc_t& operator=(const netbufferv4_cache_lookup_tbl_entry_desc_t&);
  netbufferv4_cache_lookup_tbl_entry_desc_t() : has_mbr_hdl(0), has_grp_hdl(0), selector_grp_hdl(0), action_mbr_hdl(0) {
  }

  virtual ~netbufferv4_cache_lookup_tbl_entry_desc_t() throw();
  netbufferv4_cache_lookup_tbl_match_spec_t match_spec;
  bool has_mbr_hdl;
  bool has_grp_hdl;
  MemberHandle_t selector_grp_hdl;
  MemberHandle_t action_mbr_hdl;
  netbufferv4_action_desc_t action_desc;

  void __set_match_spec(const netbufferv4_cache_lookup_tbl_match_spec_t& val);

  void __set_has_mbr_hdl(const bool val);

  void __set_has_grp_hdl(const bool val);

  void __set_selector_grp_hdl(const MemberHandle_t val);

  void __set_action_mbr_hdl(const MemberHandle_t val);

  void __set_action_desc(const netbufferv4_action_desc_t& val);

  bool operator == (const netbufferv4_cache_lookup_tbl_entry_desc_t & rhs) const
  {
    if (!(match_spec == rhs.match_spec))
      return false;
    if (!(has_mbr_hdl == rhs.has_mbr_hdl))
      return false;
    if (!(has_grp_hdl == rhs.has_grp_hdl))
      return false;
    if (!(selector_grp_hdl == rhs.selector_grp_hdl))
      return false;
    if (!(action_mbr_hdl == rhs.action_mbr_hdl))
      return false;
    if (!(action_desc == rhs.action_desc))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_cache_lookup_tbl_entry_desc_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_cache_lookup_tbl_entry_desc_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_cache_lookup_tbl_entry_desc_t& obj);
};

void swap(netbufferv4_cache_lookup_tbl_entry_desc_t &a, netbufferv4_cache_lookup_tbl_entry_desc_t &b);


class netbufferv4_drop_tbl_entry_desc_t {
 public:

  static const char* ascii_fingerprint; // = "8F4B39D2F0C2AFA86671D0C1E2E0A0E8";
  static const uint8_t binary_fingerprint[16]; // = {0x8F,0x4B,0x39,0xD2,0xF0,0xC2,0xAF,0xA8,0x66,0x71,0xD0,0xC1,0xE2,0xE0,0xA0,0xE8};

  netbufferv4_drop_tbl_entry_desc_t(const netbufferv4_drop_tbl_entry_desc_t&);
  netbufferv4_drop_tbl_entry_desc_t& operator=(const netbufferv4_drop_tbl_entry_desc_t&);
  netbufferv4_drop_tbl_entry_desc_t() : has_mbr_hdl(0), has_grp_hdl(0), selector_grp_hdl(0), action_mbr_hdl(0) {
  }

  virtual ~netbufferv4_drop_tbl_entry_desc_t() throw();
  netbufferv4_drop_tbl_match_spec_t match_spec;
  bool has_mbr_hdl;
  bool has_grp_hdl;
  MemberHandle_t selector_grp_hdl;
  MemberHandle_t action_mbr_hdl;
  netbufferv4_action_desc_t action_desc;

  void __set_match_spec(const netbufferv4_drop_tbl_match_spec_t& val);

  void __set_has_mbr_hdl(const bool val);

  void __set_has_grp_hdl(const bool val);

  void __set_selector_grp_hdl(const MemberHandle_t val);

  void __set_action_mbr_hdl(const MemberHandle_t val);

  void __set_action_desc(const netbufferv4_action_desc_t& val);

  bool operator == (const netbufferv4_drop_tbl_entry_desc_t & rhs) const
  {
    if (!(match_spec == rhs.match_spec))
      return false;
    if (!(has_mbr_hdl == rhs.has_mbr_hdl))
      return false;
    if (!(has_grp_hdl == rhs.has_grp_hdl))
      return false;
    if (!(selector_grp_hdl == rhs.selector_grp_hdl))
      return false;
    if (!(action_mbr_hdl == rhs.action_mbr_hdl))
      return false;
    if (!(action_desc == rhs.action_desc))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_drop_tbl_entry_desc_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_drop_tbl_entry_desc_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_drop_tbl_entry_desc_t& obj);
};

void swap(netbufferv4_drop_tbl_entry_desc_t &a, netbufferv4_drop_tbl_entry_desc_t &b);


class netbufferv4_eg_port_forward_tbl_entry_desc_t {
 public:

  static const char* ascii_fingerprint; // = "D3E78AD9F7961441078B4E74EC169992";
  static const uint8_t binary_fingerprint[16]; // = {0xD3,0xE7,0x8A,0xD9,0xF7,0x96,0x14,0x41,0x07,0x8B,0x4E,0x74,0xEC,0x16,0x99,0x92};

  netbufferv4_eg_port_forward_tbl_entry_desc_t(const netbufferv4_eg_port_forward_tbl_entry_desc_t&);
  netbufferv4_eg_port_forward_tbl_entry_desc_t& operator=(const netbufferv4_eg_port_forward_tbl_entry_desc_t&);
  netbufferv4_eg_port_forward_tbl_entry_desc_t() : has_mbr_hdl(0), has_grp_hdl(0), selector_grp_hdl(0), action_mbr_hdl(0) {
  }

  virtual ~netbufferv4_eg_port_forward_tbl_entry_desc_t() throw();
  netbufferv4_eg_port_forward_tbl_match_spec_t match_spec;
  bool has_mbr_hdl;
  bool has_grp_hdl;
  MemberHandle_t selector_grp_hdl;
  MemberHandle_t action_mbr_hdl;
  netbufferv4_action_desc_t action_desc;

  void __set_match_spec(const netbufferv4_eg_port_forward_tbl_match_spec_t& val);

  void __set_has_mbr_hdl(const bool val);

  void __set_has_grp_hdl(const bool val);

  void __set_selector_grp_hdl(const MemberHandle_t val);

  void __set_action_mbr_hdl(const MemberHandle_t val);

  void __set_action_desc(const netbufferv4_action_desc_t& val);

  bool operator == (const netbufferv4_eg_port_forward_tbl_entry_desc_t & rhs) const
  {
    if (!(match_spec == rhs.match_spec))
      return false;
    if (!(has_mbr_hdl == rhs.has_mbr_hdl))
      return false;
    if (!(has_grp_hdl == rhs.has_grp_hdl))
      return false;
    if (!(selector_grp_hdl == rhs.selector_grp_hdl))
      return false;
    if (!(action_mbr_hdl == rhs.action_mbr_hdl))
      return false;
    if (!(action_desc == rhs.action_desc))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_eg_port_forward_tbl_entry_desc_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_eg_port_forward_tbl_entry_desc_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_eg_port_forward_tbl_entry_desc_t& obj);
};

void swap(netbufferv4_eg_port_forward_tbl_entry_desc_t &a, netbufferv4_eg_port_forward_tbl_entry_desc_t &b);


class netbufferv4_hash_for_cm1_tbl_entry_desc_t {
 public:

  static const char* ascii_fingerprint; // = "0ABA8C15BF35BCFA86A3F90D1B386898";
  static const uint8_t binary_fingerprint[16]; // = {0x0A,0xBA,0x8C,0x15,0xBF,0x35,0xBC,0xFA,0x86,0xA3,0xF9,0x0D,0x1B,0x38,0x68,0x98};

  netbufferv4_hash_for_cm1_tbl_entry_desc_t(const netbufferv4_hash_for_cm1_tbl_entry_desc_t&);
  netbufferv4_hash_for_cm1_tbl_entry_desc_t& operator=(const netbufferv4_hash_for_cm1_tbl_entry_desc_t&);
  netbufferv4_hash_for_cm1_tbl_entry_desc_t() : has_mbr_hdl(0), has_grp_hdl(0), selector_grp_hdl(0), action_mbr_hdl(0) {
  }

  virtual ~netbufferv4_hash_for_cm1_tbl_entry_desc_t() throw();
  netbufferv4_hash_for_cm1_tbl_match_spec_t match_spec;
  bool has_mbr_hdl;
  bool has_grp_hdl;
  MemberHandle_t selector_grp_hdl;
  MemberHandle_t action_mbr_hdl;
  netbufferv4_action_desc_t action_desc;

  void __set_match_spec(const netbufferv4_hash_for_cm1_tbl_match_spec_t& val);

  void __set_has_mbr_hdl(const bool val);

  void __set_has_grp_hdl(const bool val);

  void __set_selector_grp_hdl(const MemberHandle_t val);

  void __set_action_mbr_hdl(const MemberHandle_t val);

  void __set_action_desc(const netbufferv4_action_desc_t& val);

  bool operator == (const netbufferv4_hash_for_cm1_tbl_entry_desc_t & rhs) const
  {
    if (!(match_spec == rhs.match_spec))
      return false;
    if (!(has_mbr_hdl == rhs.has_mbr_hdl))
      return false;
    if (!(has_grp_hdl == rhs.has_grp_hdl))
      return false;
    if (!(selector_grp_hdl == rhs.selector_grp_hdl))
      return false;
    if (!(action_mbr_hdl == rhs.action_mbr_hdl))
      return false;
    if (!(action_desc == rhs.action_desc))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_hash_for_cm1_tbl_entry_desc_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_hash_for_cm1_tbl_entry_desc_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_hash_for_cm1_tbl_entry_desc_t& obj);
};

void swap(netbufferv4_hash_for_cm1_tbl_entry_desc_t &a, netbufferv4_hash_for_cm1_tbl_entry_desc_t &b);


class netbufferv4_hash_for_cm2_tbl_entry_desc_t {
 public:

  static const char* ascii_fingerprint; // = "0ABA8C15BF35BCFA86A3F90D1B386898";
  static const uint8_t binary_fingerprint[16]; // = {0x0A,0xBA,0x8C,0x15,0xBF,0x35,0xBC,0xFA,0x86,0xA3,0xF9,0x0D,0x1B,0x38,0x68,0x98};

  netbufferv4_hash_for_cm2_tbl_entry_desc_t(const netbufferv4_hash_for_cm2_tbl_entry_desc_t&);
  netbufferv4_hash_for_cm2_tbl_entry_desc_t& operator=(const netbufferv4_hash_for_cm2_tbl_entry_desc_t&);
  netbufferv4_hash_for_cm2_tbl_entry_desc_t() : has_mbr_hdl(0), has_grp_hdl(0), selector_grp_hdl(0), action_mbr_hdl(0) {
  }

  virtual ~netbufferv4_hash_for_cm2_tbl_entry_desc_t() throw();
  netbufferv4_hash_for_cm2_tbl_match_spec_t match_spec;
  bool has_mbr_hdl;
  bool has_grp_hdl;
  MemberHandle_t selector_grp_hdl;
  MemberHandle_t action_mbr_hdl;
  netbufferv4_action_desc_t action_desc;

  void __set_match_spec(const netbufferv4_hash_for_cm2_tbl_match_spec_t& val);

  void __set_has_mbr_hdl(const bool val);

  void __set_has_grp_hdl(const bool val);

  void __set_selector_grp_hdl(const MemberHandle_t val);

  void __set_action_mbr_hdl(const MemberHandle_t val);

  void __set_action_desc(const netbufferv4_action_desc_t& val);

  bool operator == (const netbufferv4_hash_for_cm2_tbl_entry_desc_t & rhs) const
  {
    if (!(match_spec == rhs.match_spec))
      return false;
    if (!(has_mbr_hdl == rhs.has_mbr_hdl))
      return false;
    if (!(has_grp_hdl == rhs.has_grp_hdl))
      return false;
    if (!(selector_grp_hdl == rhs.selector_grp_hdl))
      return false;
    if (!(action_mbr_hdl == rhs.action_mbr_hdl))
      return false;
    if (!(action_desc == rhs.action_desc))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_hash_for_cm2_tbl_entry_desc_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_hash_for_cm2_tbl_entry_desc_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_hash_for_cm2_tbl_entry_desc_t& obj);
};

void swap(netbufferv4_hash_for_cm2_tbl_entry_desc_t &a, netbufferv4_hash_for_cm2_tbl_entry_desc_t &b);


class netbufferv4_hash_for_cm3_tbl_entry_desc_t {
 public:

  static const char* ascii_fingerprint; // = "0ABA8C15BF35BCFA86A3F90D1B386898";
  static const uint8_t binary_fingerprint[16]; // = {0x0A,0xBA,0x8C,0x15,0xBF,0x35,0xBC,0xFA,0x86,0xA3,0xF9,0x0D,0x1B,0x38,0x68,0x98};

  netbufferv4_hash_for_cm3_tbl_entry_desc_t(const netbufferv4_hash_for_cm3_tbl_entry_desc_t&);
  netbufferv4_hash_for_cm3_tbl_entry_desc_t& operator=(const netbufferv4_hash_for_cm3_tbl_entry_desc_t&);
  netbufferv4_hash_for_cm3_tbl_entry_desc_t() : has_mbr_hdl(0), has_grp_hdl(0), selector_grp_hdl(0), action_mbr_hdl(0) {
  }

  virtual ~netbufferv4_hash_for_cm3_tbl_entry_desc_t() throw();
  netbufferv4_hash_for_cm3_tbl_match_spec_t match_spec;
  bool has_mbr_hdl;
  bool has_grp_hdl;
  MemberHandle_t selector_grp_hdl;
  MemberHandle_t action_mbr_hdl;
  netbufferv4_action_desc_t action_desc;

  void __set_match_spec(const netbufferv4_hash_for_cm3_tbl_match_spec_t& val);

  void __set_has_mbr_hdl(const bool val);

  void __set_has_grp_hdl(const bool val);

  void __set_selector_grp_hdl(const MemberHandle_t val);

  void __set_action_mbr_hdl(const MemberHandle_t val);

  void __set_action_desc(const netbufferv4_action_desc_t& val);

  bool operator == (const netbufferv4_hash_for_cm3_tbl_entry_desc_t & rhs) const
  {
    if (!(match_spec == rhs.match_spec))
      return false;
    if (!(has_mbr_hdl == rhs.has_mbr_hdl))
      return false;
    if (!(has_grp_hdl == rhs.has_grp_hdl))
      return false;
    if (!(selector_grp_hdl == rhs.selector_grp_hdl))
      return false;
    if (!(action_mbr_hdl == rhs.action_mbr_hdl))
      return false;
    if (!(action_desc == rhs.action_desc))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_hash_for_cm3_tbl_entry_desc_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_hash_for_cm3_tbl_entry_desc_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_hash_for_cm3_tbl_entry_desc_t& obj);
};

void swap(netbufferv4_hash_for_cm3_tbl_entry_desc_t &a, netbufferv4_hash_for_cm3_tbl_entry_desc_t &b);


class netbufferv4_hash_for_cm4_tbl_entry_desc_t {
 public:

  static const char* ascii_fingerprint; // = "0ABA8C15BF35BCFA86A3F90D1B386898";
  static const uint8_t binary_fingerprint[16]; // = {0x0A,0xBA,0x8C,0x15,0xBF,0x35,0xBC,0xFA,0x86,0xA3,0xF9,0x0D,0x1B,0x38,0x68,0x98};

  netbufferv4_hash_for_cm4_tbl_entry_desc_t(const netbufferv4_hash_for_cm4_tbl_entry_desc_t&);
  netbufferv4_hash_for_cm4_tbl_entry_desc_t& operator=(const netbufferv4_hash_for_cm4_tbl_entry_desc_t&);
  netbufferv4_hash_for_cm4_tbl_entry_desc_t() : has_mbr_hdl(0), has_grp_hdl(0), selector_grp_hdl(0), action_mbr_hdl(0) {
  }

  virtual ~netbufferv4_hash_for_cm4_tbl_entry_desc_t() throw();
  netbufferv4_hash_for_cm4_tbl_match_spec_t match_spec;
  bool has_mbr_hdl;
  bool has_grp_hdl;
  MemberHandle_t selector_grp_hdl;
  MemberHandle_t action_mbr_hdl;
  netbufferv4_action_desc_t action_desc;

  void __set_match_spec(const netbufferv4_hash_for_cm4_tbl_match_spec_t& val);

  void __set_has_mbr_hdl(const bool val);

  void __set_has_grp_hdl(const bool val);

  void __set_selector_grp_hdl(const MemberHandle_t val);

  void __set_action_mbr_hdl(const MemberHandle_t val);

  void __set_action_desc(const netbufferv4_action_desc_t& val);

  bool operator == (const netbufferv4_hash_for_cm4_tbl_entry_desc_t & rhs) const
  {
    if (!(match_spec == rhs.match_spec))
      return false;
    if (!(has_mbr_hdl == rhs.has_mbr_hdl))
      return false;
    if (!(has_grp_hdl == rhs.has_grp_hdl))
      return false;
    if (!(selector_grp_hdl == rhs.selector_grp_hdl))
      return false;
    if (!(action_mbr_hdl == rhs.action_mbr_hdl))
      return false;
    if (!(action_desc == rhs.action_desc))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_hash_for_cm4_tbl_entry_desc_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_hash_for_cm4_tbl_entry_desc_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_hash_for_cm4_tbl_entry_desc_t& obj);
};

void swap(netbufferv4_hash_for_cm4_tbl_entry_desc_t &a, netbufferv4_hash_for_cm4_tbl_entry_desc_t &b);


class netbufferv4_hash_for_partition_tbl_entry_desc_t {
 public:

  static const char* ascii_fingerprint; // = "0ABA8C15BF35BCFA86A3F90D1B386898";
  static const uint8_t binary_fingerprint[16]; // = {0x0A,0xBA,0x8C,0x15,0xBF,0x35,0xBC,0xFA,0x86,0xA3,0xF9,0x0D,0x1B,0x38,0x68,0x98};

  netbufferv4_hash_for_partition_tbl_entry_desc_t(const netbufferv4_hash_for_partition_tbl_entry_desc_t&);
  netbufferv4_hash_for_partition_tbl_entry_desc_t& operator=(const netbufferv4_hash_for_partition_tbl_entry_desc_t&);
  netbufferv4_hash_for_partition_tbl_entry_desc_t() : has_mbr_hdl(0), has_grp_hdl(0), selector_grp_hdl(0), action_mbr_hdl(0) {
  }

  virtual ~netbufferv4_hash_for_partition_tbl_entry_desc_t() throw();
  netbufferv4_hash_for_partition_tbl_match_spec_t match_spec;
  bool has_mbr_hdl;
  bool has_grp_hdl;
  MemberHandle_t selector_grp_hdl;
  MemberHandle_t action_mbr_hdl;
  netbufferv4_action_desc_t action_desc;

  void __set_match_spec(const netbufferv4_hash_for_partition_tbl_match_spec_t& val);

  void __set_has_mbr_hdl(const bool val);

  void __set_has_grp_hdl(const bool val);

  void __set_selector_grp_hdl(const MemberHandle_t val);

  void __set_action_mbr_hdl(const MemberHandle_t val);

  void __set_action_desc(const netbufferv4_action_desc_t& val);

  bool operator == (const netbufferv4_hash_for_partition_tbl_entry_desc_t & rhs) const
  {
    if (!(match_spec == rhs.match_spec))
      return false;
    if (!(has_mbr_hdl == rhs.has_mbr_hdl))
      return false;
    if (!(has_grp_hdl == rhs.has_grp_hdl))
      return false;
    if (!(selector_grp_hdl == rhs.selector_grp_hdl))
      return false;
    if (!(action_mbr_hdl == rhs.action_mbr_hdl))
      return false;
    if (!(action_desc == rhs.action_desc))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_hash_for_partition_tbl_entry_desc_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_hash_for_partition_tbl_entry_desc_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_hash_for_partition_tbl_entry_desc_t& obj);
};

void swap(netbufferv4_hash_for_partition_tbl_entry_desc_t &a, netbufferv4_hash_for_partition_tbl_entry_desc_t &b);


class netbufferv4_hash_for_seq_tbl_entry_desc_t {
 public:

  static const char* ascii_fingerprint; // = "0ABA8C15BF35BCFA86A3F90D1B386898";
  static const uint8_t binary_fingerprint[16]; // = {0x0A,0xBA,0x8C,0x15,0xBF,0x35,0xBC,0xFA,0x86,0xA3,0xF9,0x0D,0x1B,0x38,0x68,0x98};

  netbufferv4_hash_for_seq_tbl_entry_desc_t(const netbufferv4_hash_for_seq_tbl_entry_desc_t&);
  netbufferv4_hash_for_seq_tbl_entry_desc_t& operator=(const netbufferv4_hash_for_seq_tbl_entry_desc_t&);
  netbufferv4_hash_for_seq_tbl_entry_desc_t() : has_mbr_hdl(0), has_grp_hdl(0), selector_grp_hdl(0), action_mbr_hdl(0) {
  }

  virtual ~netbufferv4_hash_for_seq_tbl_entry_desc_t() throw();
  netbufferv4_hash_for_seq_tbl_match_spec_t match_spec;
  bool has_mbr_hdl;
  bool has_grp_hdl;
  MemberHandle_t selector_grp_hdl;
  MemberHandle_t action_mbr_hdl;
  netbufferv4_action_desc_t action_desc;

  void __set_match_spec(const netbufferv4_hash_for_seq_tbl_match_spec_t& val);

  void __set_has_mbr_hdl(const bool val);

  void __set_has_grp_hdl(const bool val);

  void __set_selector_grp_hdl(const MemberHandle_t val);

  void __set_action_mbr_hdl(const MemberHandle_t val);

  void __set_action_desc(const netbufferv4_action_desc_t& val);

  bool operator == (const netbufferv4_hash_for_seq_tbl_entry_desc_t & rhs) const
  {
    if (!(match_spec == rhs.match_spec))
      return false;
    if (!(has_mbr_hdl == rhs.has_mbr_hdl))
      return false;
    if (!(has_grp_hdl == rhs.has_grp_hdl))
      return false;
    if (!(selector_grp_hdl == rhs.selector_grp_hdl))
      return false;
    if (!(action_mbr_hdl == rhs.action_mbr_hdl))
      return false;
    if (!(action_desc == rhs.action_desc))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_hash_for_seq_tbl_entry_desc_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_hash_for_seq_tbl_entry_desc_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_hash_for_seq_tbl_entry_desc_t& obj);
};

void swap(netbufferv4_hash_for_seq_tbl_entry_desc_t &a, netbufferv4_hash_for_seq_tbl_entry_desc_t &b);


class netbufferv4_hash_partition_tbl_entry_desc_t {
 public:

  static const char* ascii_fingerprint; // = "B3F298932FD17B47C6FBB9FD129E76D4";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xF2,0x98,0x93,0x2F,0xD1,0x7B,0x47,0xC6,0xFB,0xB9,0xFD,0x12,0x9E,0x76,0xD4};

  netbufferv4_hash_partition_tbl_entry_desc_t(const netbufferv4_hash_partition_tbl_entry_desc_t&);
  netbufferv4_hash_partition_tbl_entry_desc_t& operator=(const netbufferv4_hash_partition_tbl_entry_desc_t&);
  netbufferv4_hash_partition_tbl_entry_desc_t() : has_mbr_hdl(0), has_grp_hdl(0), selector_grp_hdl(0), action_mbr_hdl(0), priority(0) {
  }

  virtual ~netbufferv4_hash_partition_tbl_entry_desc_t() throw();
  netbufferv4_hash_partition_tbl_match_spec_t match_spec;
  bool has_mbr_hdl;
  bool has_grp_hdl;
  MemberHandle_t selector_grp_hdl;
  MemberHandle_t action_mbr_hdl;
  int32_t priority;
  netbufferv4_action_desc_t action_desc;

  void __set_match_spec(const netbufferv4_hash_partition_tbl_match_spec_t& val);

  void __set_has_mbr_hdl(const bool val);

  void __set_has_grp_hdl(const bool val);

  void __set_selector_grp_hdl(const MemberHandle_t val);

  void __set_action_mbr_hdl(const MemberHandle_t val);

  void __set_priority(const int32_t val);

  void __set_action_desc(const netbufferv4_action_desc_t& val);

  bool operator == (const netbufferv4_hash_partition_tbl_entry_desc_t & rhs) const
  {
    if (!(match_spec == rhs.match_spec))
      return false;
    if (!(has_mbr_hdl == rhs.has_mbr_hdl))
      return false;
    if (!(has_grp_hdl == rhs.has_grp_hdl))
      return false;
    if (!(selector_grp_hdl == rhs.selector_grp_hdl))
      return false;
    if (!(action_mbr_hdl == rhs.action_mbr_hdl))
      return false;
    if (!(priority == rhs.priority))
      return false;
    if (!(action_desc == rhs.action_desc))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_hash_partition_tbl_entry_desc_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_hash_partition_tbl_entry_desc_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_hash_partition_tbl_entry_desc_t& obj);
};

void swap(netbufferv4_hash_partition_tbl_entry_desc_t &a, netbufferv4_hash_partition_tbl_entry_desc_t &b);


class netbufferv4_ig_port_forward_tbl_entry_desc_t {
 public:

  static const char* ascii_fingerprint; // = "0ABA8C15BF35BCFA86A3F90D1B386898";
  static const uint8_t binary_fingerprint[16]; // = {0x0A,0xBA,0x8C,0x15,0xBF,0x35,0xBC,0xFA,0x86,0xA3,0xF9,0x0D,0x1B,0x38,0x68,0x98};

  netbufferv4_ig_port_forward_tbl_entry_desc_t(const netbufferv4_ig_port_forward_tbl_entry_desc_t&);
  netbufferv4_ig_port_forward_tbl_entry_desc_t& operator=(const netbufferv4_ig_port_forward_tbl_entry_desc_t&);
  netbufferv4_ig_port_forward_tbl_entry_desc_t() : has_mbr_hdl(0), has_grp_hdl(0), selector_grp_hdl(0), action_mbr_hdl(0) {
  }

  virtual ~netbufferv4_ig_port_forward_tbl_entry_desc_t() throw();
  netbufferv4_ig_port_forward_tbl_match_spec_t match_spec;
  bool has_mbr_hdl;
  bool has_grp_hdl;
  MemberHandle_t selector_grp_hdl;
  MemberHandle_t action_mbr_hdl;
  netbufferv4_action_desc_t action_desc;

  void __set_match_spec(const netbufferv4_ig_port_forward_tbl_match_spec_t& val);

  void __set_has_mbr_hdl(const bool val);

  void __set_has_grp_hdl(const bool val);

  void __set_selector_grp_hdl(const MemberHandle_t val);

  void __set_action_mbr_hdl(const MemberHandle_t val);

  void __set_action_desc(const netbufferv4_action_desc_t& val);

  bool operator == (const netbufferv4_ig_port_forward_tbl_entry_desc_t & rhs) const
  {
    if (!(match_spec == rhs.match_spec))
      return false;
    if (!(has_mbr_hdl == rhs.has_mbr_hdl))
      return false;
    if (!(has_grp_hdl == rhs.has_grp_hdl))
      return false;
    if (!(selector_grp_hdl == rhs.selector_grp_hdl))
      return false;
    if (!(action_mbr_hdl == rhs.action_mbr_hdl))
      return false;
    if (!(action_desc == rhs.action_desc))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_ig_port_forward_tbl_entry_desc_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_ig_port_forward_tbl_entry_desc_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_ig_port_forward_tbl_entry_desc_t& obj);
};

void swap(netbufferv4_ig_port_forward_tbl_entry_desc_t &a, netbufferv4_ig_port_forward_tbl_entry_desc_t &b);


class netbufferv4_ipv4_forward_tbl_entry_desc_t {
 public:

  static const char* ascii_fingerprint; // = "C5BA6FE4B1ED1860D115996D7DBAACC9";
  static const uint8_t binary_fingerprint[16]; // = {0xC5,0xBA,0x6F,0xE4,0xB1,0xED,0x18,0x60,0xD1,0x15,0x99,0x6D,0x7D,0xBA,0xAC,0xC9};

  netbufferv4_ipv4_forward_tbl_entry_desc_t(const netbufferv4_ipv4_forward_tbl_entry_desc_t&);
  netbufferv4_ipv4_forward_tbl_entry_desc_t& operator=(const netbufferv4_ipv4_forward_tbl_entry_desc_t&);
  netbufferv4_ipv4_forward_tbl_entry_desc_t() : has_mbr_hdl(0), has_grp_hdl(0), selector_grp_hdl(0), action_mbr_hdl(0) {
  }

  virtual ~netbufferv4_ipv4_forward_tbl_entry_desc_t() throw();
  netbufferv4_ipv4_forward_tbl_match_spec_t match_spec;
  bool has_mbr_hdl;
  bool has_grp_hdl;
  MemberHandle_t selector_grp_hdl;
  MemberHandle_t action_mbr_hdl;
  netbufferv4_action_desc_t action_desc;

  void __set_match_spec(const netbufferv4_ipv4_forward_tbl_match_spec_t& val);

  void __set_has_mbr_hdl(const bool val);

  void __set_has_grp_hdl(const bool val);

  void __set_selector_grp_hdl(const MemberHandle_t val);

  void __set_action_mbr_hdl(const MemberHandle_t val);

  void __set_action_desc(const netbufferv4_action_desc_t& val);

  bool operator == (const netbufferv4_ipv4_forward_tbl_entry_desc_t & rhs) const
  {
    if (!(match_spec == rhs.match_spec))
      return false;
    if (!(has_mbr_hdl == rhs.has_mbr_hdl))
      return false;
    if (!(has_grp_hdl == rhs.has_grp_hdl))
      return false;
    if (!(selector_grp_hdl == rhs.selector_grp_hdl))
      return false;
    if (!(action_mbr_hdl == rhs.action_mbr_hdl))
      return false;
    if (!(action_desc == rhs.action_desc))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_ipv4_forward_tbl_entry_desc_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_ipv4_forward_tbl_entry_desc_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_ipv4_forward_tbl_entry_desc_t& obj);
};

void swap(netbufferv4_ipv4_forward_tbl_entry_desc_t &a, netbufferv4_ipv4_forward_tbl_entry_desc_t &b);


class netbufferv4_is_hot_tbl_entry_desc_t {
 public:

  static const char* ascii_fingerprint; // = "6126C9B44535F67F1BBD92ACF3355541";
  static const uint8_t binary_fingerprint[16]; // = {0x61,0x26,0xC9,0xB4,0x45,0x35,0xF6,0x7F,0x1B,0xBD,0x92,0xAC,0xF3,0x35,0x55,0x41};

  netbufferv4_is_hot_tbl_entry_desc_t(const netbufferv4_is_hot_tbl_entry_desc_t&);
  netbufferv4_is_hot_tbl_entry_desc_t& operator=(const netbufferv4_is_hot_tbl_entry_desc_t&);
  netbufferv4_is_hot_tbl_entry_desc_t() : has_mbr_hdl(0), has_grp_hdl(0), selector_grp_hdl(0), action_mbr_hdl(0) {
  }

  virtual ~netbufferv4_is_hot_tbl_entry_desc_t() throw();
  netbufferv4_is_hot_tbl_match_spec_t match_spec;
  bool has_mbr_hdl;
  bool has_grp_hdl;
  MemberHandle_t selector_grp_hdl;
  MemberHandle_t action_mbr_hdl;
  netbufferv4_action_desc_t action_desc;

  void __set_match_spec(const netbufferv4_is_hot_tbl_match_spec_t& val);

  void __set_has_mbr_hdl(const bool val);

  void __set_has_grp_hdl(const bool val);

  void __set_selector_grp_hdl(const MemberHandle_t val);

  void __set_action_mbr_hdl(const MemberHandle_t val);

  void __set_action_desc(const netbufferv4_action_desc_t& val);

  bool operator == (const netbufferv4_is_hot_tbl_entry_desc_t & rhs) const
  {
    if (!(match_spec == rhs.match_spec))
      return false;
    if (!(has_mbr_hdl == rhs.has_mbr_hdl))
      return false;
    if (!(has_grp_hdl == rhs.has_grp_hdl))
      return false;
    if (!(selector_grp_hdl == rhs.selector_grp_hdl))
      return false;
    if (!(action_mbr_hdl == rhs.action_mbr_hdl))
      return false;
    if (!(action_desc == rhs.action_desc))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_is_hot_tbl_entry_desc_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_is_hot_tbl_entry_desc_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_is_hot_tbl_entry_desc_t& obj);
};

void swap(netbufferv4_is_hot_tbl_entry_desc_t &a, netbufferv4_is_hot_tbl_entry_desc_t &b);


class netbufferv4_lastclone_lastscansplit_tbl_entry_desc_t {
 public:

  static const char* ascii_fingerprint; // = "0ABA8C15BF35BCFA86A3F90D1B386898";
  static const uint8_t binary_fingerprint[16]; // = {0x0A,0xBA,0x8C,0x15,0xBF,0x35,0xBC,0xFA,0x86,0xA3,0xF9,0x0D,0x1B,0x38,0x68,0x98};

  netbufferv4_lastclone_lastscansplit_tbl_entry_desc_t(const netbufferv4_lastclone_lastscansplit_tbl_entry_desc_t&);
  netbufferv4_lastclone_lastscansplit_tbl_entry_desc_t& operator=(const netbufferv4_lastclone_lastscansplit_tbl_entry_desc_t&);
  netbufferv4_lastclone_lastscansplit_tbl_entry_desc_t() : has_mbr_hdl(0), has_grp_hdl(0), selector_grp_hdl(0), action_mbr_hdl(0) {
  }

  virtual ~netbufferv4_lastclone_lastscansplit_tbl_entry_desc_t() throw();
  netbufferv4_lastclone_lastscansplit_tbl_match_spec_t match_spec;
  bool has_mbr_hdl;
  bool has_grp_hdl;
  MemberHandle_t selector_grp_hdl;
  MemberHandle_t action_mbr_hdl;
  netbufferv4_action_desc_t action_desc;

  void __set_match_spec(const netbufferv4_lastclone_lastscansplit_tbl_match_spec_t& val);

  void __set_has_mbr_hdl(const bool val);

  void __set_has_grp_hdl(const bool val);

  void __set_selector_grp_hdl(const MemberHandle_t val);

  void __set_action_mbr_hdl(const MemberHandle_t val);

  void __set_action_desc(const netbufferv4_action_desc_t& val);

  bool operator == (const netbufferv4_lastclone_lastscansplit_tbl_entry_desc_t & rhs) const
  {
    if (!(match_spec == rhs.match_spec))
      return false;
    if (!(has_mbr_hdl == rhs.has_mbr_hdl))
      return false;
    if (!(has_grp_hdl == rhs.has_grp_hdl))
      return false;
    if (!(selector_grp_hdl == rhs.selector_grp_hdl))
      return false;
    if (!(action_mbr_hdl == rhs.action_mbr_hdl))
      return false;
    if (!(action_desc == rhs.action_desc))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_lastclone_lastscansplit_tbl_entry_desc_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_lastclone_lastscansplit_tbl_entry_desc_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_lastclone_lastscansplit_tbl_entry_desc_t& obj);
};

void swap(netbufferv4_lastclone_lastscansplit_tbl_entry_desc_t &a, netbufferv4_lastclone_lastscansplit_tbl_entry_desc_t &b);


class netbufferv4_need_recirculate_tbl_entry_desc_t {
 public:

  static const char* ascii_fingerprint; // = "DB9635B097B930B0963D80DABEB4579C";
  static const uint8_t binary_fingerprint[16]; // = {0xDB,0x96,0x35,0xB0,0x97,0xB9,0x30,0xB0,0x96,0x3D,0x80,0xDA,0xBE,0xB4,0x57,0x9C};

  netbufferv4_need_recirculate_tbl_entry_desc_t(const netbufferv4_need_recirculate_tbl_entry_desc_t&);
  netbufferv4_need_recirculate_tbl_entry_desc_t& operator=(const netbufferv4_need_recirculate_tbl_entry_desc_t&);
  netbufferv4_need_recirculate_tbl_entry_desc_t() : has_mbr_hdl(0), has_grp_hdl(0), selector_grp_hdl(0), action_mbr_hdl(0) {
  }

  virtual ~netbufferv4_need_recirculate_tbl_entry_desc_t() throw();
  netbufferv4_need_recirculate_tbl_match_spec_t match_spec;
  bool has_mbr_hdl;
  bool has_grp_hdl;
  MemberHandle_t selector_grp_hdl;
  MemberHandle_t action_mbr_hdl;
  netbufferv4_action_desc_t action_desc;

  void __set_match_spec(const netbufferv4_need_recirculate_tbl_match_spec_t& val);

  void __set_has_mbr_hdl(const bool val);

  void __set_has_grp_hdl(const bool val);

  void __set_selector_grp_hdl(const MemberHandle_t val);

  void __set_action_mbr_hdl(const MemberHandle_t val);

  void __set_action_desc(const netbufferv4_action_desc_t& val);

  bool operator == (const netbufferv4_need_recirculate_tbl_entry_desc_t & rhs) const
  {
    if (!(match_spec == rhs.match_spec))
      return false;
    if (!(has_mbr_hdl == rhs.has_mbr_hdl))
      return false;
    if (!(has_grp_hdl == rhs.has_grp_hdl))
      return false;
    if (!(selector_grp_hdl == rhs.selector_grp_hdl))
      return false;
    if (!(action_mbr_hdl == rhs.action_mbr_hdl))
      return false;
    if (!(action_desc == rhs.action_desc))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_need_recirculate_tbl_entry_desc_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_need_recirculate_tbl_entry_desc_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_need_recirculate_tbl_entry_desc_t& obj);
};

void swap(netbufferv4_need_recirculate_tbl_entry_desc_t &a, netbufferv4_need_recirculate_tbl_entry_desc_t &b);


class netbufferv4_prepare_for_cachehit_tbl_entry_desc_t {
 public:

  static const char* ascii_fingerprint; // = "F18C064E1883DB30CBD2972A05710C5F";
  static const uint8_t binary_fingerprint[16]; // = {0xF1,0x8C,0x06,0x4E,0x18,0x83,0xDB,0x30,0xCB,0xD2,0x97,0x2A,0x05,0x71,0x0C,0x5F};

  netbufferv4_prepare_for_cachehit_tbl_entry_desc_t(const netbufferv4_prepare_for_cachehit_tbl_entry_desc_t&);
  netbufferv4_prepare_for_cachehit_tbl_entry_desc_t& operator=(const netbufferv4_prepare_for_cachehit_tbl_entry_desc_t&);
  netbufferv4_prepare_for_cachehit_tbl_entry_desc_t() : has_mbr_hdl(0), has_grp_hdl(0), selector_grp_hdl(0), action_mbr_hdl(0) {
  }

  virtual ~netbufferv4_prepare_for_cachehit_tbl_entry_desc_t() throw();
  netbufferv4_prepare_for_cachehit_tbl_match_spec_t match_spec;
  bool has_mbr_hdl;
  bool has_grp_hdl;
  MemberHandle_t selector_grp_hdl;
  MemberHandle_t action_mbr_hdl;
  netbufferv4_action_desc_t action_desc;

  void __set_match_spec(const netbufferv4_prepare_for_cachehit_tbl_match_spec_t& val);

  void __set_has_mbr_hdl(const bool val);

  void __set_has_grp_hdl(const bool val);

  void __set_selector_grp_hdl(const MemberHandle_t val);

  void __set_action_mbr_hdl(const MemberHandle_t val);

  void __set_action_desc(const netbufferv4_action_desc_t& val);

  bool operator == (const netbufferv4_prepare_for_cachehit_tbl_entry_desc_t & rhs) const
  {
    if (!(match_spec == rhs.match_spec))
      return false;
    if (!(has_mbr_hdl == rhs.has_mbr_hdl))
      return false;
    if (!(has_grp_hdl == rhs.has_grp_hdl))
      return false;
    if (!(selector_grp_hdl == rhs.selector_grp_hdl))
      return false;
    if (!(action_mbr_hdl == rhs.action_mbr_hdl))
      return false;
    if (!(action_desc == rhs.action_desc))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_prepare_for_cachehit_tbl_entry_desc_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_prepare_for_cachehit_tbl_entry_desc_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_prepare_for_cachehit_tbl_entry_desc_t& obj);
};

void swap(netbufferv4_prepare_for_cachehit_tbl_entry_desc_t &a, netbufferv4_prepare_for_cachehit_tbl_entry_desc_t &b);


class netbufferv4_recirculate_tbl_entry_desc_t {
 public:

  static const char* ascii_fingerprint; // = "0ABA8C15BF35BCFA86A3F90D1B386898";
  static const uint8_t binary_fingerprint[16]; // = {0x0A,0xBA,0x8C,0x15,0xBF,0x35,0xBC,0xFA,0x86,0xA3,0xF9,0x0D,0x1B,0x38,0x68,0x98};

  netbufferv4_recirculate_tbl_entry_desc_t(const netbufferv4_recirculate_tbl_entry_desc_t&);
  netbufferv4_recirculate_tbl_entry_desc_t& operator=(const netbufferv4_recirculate_tbl_entry_desc_t&);
  netbufferv4_recirculate_tbl_entry_desc_t() : has_mbr_hdl(0), has_grp_hdl(0), selector_grp_hdl(0), action_mbr_hdl(0) {
  }

  virtual ~netbufferv4_recirculate_tbl_entry_desc_t() throw();
  netbufferv4_recirculate_tbl_match_spec_t match_spec;
  bool has_mbr_hdl;
  bool has_grp_hdl;
  MemberHandle_t selector_grp_hdl;
  MemberHandle_t action_mbr_hdl;
  netbufferv4_action_desc_t action_desc;

  void __set_match_spec(const netbufferv4_recirculate_tbl_match_spec_t& val);

  void __set_has_mbr_hdl(const bool val);

  void __set_has_grp_hdl(const bool val);

  void __set_selector_grp_hdl(const MemberHandle_t val);

  void __set_action_mbr_hdl(const MemberHandle_t val);

  void __set_action_desc(const netbufferv4_action_desc_t& val);

  bool operator == (const netbufferv4_recirculate_tbl_entry_desc_t & rhs) const
  {
    if (!(match_spec == rhs.match_spec))
      return false;
    if (!(has_mbr_hdl == rhs.has_mbr_hdl))
      return false;
    if (!(has_grp_hdl == rhs.has_grp_hdl))
      return false;
    if (!(selector_grp_hdl == rhs.selector_grp_hdl))
      return false;
    if (!(action_mbr_hdl == rhs.action_mbr_hdl))
      return false;
    if (!(action_desc == rhs.action_desc))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_recirculate_tbl_entry_desc_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_recirculate_tbl_entry_desc_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_recirculate_tbl_entry_desc_t& obj);
};

void swap(netbufferv4_recirculate_tbl_entry_desc_t &a, netbufferv4_recirculate_tbl_entry_desc_t &b);


class netbufferv4_sample_tbl_entry_desc_t {
 public:

  static const char* ascii_fingerprint; // = "0ABA8C15BF35BCFA86A3F90D1B386898";
  static const uint8_t binary_fingerprint[16]; // = {0x0A,0xBA,0x8C,0x15,0xBF,0x35,0xBC,0xFA,0x86,0xA3,0xF9,0x0D,0x1B,0x38,0x68,0x98};

  netbufferv4_sample_tbl_entry_desc_t(const netbufferv4_sample_tbl_entry_desc_t&);
  netbufferv4_sample_tbl_entry_desc_t& operator=(const netbufferv4_sample_tbl_entry_desc_t&);
  netbufferv4_sample_tbl_entry_desc_t() : has_mbr_hdl(0), has_grp_hdl(0), selector_grp_hdl(0), action_mbr_hdl(0) {
  }

  virtual ~netbufferv4_sample_tbl_entry_desc_t() throw();
  netbufferv4_sample_tbl_match_spec_t match_spec;
  bool has_mbr_hdl;
  bool has_grp_hdl;
  MemberHandle_t selector_grp_hdl;
  MemberHandle_t action_mbr_hdl;
  netbufferv4_action_desc_t action_desc;

  void __set_match_spec(const netbufferv4_sample_tbl_match_spec_t& val);

  void __set_has_mbr_hdl(const bool val);

  void __set_has_grp_hdl(const bool val);

  void __set_selector_grp_hdl(const MemberHandle_t val);

  void __set_action_mbr_hdl(const MemberHandle_t val);

  void __set_action_desc(const netbufferv4_action_desc_t& val);

  bool operator == (const netbufferv4_sample_tbl_entry_desc_t & rhs) const
  {
    if (!(match_spec == rhs.match_spec))
      return false;
    if (!(has_mbr_hdl == rhs.has_mbr_hdl))
      return false;
    if (!(has_grp_hdl == rhs.has_grp_hdl))
      return false;
    if (!(selector_grp_hdl == rhs.selector_grp_hdl))
      return false;
    if (!(action_mbr_hdl == rhs.action_mbr_hdl))
      return false;
    if (!(action_desc == rhs.action_desc))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_sample_tbl_entry_desc_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_sample_tbl_entry_desc_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_sample_tbl_entry_desc_t& obj);
};

void swap(netbufferv4_sample_tbl_entry_desc_t &a, netbufferv4_sample_tbl_entry_desc_t &b);


class netbufferv4_save_client_udpport_tbl_entry_desc_t {
 public:

  static const char* ascii_fingerprint; // = "8F4B39D2F0C2AFA86671D0C1E2E0A0E8";
  static const uint8_t binary_fingerprint[16]; // = {0x8F,0x4B,0x39,0xD2,0xF0,0xC2,0xAF,0xA8,0x66,0x71,0xD0,0xC1,0xE2,0xE0,0xA0,0xE8};

  netbufferv4_save_client_udpport_tbl_entry_desc_t(const netbufferv4_save_client_udpport_tbl_entry_desc_t&);
  netbufferv4_save_client_udpport_tbl_entry_desc_t& operator=(const netbufferv4_save_client_udpport_tbl_entry_desc_t&);
  netbufferv4_save_client_udpport_tbl_entry_desc_t() : has_mbr_hdl(0), has_grp_hdl(0), selector_grp_hdl(0), action_mbr_hdl(0) {
  }

  virtual ~netbufferv4_save_client_udpport_tbl_entry_desc_t() throw();
  netbufferv4_save_client_udpport_tbl_match_spec_t match_spec;
  bool has_mbr_hdl;
  bool has_grp_hdl;
  MemberHandle_t selector_grp_hdl;
  MemberHandle_t action_mbr_hdl;
  netbufferv4_action_desc_t action_desc;

  void __set_match_spec(const netbufferv4_save_client_udpport_tbl_match_spec_t& val);

  void __set_has_mbr_hdl(const bool val);

  void __set_has_grp_hdl(const bool val);

  void __set_selector_grp_hdl(const MemberHandle_t val);

  void __set_action_mbr_hdl(const MemberHandle_t val);

  void __set_action_desc(const netbufferv4_action_desc_t& val);

  bool operator == (const netbufferv4_save_client_udpport_tbl_entry_desc_t & rhs) const
  {
    if (!(match_spec == rhs.match_spec))
      return false;
    if (!(has_mbr_hdl == rhs.has_mbr_hdl))
      return false;
    if (!(has_grp_hdl == rhs.has_grp_hdl))
      return false;
    if (!(selector_grp_hdl == rhs.selector_grp_hdl))
      return false;
    if (!(action_mbr_hdl == rhs.action_mbr_hdl))
      return false;
    if (!(action_desc == rhs.action_desc))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_save_client_udpport_tbl_entry_desc_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_save_client_udpport_tbl_entry_desc_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_save_client_udpport_tbl_entry_desc_t& obj);
};

void swap(netbufferv4_save_client_udpport_tbl_entry_desc_t &a, netbufferv4_save_client_udpport_tbl_entry_desc_t &b);


class netbufferv4_set_hot_threshold_tbl_entry_desc_t {
 public:

  static const char* ascii_fingerprint; // = "1AF98F2893CAA2CD299D173B516B2BFB";
  static const uint8_t binary_fingerprint[16]; // = {0x1A,0xF9,0x8F,0x28,0x93,0xCA,0xA2,0xCD,0x29,0x9D,0x17,0x3B,0x51,0x6B,0x2B,0xFB};

  netbufferv4_set_hot_threshold_tbl_entry_desc_t(const netbufferv4_set_hot_threshold_tbl_entry_desc_t&);
  netbufferv4_set_hot_threshold_tbl_entry_desc_t& operator=(const netbufferv4_set_hot_threshold_tbl_entry_desc_t&);
  netbufferv4_set_hot_threshold_tbl_entry_desc_t() : has_mbr_hdl(0), has_grp_hdl(0), selector_grp_hdl(0), action_mbr_hdl(0) {
  }

  virtual ~netbufferv4_set_hot_threshold_tbl_entry_desc_t() throw();
  bool has_mbr_hdl;
  bool has_grp_hdl;
  MemberHandle_t selector_grp_hdl;
  MemberHandle_t action_mbr_hdl;
  netbufferv4_action_desc_t action_desc;

  void __set_has_mbr_hdl(const bool val);

  void __set_has_grp_hdl(const bool val);

  void __set_selector_grp_hdl(const MemberHandle_t val);

  void __set_action_mbr_hdl(const MemberHandle_t val);

  void __set_action_desc(const netbufferv4_action_desc_t& val);

  bool operator == (const netbufferv4_set_hot_threshold_tbl_entry_desc_t & rhs) const
  {
    if (!(has_mbr_hdl == rhs.has_mbr_hdl))
      return false;
    if (!(has_grp_hdl == rhs.has_grp_hdl))
      return false;
    if (!(selector_grp_hdl == rhs.selector_grp_hdl))
      return false;
    if (!(action_mbr_hdl == rhs.action_mbr_hdl))
      return false;
    if (!(action_desc == rhs.action_desc))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_set_hot_threshold_tbl_entry_desc_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_set_hot_threshold_tbl_entry_desc_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_set_hot_threshold_tbl_entry_desc_t& obj);
};

void swap(netbufferv4_set_hot_threshold_tbl_entry_desc_t &a, netbufferv4_set_hot_threshold_tbl_entry_desc_t &b);


class netbufferv4_snapshot_flag_tbl_entry_desc_t {
 public:

  static const char* ascii_fingerprint; // = "0ABA8C15BF35BCFA86A3F90D1B386898";
  static const uint8_t binary_fingerprint[16]; // = {0x0A,0xBA,0x8C,0x15,0xBF,0x35,0xBC,0xFA,0x86,0xA3,0xF9,0x0D,0x1B,0x38,0x68,0x98};

  netbufferv4_snapshot_flag_tbl_entry_desc_t(const netbufferv4_snapshot_flag_tbl_entry_desc_t&);
  netbufferv4_snapshot_flag_tbl_entry_desc_t& operator=(const netbufferv4_snapshot_flag_tbl_entry_desc_t&);
  netbufferv4_snapshot_flag_tbl_entry_desc_t() : has_mbr_hdl(0), has_grp_hdl(0), selector_grp_hdl(0), action_mbr_hdl(0) {
  }

  virtual ~netbufferv4_snapshot_flag_tbl_entry_desc_t() throw();
  netbufferv4_snapshot_flag_tbl_match_spec_t match_spec;
  bool has_mbr_hdl;
  bool has_grp_hdl;
  MemberHandle_t selector_grp_hdl;
  MemberHandle_t action_mbr_hdl;
  netbufferv4_action_desc_t action_desc;

  void __set_match_spec(const netbufferv4_snapshot_flag_tbl_match_spec_t& val);

  void __set_has_mbr_hdl(const bool val);

  void __set_has_grp_hdl(const bool val);

  void __set_selector_grp_hdl(const MemberHandle_t val);

  void __set_action_mbr_hdl(const MemberHandle_t val);

  void __set_action_desc(const netbufferv4_action_desc_t& val);

  bool operator == (const netbufferv4_snapshot_flag_tbl_entry_desc_t & rhs) const
  {
    if (!(match_spec == rhs.match_spec))
      return false;
    if (!(has_mbr_hdl == rhs.has_mbr_hdl))
      return false;
    if (!(has_grp_hdl == rhs.has_grp_hdl))
      return false;
    if (!(selector_grp_hdl == rhs.selector_grp_hdl))
      return false;
    if (!(action_mbr_hdl == rhs.action_mbr_hdl))
      return false;
    if (!(action_desc == rhs.action_desc))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_snapshot_flag_tbl_entry_desc_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_snapshot_flag_tbl_entry_desc_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_snapshot_flag_tbl_entry_desc_t& obj);
};

void swap(netbufferv4_snapshot_flag_tbl_entry_desc_t &a, netbufferv4_snapshot_flag_tbl_entry_desc_t &b);


class netbufferv4_update_ipmac_srcport_tbl_entry_desc_t {
 public:

  static const char* ascii_fingerprint; // = "DB9635B097B930B0963D80DABEB4579C";
  static const uint8_t binary_fingerprint[16]; // = {0xDB,0x96,0x35,0xB0,0x97,0xB9,0x30,0xB0,0x96,0x3D,0x80,0xDA,0xBE,0xB4,0x57,0x9C};

  netbufferv4_update_ipmac_srcport_tbl_entry_desc_t(const netbufferv4_update_ipmac_srcport_tbl_entry_desc_t&);
  netbufferv4_update_ipmac_srcport_tbl_entry_desc_t& operator=(const netbufferv4_update_ipmac_srcport_tbl_entry_desc_t&);
  netbufferv4_update_ipmac_srcport_tbl_entry_desc_t() : has_mbr_hdl(0), has_grp_hdl(0), selector_grp_hdl(0), action_mbr_hdl(0) {
  }

  virtual ~netbufferv4_update_ipmac_srcport_tbl_entry_desc_t() throw();
  netbufferv4_update_ipmac_srcport_tbl_match_spec_t match_spec;
  bool has_mbr_hdl;
  bool has_grp_hdl;
  MemberHandle_t selector_grp_hdl;
  MemberHandle_t action_mbr_hdl;
  netbufferv4_action_desc_t action_desc;

  void __set_match_spec(const netbufferv4_update_ipmac_srcport_tbl_match_spec_t& val);

  void __set_has_mbr_hdl(const bool val);

  void __set_has_grp_hdl(const bool val);

  void __set_selector_grp_hdl(const MemberHandle_t val);

  void __set_action_mbr_hdl(const MemberHandle_t val);

  void __set_action_desc(const netbufferv4_action_desc_t& val);

  bool operator == (const netbufferv4_update_ipmac_srcport_tbl_entry_desc_t & rhs) const
  {
    if (!(match_spec == rhs.match_spec))
      return false;
    if (!(has_mbr_hdl == rhs.has_mbr_hdl))
      return false;
    if (!(has_grp_hdl == rhs.has_grp_hdl))
      return false;
    if (!(selector_grp_hdl == rhs.selector_grp_hdl))
      return false;
    if (!(action_mbr_hdl == rhs.action_mbr_hdl))
      return false;
    if (!(action_desc == rhs.action_desc))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_ipmac_srcport_tbl_entry_desc_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_ipmac_srcport_tbl_entry_desc_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_ipmac_srcport_tbl_entry_desc_t& obj);
};

void swap(netbufferv4_update_ipmac_srcport_tbl_entry_desc_t &a, netbufferv4_update_ipmac_srcport_tbl_entry_desc_t &b);


class netbufferv4_update_pktlen_tbl_entry_desc_t {
 public:

  static const char* ascii_fingerprint; // = "D9F106F3CC1961DC5C7A7EFDF108F5DF";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xF1,0x06,0xF3,0xCC,0x19,0x61,0xDC,0x5C,0x7A,0x7E,0xFD,0xF1,0x08,0xF5,0xDF};

  netbufferv4_update_pktlen_tbl_entry_desc_t(const netbufferv4_update_pktlen_tbl_entry_desc_t&);
  netbufferv4_update_pktlen_tbl_entry_desc_t& operator=(const netbufferv4_update_pktlen_tbl_entry_desc_t&);
  netbufferv4_update_pktlen_tbl_entry_desc_t() : has_mbr_hdl(0), has_grp_hdl(0), selector_grp_hdl(0), action_mbr_hdl(0), priority(0) {
  }

  virtual ~netbufferv4_update_pktlen_tbl_entry_desc_t() throw();
  netbufferv4_update_pktlen_tbl_match_spec_t match_spec;
  bool has_mbr_hdl;
  bool has_grp_hdl;
  MemberHandle_t selector_grp_hdl;
  MemberHandle_t action_mbr_hdl;
  int32_t priority;
  netbufferv4_action_desc_t action_desc;

  void __set_match_spec(const netbufferv4_update_pktlen_tbl_match_spec_t& val);

  void __set_has_mbr_hdl(const bool val);

  void __set_has_grp_hdl(const bool val);

  void __set_selector_grp_hdl(const MemberHandle_t val);

  void __set_action_mbr_hdl(const MemberHandle_t val);

  void __set_priority(const int32_t val);

  void __set_action_desc(const netbufferv4_action_desc_t& val);

  bool operator == (const netbufferv4_update_pktlen_tbl_entry_desc_t & rhs) const
  {
    if (!(match_spec == rhs.match_spec))
      return false;
    if (!(has_mbr_hdl == rhs.has_mbr_hdl))
      return false;
    if (!(has_grp_hdl == rhs.has_grp_hdl))
      return false;
    if (!(selector_grp_hdl == rhs.selector_grp_hdl))
      return false;
    if (!(action_mbr_hdl == rhs.action_mbr_hdl))
      return false;
    if (!(priority == rhs.priority))
      return false;
    if (!(action_desc == rhs.action_desc))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_pktlen_tbl_entry_desc_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_pktlen_tbl_entry_desc_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_pktlen_tbl_entry_desc_t& obj);
};

void swap(netbufferv4_update_pktlen_tbl_entry_desc_t &a, netbufferv4_update_pktlen_tbl_entry_desc_t &b);


class netbufferv4_update_valhi10_tbl_entry_desc_t {
 public:

  static const char* ascii_fingerprint; // = "9BCD45CE9230BA50DB420A41E55BBD37";
  static const uint8_t binary_fingerprint[16]; // = {0x9B,0xCD,0x45,0xCE,0x92,0x30,0xBA,0x50,0xDB,0x42,0x0A,0x41,0xE5,0x5B,0xBD,0x37};

  netbufferv4_update_valhi10_tbl_entry_desc_t(const netbufferv4_update_valhi10_tbl_entry_desc_t&);
  netbufferv4_update_valhi10_tbl_entry_desc_t& operator=(const netbufferv4_update_valhi10_tbl_entry_desc_t&);
  netbufferv4_update_valhi10_tbl_entry_desc_t() : has_mbr_hdl(0), has_grp_hdl(0), selector_grp_hdl(0), action_mbr_hdl(0) {
  }

  virtual ~netbufferv4_update_valhi10_tbl_entry_desc_t() throw();
  netbufferv4_update_valhi10_tbl_match_spec_t match_spec;
  bool has_mbr_hdl;
  bool has_grp_hdl;
  MemberHandle_t selector_grp_hdl;
  MemberHandle_t action_mbr_hdl;
  netbufferv4_action_desc_t action_desc;

  void __set_match_spec(const netbufferv4_update_valhi10_tbl_match_spec_t& val);

  void __set_has_mbr_hdl(const bool val);

  void __set_has_grp_hdl(const bool val);

  void __set_selector_grp_hdl(const MemberHandle_t val);

  void __set_action_mbr_hdl(const MemberHandle_t val);

  void __set_action_desc(const netbufferv4_action_desc_t& val);

  bool operator == (const netbufferv4_update_valhi10_tbl_entry_desc_t & rhs) const
  {
    if (!(match_spec == rhs.match_spec))
      return false;
    if (!(has_mbr_hdl == rhs.has_mbr_hdl))
      return false;
    if (!(has_grp_hdl == rhs.has_grp_hdl))
      return false;
    if (!(selector_grp_hdl == rhs.selector_grp_hdl))
      return false;
    if (!(action_mbr_hdl == rhs.action_mbr_hdl))
      return false;
    if (!(action_desc == rhs.action_desc))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_valhi10_tbl_entry_desc_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_valhi10_tbl_entry_desc_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_valhi10_tbl_entry_desc_t& obj);
};

void swap(netbufferv4_update_valhi10_tbl_entry_desc_t &a, netbufferv4_update_valhi10_tbl_entry_desc_t &b);


class netbufferv4_update_valhi11_tbl_entry_desc_t {
 public:

  static const char* ascii_fingerprint; // = "9BCD45CE9230BA50DB420A41E55BBD37";
  static const uint8_t binary_fingerprint[16]; // = {0x9B,0xCD,0x45,0xCE,0x92,0x30,0xBA,0x50,0xDB,0x42,0x0A,0x41,0xE5,0x5B,0xBD,0x37};

  netbufferv4_update_valhi11_tbl_entry_desc_t(const netbufferv4_update_valhi11_tbl_entry_desc_t&);
  netbufferv4_update_valhi11_tbl_entry_desc_t& operator=(const netbufferv4_update_valhi11_tbl_entry_desc_t&);
  netbufferv4_update_valhi11_tbl_entry_desc_t() : has_mbr_hdl(0), has_grp_hdl(0), selector_grp_hdl(0), action_mbr_hdl(0) {
  }

  virtual ~netbufferv4_update_valhi11_tbl_entry_desc_t() throw();
  netbufferv4_update_valhi11_tbl_match_spec_t match_spec;
  bool has_mbr_hdl;
  bool has_grp_hdl;
  MemberHandle_t selector_grp_hdl;
  MemberHandle_t action_mbr_hdl;
  netbufferv4_action_desc_t action_desc;

  void __set_match_spec(const netbufferv4_update_valhi11_tbl_match_spec_t& val);

  void __set_has_mbr_hdl(const bool val);

  void __set_has_grp_hdl(const bool val);

  void __set_selector_grp_hdl(const MemberHandle_t val);

  void __set_action_mbr_hdl(const MemberHandle_t val);

  void __set_action_desc(const netbufferv4_action_desc_t& val);

  bool operator == (const netbufferv4_update_valhi11_tbl_entry_desc_t & rhs) const
  {
    if (!(match_spec == rhs.match_spec))
      return false;
    if (!(has_mbr_hdl == rhs.has_mbr_hdl))
      return false;
    if (!(has_grp_hdl == rhs.has_grp_hdl))
      return false;
    if (!(selector_grp_hdl == rhs.selector_grp_hdl))
      return false;
    if (!(action_mbr_hdl == rhs.action_mbr_hdl))
      return false;
    if (!(action_desc == rhs.action_desc))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_valhi11_tbl_entry_desc_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_valhi11_tbl_entry_desc_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_valhi11_tbl_entry_desc_t& obj);
};

void swap(netbufferv4_update_valhi11_tbl_entry_desc_t &a, netbufferv4_update_valhi11_tbl_entry_desc_t &b);


class netbufferv4_update_valhi12_tbl_entry_desc_t {
 public:

  static const char* ascii_fingerprint; // = "9BCD45CE9230BA50DB420A41E55BBD37";
  static const uint8_t binary_fingerprint[16]; // = {0x9B,0xCD,0x45,0xCE,0x92,0x30,0xBA,0x50,0xDB,0x42,0x0A,0x41,0xE5,0x5B,0xBD,0x37};

  netbufferv4_update_valhi12_tbl_entry_desc_t(const netbufferv4_update_valhi12_tbl_entry_desc_t&);
  netbufferv4_update_valhi12_tbl_entry_desc_t& operator=(const netbufferv4_update_valhi12_tbl_entry_desc_t&);
  netbufferv4_update_valhi12_tbl_entry_desc_t() : has_mbr_hdl(0), has_grp_hdl(0), selector_grp_hdl(0), action_mbr_hdl(0) {
  }

  virtual ~netbufferv4_update_valhi12_tbl_entry_desc_t() throw();
  netbufferv4_update_valhi12_tbl_match_spec_t match_spec;
  bool has_mbr_hdl;
  bool has_grp_hdl;
  MemberHandle_t selector_grp_hdl;
  MemberHandle_t action_mbr_hdl;
  netbufferv4_action_desc_t action_desc;

  void __set_match_spec(const netbufferv4_update_valhi12_tbl_match_spec_t& val);

  void __set_has_mbr_hdl(const bool val);

  void __set_has_grp_hdl(const bool val);

  void __set_selector_grp_hdl(const MemberHandle_t val);

  void __set_action_mbr_hdl(const MemberHandle_t val);

  void __set_action_desc(const netbufferv4_action_desc_t& val);

  bool operator == (const netbufferv4_update_valhi12_tbl_entry_desc_t & rhs) const
  {
    if (!(match_spec == rhs.match_spec))
      return false;
    if (!(has_mbr_hdl == rhs.has_mbr_hdl))
      return false;
    if (!(has_grp_hdl == rhs.has_grp_hdl))
      return false;
    if (!(selector_grp_hdl == rhs.selector_grp_hdl))
      return false;
    if (!(action_mbr_hdl == rhs.action_mbr_hdl))
      return false;
    if (!(action_desc == rhs.action_desc))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_valhi12_tbl_entry_desc_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_valhi12_tbl_entry_desc_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_valhi12_tbl_entry_desc_t& obj);
};

void swap(netbufferv4_update_valhi12_tbl_entry_desc_t &a, netbufferv4_update_valhi12_tbl_entry_desc_t &b);


class netbufferv4_update_valhi13_tbl_entry_desc_t {
 public:

  static const char* ascii_fingerprint; // = "9BCD45CE9230BA50DB420A41E55BBD37";
  static const uint8_t binary_fingerprint[16]; // = {0x9B,0xCD,0x45,0xCE,0x92,0x30,0xBA,0x50,0xDB,0x42,0x0A,0x41,0xE5,0x5B,0xBD,0x37};

  netbufferv4_update_valhi13_tbl_entry_desc_t(const netbufferv4_update_valhi13_tbl_entry_desc_t&);
  netbufferv4_update_valhi13_tbl_entry_desc_t& operator=(const netbufferv4_update_valhi13_tbl_entry_desc_t&);
  netbufferv4_update_valhi13_tbl_entry_desc_t() : has_mbr_hdl(0), has_grp_hdl(0), selector_grp_hdl(0), action_mbr_hdl(0) {
  }

  virtual ~netbufferv4_update_valhi13_tbl_entry_desc_t() throw();
  netbufferv4_update_valhi13_tbl_match_spec_t match_spec;
  bool has_mbr_hdl;
  bool has_grp_hdl;
  MemberHandle_t selector_grp_hdl;
  MemberHandle_t action_mbr_hdl;
  netbufferv4_action_desc_t action_desc;

  void __set_match_spec(const netbufferv4_update_valhi13_tbl_match_spec_t& val);

  void __set_has_mbr_hdl(const bool val);

  void __set_has_grp_hdl(const bool val);

  void __set_selector_grp_hdl(const MemberHandle_t val);

  void __set_action_mbr_hdl(const MemberHandle_t val);

  void __set_action_desc(const netbufferv4_action_desc_t& val);

  bool operator == (const netbufferv4_update_valhi13_tbl_entry_desc_t & rhs) const
  {
    if (!(match_spec == rhs.match_spec))
      return false;
    if (!(has_mbr_hdl == rhs.has_mbr_hdl))
      return false;
    if (!(has_grp_hdl == rhs.has_grp_hdl))
      return false;
    if (!(selector_grp_hdl == rhs.selector_grp_hdl))
      return false;
    if (!(action_mbr_hdl == rhs.action_mbr_hdl))
      return false;
    if (!(action_desc == rhs.action_desc))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_valhi13_tbl_entry_desc_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_valhi13_tbl_entry_desc_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_valhi13_tbl_entry_desc_t& obj);
};

void swap(netbufferv4_update_valhi13_tbl_entry_desc_t &a, netbufferv4_update_valhi13_tbl_entry_desc_t &b);


class netbufferv4_update_valhi14_tbl_entry_desc_t {
 public:

  static const char* ascii_fingerprint; // = "9BCD45CE9230BA50DB420A41E55BBD37";
  static const uint8_t binary_fingerprint[16]; // = {0x9B,0xCD,0x45,0xCE,0x92,0x30,0xBA,0x50,0xDB,0x42,0x0A,0x41,0xE5,0x5B,0xBD,0x37};

  netbufferv4_update_valhi14_tbl_entry_desc_t(const netbufferv4_update_valhi14_tbl_entry_desc_t&);
  netbufferv4_update_valhi14_tbl_entry_desc_t& operator=(const netbufferv4_update_valhi14_tbl_entry_desc_t&);
  netbufferv4_update_valhi14_tbl_entry_desc_t() : has_mbr_hdl(0), has_grp_hdl(0), selector_grp_hdl(0), action_mbr_hdl(0) {
  }

  virtual ~netbufferv4_update_valhi14_tbl_entry_desc_t() throw();
  netbufferv4_update_valhi14_tbl_match_spec_t match_spec;
  bool has_mbr_hdl;
  bool has_grp_hdl;
  MemberHandle_t selector_grp_hdl;
  MemberHandle_t action_mbr_hdl;
  netbufferv4_action_desc_t action_desc;

  void __set_match_spec(const netbufferv4_update_valhi14_tbl_match_spec_t& val);

  void __set_has_mbr_hdl(const bool val);

  void __set_has_grp_hdl(const bool val);

  void __set_selector_grp_hdl(const MemberHandle_t val);

  void __set_action_mbr_hdl(const MemberHandle_t val);

  void __set_action_desc(const netbufferv4_action_desc_t& val);

  bool operator == (const netbufferv4_update_valhi14_tbl_entry_desc_t & rhs) const
  {
    if (!(match_spec == rhs.match_spec))
      return false;
    if (!(has_mbr_hdl == rhs.has_mbr_hdl))
      return false;
    if (!(has_grp_hdl == rhs.has_grp_hdl))
      return false;
    if (!(selector_grp_hdl == rhs.selector_grp_hdl))
      return false;
    if (!(action_mbr_hdl == rhs.action_mbr_hdl))
      return false;
    if (!(action_desc == rhs.action_desc))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_valhi14_tbl_entry_desc_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_valhi14_tbl_entry_desc_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_valhi14_tbl_entry_desc_t& obj);
};

void swap(netbufferv4_update_valhi14_tbl_entry_desc_t &a, netbufferv4_update_valhi14_tbl_entry_desc_t &b);


class netbufferv4_update_valhi15_tbl_entry_desc_t {
 public:

  static const char* ascii_fingerprint; // = "9BCD45CE9230BA50DB420A41E55BBD37";
  static const uint8_t binary_fingerprint[16]; // = {0x9B,0xCD,0x45,0xCE,0x92,0x30,0xBA,0x50,0xDB,0x42,0x0A,0x41,0xE5,0x5B,0xBD,0x37};

  netbufferv4_update_valhi15_tbl_entry_desc_t(const netbufferv4_update_valhi15_tbl_entry_desc_t&);
  netbufferv4_update_valhi15_tbl_entry_desc_t& operator=(const netbufferv4_update_valhi15_tbl_entry_desc_t&);
  netbufferv4_update_valhi15_tbl_entry_desc_t() : has_mbr_hdl(0), has_grp_hdl(0), selector_grp_hdl(0), action_mbr_hdl(0) {
  }

  virtual ~netbufferv4_update_valhi15_tbl_entry_desc_t() throw();
  netbufferv4_update_valhi15_tbl_match_spec_t match_spec;
  bool has_mbr_hdl;
  bool has_grp_hdl;
  MemberHandle_t selector_grp_hdl;
  MemberHandle_t action_mbr_hdl;
  netbufferv4_action_desc_t action_desc;

  void __set_match_spec(const netbufferv4_update_valhi15_tbl_match_spec_t& val);

  void __set_has_mbr_hdl(const bool val);

  void __set_has_grp_hdl(const bool val);

  void __set_selector_grp_hdl(const MemberHandle_t val);

  void __set_action_mbr_hdl(const MemberHandle_t val);

  void __set_action_desc(const netbufferv4_action_desc_t& val);

  bool operator == (const netbufferv4_update_valhi15_tbl_entry_desc_t & rhs) const
  {
    if (!(match_spec == rhs.match_spec))
      return false;
    if (!(has_mbr_hdl == rhs.has_mbr_hdl))
      return false;
    if (!(has_grp_hdl == rhs.has_grp_hdl))
      return false;
    if (!(selector_grp_hdl == rhs.selector_grp_hdl))
      return false;
    if (!(action_mbr_hdl == rhs.action_mbr_hdl))
      return false;
    if (!(action_desc == rhs.action_desc))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_valhi15_tbl_entry_desc_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_valhi15_tbl_entry_desc_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_valhi15_tbl_entry_desc_t& obj);
};

void swap(netbufferv4_update_valhi15_tbl_entry_desc_t &a, netbufferv4_update_valhi15_tbl_entry_desc_t &b);


class netbufferv4_update_valhi16_tbl_entry_desc_t {
 public:

  static const char* ascii_fingerprint; // = "9BCD45CE9230BA50DB420A41E55BBD37";
  static const uint8_t binary_fingerprint[16]; // = {0x9B,0xCD,0x45,0xCE,0x92,0x30,0xBA,0x50,0xDB,0x42,0x0A,0x41,0xE5,0x5B,0xBD,0x37};

  netbufferv4_update_valhi16_tbl_entry_desc_t(const netbufferv4_update_valhi16_tbl_entry_desc_t&);
  netbufferv4_update_valhi16_tbl_entry_desc_t& operator=(const netbufferv4_update_valhi16_tbl_entry_desc_t&);
  netbufferv4_update_valhi16_tbl_entry_desc_t() : has_mbr_hdl(0), has_grp_hdl(0), selector_grp_hdl(0), action_mbr_hdl(0) {
  }

  virtual ~netbufferv4_update_valhi16_tbl_entry_desc_t() throw();
  netbufferv4_update_valhi16_tbl_match_spec_t match_spec;
  bool has_mbr_hdl;
  bool has_grp_hdl;
  MemberHandle_t selector_grp_hdl;
  MemberHandle_t action_mbr_hdl;
  netbufferv4_action_desc_t action_desc;

  void __set_match_spec(const netbufferv4_update_valhi16_tbl_match_spec_t& val);

  void __set_has_mbr_hdl(const bool val);

  void __set_has_grp_hdl(const bool val);

  void __set_selector_grp_hdl(const MemberHandle_t val);

  void __set_action_mbr_hdl(const MemberHandle_t val);

  void __set_action_desc(const netbufferv4_action_desc_t& val);

  bool operator == (const netbufferv4_update_valhi16_tbl_entry_desc_t & rhs) const
  {
    if (!(match_spec == rhs.match_spec))
      return false;
    if (!(has_mbr_hdl == rhs.has_mbr_hdl))
      return false;
    if (!(has_grp_hdl == rhs.has_grp_hdl))
      return false;
    if (!(selector_grp_hdl == rhs.selector_grp_hdl))
      return false;
    if (!(action_mbr_hdl == rhs.action_mbr_hdl))
      return false;
    if (!(action_desc == rhs.action_desc))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_valhi16_tbl_entry_desc_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_valhi16_tbl_entry_desc_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_valhi16_tbl_entry_desc_t& obj);
};

void swap(netbufferv4_update_valhi16_tbl_entry_desc_t &a, netbufferv4_update_valhi16_tbl_entry_desc_t &b);


class netbufferv4_update_valhi1_tbl_entry_desc_t {
 public:

  static const char* ascii_fingerprint; // = "9BCD45CE9230BA50DB420A41E55BBD37";
  static const uint8_t binary_fingerprint[16]; // = {0x9B,0xCD,0x45,0xCE,0x92,0x30,0xBA,0x50,0xDB,0x42,0x0A,0x41,0xE5,0x5B,0xBD,0x37};

  netbufferv4_update_valhi1_tbl_entry_desc_t(const netbufferv4_update_valhi1_tbl_entry_desc_t&);
  netbufferv4_update_valhi1_tbl_entry_desc_t& operator=(const netbufferv4_update_valhi1_tbl_entry_desc_t&);
  netbufferv4_update_valhi1_tbl_entry_desc_t() : has_mbr_hdl(0), has_grp_hdl(0), selector_grp_hdl(0), action_mbr_hdl(0) {
  }

  virtual ~netbufferv4_update_valhi1_tbl_entry_desc_t() throw();
  netbufferv4_update_valhi1_tbl_match_spec_t match_spec;
  bool has_mbr_hdl;
  bool has_grp_hdl;
  MemberHandle_t selector_grp_hdl;
  MemberHandle_t action_mbr_hdl;
  netbufferv4_action_desc_t action_desc;

  void __set_match_spec(const netbufferv4_update_valhi1_tbl_match_spec_t& val);

  void __set_has_mbr_hdl(const bool val);

  void __set_has_grp_hdl(const bool val);

  void __set_selector_grp_hdl(const MemberHandle_t val);

  void __set_action_mbr_hdl(const MemberHandle_t val);

  void __set_action_desc(const netbufferv4_action_desc_t& val);

  bool operator == (const netbufferv4_update_valhi1_tbl_entry_desc_t & rhs) const
  {
    if (!(match_spec == rhs.match_spec))
      return false;
    if (!(has_mbr_hdl == rhs.has_mbr_hdl))
      return false;
    if (!(has_grp_hdl == rhs.has_grp_hdl))
      return false;
    if (!(selector_grp_hdl == rhs.selector_grp_hdl))
      return false;
    if (!(action_mbr_hdl == rhs.action_mbr_hdl))
      return false;
    if (!(action_desc == rhs.action_desc))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_valhi1_tbl_entry_desc_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_valhi1_tbl_entry_desc_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_valhi1_tbl_entry_desc_t& obj);
};

void swap(netbufferv4_update_valhi1_tbl_entry_desc_t &a, netbufferv4_update_valhi1_tbl_entry_desc_t &b);


class netbufferv4_update_valhi2_tbl_entry_desc_t {
 public:

  static const char* ascii_fingerprint; // = "9BCD45CE9230BA50DB420A41E55BBD37";
  static const uint8_t binary_fingerprint[16]; // = {0x9B,0xCD,0x45,0xCE,0x92,0x30,0xBA,0x50,0xDB,0x42,0x0A,0x41,0xE5,0x5B,0xBD,0x37};

  netbufferv4_update_valhi2_tbl_entry_desc_t(const netbufferv4_update_valhi2_tbl_entry_desc_t&);
  netbufferv4_update_valhi2_tbl_entry_desc_t& operator=(const netbufferv4_update_valhi2_tbl_entry_desc_t&);
  netbufferv4_update_valhi2_tbl_entry_desc_t() : has_mbr_hdl(0), has_grp_hdl(0), selector_grp_hdl(0), action_mbr_hdl(0) {
  }

  virtual ~netbufferv4_update_valhi2_tbl_entry_desc_t() throw();
  netbufferv4_update_valhi2_tbl_match_spec_t match_spec;
  bool has_mbr_hdl;
  bool has_grp_hdl;
  MemberHandle_t selector_grp_hdl;
  MemberHandle_t action_mbr_hdl;
  netbufferv4_action_desc_t action_desc;

  void __set_match_spec(const netbufferv4_update_valhi2_tbl_match_spec_t& val);

  void __set_has_mbr_hdl(const bool val);

  void __set_has_grp_hdl(const bool val);

  void __set_selector_grp_hdl(const MemberHandle_t val);

  void __set_action_mbr_hdl(const MemberHandle_t val);

  void __set_action_desc(const netbufferv4_action_desc_t& val);

  bool operator == (const netbufferv4_update_valhi2_tbl_entry_desc_t & rhs) const
  {
    if (!(match_spec == rhs.match_spec))
      return false;
    if (!(has_mbr_hdl == rhs.has_mbr_hdl))
      return false;
    if (!(has_grp_hdl == rhs.has_grp_hdl))
      return false;
    if (!(selector_grp_hdl == rhs.selector_grp_hdl))
      return false;
    if (!(action_mbr_hdl == rhs.action_mbr_hdl))
      return false;
    if (!(action_desc == rhs.action_desc))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_valhi2_tbl_entry_desc_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_valhi2_tbl_entry_desc_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_valhi2_tbl_entry_desc_t& obj);
};

void swap(netbufferv4_update_valhi2_tbl_entry_desc_t &a, netbufferv4_update_valhi2_tbl_entry_desc_t &b);


class netbufferv4_update_valhi3_tbl_entry_desc_t {
 public:

  static const char* ascii_fingerprint; // = "9BCD45CE9230BA50DB420A41E55BBD37";
  static const uint8_t binary_fingerprint[16]; // = {0x9B,0xCD,0x45,0xCE,0x92,0x30,0xBA,0x50,0xDB,0x42,0x0A,0x41,0xE5,0x5B,0xBD,0x37};

  netbufferv4_update_valhi3_tbl_entry_desc_t(const netbufferv4_update_valhi3_tbl_entry_desc_t&);
  netbufferv4_update_valhi3_tbl_entry_desc_t& operator=(const netbufferv4_update_valhi3_tbl_entry_desc_t&);
  netbufferv4_update_valhi3_tbl_entry_desc_t() : has_mbr_hdl(0), has_grp_hdl(0), selector_grp_hdl(0), action_mbr_hdl(0) {
  }

  virtual ~netbufferv4_update_valhi3_tbl_entry_desc_t() throw();
  netbufferv4_update_valhi3_tbl_match_spec_t match_spec;
  bool has_mbr_hdl;
  bool has_grp_hdl;
  MemberHandle_t selector_grp_hdl;
  MemberHandle_t action_mbr_hdl;
  netbufferv4_action_desc_t action_desc;

  void __set_match_spec(const netbufferv4_update_valhi3_tbl_match_spec_t& val);

  void __set_has_mbr_hdl(const bool val);

  void __set_has_grp_hdl(const bool val);

  void __set_selector_grp_hdl(const MemberHandle_t val);

  void __set_action_mbr_hdl(const MemberHandle_t val);

  void __set_action_desc(const netbufferv4_action_desc_t& val);

  bool operator == (const netbufferv4_update_valhi3_tbl_entry_desc_t & rhs) const
  {
    if (!(match_spec == rhs.match_spec))
      return false;
    if (!(has_mbr_hdl == rhs.has_mbr_hdl))
      return false;
    if (!(has_grp_hdl == rhs.has_grp_hdl))
      return false;
    if (!(selector_grp_hdl == rhs.selector_grp_hdl))
      return false;
    if (!(action_mbr_hdl == rhs.action_mbr_hdl))
      return false;
    if (!(action_desc == rhs.action_desc))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_valhi3_tbl_entry_desc_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_valhi3_tbl_entry_desc_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_valhi3_tbl_entry_desc_t& obj);
};

void swap(netbufferv4_update_valhi3_tbl_entry_desc_t &a, netbufferv4_update_valhi3_tbl_entry_desc_t &b);


class netbufferv4_update_valhi4_tbl_entry_desc_t {
 public:

  static const char* ascii_fingerprint; // = "9BCD45CE9230BA50DB420A41E55BBD37";
  static const uint8_t binary_fingerprint[16]; // = {0x9B,0xCD,0x45,0xCE,0x92,0x30,0xBA,0x50,0xDB,0x42,0x0A,0x41,0xE5,0x5B,0xBD,0x37};

  netbufferv4_update_valhi4_tbl_entry_desc_t(const netbufferv4_update_valhi4_tbl_entry_desc_t&);
  netbufferv4_update_valhi4_tbl_entry_desc_t& operator=(const netbufferv4_update_valhi4_tbl_entry_desc_t&);
  netbufferv4_update_valhi4_tbl_entry_desc_t() : has_mbr_hdl(0), has_grp_hdl(0), selector_grp_hdl(0), action_mbr_hdl(0) {
  }

  virtual ~netbufferv4_update_valhi4_tbl_entry_desc_t() throw();
  netbufferv4_update_valhi4_tbl_match_spec_t match_spec;
  bool has_mbr_hdl;
  bool has_grp_hdl;
  MemberHandle_t selector_grp_hdl;
  MemberHandle_t action_mbr_hdl;
  netbufferv4_action_desc_t action_desc;

  void __set_match_spec(const netbufferv4_update_valhi4_tbl_match_spec_t& val);

  void __set_has_mbr_hdl(const bool val);

  void __set_has_grp_hdl(const bool val);

  void __set_selector_grp_hdl(const MemberHandle_t val);

  void __set_action_mbr_hdl(const MemberHandle_t val);

  void __set_action_desc(const netbufferv4_action_desc_t& val);

  bool operator == (const netbufferv4_update_valhi4_tbl_entry_desc_t & rhs) const
  {
    if (!(match_spec == rhs.match_spec))
      return false;
    if (!(has_mbr_hdl == rhs.has_mbr_hdl))
      return false;
    if (!(has_grp_hdl == rhs.has_grp_hdl))
      return false;
    if (!(selector_grp_hdl == rhs.selector_grp_hdl))
      return false;
    if (!(action_mbr_hdl == rhs.action_mbr_hdl))
      return false;
    if (!(action_desc == rhs.action_desc))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_valhi4_tbl_entry_desc_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_valhi4_tbl_entry_desc_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_valhi4_tbl_entry_desc_t& obj);
};

void swap(netbufferv4_update_valhi4_tbl_entry_desc_t &a, netbufferv4_update_valhi4_tbl_entry_desc_t &b);


class netbufferv4_update_valhi5_tbl_entry_desc_t {
 public:

  static const char* ascii_fingerprint; // = "9BCD45CE9230BA50DB420A41E55BBD37";
  static const uint8_t binary_fingerprint[16]; // = {0x9B,0xCD,0x45,0xCE,0x92,0x30,0xBA,0x50,0xDB,0x42,0x0A,0x41,0xE5,0x5B,0xBD,0x37};

  netbufferv4_update_valhi5_tbl_entry_desc_t(const netbufferv4_update_valhi5_tbl_entry_desc_t&);
  netbufferv4_update_valhi5_tbl_entry_desc_t& operator=(const netbufferv4_update_valhi5_tbl_entry_desc_t&);
  netbufferv4_update_valhi5_tbl_entry_desc_t() : has_mbr_hdl(0), has_grp_hdl(0), selector_grp_hdl(0), action_mbr_hdl(0) {
  }

  virtual ~netbufferv4_update_valhi5_tbl_entry_desc_t() throw();
  netbufferv4_update_valhi5_tbl_match_spec_t match_spec;
  bool has_mbr_hdl;
  bool has_grp_hdl;
  MemberHandle_t selector_grp_hdl;
  MemberHandle_t action_mbr_hdl;
  netbufferv4_action_desc_t action_desc;

  void __set_match_spec(const netbufferv4_update_valhi5_tbl_match_spec_t& val);

  void __set_has_mbr_hdl(const bool val);

  void __set_has_grp_hdl(const bool val);

  void __set_selector_grp_hdl(const MemberHandle_t val);

  void __set_action_mbr_hdl(const MemberHandle_t val);

  void __set_action_desc(const netbufferv4_action_desc_t& val);

  bool operator == (const netbufferv4_update_valhi5_tbl_entry_desc_t & rhs) const
  {
    if (!(match_spec == rhs.match_spec))
      return false;
    if (!(has_mbr_hdl == rhs.has_mbr_hdl))
      return false;
    if (!(has_grp_hdl == rhs.has_grp_hdl))
      return false;
    if (!(selector_grp_hdl == rhs.selector_grp_hdl))
      return false;
    if (!(action_mbr_hdl == rhs.action_mbr_hdl))
      return false;
    if (!(action_desc == rhs.action_desc))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_valhi5_tbl_entry_desc_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_valhi5_tbl_entry_desc_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_valhi5_tbl_entry_desc_t& obj);
};

void swap(netbufferv4_update_valhi5_tbl_entry_desc_t &a, netbufferv4_update_valhi5_tbl_entry_desc_t &b);


class netbufferv4_update_valhi6_tbl_entry_desc_t {
 public:

  static const char* ascii_fingerprint; // = "9BCD45CE9230BA50DB420A41E55BBD37";
  static const uint8_t binary_fingerprint[16]; // = {0x9B,0xCD,0x45,0xCE,0x92,0x30,0xBA,0x50,0xDB,0x42,0x0A,0x41,0xE5,0x5B,0xBD,0x37};

  netbufferv4_update_valhi6_tbl_entry_desc_t(const netbufferv4_update_valhi6_tbl_entry_desc_t&);
  netbufferv4_update_valhi6_tbl_entry_desc_t& operator=(const netbufferv4_update_valhi6_tbl_entry_desc_t&);
  netbufferv4_update_valhi6_tbl_entry_desc_t() : has_mbr_hdl(0), has_grp_hdl(0), selector_grp_hdl(0), action_mbr_hdl(0) {
  }

  virtual ~netbufferv4_update_valhi6_tbl_entry_desc_t() throw();
  netbufferv4_update_valhi6_tbl_match_spec_t match_spec;
  bool has_mbr_hdl;
  bool has_grp_hdl;
  MemberHandle_t selector_grp_hdl;
  MemberHandle_t action_mbr_hdl;
  netbufferv4_action_desc_t action_desc;

  void __set_match_spec(const netbufferv4_update_valhi6_tbl_match_spec_t& val);

  void __set_has_mbr_hdl(const bool val);

  void __set_has_grp_hdl(const bool val);

  void __set_selector_grp_hdl(const MemberHandle_t val);

  void __set_action_mbr_hdl(const MemberHandle_t val);

  void __set_action_desc(const netbufferv4_action_desc_t& val);

  bool operator == (const netbufferv4_update_valhi6_tbl_entry_desc_t & rhs) const
  {
    if (!(match_spec == rhs.match_spec))
      return false;
    if (!(has_mbr_hdl == rhs.has_mbr_hdl))
      return false;
    if (!(has_grp_hdl == rhs.has_grp_hdl))
      return false;
    if (!(selector_grp_hdl == rhs.selector_grp_hdl))
      return false;
    if (!(action_mbr_hdl == rhs.action_mbr_hdl))
      return false;
    if (!(action_desc == rhs.action_desc))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_valhi6_tbl_entry_desc_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_valhi6_tbl_entry_desc_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_valhi6_tbl_entry_desc_t& obj);
};

void swap(netbufferv4_update_valhi6_tbl_entry_desc_t &a, netbufferv4_update_valhi6_tbl_entry_desc_t &b);


class netbufferv4_update_valhi7_tbl_entry_desc_t {
 public:

  static const char* ascii_fingerprint; // = "9BCD45CE9230BA50DB420A41E55BBD37";
  static const uint8_t binary_fingerprint[16]; // = {0x9B,0xCD,0x45,0xCE,0x92,0x30,0xBA,0x50,0xDB,0x42,0x0A,0x41,0xE5,0x5B,0xBD,0x37};

  netbufferv4_update_valhi7_tbl_entry_desc_t(const netbufferv4_update_valhi7_tbl_entry_desc_t&);
  netbufferv4_update_valhi7_tbl_entry_desc_t& operator=(const netbufferv4_update_valhi7_tbl_entry_desc_t&);
  netbufferv4_update_valhi7_tbl_entry_desc_t() : has_mbr_hdl(0), has_grp_hdl(0), selector_grp_hdl(0), action_mbr_hdl(0) {
  }

  virtual ~netbufferv4_update_valhi7_tbl_entry_desc_t() throw();
  netbufferv4_update_valhi7_tbl_match_spec_t match_spec;
  bool has_mbr_hdl;
  bool has_grp_hdl;
  MemberHandle_t selector_grp_hdl;
  MemberHandle_t action_mbr_hdl;
  netbufferv4_action_desc_t action_desc;

  void __set_match_spec(const netbufferv4_update_valhi7_tbl_match_spec_t& val);

  void __set_has_mbr_hdl(const bool val);

  void __set_has_grp_hdl(const bool val);

  void __set_selector_grp_hdl(const MemberHandle_t val);

  void __set_action_mbr_hdl(const MemberHandle_t val);

  void __set_action_desc(const netbufferv4_action_desc_t& val);

  bool operator == (const netbufferv4_update_valhi7_tbl_entry_desc_t & rhs) const
  {
    if (!(match_spec == rhs.match_spec))
      return false;
    if (!(has_mbr_hdl == rhs.has_mbr_hdl))
      return false;
    if (!(has_grp_hdl == rhs.has_grp_hdl))
      return false;
    if (!(selector_grp_hdl == rhs.selector_grp_hdl))
      return false;
    if (!(action_mbr_hdl == rhs.action_mbr_hdl))
      return false;
    if (!(action_desc == rhs.action_desc))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_valhi7_tbl_entry_desc_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_valhi7_tbl_entry_desc_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_valhi7_tbl_entry_desc_t& obj);
};

void swap(netbufferv4_update_valhi7_tbl_entry_desc_t &a, netbufferv4_update_valhi7_tbl_entry_desc_t &b);


class netbufferv4_update_valhi8_tbl_entry_desc_t {
 public:

  static const char* ascii_fingerprint; // = "9BCD45CE9230BA50DB420A41E55BBD37";
  static const uint8_t binary_fingerprint[16]; // = {0x9B,0xCD,0x45,0xCE,0x92,0x30,0xBA,0x50,0xDB,0x42,0x0A,0x41,0xE5,0x5B,0xBD,0x37};

  netbufferv4_update_valhi8_tbl_entry_desc_t(const netbufferv4_update_valhi8_tbl_entry_desc_t&);
  netbufferv4_update_valhi8_tbl_entry_desc_t& operator=(const netbufferv4_update_valhi8_tbl_entry_desc_t&);
  netbufferv4_update_valhi8_tbl_entry_desc_t() : has_mbr_hdl(0), has_grp_hdl(0), selector_grp_hdl(0), action_mbr_hdl(0) {
  }

  virtual ~netbufferv4_update_valhi8_tbl_entry_desc_t() throw();
  netbufferv4_update_valhi8_tbl_match_spec_t match_spec;
  bool has_mbr_hdl;
  bool has_grp_hdl;
  MemberHandle_t selector_grp_hdl;
  MemberHandle_t action_mbr_hdl;
  netbufferv4_action_desc_t action_desc;

  void __set_match_spec(const netbufferv4_update_valhi8_tbl_match_spec_t& val);

  void __set_has_mbr_hdl(const bool val);

  void __set_has_grp_hdl(const bool val);

  void __set_selector_grp_hdl(const MemberHandle_t val);

  void __set_action_mbr_hdl(const MemberHandle_t val);

  void __set_action_desc(const netbufferv4_action_desc_t& val);

  bool operator == (const netbufferv4_update_valhi8_tbl_entry_desc_t & rhs) const
  {
    if (!(match_spec == rhs.match_spec))
      return false;
    if (!(has_mbr_hdl == rhs.has_mbr_hdl))
      return false;
    if (!(has_grp_hdl == rhs.has_grp_hdl))
      return false;
    if (!(selector_grp_hdl == rhs.selector_grp_hdl))
      return false;
    if (!(action_mbr_hdl == rhs.action_mbr_hdl))
      return false;
    if (!(action_desc == rhs.action_desc))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_valhi8_tbl_entry_desc_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_valhi8_tbl_entry_desc_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_valhi8_tbl_entry_desc_t& obj);
};

void swap(netbufferv4_update_valhi8_tbl_entry_desc_t &a, netbufferv4_update_valhi8_tbl_entry_desc_t &b);


class netbufferv4_update_valhi9_tbl_entry_desc_t {
 public:

  static const char* ascii_fingerprint; // = "9BCD45CE9230BA50DB420A41E55BBD37";
  static const uint8_t binary_fingerprint[16]; // = {0x9B,0xCD,0x45,0xCE,0x92,0x30,0xBA,0x50,0xDB,0x42,0x0A,0x41,0xE5,0x5B,0xBD,0x37};

  netbufferv4_update_valhi9_tbl_entry_desc_t(const netbufferv4_update_valhi9_tbl_entry_desc_t&);
  netbufferv4_update_valhi9_tbl_entry_desc_t& operator=(const netbufferv4_update_valhi9_tbl_entry_desc_t&);
  netbufferv4_update_valhi9_tbl_entry_desc_t() : has_mbr_hdl(0), has_grp_hdl(0), selector_grp_hdl(0), action_mbr_hdl(0) {
  }

  virtual ~netbufferv4_update_valhi9_tbl_entry_desc_t() throw();
  netbufferv4_update_valhi9_tbl_match_spec_t match_spec;
  bool has_mbr_hdl;
  bool has_grp_hdl;
  MemberHandle_t selector_grp_hdl;
  MemberHandle_t action_mbr_hdl;
  netbufferv4_action_desc_t action_desc;

  void __set_match_spec(const netbufferv4_update_valhi9_tbl_match_spec_t& val);

  void __set_has_mbr_hdl(const bool val);

  void __set_has_grp_hdl(const bool val);

  void __set_selector_grp_hdl(const MemberHandle_t val);

  void __set_action_mbr_hdl(const MemberHandle_t val);

  void __set_action_desc(const netbufferv4_action_desc_t& val);

  bool operator == (const netbufferv4_update_valhi9_tbl_entry_desc_t & rhs) const
  {
    if (!(match_spec == rhs.match_spec))
      return false;
    if (!(has_mbr_hdl == rhs.has_mbr_hdl))
      return false;
    if (!(has_grp_hdl == rhs.has_grp_hdl))
      return false;
    if (!(selector_grp_hdl == rhs.selector_grp_hdl))
      return false;
    if (!(action_mbr_hdl == rhs.action_mbr_hdl))
      return false;
    if (!(action_desc == rhs.action_desc))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_valhi9_tbl_entry_desc_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_valhi9_tbl_entry_desc_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_valhi9_tbl_entry_desc_t& obj);
};

void swap(netbufferv4_update_valhi9_tbl_entry_desc_t &a, netbufferv4_update_valhi9_tbl_entry_desc_t &b);


class netbufferv4_update_vallen_tbl_entry_desc_t {
 public:

  static const char* ascii_fingerprint; // = "35BEF31FF63A6EDE4C7F4DACCA44BC4F";
  static const uint8_t binary_fingerprint[16]; // = {0x35,0xBE,0xF3,0x1F,0xF6,0x3A,0x6E,0xDE,0x4C,0x7F,0x4D,0xAC,0xCA,0x44,0xBC,0x4F};

  netbufferv4_update_vallen_tbl_entry_desc_t(const netbufferv4_update_vallen_tbl_entry_desc_t&);
  netbufferv4_update_vallen_tbl_entry_desc_t& operator=(const netbufferv4_update_vallen_tbl_entry_desc_t&);
  netbufferv4_update_vallen_tbl_entry_desc_t() : has_mbr_hdl(0), has_grp_hdl(0), selector_grp_hdl(0), action_mbr_hdl(0) {
  }

  virtual ~netbufferv4_update_vallen_tbl_entry_desc_t() throw();
  netbufferv4_update_vallen_tbl_match_spec_t match_spec;
  bool has_mbr_hdl;
  bool has_grp_hdl;
  MemberHandle_t selector_grp_hdl;
  MemberHandle_t action_mbr_hdl;
  netbufferv4_action_desc_t action_desc;

  void __set_match_spec(const netbufferv4_update_vallen_tbl_match_spec_t& val);

  void __set_has_mbr_hdl(const bool val);

  void __set_has_grp_hdl(const bool val);

  void __set_selector_grp_hdl(const MemberHandle_t val);

  void __set_action_mbr_hdl(const MemberHandle_t val);

  void __set_action_desc(const netbufferv4_action_desc_t& val);

  bool operator == (const netbufferv4_update_vallen_tbl_entry_desc_t & rhs) const
  {
    if (!(match_spec == rhs.match_spec))
      return false;
    if (!(has_mbr_hdl == rhs.has_mbr_hdl))
      return false;
    if (!(has_grp_hdl == rhs.has_grp_hdl))
      return false;
    if (!(selector_grp_hdl == rhs.selector_grp_hdl))
      return false;
    if (!(action_mbr_hdl == rhs.action_mbr_hdl))
      return false;
    if (!(action_desc == rhs.action_desc))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_vallen_tbl_entry_desc_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_vallen_tbl_entry_desc_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_vallen_tbl_entry_desc_t& obj);
};

void swap(netbufferv4_update_vallen_tbl_entry_desc_t &a, netbufferv4_update_vallen_tbl_entry_desc_t &b);


class netbufferv4_update_vallo10_tbl_entry_desc_t {
 public:

  static const char* ascii_fingerprint; // = "9BCD45CE9230BA50DB420A41E55BBD37";
  static const uint8_t binary_fingerprint[16]; // = {0x9B,0xCD,0x45,0xCE,0x92,0x30,0xBA,0x50,0xDB,0x42,0x0A,0x41,0xE5,0x5B,0xBD,0x37};

  netbufferv4_update_vallo10_tbl_entry_desc_t(const netbufferv4_update_vallo10_tbl_entry_desc_t&);
  netbufferv4_update_vallo10_tbl_entry_desc_t& operator=(const netbufferv4_update_vallo10_tbl_entry_desc_t&);
  netbufferv4_update_vallo10_tbl_entry_desc_t() : has_mbr_hdl(0), has_grp_hdl(0), selector_grp_hdl(0), action_mbr_hdl(0) {
  }

  virtual ~netbufferv4_update_vallo10_tbl_entry_desc_t() throw();
  netbufferv4_update_vallo10_tbl_match_spec_t match_spec;
  bool has_mbr_hdl;
  bool has_grp_hdl;
  MemberHandle_t selector_grp_hdl;
  MemberHandle_t action_mbr_hdl;
  netbufferv4_action_desc_t action_desc;

  void __set_match_spec(const netbufferv4_update_vallo10_tbl_match_spec_t& val);

  void __set_has_mbr_hdl(const bool val);

  void __set_has_grp_hdl(const bool val);

  void __set_selector_grp_hdl(const MemberHandle_t val);

  void __set_action_mbr_hdl(const MemberHandle_t val);

  void __set_action_desc(const netbufferv4_action_desc_t& val);

  bool operator == (const netbufferv4_update_vallo10_tbl_entry_desc_t & rhs) const
  {
    if (!(match_spec == rhs.match_spec))
      return false;
    if (!(has_mbr_hdl == rhs.has_mbr_hdl))
      return false;
    if (!(has_grp_hdl == rhs.has_grp_hdl))
      return false;
    if (!(selector_grp_hdl == rhs.selector_grp_hdl))
      return false;
    if (!(action_mbr_hdl == rhs.action_mbr_hdl))
      return false;
    if (!(action_desc == rhs.action_desc))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_vallo10_tbl_entry_desc_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_vallo10_tbl_entry_desc_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_vallo10_tbl_entry_desc_t& obj);
};

void swap(netbufferv4_update_vallo10_tbl_entry_desc_t &a, netbufferv4_update_vallo10_tbl_entry_desc_t &b);


class netbufferv4_update_vallo11_tbl_entry_desc_t {
 public:

  static const char* ascii_fingerprint; // = "9BCD45CE9230BA50DB420A41E55BBD37";
  static const uint8_t binary_fingerprint[16]; // = {0x9B,0xCD,0x45,0xCE,0x92,0x30,0xBA,0x50,0xDB,0x42,0x0A,0x41,0xE5,0x5B,0xBD,0x37};

  netbufferv4_update_vallo11_tbl_entry_desc_t(const netbufferv4_update_vallo11_tbl_entry_desc_t&);
  netbufferv4_update_vallo11_tbl_entry_desc_t& operator=(const netbufferv4_update_vallo11_tbl_entry_desc_t&);
  netbufferv4_update_vallo11_tbl_entry_desc_t() : has_mbr_hdl(0), has_grp_hdl(0), selector_grp_hdl(0), action_mbr_hdl(0) {
  }

  virtual ~netbufferv4_update_vallo11_tbl_entry_desc_t() throw();
  netbufferv4_update_vallo11_tbl_match_spec_t match_spec;
  bool has_mbr_hdl;
  bool has_grp_hdl;
  MemberHandle_t selector_grp_hdl;
  MemberHandle_t action_mbr_hdl;
  netbufferv4_action_desc_t action_desc;

  void __set_match_spec(const netbufferv4_update_vallo11_tbl_match_spec_t& val);

  void __set_has_mbr_hdl(const bool val);

  void __set_has_grp_hdl(const bool val);

  void __set_selector_grp_hdl(const MemberHandle_t val);

  void __set_action_mbr_hdl(const MemberHandle_t val);

  void __set_action_desc(const netbufferv4_action_desc_t& val);

  bool operator == (const netbufferv4_update_vallo11_tbl_entry_desc_t & rhs) const
  {
    if (!(match_spec == rhs.match_spec))
      return false;
    if (!(has_mbr_hdl == rhs.has_mbr_hdl))
      return false;
    if (!(has_grp_hdl == rhs.has_grp_hdl))
      return false;
    if (!(selector_grp_hdl == rhs.selector_grp_hdl))
      return false;
    if (!(action_mbr_hdl == rhs.action_mbr_hdl))
      return false;
    if (!(action_desc == rhs.action_desc))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_vallo11_tbl_entry_desc_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_vallo11_tbl_entry_desc_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_vallo11_tbl_entry_desc_t& obj);
};

void swap(netbufferv4_update_vallo11_tbl_entry_desc_t &a, netbufferv4_update_vallo11_tbl_entry_desc_t &b);


class netbufferv4_update_vallo12_tbl_entry_desc_t {
 public:

  static const char* ascii_fingerprint; // = "9BCD45CE9230BA50DB420A41E55BBD37";
  static const uint8_t binary_fingerprint[16]; // = {0x9B,0xCD,0x45,0xCE,0x92,0x30,0xBA,0x50,0xDB,0x42,0x0A,0x41,0xE5,0x5B,0xBD,0x37};

  netbufferv4_update_vallo12_tbl_entry_desc_t(const netbufferv4_update_vallo12_tbl_entry_desc_t&);
  netbufferv4_update_vallo12_tbl_entry_desc_t& operator=(const netbufferv4_update_vallo12_tbl_entry_desc_t&);
  netbufferv4_update_vallo12_tbl_entry_desc_t() : has_mbr_hdl(0), has_grp_hdl(0), selector_grp_hdl(0), action_mbr_hdl(0) {
  }

  virtual ~netbufferv4_update_vallo12_tbl_entry_desc_t() throw();
  netbufferv4_update_vallo12_tbl_match_spec_t match_spec;
  bool has_mbr_hdl;
  bool has_grp_hdl;
  MemberHandle_t selector_grp_hdl;
  MemberHandle_t action_mbr_hdl;
  netbufferv4_action_desc_t action_desc;

  void __set_match_spec(const netbufferv4_update_vallo12_tbl_match_spec_t& val);

  void __set_has_mbr_hdl(const bool val);

  void __set_has_grp_hdl(const bool val);

  void __set_selector_grp_hdl(const MemberHandle_t val);

  void __set_action_mbr_hdl(const MemberHandle_t val);

  void __set_action_desc(const netbufferv4_action_desc_t& val);

  bool operator == (const netbufferv4_update_vallo12_tbl_entry_desc_t & rhs) const
  {
    if (!(match_spec == rhs.match_spec))
      return false;
    if (!(has_mbr_hdl == rhs.has_mbr_hdl))
      return false;
    if (!(has_grp_hdl == rhs.has_grp_hdl))
      return false;
    if (!(selector_grp_hdl == rhs.selector_grp_hdl))
      return false;
    if (!(action_mbr_hdl == rhs.action_mbr_hdl))
      return false;
    if (!(action_desc == rhs.action_desc))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_vallo12_tbl_entry_desc_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_vallo12_tbl_entry_desc_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_vallo12_tbl_entry_desc_t& obj);
};

void swap(netbufferv4_update_vallo12_tbl_entry_desc_t &a, netbufferv4_update_vallo12_tbl_entry_desc_t &b);


class netbufferv4_update_vallo13_tbl_entry_desc_t {
 public:

  static const char* ascii_fingerprint; // = "9BCD45CE9230BA50DB420A41E55BBD37";
  static const uint8_t binary_fingerprint[16]; // = {0x9B,0xCD,0x45,0xCE,0x92,0x30,0xBA,0x50,0xDB,0x42,0x0A,0x41,0xE5,0x5B,0xBD,0x37};

  netbufferv4_update_vallo13_tbl_entry_desc_t(const netbufferv4_update_vallo13_tbl_entry_desc_t&);
  netbufferv4_update_vallo13_tbl_entry_desc_t& operator=(const netbufferv4_update_vallo13_tbl_entry_desc_t&);
  netbufferv4_update_vallo13_tbl_entry_desc_t() : has_mbr_hdl(0), has_grp_hdl(0), selector_grp_hdl(0), action_mbr_hdl(0) {
  }

  virtual ~netbufferv4_update_vallo13_tbl_entry_desc_t() throw();
  netbufferv4_update_vallo13_tbl_match_spec_t match_spec;
  bool has_mbr_hdl;
  bool has_grp_hdl;
  MemberHandle_t selector_grp_hdl;
  MemberHandle_t action_mbr_hdl;
  netbufferv4_action_desc_t action_desc;

  void __set_match_spec(const netbufferv4_update_vallo13_tbl_match_spec_t& val);

  void __set_has_mbr_hdl(const bool val);

  void __set_has_grp_hdl(const bool val);

  void __set_selector_grp_hdl(const MemberHandle_t val);

  void __set_action_mbr_hdl(const MemberHandle_t val);

  void __set_action_desc(const netbufferv4_action_desc_t& val);

  bool operator == (const netbufferv4_update_vallo13_tbl_entry_desc_t & rhs) const
  {
    if (!(match_spec == rhs.match_spec))
      return false;
    if (!(has_mbr_hdl == rhs.has_mbr_hdl))
      return false;
    if (!(has_grp_hdl == rhs.has_grp_hdl))
      return false;
    if (!(selector_grp_hdl == rhs.selector_grp_hdl))
      return false;
    if (!(action_mbr_hdl == rhs.action_mbr_hdl))
      return false;
    if (!(action_desc == rhs.action_desc))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_vallo13_tbl_entry_desc_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_vallo13_tbl_entry_desc_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_vallo13_tbl_entry_desc_t& obj);
};

void swap(netbufferv4_update_vallo13_tbl_entry_desc_t &a, netbufferv4_update_vallo13_tbl_entry_desc_t &b);


class netbufferv4_update_vallo14_tbl_entry_desc_t {
 public:

  static const char* ascii_fingerprint; // = "9BCD45CE9230BA50DB420A41E55BBD37";
  static const uint8_t binary_fingerprint[16]; // = {0x9B,0xCD,0x45,0xCE,0x92,0x30,0xBA,0x50,0xDB,0x42,0x0A,0x41,0xE5,0x5B,0xBD,0x37};

  netbufferv4_update_vallo14_tbl_entry_desc_t(const netbufferv4_update_vallo14_tbl_entry_desc_t&);
  netbufferv4_update_vallo14_tbl_entry_desc_t& operator=(const netbufferv4_update_vallo14_tbl_entry_desc_t&);
  netbufferv4_update_vallo14_tbl_entry_desc_t() : has_mbr_hdl(0), has_grp_hdl(0), selector_grp_hdl(0), action_mbr_hdl(0) {
  }

  virtual ~netbufferv4_update_vallo14_tbl_entry_desc_t() throw();
  netbufferv4_update_vallo14_tbl_match_spec_t match_spec;
  bool has_mbr_hdl;
  bool has_grp_hdl;
  MemberHandle_t selector_grp_hdl;
  MemberHandle_t action_mbr_hdl;
  netbufferv4_action_desc_t action_desc;

  void __set_match_spec(const netbufferv4_update_vallo14_tbl_match_spec_t& val);

  void __set_has_mbr_hdl(const bool val);

  void __set_has_grp_hdl(const bool val);

  void __set_selector_grp_hdl(const MemberHandle_t val);

  void __set_action_mbr_hdl(const MemberHandle_t val);

  void __set_action_desc(const netbufferv4_action_desc_t& val);

  bool operator == (const netbufferv4_update_vallo14_tbl_entry_desc_t & rhs) const
  {
    if (!(match_spec == rhs.match_spec))
      return false;
    if (!(has_mbr_hdl == rhs.has_mbr_hdl))
      return false;
    if (!(has_grp_hdl == rhs.has_grp_hdl))
      return false;
    if (!(selector_grp_hdl == rhs.selector_grp_hdl))
      return false;
    if (!(action_mbr_hdl == rhs.action_mbr_hdl))
      return false;
    if (!(action_desc == rhs.action_desc))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_vallo14_tbl_entry_desc_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_vallo14_tbl_entry_desc_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_vallo14_tbl_entry_desc_t& obj);
};

void swap(netbufferv4_update_vallo14_tbl_entry_desc_t &a, netbufferv4_update_vallo14_tbl_entry_desc_t &b);


class netbufferv4_update_vallo15_tbl_entry_desc_t {
 public:

  static const char* ascii_fingerprint; // = "9BCD45CE9230BA50DB420A41E55BBD37";
  static const uint8_t binary_fingerprint[16]; // = {0x9B,0xCD,0x45,0xCE,0x92,0x30,0xBA,0x50,0xDB,0x42,0x0A,0x41,0xE5,0x5B,0xBD,0x37};

  netbufferv4_update_vallo15_tbl_entry_desc_t(const netbufferv4_update_vallo15_tbl_entry_desc_t&);
  netbufferv4_update_vallo15_tbl_entry_desc_t& operator=(const netbufferv4_update_vallo15_tbl_entry_desc_t&);
  netbufferv4_update_vallo15_tbl_entry_desc_t() : has_mbr_hdl(0), has_grp_hdl(0), selector_grp_hdl(0), action_mbr_hdl(0) {
  }

  virtual ~netbufferv4_update_vallo15_tbl_entry_desc_t() throw();
  netbufferv4_update_vallo15_tbl_match_spec_t match_spec;
  bool has_mbr_hdl;
  bool has_grp_hdl;
  MemberHandle_t selector_grp_hdl;
  MemberHandle_t action_mbr_hdl;
  netbufferv4_action_desc_t action_desc;

  void __set_match_spec(const netbufferv4_update_vallo15_tbl_match_spec_t& val);

  void __set_has_mbr_hdl(const bool val);

  void __set_has_grp_hdl(const bool val);

  void __set_selector_grp_hdl(const MemberHandle_t val);

  void __set_action_mbr_hdl(const MemberHandle_t val);

  void __set_action_desc(const netbufferv4_action_desc_t& val);

  bool operator == (const netbufferv4_update_vallo15_tbl_entry_desc_t & rhs) const
  {
    if (!(match_spec == rhs.match_spec))
      return false;
    if (!(has_mbr_hdl == rhs.has_mbr_hdl))
      return false;
    if (!(has_grp_hdl == rhs.has_grp_hdl))
      return false;
    if (!(selector_grp_hdl == rhs.selector_grp_hdl))
      return false;
    if (!(action_mbr_hdl == rhs.action_mbr_hdl))
      return false;
    if (!(action_desc == rhs.action_desc))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_vallo15_tbl_entry_desc_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_vallo15_tbl_entry_desc_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_vallo15_tbl_entry_desc_t& obj);
};

void swap(netbufferv4_update_vallo15_tbl_entry_desc_t &a, netbufferv4_update_vallo15_tbl_entry_desc_t &b);


class netbufferv4_update_vallo16_tbl_entry_desc_t {
 public:

  static const char* ascii_fingerprint; // = "9BCD45CE9230BA50DB420A41E55BBD37";
  static const uint8_t binary_fingerprint[16]; // = {0x9B,0xCD,0x45,0xCE,0x92,0x30,0xBA,0x50,0xDB,0x42,0x0A,0x41,0xE5,0x5B,0xBD,0x37};

  netbufferv4_update_vallo16_tbl_entry_desc_t(const netbufferv4_update_vallo16_tbl_entry_desc_t&);
  netbufferv4_update_vallo16_tbl_entry_desc_t& operator=(const netbufferv4_update_vallo16_tbl_entry_desc_t&);
  netbufferv4_update_vallo16_tbl_entry_desc_t() : has_mbr_hdl(0), has_grp_hdl(0), selector_grp_hdl(0), action_mbr_hdl(0) {
  }

  virtual ~netbufferv4_update_vallo16_tbl_entry_desc_t() throw();
  netbufferv4_update_vallo16_tbl_match_spec_t match_spec;
  bool has_mbr_hdl;
  bool has_grp_hdl;
  MemberHandle_t selector_grp_hdl;
  MemberHandle_t action_mbr_hdl;
  netbufferv4_action_desc_t action_desc;

  void __set_match_spec(const netbufferv4_update_vallo16_tbl_match_spec_t& val);

  void __set_has_mbr_hdl(const bool val);

  void __set_has_grp_hdl(const bool val);

  void __set_selector_grp_hdl(const MemberHandle_t val);

  void __set_action_mbr_hdl(const MemberHandle_t val);

  void __set_action_desc(const netbufferv4_action_desc_t& val);

  bool operator == (const netbufferv4_update_vallo16_tbl_entry_desc_t & rhs) const
  {
    if (!(match_spec == rhs.match_spec))
      return false;
    if (!(has_mbr_hdl == rhs.has_mbr_hdl))
      return false;
    if (!(has_grp_hdl == rhs.has_grp_hdl))
      return false;
    if (!(selector_grp_hdl == rhs.selector_grp_hdl))
      return false;
    if (!(action_mbr_hdl == rhs.action_mbr_hdl))
      return false;
    if (!(action_desc == rhs.action_desc))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_vallo16_tbl_entry_desc_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_vallo16_tbl_entry_desc_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_vallo16_tbl_entry_desc_t& obj);
};

void swap(netbufferv4_update_vallo16_tbl_entry_desc_t &a, netbufferv4_update_vallo16_tbl_entry_desc_t &b);


class netbufferv4_update_vallo1_tbl_entry_desc_t {
 public:

  static const char* ascii_fingerprint; // = "9BCD45CE9230BA50DB420A41E55BBD37";
  static const uint8_t binary_fingerprint[16]; // = {0x9B,0xCD,0x45,0xCE,0x92,0x30,0xBA,0x50,0xDB,0x42,0x0A,0x41,0xE5,0x5B,0xBD,0x37};

  netbufferv4_update_vallo1_tbl_entry_desc_t(const netbufferv4_update_vallo1_tbl_entry_desc_t&);
  netbufferv4_update_vallo1_tbl_entry_desc_t& operator=(const netbufferv4_update_vallo1_tbl_entry_desc_t&);
  netbufferv4_update_vallo1_tbl_entry_desc_t() : has_mbr_hdl(0), has_grp_hdl(0), selector_grp_hdl(0), action_mbr_hdl(0) {
  }

  virtual ~netbufferv4_update_vallo1_tbl_entry_desc_t() throw();
  netbufferv4_update_vallo1_tbl_match_spec_t match_spec;
  bool has_mbr_hdl;
  bool has_grp_hdl;
  MemberHandle_t selector_grp_hdl;
  MemberHandle_t action_mbr_hdl;
  netbufferv4_action_desc_t action_desc;

  void __set_match_spec(const netbufferv4_update_vallo1_tbl_match_spec_t& val);

  void __set_has_mbr_hdl(const bool val);

  void __set_has_grp_hdl(const bool val);

  void __set_selector_grp_hdl(const MemberHandle_t val);

  void __set_action_mbr_hdl(const MemberHandle_t val);

  void __set_action_desc(const netbufferv4_action_desc_t& val);

  bool operator == (const netbufferv4_update_vallo1_tbl_entry_desc_t & rhs) const
  {
    if (!(match_spec == rhs.match_spec))
      return false;
    if (!(has_mbr_hdl == rhs.has_mbr_hdl))
      return false;
    if (!(has_grp_hdl == rhs.has_grp_hdl))
      return false;
    if (!(selector_grp_hdl == rhs.selector_grp_hdl))
      return false;
    if (!(action_mbr_hdl == rhs.action_mbr_hdl))
      return false;
    if (!(action_desc == rhs.action_desc))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_vallo1_tbl_entry_desc_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_vallo1_tbl_entry_desc_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_vallo1_tbl_entry_desc_t& obj);
};

void swap(netbufferv4_update_vallo1_tbl_entry_desc_t &a, netbufferv4_update_vallo1_tbl_entry_desc_t &b);


class netbufferv4_update_vallo2_tbl_entry_desc_t {
 public:

  static const char* ascii_fingerprint; // = "9BCD45CE9230BA50DB420A41E55BBD37";
  static const uint8_t binary_fingerprint[16]; // = {0x9B,0xCD,0x45,0xCE,0x92,0x30,0xBA,0x50,0xDB,0x42,0x0A,0x41,0xE5,0x5B,0xBD,0x37};

  netbufferv4_update_vallo2_tbl_entry_desc_t(const netbufferv4_update_vallo2_tbl_entry_desc_t&);
  netbufferv4_update_vallo2_tbl_entry_desc_t& operator=(const netbufferv4_update_vallo2_tbl_entry_desc_t&);
  netbufferv4_update_vallo2_tbl_entry_desc_t() : has_mbr_hdl(0), has_grp_hdl(0), selector_grp_hdl(0), action_mbr_hdl(0) {
  }

  virtual ~netbufferv4_update_vallo2_tbl_entry_desc_t() throw();
  netbufferv4_update_vallo2_tbl_match_spec_t match_spec;
  bool has_mbr_hdl;
  bool has_grp_hdl;
  MemberHandle_t selector_grp_hdl;
  MemberHandle_t action_mbr_hdl;
  netbufferv4_action_desc_t action_desc;

  void __set_match_spec(const netbufferv4_update_vallo2_tbl_match_spec_t& val);

  void __set_has_mbr_hdl(const bool val);

  void __set_has_grp_hdl(const bool val);

  void __set_selector_grp_hdl(const MemberHandle_t val);

  void __set_action_mbr_hdl(const MemberHandle_t val);

  void __set_action_desc(const netbufferv4_action_desc_t& val);

  bool operator == (const netbufferv4_update_vallo2_tbl_entry_desc_t & rhs) const
  {
    if (!(match_spec == rhs.match_spec))
      return false;
    if (!(has_mbr_hdl == rhs.has_mbr_hdl))
      return false;
    if (!(has_grp_hdl == rhs.has_grp_hdl))
      return false;
    if (!(selector_grp_hdl == rhs.selector_grp_hdl))
      return false;
    if (!(action_mbr_hdl == rhs.action_mbr_hdl))
      return false;
    if (!(action_desc == rhs.action_desc))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_vallo2_tbl_entry_desc_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_vallo2_tbl_entry_desc_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_vallo2_tbl_entry_desc_t& obj);
};

void swap(netbufferv4_update_vallo2_tbl_entry_desc_t &a, netbufferv4_update_vallo2_tbl_entry_desc_t &b);


class netbufferv4_update_vallo3_tbl_entry_desc_t {
 public:

  static const char* ascii_fingerprint; // = "9BCD45CE9230BA50DB420A41E55BBD37";
  static const uint8_t binary_fingerprint[16]; // = {0x9B,0xCD,0x45,0xCE,0x92,0x30,0xBA,0x50,0xDB,0x42,0x0A,0x41,0xE5,0x5B,0xBD,0x37};

  netbufferv4_update_vallo3_tbl_entry_desc_t(const netbufferv4_update_vallo3_tbl_entry_desc_t&);
  netbufferv4_update_vallo3_tbl_entry_desc_t& operator=(const netbufferv4_update_vallo3_tbl_entry_desc_t&);
  netbufferv4_update_vallo3_tbl_entry_desc_t() : has_mbr_hdl(0), has_grp_hdl(0), selector_grp_hdl(0), action_mbr_hdl(0) {
  }

  virtual ~netbufferv4_update_vallo3_tbl_entry_desc_t() throw();
  netbufferv4_update_vallo3_tbl_match_spec_t match_spec;
  bool has_mbr_hdl;
  bool has_grp_hdl;
  MemberHandle_t selector_grp_hdl;
  MemberHandle_t action_mbr_hdl;
  netbufferv4_action_desc_t action_desc;

  void __set_match_spec(const netbufferv4_update_vallo3_tbl_match_spec_t& val);

  void __set_has_mbr_hdl(const bool val);

  void __set_has_grp_hdl(const bool val);

  void __set_selector_grp_hdl(const MemberHandle_t val);

  void __set_action_mbr_hdl(const MemberHandle_t val);

  void __set_action_desc(const netbufferv4_action_desc_t& val);

  bool operator == (const netbufferv4_update_vallo3_tbl_entry_desc_t & rhs) const
  {
    if (!(match_spec == rhs.match_spec))
      return false;
    if (!(has_mbr_hdl == rhs.has_mbr_hdl))
      return false;
    if (!(has_grp_hdl == rhs.has_grp_hdl))
      return false;
    if (!(selector_grp_hdl == rhs.selector_grp_hdl))
      return false;
    if (!(action_mbr_hdl == rhs.action_mbr_hdl))
      return false;
    if (!(action_desc == rhs.action_desc))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_vallo3_tbl_entry_desc_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_vallo3_tbl_entry_desc_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_vallo3_tbl_entry_desc_t& obj);
};

void swap(netbufferv4_update_vallo3_tbl_entry_desc_t &a, netbufferv4_update_vallo3_tbl_entry_desc_t &b);


class netbufferv4_update_vallo4_tbl_entry_desc_t {
 public:

  static const char* ascii_fingerprint; // = "9BCD45CE9230BA50DB420A41E55BBD37";
  static const uint8_t binary_fingerprint[16]; // = {0x9B,0xCD,0x45,0xCE,0x92,0x30,0xBA,0x50,0xDB,0x42,0x0A,0x41,0xE5,0x5B,0xBD,0x37};

  netbufferv4_update_vallo4_tbl_entry_desc_t(const netbufferv4_update_vallo4_tbl_entry_desc_t&);
  netbufferv4_update_vallo4_tbl_entry_desc_t& operator=(const netbufferv4_update_vallo4_tbl_entry_desc_t&);
  netbufferv4_update_vallo4_tbl_entry_desc_t() : has_mbr_hdl(0), has_grp_hdl(0), selector_grp_hdl(0), action_mbr_hdl(0) {
  }

  virtual ~netbufferv4_update_vallo4_tbl_entry_desc_t() throw();
  netbufferv4_update_vallo4_tbl_match_spec_t match_spec;
  bool has_mbr_hdl;
  bool has_grp_hdl;
  MemberHandle_t selector_grp_hdl;
  MemberHandle_t action_mbr_hdl;
  netbufferv4_action_desc_t action_desc;

  void __set_match_spec(const netbufferv4_update_vallo4_tbl_match_spec_t& val);

  void __set_has_mbr_hdl(const bool val);

  void __set_has_grp_hdl(const bool val);

  void __set_selector_grp_hdl(const MemberHandle_t val);

  void __set_action_mbr_hdl(const MemberHandle_t val);

  void __set_action_desc(const netbufferv4_action_desc_t& val);

  bool operator == (const netbufferv4_update_vallo4_tbl_entry_desc_t & rhs) const
  {
    if (!(match_spec == rhs.match_spec))
      return false;
    if (!(has_mbr_hdl == rhs.has_mbr_hdl))
      return false;
    if (!(has_grp_hdl == rhs.has_grp_hdl))
      return false;
    if (!(selector_grp_hdl == rhs.selector_grp_hdl))
      return false;
    if (!(action_mbr_hdl == rhs.action_mbr_hdl))
      return false;
    if (!(action_desc == rhs.action_desc))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_vallo4_tbl_entry_desc_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_vallo4_tbl_entry_desc_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_vallo4_tbl_entry_desc_t& obj);
};

void swap(netbufferv4_update_vallo4_tbl_entry_desc_t &a, netbufferv4_update_vallo4_tbl_entry_desc_t &b);


class netbufferv4_update_vallo5_tbl_entry_desc_t {
 public:

  static const char* ascii_fingerprint; // = "9BCD45CE9230BA50DB420A41E55BBD37";
  static const uint8_t binary_fingerprint[16]; // = {0x9B,0xCD,0x45,0xCE,0x92,0x30,0xBA,0x50,0xDB,0x42,0x0A,0x41,0xE5,0x5B,0xBD,0x37};

  netbufferv4_update_vallo5_tbl_entry_desc_t(const netbufferv4_update_vallo5_tbl_entry_desc_t&);
  netbufferv4_update_vallo5_tbl_entry_desc_t& operator=(const netbufferv4_update_vallo5_tbl_entry_desc_t&);
  netbufferv4_update_vallo5_tbl_entry_desc_t() : has_mbr_hdl(0), has_grp_hdl(0), selector_grp_hdl(0), action_mbr_hdl(0) {
  }

  virtual ~netbufferv4_update_vallo5_tbl_entry_desc_t() throw();
  netbufferv4_update_vallo5_tbl_match_spec_t match_spec;
  bool has_mbr_hdl;
  bool has_grp_hdl;
  MemberHandle_t selector_grp_hdl;
  MemberHandle_t action_mbr_hdl;
  netbufferv4_action_desc_t action_desc;

  void __set_match_spec(const netbufferv4_update_vallo5_tbl_match_spec_t& val);

  void __set_has_mbr_hdl(const bool val);

  void __set_has_grp_hdl(const bool val);

  void __set_selector_grp_hdl(const MemberHandle_t val);

  void __set_action_mbr_hdl(const MemberHandle_t val);

  void __set_action_desc(const netbufferv4_action_desc_t& val);

  bool operator == (const netbufferv4_update_vallo5_tbl_entry_desc_t & rhs) const
  {
    if (!(match_spec == rhs.match_spec))
      return false;
    if (!(has_mbr_hdl == rhs.has_mbr_hdl))
      return false;
    if (!(has_grp_hdl == rhs.has_grp_hdl))
      return false;
    if (!(selector_grp_hdl == rhs.selector_grp_hdl))
      return false;
    if (!(action_mbr_hdl == rhs.action_mbr_hdl))
      return false;
    if (!(action_desc == rhs.action_desc))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_vallo5_tbl_entry_desc_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_vallo5_tbl_entry_desc_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_vallo5_tbl_entry_desc_t& obj);
};

void swap(netbufferv4_update_vallo5_tbl_entry_desc_t &a, netbufferv4_update_vallo5_tbl_entry_desc_t &b);


class netbufferv4_update_vallo6_tbl_entry_desc_t {
 public:

  static const char* ascii_fingerprint; // = "9BCD45CE9230BA50DB420A41E55BBD37";
  static const uint8_t binary_fingerprint[16]; // = {0x9B,0xCD,0x45,0xCE,0x92,0x30,0xBA,0x50,0xDB,0x42,0x0A,0x41,0xE5,0x5B,0xBD,0x37};

  netbufferv4_update_vallo6_tbl_entry_desc_t(const netbufferv4_update_vallo6_tbl_entry_desc_t&);
  netbufferv4_update_vallo6_tbl_entry_desc_t& operator=(const netbufferv4_update_vallo6_tbl_entry_desc_t&);
  netbufferv4_update_vallo6_tbl_entry_desc_t() : has_mbr_hdl(0), has_grp_hdl(0), selector_grp_hdl(0), action_mbr_hdl(0) {
  }

  virtual ~netbufferv4_update_vallo6_tbl_entry_desc_t() throw();
  netbufferv4_update_vallo6_tbl_match_spec_t match_spec;
  bool has_mbr_hdl;
  bool has_grp_hdl;
  MemberHandle_t selector_grp_hdl;
  MemberHandle_t action_mbr_hdl;
  netbufferv4_action_desc_t action_desc;

  void __set_match_spec(const netbufferv4_update_vallo6_tbl_match_spec_t& val);

  void __set_has_mbr_hdl(const bool val);

  void __set_has_grp_hdl(const bool val);

  void __set_selector_grp_hdl(const MemberHandle_t val);

  void __set_action_mbr_hdl(const MemberHandle_t val);

  void __set_action_desc(const netbufferv4_action_desc_t& val);

  bool operator == (const netbufferv4_update_vallo6_tbl_entry_desc_t & rhs) const
  {
    if (!(match_spec == rhs.match_spec))
      return false;
    if (!(has_mbr_hdl == rhs.has_mbr_hdl))
      return false;
    if (!(has_grp_hdl == rhs.has_grp_hdl))
      return false;
    if (!(selector_grp_hdl == rhs.selector_grp_hdl))
      return false;
    if (!(action_mbr_hdl == rhs.action_mbr_hdl))
      return false;
    if (!(action_desc == rhs.action_desc))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_vallo6_tbl_entry_desc_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_vallo6_tbl_entry_desc_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_vallo6_tbl_entry_desc_t& obj);
};

void swap(netbufferv4_update_vallo6_tbl_entry_desc_t &a, netbufferv4_update_vallo6_tbl_entry_desc_t &b);


class netbufferv4_update_vallo7_tbl_entry_desc_t {
 public:

  static const char* ascii_fingerprint; // = "9BCD45CE9230BA50DB420A41E55BBD37";
  static const uint8_t binary_fingerprint[16]; // = {0x9B,0xCD,0x45,0xCE,0x92,0x30,0xBA,0x50,0xDB,0x42,0x0A,0x41,0xE5,0x5B,0xBD,0x37};

  netbufferv4_update_vallo7_tbl_entry_desc_t(const netbufferv4_update_vallo7_tbl_entry_desc_t&);
  netbufferv4_update_vallo7_tbl_entry_desc_t& operator=(const netbufferv4_update_vallo7_tbl_entry_desc_t&);
  netbufferv4_update_vallo7_tbl_entry_desc_t() : has_mbr_hdl(0), has_grp_hdl(0), selector_grp_hdl(0), action_mbr_hdl(0) {
  }

  virtual ~netbufferv4_update_vallo7_tbl_entry_desc_t() throw();
  netbufferv4_update_vallo7_tbl_match_spec_t match_spec;
  bool has_mbr_hdl;
  bool has_grp_hdl;
  MemberHandle_t selector_grp_hdl;
  MemberHandle_t action_mbr_hdl;
  netbufferv4_action_desc_t action_desc;

  void __set_match_spec(const netbufferv4_update_vallo7_tbl_match_spec_t& val);

  void __set_has_mbr_hdl(const bool val);

  void __set_has_grp_hdl(const bool val);

  void __set_selector_grp_hdl(const MemberHandle_t val);

  void __set_action_mbr_hdl(const MemberHandle_t val);

  void __set_action_desc(const netbufferv4_action_desc_t& val);

  bool operator == (const netbufferv4_update_vallo7_tbl_entry_desc_t & rhs) const
  {
    if (!(match_spec == rhs.match_spec))
      return false;
    if (!(has_mbr_hdl == rhs.has_mbr_hdl))
      return false;
    if (!(has_grp_hdl == rhs.has_grp_hdl))
      return false;
    if (!(selector_grp_hdl == rhs.selector_grp_hdl))
      return false;
    if (!(action_mbr_hdl == rhs.action_mbr_hdl))
      return false;
    if (!(action_desc == rhs.action_desc))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_vallo7_tbl_entry_desc_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_vallo7_tbl_entry_desc_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_vallo7_tbl_entry_desc_t& obj);
};

void swap(netbufferv4_update_vallo7_tbl_entry_desc_t &a, netbufferv4_update_vallo7_tbl_entry_desc_t &b);


class netbufferv4_update_vallo8_tbl_entry_desc_t {
 public:

  static const char* ascii_fingerprint; // = "9BCD45CE9230BA50DB420A41E55BBD37";
  static const uint8_t binary_fingerprint[16]; // = {0x9B,0xCD,0x45,0xCE,0x92,0x30,0xBA,0x50,0xDB,0x42,0x0A,0x41,0xE5,0x5B,0xBD,0x37};

  netbufferv4_update_vallo8_tbl_entry_desc_t(const netbufferv4_update_vallo8_tbl_entry_desc_t&);
  netbufferv4_update_vallo8_tbl_entry_desc_t& operator=(const netbufferv4_update_vallo8_tbl_entry_desc_t&);
  netbufferv4_update_vallo8_tbl_entry_desc_t() : has_mbr_hdl(0), has_grp_hdl(0), selector_grp_hdl(0), action_mbr_hdl(0) {
  }

  virtual ~netbufferv4_update_vallo8_tbl_entry_desc_t() throw();
  netbufferv4_update_vallo8_tbl_match_spec_t match_spec;
  bool has_mbr_hdl;
  bool has_grp_hdl;
  MemberHandle_t selector_grp_hdl;
  MemberHandle_t action_mbr_hdl;
  netbufferv4_action_desc_t action_desc;

  void __set_match_spec(const netbufferv4_update_vallo8_tbl_match_spec_t& val);

  void __set_has_mbr_hdl(const bool val);

  void __set_has_grp_hdl(const bool val);

  void __set_selector_grp_hdl(const MemberHandle_t val);

  void __set_action_mbr_hdl(const MemberHandle_t val);

  void __set_action_desc(const netbufferv4_action_desc_t& val);

  bool operator == (const netbufferv4_update_vallo8_tbl_entry_desc_t & rhs) const
  {
    if (!(match_spec == rhs.match_spec))
      return false;
    if (!(has_mbr_hdl == rhs.has_mbr_hdl))
      return false;
    if (!(has_grp_hdl == rhs.has_grp_hdl))
      return false;
    if (!(selector_grp_hdl == rhs.selector_grp_hdl))
      return false;
    if (!(action_mbr_hdl == rhs.action_mbr_hdl))
      return false;
    if (!(action_desc == rhs.action_desc))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_vallo8_tbl_entry_desc_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_vallo8_tbl_entry_desc_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_vallo8_tbl_entry_desc_t& obj);
};

void swap(netbufferv4_update_vallo8_tbl_entry_desc_t &a, netbufferv4_update_vallo8_tbl_entry_desc_t &b);


class netbufferv4_update_vallo9_tbl_entry_desc_t {
 public:

  static const char* ascii_fingerprint; // = "9BCD45CE9230BA50DB420A41E55BBD37";
  static const uint8_t binary_fingerprint[16]; // = {0x9B,0xCD,0x45,0xCE,0x92,0x30,0xBA,0x50,0xDB,0x42,0x0A,0x41,0xE5,0x5B,0xBD,0x37};

  netbufferv4_update_vallo9_tbl_entry_desc_t(const netbufferv4_update_vallo9_tbl_entry_desc_t&);
  netbufferv4_update_vallo9_tbl_entry_desc_t& operator=(const netbufferv4_update_vallo9_tbl_entry_desc_t&);
  netbufferv4_update_vallo9_tbl_entry_desc_t() : has_mbr_hdl(0), has_grp_hdl(0), selector_grp_hdl(0), action_mbr_hdl(0) {
  }

  virtual ~netbufferv4_update_vallo9_tbl_entry_desc_t() throw();
  netbufferv4_update_vallo9_tbl_match_spec_t match_spec;
  bool has_mbr_hdl;
  bool has_grp_hdl;
  MemberHandle_t selector_grp_hdl;
  MemberHandle_t action_mbr_hdl;
  netbufferv4_action_desc_t action_desc;

  void __set_match_spec(const netbufferv4_update_vallo9_tbl_match_spec_t& val);

  void __set_has_mbr_hdl(const bool val);

  void __set_has_grp_hdl(const bool val);

  void __set_selector_grp_hdl(const MemberHandle_t val);

  void __set_action_mbr_hdl(const MemberHandle_t val);

  void __set_action_desc(const netbufferv4_action_desc_t& val);

  bool operator == (const netbufferv4_update_vallo9_tbl_entry_desc_t & rhs) const
  {
    if (!(match_spec == rhs.match_spec))
      return false;
    if (!(has_mbr_hdl == rhs.has_mbr_hdl))
      return false;
    if (!(has_grp_hdl == rhs.has_grp_hdl))
      return false;
    if (!(selector_grp_hdl == rhs.selector_grp_hdl))
      return false;
    if (!(action_mbr_hdl == rhs.action_mbr_hdl))
      return false;
    if (!(action_desc == rhs.action_desc))
      return false;
    return true;
  }
  bool operator != (const netbufferv4_update_vallo9_tbl_entry_desc_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const netbufferv4_update_vallo9_tbl_entry_desc_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const netbufferv4_update_vallo9_tbl_entry_desc_t& obj);
};

void swap(netbufferv4_update_vallo9_tbl_entry_desc_t &a, netbufferv4_update_vallo9_tbl_entry_desc_t &b);

typedef struct _InvalidTableOperation__isset {
  _InvalidTableOperation__isset() : code(false) {}
  bool code :1;
} _InvalidTableOperation__isset;

class InvalidTableOperation : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  InvalidTableOperation(const InvalidTableOperation&);
  InvalidTableOperation& operator=(const InvalidTableOperation&);
  InvalidTableOperation() : code(0) {
  }

  virtual ~InvalidTableOperation() throw();
  int32_t code;

  _InvalidTableOperation__isset __isset;

  void __set_code(const int32_t val);

  bool operator == (const InvalidTableOperation & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    return true;
  }
  bool operator != (const InvalidTableOperation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InvalidTableOperation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const InvalidTableOperation& obj);
};

void swap(InvalidTableOperation &a, InvalidTableOperation &b);

typedef struct _InvalidLearnOperation__isset {
  _InvalidLearnOperation__isset() : code(false) {}
  bool code :1;
} _InvalidLearnOperation__isset;

class InvalidLearnOperation : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  InvalidLearnOperation(const InvalidLearnOperation&);
  InvalidLearnOperation& operator=(const InvalidLearnOperation&);
  InvalidLearnOperation() : code(0) {
  }

  virtual ~InvalidLearnOperation() throw();
  int32_t code;

  _InvalidLearnOperation__isset __isset;

  void __set_code(const int32_t val);

  bool operator == (const InvalidLearnOperation & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    return true;
  }
  bool operator != (const InvalidLearnOperation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InvalidLearnOperation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const InvalidLearnOperation& obj);
};

void swap(InvalidLearnOperation &a, InvalidLearnOperation &b);

typedef struct _InvalidDbgOperation__isset {
  _InvalidDbgOperation__isset() : code(false) {}
  bool code :1;
} _InvalidDbgOperation__isset;

class InvalidDbgOperation : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  InvalidDbgOperation(const InvalidDbgOperation&);
  InvalidDbgOperation& operator=(const InvalidDbgOperation&);
  InvalidDbgOperation() : code(0) {
  }

  virtual ~InvalidDbgOperation() throw();
  int32_t code;

  _InvalidDbgOperation__isset __isset;

  void __set_code(const int32_t val);

  bool operator == (const InvalidDbgOperation & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    return true;
  }
  bool operator != (const InvalidDbgOperation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InvalidDbgOperation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const InvalidDbgOperation& obj);
};

void swap(InvalidDbgOperation &a, InvalidDbgOperation &b);

typedef struct _InvalidSnapshotOperation__isset {
  _InvalidSnapshotOperation__isset() : code(false) {}
  bool code :1;
} _InvalidSnapshotOperation__isset;

class InvalidSnapshotOperation : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  InvalidSnapshotOperation(const InvalidSnapshotOperation&);
  InvalidSnapshotOperation& operator=(const InvalidSnapshotOperation&);
  InvalidSnapshotOperation() : code(0) {
  }

  virtual ~InvalidSnapshotOperation() throw();
  int32_t code;

  _InvalidSnapshotOperation__isset __isset;

  void __set_code(const int32_t val);

  bool operator == (const InvalidSnapshotOperation & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    return true;
  }
  bool operator != (const InvalidSnapshotOperation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InvalidSnapshotOperation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const InvalidSnapshotOperation& obj);
};

void swap(InvalidSnapshotOperation &a, InvalidSnapshotOperation &b);

typedef struct _InvalidCounterOperation__isset {
  _InvalidCounterOperation__isset() : code(false) {}
  bool code :1;
} _InvalidCounterOperation__isset;

class InvalidCounterOperation : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  InvalidCounterOperation(const InvalidCounterOperation&);
  InvalidCounterOperation& operator=(const InvalidCounterOperation&);
  InvalidCounterOperation() : code(0) {
  }

  virtual ~InvalidCounterOperation() throw();
  int32_t code;

  _InvalidCounterOperation__isset __isset;

  void __set_code(const int32_t val);

  bool operator == (const InvalidCounterOperation & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    return true;
  }
  bool operator != (const InvalidCounterOperation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InvalidCounterOperation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const InvalidCounterOperation& obj);
};

void swap(InvalidCounterOperation &a, InvalidCounterOperation &b);

typedef struct _InvalidRegisterOperation__isset {
  _InvalidRegisterOperation__isset() : code(false) {}
  bool code :1;
} _InvalidRegisterOperation__isset;

class InvalidRegisterOperation : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  InvalidRegisterOperation(const InvalidRegisterOperation&);
  InvalidRegisterOperation& operator=(const InvalidRegisterOperation&);
  InvalidRegisterOperation() : code(0) {
  }

  virtual ~InvalidRegisterOperation() throw();
  int32_t code;

  _InvalidRegisterOperation__isset __isset;

  void __set_code(const int32_t val);

  bool operator == (const InvalidRegisterOperation & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    return true;
  }
  bool operator != (const InvalidRegisterOperation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InvalidRegisterOperation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const InvalidRegisterOperation& obj);
};

void swap(InvalidRegisterOperation &a, InvalidRegisterOperation &b);

typedef struct _InvalidMeterOperation__isset {
  _InvalidMeterOperation__isset() : code(false) {}
  bool code :1;
} _InvalidMeterOperation__isset;

class InvalidMeterOperation : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  InvalidMeterOperation(const InvalidMeterOperation&);
  InvalidMeterOperation& operator=(const InvalidMeterOperation&);
  InvalidMeterOperation() : code(0) {
  }

  virtual ~InvalidMeterOperation() throw();
  int32_t code;

  _InvalidMeterOperation__isset __isset;

  void __set_code(const int32_t val);

  bool operator == (const InvalidMeterOperation & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    return true;
  }
  bool operator != (const InvalidMeterOperation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InvalidMeterOperation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const InvalidMeterOperation& obj);
};

void swap(InvalidMeterOperation &a, InvalidMeterOperation &b);

typedef struct _InvalidLPFOperation__isset {
  _InvalidLPFOperation__isset() : code(false) {}
  bool code :1;
} _InvalidLPFOperation__isset;

class InvalidLPFOperation : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  InvalidLPFOperation(const InvalidLPFOperation&);
  InvalidLPFOperation& operator=(const InvalidLPFOperation&);
  InvalidLPFOperation() : code(0) {
  }

  virtual ~InvalidLPFOperation() throw();
  int32_t code;

  _InvalidLPFOperation__isset __isset;

  void __set_code(const int32_t val);

  bool operator == (const InvalidLPFOperation & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    return true;
  }
  bool operator != (const InvalidLPFOperation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InvalidLPFOperation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const InvalidLPFOperation& obj);
};

void swap(InvalidLPFOperation &a, InvalidLPFOperation &b);

typedef struct _InvalidWREDOperation__isset {
  _InvalidWREDOperation__isset() : code(false) {}
  bool code :1;
} _InvalidWREDOperation__isset;

class InvalidWREDOperation : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  InvalidWREDOperation(const InvalidWREDOperation&);
  InvalidWREDOperation& operator=(const InvalidWREDOperation&);
  InvalidWREDOperation() : code(0) {
  }

  virtual ~InvalidWREDOperation() throw();
  int32_t code;

  _InvalidWREDOperation__isset __isset;

  void __set_code(const int32_t val);

  bool operator == (const InvalidWREDOperation & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    return true;
  }
  bool operator != (const InvalidWREDOperation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InvalidWREDOperation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const InvalidWREDOperation& obj);
};

void swap(InvalidWREDOperation &a, InvalidWREDOperation &b);

} // namespace

#endif
