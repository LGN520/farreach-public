#include "p4_prefix.h"
namespace p4_pd_rpc {


netbufferv4_register_write_vallo5_reg_presult::~netbufferv4_register_write_vallo5_reg_presult() throw() {
}


uint32_t netbufferv4_register_write_vallo5_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_reset_all_vallo5_reg_args::~netbufferv4_register_reset_all_vallo5_reg_args() throw() {
}


uint32_t netbufferv4_register_reset_all_vallo5_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_reset_all_vallo5_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_vallo5_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_reset_all_vallo5_reg_pargs::~netbufferv4_register_reset_all_vallo5_reg_pargs() throw() {
}


uint32_t netbufferv4_register_reset_all_vallo5_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_vallo5_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_reset_all_vallo5_reg_result::~netbufferv4_register_reset_all_vallo5_reg_result() throw() {
}


uint32_t netbufferv4_register_reset_all_vallo5_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_reset_all_vallo5_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_vallo5_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_reset_all_vallo5_reg_presult::~netbufferv4_register_reset_all_vallo5_reg_presult() throw() {
}


uint32_t netbufferv4_register_reset_all_vallo5_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_range_reset_vallo5_reg_args::~netbufferv4_register_range_reset_vallo5_reg_args() throw() {
}


uint32_t netbufferv4_register_range_reset_vallo5_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_reset_vallo5_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_vallo5_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_reset_vallo5_reg_pargs::~netbufferv4_register_range_reset_vallo5_reg_pargs() throw() {
}


uint32_t netbufferv4_register_range_reset_vallo5_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_vallo5_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->count)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_reset_vallo5_reg_result::~netbufferv4_register_range_reset_vallo5_reg_result() throw() {
}


uint32_t netbufferv4_register_range_reset_vallo5_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_reset_vallo5_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_vallo5_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_range_reset_vallo5_reg_presult::~netbufferv4_register_range_reset_vallo5_reg_presult() throw() {
}


uint32_t netbufferv4_register_range_reset_vallo5_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_write_all_vallo5_reg_args::~netbufferv4_register_write_all_vallo5_reg_args() throw() {
}


uint32_t netbufferv4_register_write_all_vallo5_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->register_value);
          this->__isset.register_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_all_vallo5_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_vallo5_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->register_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_all_vallo5_reg_pargs::~netbufferv4_register_write_all_vallo5_reg_pargs() throw() {
}


uint32_t netbufferv4_register_write_all_vallo5_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_vallo5_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->register_value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_all_vallo5_reg_result::~netbufferv4_register_write_all_vallo5_reg_result() throw() {
}


uint32_t netbufferv4_register_write_all_vallo5_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_all_vallo5_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_vallo5_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_write_all_vallo5_reg_presult::~netbufferv4_register_write_all_vallo5_reg_presult() throw() {
}


uint32_t netbufferv4_register_write_all_vallo5_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_range_read_vallo5_reg_args::~netbufferv4_register_range_read_vallo5_reg_args() throw() {
}


uint32_t netbufferv4_register_range_read_vallo5_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->flags.read(iprot);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_read_vallo5_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_vallo5_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->flags.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_read_vallo5_reg_pargs::~netbufferv4_register_range_read_vallo5_reg_pargs() throw() {
}


uint32_t netbufferv4_register_range_read_vallo5_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_vallo5_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->count)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += (*(this->flags)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_read_vallo5_reg_result::~netbufferv4_register_range_read_vallo5_reg_result() throw() {
}


uint32_t netbufferv4_register_range_read_vallo5_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size1986;
            ::apache::thrift::protocol::TType _etype1989;
            xfer += iprot->readListBegin(_etype1989, _size1986);
            this->success.resize(_size1986);
            uint32_t _i1990;
            for (_i1990 = 0; _i1990 < _size1986; ++_i1990)
            {
              xfer += iprot->readI32(this->success[_i1990]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_read_vallo5_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_vallo5_reg_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->success.size()));
      std::vector<int32_t> ::const_iterator _iter1991;
      for (_iter1991 = this->success.begin(); _iter1991 != this->success.end(); ++_iter1991)
      {
        xfer += oprot->writeI32((*_iter1991));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_range_read_vallo5_reg_presult::~netbufferv4_register_range_read_vallo5_reg_presult() throw() {
}


uint32_t netbufferv4_register_range_read_vallo5_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size1992;
            ::apache::thrift::protocol::TType _etype1995;
            xfer += iprot->readListBegin(_etype1995, _size1992);
            (*(this->success)).resize(_size1992);
            uint32_t _i1996;
            for (_i1996 = 0; _i1996 < _size1992; ++_i1996)
            {
              xfer += iprot->readI32((*(this->success))[_i1996]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_hw_sync_cm1_reg_args::~netbufferv4_register_hw_sync_cm1_reg_args() throw() {
}


uint32_t netbufferv4_register_hw_sync_cm1_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_hw_sync_cm1_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_cm1_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_hw_sync_cm1_reg_pargs::~netbufferv4_register_hw_sync_cm1_reg_pargs() throw() {
}


uint32_t netbufferv4_register_hw_sync_cm1_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_cm1_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_hw_sync_cm1_reg_result::~netbufferv4_register_hw_sync_cm1_reg_result() throw() {
}


uint32_t netbufferv4_register_hw_sync_cm1_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_hw_sync_cm1_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_cm1_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_hw_sync_cm1_reg_presult::~netbufferv4_register_hw_sync_cm1_reg_presult() throw() {
}


uint32_t netbufferv4_register_hw_sync_cm1_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_read_cm1_reg_args::~netbufferv4_register_read_cm1_reg_args() throw() {
}


uint32_t netbufferv4_register_read_cm1_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->flags.read(iprot);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_read_cm1_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_read_cm1_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->flags.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_read_cm1_reg_pargs::~netbufferv4_register_read_cm1_reg_pargs() throw() {
}


uint32_t netbufferv4_register_read_cm1_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_read_cm1_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += (*(this->flags)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_read_cm1_reg_result::~netbufferv4_register_read_cm1_reg_result() throw() {
}


uint32_t netbufferv4_register_read_cm1_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size1997;
            ::apache::thrift::protocol::TType _etype2000;
            xfer += iprot->readListBegin(_etype2000, _size1997);
            this->success.resize(_size1997);
            uint32_t _i2001;
            for (_i2001 = 0; _i2001 < _size1997; ++_i2001)
            {
              xfer += iprot->readI16(this->success[_i2001]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_read_cm1_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_read_cm1_reg_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I16, static_cast<uint32_t>(this->success.size()));
      std::vector<int16_t> ::const_iterator _iter2002;
      for (_iter2002 = this->success.begin(); _iter2002 != this->success.end(); ++_iter2002)
      {
        xfer += oprot->writeI16((*_iter2002));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_read_cm1_reg_presult::~netbufferv4_register_read_cm1_reg_presult() throw() {
}


uint32_t netbufferv4_register_read_cm1_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size2003;
            ::apache::thrift::protocol::TType _etype2006;
            xfer += iprot->readListBegin(_etype2006, _size2003);
            (*(this->success)).resize(_size2003);
            uint32_t _i2007;
            for (_i2007 = 0; _i2007 < _size2003; ++_i2007)
            {
              xfer += iprot->readI16((*(this->success))[_i2007]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_write_cm1_reg_args::~netbufferv4_register_write_cm1_reg_args() throw() {
}


uint32_t netbufferv4_register_write_cm1_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->register_value);
          this->__isset.register_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_cm1_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_cm1_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->register_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_cm1_reg_pargs::~netbufferv4_register_write_cm1_reg_pargs() throw() {
}


uint32_t netbufferv4_register_write_cm1_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_cm1_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16((*(this->register_value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_cm1_reg_result::~netbufferv4_register_write_cm1_reg_result() throw() {
}


uint32_t netbufferv4_register_write_cm1_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_cm1_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_write_cm1_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_write_cm1_reg_presult::~netbufferv4_register_write_cm1_reg_presult() throw() {
}


uint32_t netbufferv4_register_write_cm1_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_reset_all_cm1_reg_args::~netbufferv4_register_reset_all_cm1_reg_args() throw() {
}


uint32_t netbufferv4_register_reset_all_cm1_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_reset_all_cm1_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_cm1_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_reset_all_cm1_reg_pargs::~netbufferv4_register_reset_all_cm1_reg_pargs() throw() {
}


uint32_t netbufferv4_register_reset_all_cm1_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_cm1_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_reset_all_cm1_reg_result::~netbufferv4_register_reset_all_cm1_reg_result() throw() {
}


uint32_t netbufferv4_register_reset_all_cm1_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_reset_all_cm1_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_cm1_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_reset_all_cm1_reg_presult::~netbufferv4_register_reset_all_cm1_reg_presult() throw() {
}


uint32_t netbufferv4_register_reset_all_cm1_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_range_reset_cm1_reg_args::~netbufferv4_register_range_reset_cm1_reg_args() throw() {
}


uint32_t netbufferv4_register_range_reset_cm1_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_reset_cm1_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_cm1_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_reset_cm1_reg_pargs::~netbufferv4_register_range_reset_cm1_reg_pargs() throw() {
}


uint32_t netbufferv4_register_range_reset_cm1_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_cm1_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->count)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_reset_cm1_reg_result::~netbufferv4_register_range_reset_cm1_reg_result() throw() {
}


uint32_t netbufferv4_register_range_reset_cm1_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_reset_cm1_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_cm1_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_range_reset_cm1_reg_presult::~netbufferv4_register_range_reset_cm1_reg_presult() throw() {
}


uint32_t netbufferv4_register_range_reset_cm1_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_write_all_cm1_reg_args::~netbufferv4_register_write_all_cm1_reg_args() throw() {
}


uint32_t netbufferv4_register_write_all_cm1_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->register_value);
          this->__isset.register_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_all_cm1_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_cm1_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->register_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_all_cm1_reg_pargs::~netbufferv4_register_write_all_cm1_reg_pargs() throw() {
}


uint32_t netbufferv4_register_write_all_cm1_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_cm1_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16((*(this->register_value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_all_cm1_reg_result::~netbufferv4_register_write_all_cm1_reg_result() throw() {
}


uint32_t netbufferv4_register_write_all_cm1_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_all_cm1_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_cm1_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_write_all_cm1_reg_presult::~netbufferv4_register_write_all_cm1_reg_presult() throw() {
}


uint32_t netbufferv4_register_write_all_cm1_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_range_read_cm1_reg_args::~netbufferv4_register_range_read_cm1_reg_args() throw() {
}


uint32_t netbufferv4_register_range_read_cm1_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->flags.read(iprot);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_read_cm1_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_cm1_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->flags.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_read_cm1_reg_pargs::~netbufferv4_register_range_read_cm1_reg_pargs() throw() {
}


uint32_t netbufferv4_register_range_read_cm1_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_cm1_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->count)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += (*(this->flags)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_read_cm1_reg_result::~netbufferv4_register_range_read_cm1_reg_result() throw() {
}


uint32_t netbufferv4_register_range_read_cm1_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size2008;
            ::apache::thrift::protocol::TType _etype2011;
            xfer += iprot->readListBegin(_etype2011, _size2008);
            this->success.resize(_size2008);
            uint32_t _i2012;
            for (_i2012 = 0; _i2012 < _size2008; ++_i2012)
            {
              xfer += iprot->readI16(this->success[_i2012]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_read_cm1_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_cm1_reg_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I16, static_cast<uint32_t>(this->success.size()));
      std::vector<int16_t> ::const_iterator _iter2013;
      for (_iter2013 = this->success.begin(); _iter2013 != this->success.end(); ++_iter2013)
      {
        xfer += oprot->writeI16((*_iter2013));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_range_read_cm1_reg_presult::~netbufferv4_register_range_read_cm1_reg_presult() throw() {
}


uint32_t netbufferv4_register_range_read_cm1_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size2014;
            ::apache::thrift::protocol::TType _etype2017;
            xfer += iprot->readListBegin(_etype2017, _size2014);
            (*(this->success)).resize(_size2014);
            uint32_t _i2018;
            for (_i2018 = 0; _i2018 < _size2014; ++_i2018)
            {
              xfer += iprot->readI16((*(this->success))[_i2018]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_hw_sync_validvalue_reg_args::~netbufferv4_register_hw_sync_validvalue_reg_args() throw() {
}


uint32_t netbufferv4_register_hw_sync_validvalue_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_hw_sync_validvalue_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_validvalue_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_hw_sync_validvalue_reg_pargs::~netbufferv4_register_hw_sync_validvalue_reg_pargs() throw() {
}


uint32_t netbufferv4_register_hw_sync_validvalue_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_validvalue_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_hw_sync_validvalue_reg_result::~netbufferv4_register_hw_sync_validvalue_reg_result() throw() {
}


uint32_t netbufferv4_register_hw_sync_validvalue_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_hw_sync_validvalue_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_validvalue_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_hw_sync_validvalue_reg_presult::~netbufferv4_register_hw_sync_validvalue_reg_presult() throw() {
}


uint32_t netbufferv4_register_hw_sync_validvalue_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_read_validvalue_reg_args::~netbufferv4_register_read_validvalue_reg_args() throw() {
}


uint32_t netbufferv4_register_read_validvalue_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->flags.read(iprot);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_read_validvalue_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_read_validvalue_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->flags.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_read_validvalue_reg_pargs::~netbufferv4_register_read_validvalue_reg_pargs() throw() {
}


uint32_t netbufferv4_register_read_validvalue_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_read_validvalue_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += (*(this->flags)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_read_validvalue_reg_result::~netbufferv4_register_read_validvalue_reg_result() throw() {
}


uint32_t netbufferv4_register_read_validvalue_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size2019;
            ::apache::thrift::protocol::TType _etype2022;
            xfer += iprot->readListBegin(_etype2022, _size2019);
            this->success.resize(_size2019);
            uint32_t _i2023;
            for (_i2023 = 0; _i2023 < _size2019; ++_i2023)
            {
              xfer += iprot->readByte(this->success[_i2023]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_read_validvalue_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_read_validvalue_reg_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->success.size()));
      std::vector<int8_t> ::const_iterator _iter2024;
      for (_iter2024 = this->success.begin(); _iter2024 != this->success.end(); ++_iter2024)
      {
        xfer += oprot->writeByte((*_iter2024));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_read_validvalue_reg_presult::~netbufferv4_register_read_validvalue_reg_presult() throw() {
}


uint32_t netbufferv4_register_read_validvalue_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size2025;
            ::apache::thrift::protocol::TType _etype2028;
            xfer += iprot->readListBegin(_etype2028, _size2025);
            (*(this->success)).resize(_size2025);
            uint32_t _i2029;
            for (_i2029 = 0; _i2029 < _size2025; ++_i2029)
            {
              xfer += iprot->readByte((*(this->success))[_i2029]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_write_validvalue_reg_args::~netbufferv4_register_write_validvalue_reg_args() throw() {
}


uint32_t netbufferv4_register_write_validvalue_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->register_value);
          this->__isset.register_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_validvalue_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_validvalue_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_BYTE, 4);
  xfer += oprot->writeByte(this->register_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_validvalue_reg_pargs::~netbufferv4_register_write_validvalue_reg_pargs() throw() {
}


uint32_t netbufferv4_register_write_validvalue_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_validvalue_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_BYTE, 4);
  xfer += oprot->writeByte((*(this->register_value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_validvalue_reg_result::~netbufferv4_register_write_validvalue_reg_result() throw() {
}


uint32_t netbufferv4_register_write_validvalue_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_validvalue_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_write_validvalue_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_write_validvalue_reg_presult::~netbufferv4_register_write_validvalue_reg_presult() throw() {
}


uint32_t netbufferv4_register_write_validvalue_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_reset_all_validvalue_reg_args::~netbufferv4_register_reset_all_validvalue_reg_args() throw() {
}


uint32_t netbufferv4_register_reset_all_validvalue_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_reset_all_validvalue_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_validvalue_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_reset_all_validvalue_reg_pargs::~netbufferv4_register_reset_all_validvalue_reg_pargs() throw() {
}


uint32_t netbufferv4_register_reset_all_validvalue_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_validvalue_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_reset_all_validvalue_reg_result::~netbufferv4_register_reset_all_validvalue_reg_result() throw() {
}


uint32_t netbufferv4_register_reset_all_validvalue_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_reset_all_validvalue_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_validvalue_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_reset_all_validvalue_reg_presult::~netbufferv4_register_reset_all_validvalue_reg_presult() throw() {
}


uint32_t netbufferv4_register_reset_all_validvalue_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_range_reset_validvalue_reg_args::~netbufferv4_register_range_reset_validvalue_reg_args() throw() {
}


uint32_t netbufferv4_register_range_reset_validvalue_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_reset_validvalue_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_validvalue_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_reset_validvalue_reg_pargs::~netbufferv4_register_range_reset_validvalue_reg_pargs() throw() {
}


uint32_t netbufferv4_register_range_reset_validvalue_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_validvalue_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->count)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_reset_validvalue_reg_result::~netbufferv4_register_range_reset_validvalue_reg_result() throw() {
}


uint32_t netbufferv4_register_range_reset_validvalue_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_reset_validvalue_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_validvalue_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_range_reset_validvalue_reg_presult::~netbufferv4_register_range_reset_validvalue_reg_presult() throw() {
}


uint32_t netbufferv4_register_range_reset_validvalue_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_write_all_validvalue_reg_args::~netbufferv4_register_write_all_validvalue_reg_args() throw() {
}


uint32_t netbufferv4_register_write_all_validvalue_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->register_value);
          this->__isset.register_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_all_validvalue_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_validvalue_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->register_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_all_validvalue_reg_pargs::~netbufferv4_register_write_all_validvalue_reg_pargs() throw() {
}


uint32_t netbufferv4_register_write_all_validvalue_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_validvalue_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte((*(this->register_value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_all_validvalue_reg_result::~netbufferv4_register_write_all_validvalue_reg_result() throw() {
}


uint32_t netbufferv4_register_write_all_validvalue_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_all_validvalue_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_validvalue_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_write_all_validvalue_reg_presult::~netbufferv4_register_write_all_validvalue_reg_presult() throw() {
}


uint32_t netbufferv4_register_write_all_validvalue_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_range_read_validvalue_reg_args::~netbufferv4_register_range_read_validvalue_reg_args() throw() {
}


uint32_t netbufferv4_register_range_read_validvalue_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->flags.read(iprot);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_read_validvalue_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_validvalue_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->flags.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_read_validvalue_reg_pargs::~netbufferv4_register_range_read_validvalue_reg_pargs() throw() {
}


uint32_t netbufferv4_register_range_read_validvalue_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_validvalue_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->count)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += (*(this->flags)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_read_validvalue_reg_result::~netbufferv4_register_range_read_validvalue_reg_result() throw() {
}


uint32_t netbufferv4_register_range_read_validvalue_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size2030;
            ::apache::thrift::protocol::TType _etype2033;
            xfer += iprot->readListBegin(_etype2033, _size2030);
            this->success.resize(_size2030);
            uint32_t _i2034;
            for (_i2034 = 0; _i2034 < _size2030; ++_i2034)
            {
              xfer += iprot->readByte(this->success[_i2034]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_read_validvalue_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_validvalue_reg_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->success.size()));
      std::vector<int8_t> ::const_iterator _iter2035;
      for (_iter2035 = this->success.begin(); _iter2035 != this->success.end(); ++_iter2035)
      {
        xfer += oprot->writeByte((*_iter2035));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_range_read_validvalue_reg_presult::~netbufferv4_register_range_read_validvalue_reg_presult() throw() {
}


uint32_t netbufferv4_register_range_read_validvalue_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size2036;
            ::apache::thrift::protocol::TType _etype2039;
            xfer += iprot->readListBegin(_etype2039, _size2036);
            (*(this->success)).resize(_size2036);
            uint32_t _i2040;
            for (_i2040 = 0; _i2040 < _size2036; ++_i2040)
            {
              xfer += iprot->readByte((*(this->success))[_i2040]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_hw_sync_valhi4_reg_args::~netbufferv4_register_hw_sync_valhi4_reg_args() throw() {
}


uint32_t netbufferv4_register_hw_sync_valhi4_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_hw_sync_valhi4_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_valhi4_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_hw_sync_valhi4_reg_pargs::~netbufferv4_register_hw_sync_valhi4_reg_pargs() throw() {
}


uint32_t netbufferv4_register_hw_sync_valhi4_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_valhi4_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_hw_sync_valhi4_reg_result::~netbufferv4_register_hw_sync_valhi4_reg_result() throw() {
}


uint32_t netbufferv4_register_hw_sync_valhi4_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_hw_sync_valhi4_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_valhi4_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_hw_sync_valhi4_reg_presult::~netbufferv4_register_hw_sync_valhi4_reg_presult() throw() {
}


uint32_t netbufferv4_register_hw_sync_valhi4_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_read_valhi4_reg_args::~netbufferv4_register_read_valhi4_reg_args() throw() {
}


uint32_t netbufferv4_register_read_valhi4_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->flags.read(iprot);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_read_valhi4_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_read_valhi4_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->flags.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_read_valhi4_reg_pargs::~netbufferv4_register_read_valhi4_reg_pargs() throw() {
}


uint32_t netbufferv4_register_read_valhi4_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_read_valhi4_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += (*(this->flags)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_read_valhi4_reg_result::~netbufferv4_register_read_valhi4_reg_result() throw() {
}


uint32_t netbufferv4_register_read_valhi4_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size2041;
            ::apache::thrift::protocol::TType _etype2044;
            xfer += iprot->readListBegin(_etype2044, _size2041);
            this->success.resize(_size2041);
            uint32_t _i2045;
            for (_i2045 = 0; _i2045 < _size2041; ++_i2045)
            {
              xfer += iprot->readI32(this->success[_i2045]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_read_valhi4_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_read_valhi4_reg_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->success.size()));
      std::vector<int32_t> ::const_iterator _iter2046;
      for (_iter2046 = this->success.begin(); _iter2046 != this->success.end(); ++_iter2046)
      {
        xfer += oprot->writeI32((*_iter2046));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_read_valhi4_reg_presult::~netbufferv4_register_read_valhi4_reg_presult() throw() {
}


uint32_t netbufferv4_register_read_valhi4_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size2047;
            ::apache::thrift::protocol::TType _etype2050;
            xfer += iprot->readListBegin(_etype2050, _size2047);
            (*(this->success)).resize(_size2047);
            uint32_t _i2051;
            for (_i2051 = 0; _i2051 < _size2047; ++_i2051)
            {
              xfer += iprot->readI32((*(this->success))[_i2051]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_write_valhi4_reg_args::~netbufferv4_register_write_valhi4_reg_args() throw() {
}


uint32_t netbufferv4_register_write_valhi4_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->register_value);
          this->__isset.register_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_valhi4_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_valhi4_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->register_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_valhi4_reg_pargs::~netbufferv4_register_write_valhi4_reg_pargs() throw() {
}


uint32_t netbufferv4_register_write_valhi4_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_valhi4_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->register_value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_valhi4_reg_result::~netbufferv4_register_write_valhi4_reg_result() throw() {
}


uint32_t netbufferv4_register_write_valhi4_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_valhi4_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_write_valhi4_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_write_valhi4_reg_presult::~netbufferv4_register_write_valhi4_reg_presult() throw() {
}


uint32_t netbufferv4_register_write_valhi4_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_reset_all_valhi4_reg_args::~netbufferv4_register_reset_all_valhi4_reg_args() throw() {
}


uint32_t netbufferv4_register_reset_all_valhi4_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_reset_all_valhi4_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_valhi4_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_reset_all_valhi4_reg_pargs::~netbufferv4_register_reset_all_valhi4_reg_pargs() throw() {
}


uint32_t netbufferv4_register_reset_all_valhi4_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_valhi4_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_reset_all_valhi4_reg_result::~netbufferv4_register_reset_all_valhi4_reg_result() throw() {
}


uint32_t netbufferv4_register_reset_all_valhi4_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_reset_all_valhi4_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_valhi4_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_reset_all_valhi4_reg_presult::~netbufferv4_register_reset_all_valhi4_reg_presult() throw() {
}


uint32_t netbufferv4_register_reset_all_valhi4_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_range_reset_valhi4_reg_args::~netbufferv4_register_range_reset_valhi4_reg_args() throw() {
}


uint32_t netbufferv4_register_range_reset_valhi4_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_reset_valhi4_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_valhi4_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_reset_valhi4_reg_pargs::~netbufferv4_register_range_reset_valhi4_reg_pargs() throw() {
}


uint32_t netbufferv4_register_range_reset_valhi4_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_valhi4_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->count)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_reset_valhi4_reg_result::~netbufferv4_register_range_reset_valhi4_reg_result() throw() {
}


uint32_t netbufferv4_register_range_reset_valhi4_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_reset_valhi4_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_valhi4_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_range_reset_valhi4_reg_presult::~netbufferv4_register_range_reset_valhi4_reg_presult() throw() {
}


uint32_t netbufferv4_register_range_reset_valhi4_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_write_all_valhi4_reg_args::~netbufferv4_register_write_all_valhi4_reg_args() throw() {
}


uint32_t netbufferv4_register_write_all_valhi4_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->register_value);
          this->__isset.register_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_all_valhi4_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_valhi4_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->register_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_all_valhi4_reg_pargs::~netbufferv4_register_write_all_valhi4_reg_pargs() throw() {
}


uint32_t netbufferv4_register_write_all_valhi4_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_valhi4_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->register_value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_all_valhi4_reg_result::~netbufferv4_register_write_all_valhi4_reg_result() throw() {
}


uint32_t netbufferv4_register_write_all_valhi4_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_all_valhi4_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_valhi4_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_write_all_valhi4_reg_presult::~netbufferv4_register_write_all_valhi4_reg_presult() throw() {
}


uint32_t netbufferv4_register_write_all_valhi4_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_range_read_valhi4_reg_args::~netbufferv4_register_range_read_valhi4_reg_args() throw() {
}


uint32_t netbufferv4_register_range_read_valhi4_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->flags.read(iprot);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_read_valhi4_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_valhi4_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->flags.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_read_valhi4_reg_pargs::~netbufferv4_register_range_read_valhi4_reg_pargs() throw() {
}


uint32_t netbufferv4_register_range_read_valhi4_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_valhi4_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->count)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += (*(this->flags)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_read_valhi4_reg_result::~netbufferv4_register_range_read_valhi4_reg_result() throw() {
}


uint32_t netbufferv4_register_range_read_valhi4_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size2052;
            ::apache::thrift::protocol::TType _etype2055;
            xfer += iprot->readListBegin(_etype2055, _size2052);
            this->success.resize(_size2052);
            uint32_t _i2056;
            for (_i2056 = 0; _i2056 < _size2052; ++_i2056)
            {
              xfer += iprot->readI32(this->success[_i2056]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_read_valhi4_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_valhi4_reg_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->success.size()));
      std::vector<int32_t> ::const_iterator _iter2057;
      for (_iter2057 = this->success.begin(); _iter2057 != this->success.end(); ++_iter2057)
      {
        xfer += oprot->writeI32((*_iter2057));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_range_read_valhi4_reg_presult::~netbufferv4_register_range_read_valhi4_reg_presult() throw() {
}


uint32_t netbufferv4_register_range_read_valhi4_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size2058;
            ::apache::thrift::protocol::TType _etype2061;
            xfer += iprot->readListBegin(_etype2061, _size2058);
            (*(this->success)).resize(_size2058);
            uint32_t _i2062;
            for (_i2062 = 0; _i2062 < _size2058; ++_i2062)
            {
              xfer += iprot->readI32((*(this->success))[_i2062]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_hw_sync_vallo15_reg_args::~netbufferv4_register_hw_sync_vallo15_reg_args() throw() {
}


uint32_t netbufferv4_register_hw_sync_vallo15_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_hw_sync_vallo15_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_vallo15_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_hw_sync_vallo15_reg_pargs::~netbufferv4_register_hw_sync_vallo15_reg_pargs() throw() {
}


uint32_t netbufferv4_register_hw_sync_vallo15_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_vallo15_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_hw_sync_vallo15_reg_result::~netbufferv4_register_hw_sync_vallo15_reg_result() throw() {
}


uint32_t netbufferv4_register_hw_sync_vallo15_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_hw_sync_vallo15_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_vallo15_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_hw_sync_vallo15_reg_presult::~netbufferv4_register_hw_sync_vallo15_reg_presult() throw() {
}


uint32_t netbufferv4_register_hw_sync_vallo15_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_read_vallo15_reg_args::~netbufferv4_register_read_vallo15_reg_args() throw() {
}


uint32_t netbufferv4_register_read_vallo15_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->flags.read(iprot);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_read_vallo15_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_read_vallo15_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->flags.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_read_vallo15_reg_pargs::~netbufferv4_register_read_vallo15_reg_pargs() throw() {
}


uint32_t netbufferv4_register_read_vallo15_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_read_vallo15_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += (*(this->flags)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_read_vallo15_reg_result::~netbufferv4_register_read_vallo15_reg_result() throw() {
}


uint32_t netbufferv4_register_read_vallo15_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size2063;
            ::apache::thrift::protocol::TType _etype2066;
            xfer += iprot->readListBegin(_etype2066, _size2063);
            this->success.resize(_size2063);
            uint32_t _i2067;
            for (_i2067 = 0; _i2067 < _size2063; ++_i2067)
            {
              xfer += iprot->readI32(this->success[_i2067]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_read_vallo15_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_read_vallo15_reg_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->success.size()));
      std::vector<int32_t> ::const_iterator _iter2068;
      for (_iter2068 = this->success.begin(); _iter2068 != this->success.end(); ++_iter2068)
      {
        xfer += oprot->writeI32((*_iter2068));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_read_vallo15_reg_presult::~netbufferv4_register_read_vallo15_reg_presult() throw() {
}


uint32_t netbufferv4_register_read_vallo15_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size2069;
            ::apache::thrift::protocol::TType _etype2072;
            xfer += iprot->readListBegin(_etype2072, _size2069);
            (*(this->success)).resize(_size2069);
            uint32_t _i2073;
            for (_i2073 = 0; _i2073 < _size2069; ++_i2073)
            {
              xfer += iprot->readI32((*(this->success))[_i2073]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_write_vallo15_reg_args::~netbufferv4_register_write_vallo15_reg_args() throw() {
}


uint32_t netbufferv4_register_write_vallo15_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->register_value);
          this->__isset.register_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_vallo15_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_vallo15_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->register_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_vallo15_reg_pargs::~netbufferv4_register_write_vallo15_reg_pargs() throw() {
}


uint32_t netbufferv4_register_write_vallo15_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_vallo15_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->register_value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_vallo15_reg_result::~netbufferv4_register_write_vallo15_reg_result() throw() {
}


uint32_t netbufferv4_register_write_vallo15_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_vallo15_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_write_vallo15_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_write_vallo15_reg_presult::~netbufferv4_register_write_vallo15_reg_presult() throw() {
}


uint32_t netbufferv4_register_write_vallo15_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_reset_all_vallo15_reg_args::~netbufferv4_register_reset_all_vallo15_reg_args() throw() {
}


uint32_t netbufferv4_register_reset_all_vallo15_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_reset_all_vallo15_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_vallo15_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_reset_all_vallo15_reg_pargs::~netbufferv4_register_reset_all_vallo15_reg_pargs() throw() {
}


uint32_t netbufferv4_register_reset_all_vallo15_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_vallo15_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_reset_all_vallo15_reg_result::~netbufferv4_register_reset_all_vallo15_reg_result() throw() {
}


uint32_t netbufferv4_register_reset_all_vallo15_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_reset_all_vallo15_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_vallo15_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_reset_all_vallo15_reg_presult::~netbufferv4_register_reset_all_vallo15_reg_presult() throw() {
}


uint32_t netbufferv4_register_reset_all_vallo15_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_range_reset_vallo15_reg_args::~netbufferv4_register_range_reset_vallo15_reg_args() throw() {
}


uint32_t netbufferv4_register_range_reset_vallo15_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_reset_vallo15_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_vallo15_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_reset_vallo15_reg_pargs::~netbufferv4_register_range_reset_vallo15_reg_pargs() throw() {
}


uint32_t netbufferv4_register_range_reset_vallo15_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_vallo15_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->count)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_reset_vallo15_reg_result::~netbufferv4_register_range_reset_vallo15_reg_result() throw() {
}


uint32_t netbufferv4_register_range_reset_vallo15_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_reset_vallo15_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_vallo15_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_range_reset_vallo15_reg_presult::~netbufferv4_register_range_reset_vallo15_reg_presult() throw() {
}


uint32_t netbufferv4_register_range_reset_vallo15_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_write_all_vallo15_reg_args::~netbufferv4_register_write_all_vallo15_reg_args() throw() {
}


uint32_t netbufferv4_register_write_all_vallo15_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->register_value);
          this->__isset.register_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_all_vallo15_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_vallo15_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->register_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_all_vallo15_reg_pargs::~netbufferv4_register_write_all_vallo15_reg_pargs() throw() {
}


uint32_t netbufferv4_register_write_all_vallo15_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_vallo15_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->register_value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_all_vallo15_reg_result::~netbufferv4_register_write_all_vallo15_reg_result() throw() {
}


uint32_t netbufferv4_register_write_all_vallo15_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_all_vallo15_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_vallo15_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_write_all_vallo15_reg_presult::~netbufferv4_register_write_all_vallo15_reg_presult() throw() {
}


uint32_t netbufferv4_register_write_all_vallo15_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_range_read_vallo15_reg_args::~netbufferv4_register_range_read_vallo15_reg_args() throw() {
}


uint32_t netbufferv4_register_range_read_vallo15_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->flags.read(iprot);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_read_vallo15_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_vallo15_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->flags.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_read_vallo15_reg_pargs::~netbufferv4_register_range_read_vallo15_reg_pargs() throw() {
}


uint32_t netbufferv4_register_range_read_vallo15_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_vallo15_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->count)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += (*(this->flags)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_read_vallo15_reg_result::~netbufferv4_register_range_read_vallo15_reg_result() throw() {
}


uint32_t netbufferv4_register_range_read_vallo15_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size2074;
            ::apache::thrift::protocol::TType _etype2077;
            xfer += iprot->readListBegin(_etype2077, _size2074);
            this->success.resize(_size2074);
            uint32_t _i2078;
            for (_i2078 = 0; _i2078 < _size2074; ++_i2078)
            {
              xfer += iprot->readI32(this->success[_i2078]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_read_vallo15_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_vallo15_reg_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->success.size()));
      std::vector<int32_t> ::const_iterator _iter2079;
      for (_iter2079 = this->success.begin(); _iter2079 != this->success.end(); ++_iter2079)
      {
        xfer += oprot->writeI32((*_iter2079));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_range_read_vallo15_reg_presult::~netbufferv4_register_range_read_vallo15_reg_presult() throw() {
}


uint32_t netbufferv4_register_range_read_vallo15_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size2080;
            ::apache::thrift::protocol::TType _etype2083;
            xfer += iprot->readListBegin(_etype2083, _size2080);
            (*(this->success)).resize(_size2080);
            uint32_t _i2084;
            for (_i2084 = 0; _i2084 < _size2080; ++_i2084)
            {
              xfer += iprot->readI32((*(this->success))[_i2084]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_hw_sync_valhi12_reg_args::~netbufferv4_register_hw_sync_valhi12_reg_args() throw() {
}


uint32_t netbufferv4_register_hw_sync_valhi12_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_hw_sync_valhi12_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_valhi12_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_hw_sync_valhi12_reg_pargs::~netbufferv4_register_hw_sync_valhi12_reg_pargs() throw() {
}


uint32_t netbufferv4_register_hw_sync_valhi12_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_valhi12_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_hw_sync_valhi12_reg_result::~netbufferv4_register_hw_sync_valhi12_reg_result() throw() {
}


uint32_t netbufferv4_register_hw_sync_valhi12_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_hw_sync_valhi12_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_valhi12_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_hw_sync_valhi12_reg_presult::~netbufferv4_register_hw_sync_valhi12_reg_presult() throw() {
}


uint32_t netbufferv4_register_hw_sync_valhi12_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_read_valhi12_reg_args::~netbufferv4_register_read_valhi12_reg_args() throw() {
}


uint32_t netbufferv4_register_read_valhi12_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->flags.read(iprot);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_read_valhi12_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_read_valhi12_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->flags.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_read_valhi12_reg_pargs::~netbufferv4_register_read_valhi12_reg_pargs() throw() {
}


uint32_t netbufferv4_register_read_valhi12_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_read_valhi12_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += (*(this->flags)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_read_valhi12_reg_result::~netbufferv4_register_read_valhi12_reg_result() throw() {
}


uint32_t netbufferv4_register_read_valhi12_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size2085;
            ::apache::thrift::protocol::TType _etype2088;
            xfer += iprot->readListBegin(_etype2088, _size2085);
            this->success.resize(_size2085);
            uint32_t _i2089;
            for (_i2089 = 0; _i2089 < _size2085; ++_i2089)
            {
              xfer += iprot->readI32(this->success[_i2089]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_read_valhi12_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_read_valhi12_reg_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->success.size()));
      std::vector<int32_t> ::const_iterator _iter2090;
      for (_iter2090 = this->success.begin(); _iter2090 != this->success.end(); ++_iter2090)
      {
        xfer += oprot->writeI32((*_iter2090));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_read_valhi12_reg_presult::~netbufferv4_register_read_valhi12_reg_presult() throw() {
}


uint32_t netbufferv4_register_read_valhi12_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size2091;
            ::apache::thrift::protocol::TType _etype2094;
            xfer += iprot->readListBegin(_etype2094, _size2091);
            (*(this->success)).resize(_size2091);
            uint32_t _i2095;
            for (_i2095 = 0; _i2095 < _size2091; ++_i2095)
            {
              xfer += iprot->readI32((*(this->success))[_i2095]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_write_valhi12_reg_args::~netbufferv4_register_write_valhi12_reg_args() throw() {
}


uint32_t netbufferv4_register_write_valhi12_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->register_value);
          this->__isset.register_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_valhi12_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_valhi12_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->register_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_valhi12_reg_pargs::~netbufferv4_register_write_valhi12_reg_pargs() throw() {
}


uint32_t netbufferv4_register_write_valhi12_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_valhi12_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->register_value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_valhi12_reg_result::~netbufferv4_register_write_valhi12_reg_result() throw() {
}


uint32_t netbufferv4_register_write_valhi12_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_valhi12_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_write_valhi12_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_write_valhi12_reg_presult::~netbufferv4_register_write_valhi12_reg_presult() throw() {
}


uint32_t netbufferv4_register_write_valhi12_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_reset_all_valhi12_reg_args::~netbufferv4_register_reset_all_valhi12_reg_args() throw() {
}


uint32_t netbufferv4_register_reset_all_valhi12_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_reset_all_valhi12_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_valhi12_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_reset_all_valhi12_reg_pargs::~netbufferv4_register_reset_all_valhi12_reg_pargs() throw() {
}


uint32_t netbufferv4_register_reset_all_valhi12_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_valhi12_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_reset_all_valhi12_reg_result::~netbufferv4_register_reset_all_valhi12_reg_result() throw() {
}


uint32_t netbufferv4_register_reset_all_valhi12_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_reset_all_valhi12_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_valhi12_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_reset_all_valhi12_reg_presult::~netbufferv4_register_reset_all_valhi12_reg_presult() throw() {
}


uint32_t netbufferv4_register_reset_all_valhi12_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_range_reset_valhi12_reg_args::~netbufferv4_register_range_reset_valhi12_reg_args() throw() {
}


uint32_t netbufferv4_register_range_reset_valhi12_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_reset_valhi12_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_valhi12_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_reset_valhi12_reg_pargs::~netbufferv4_register_range_reset_valhi12_reg_pargs() throw() {
}


uint32_t netbufferv4_register_range_reset_valhi12_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_valhi12_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->count)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_reset_valhi12_reg_result::~netbufferv4_register_range_reset_valhi12_reg_result() throw() {
}


uint32_t netbufferv4_register_range_reset_valhi12_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_reset_valhi12_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_valhi12_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_range_reset_valhi12_reg_presult::~netbufferv4_register_range_reset_valhi12_reg_presult() throw() {
}


uint32_t netbufferv4_register_range_reset_valhi12_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_write_all_valhi12_reg_args::~netbufferv4_register_write_all_valhi12_reg_args() throw() {
}


uint32_t netbufferv4_register_write_all_valhi12_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->register_value);
          this->__isset.register_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_all_valhi12_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_valhi12_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->register_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_all_valhi12_reg_pargs::~netbufferv4_register_write_all_valhi12_reg_pargs() throw() {
}


uint32_t netbufferv4_register_write_all_valhi12_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_valhi12_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->register_value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_all_valhi12_reg_result::~netbufferv4_register_write_all_valhi12_reg_result() throw() {
}


uint32_t netbufferv4_register_write_all_valhi12_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_all_valhi12_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_valhi12_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_write_all_valhi12_reg_presult::~netbufferv4_register_write_all_valhi12_reg_presult() throw() {
}


uint32_t netbufferv4_register_write_all_valhi12_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_range_read_valhi12_reg_args::~netbufferv4_register_range_read_valhi12_reg_args() throw() {
}


uint32_t netbufferv4_register_range_read_valhi12_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->flags.read(iprot);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_read_valhi12_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_valhi12_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->flags.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_read_valhi12_reg_pargs::~netbufferv4_register_range_read_valhi12_reg_pargs() throw() {
}


uint32_t netbufferv4_register_range_read_valhi12_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_valhi12_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->count)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += (*(this->flags)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_read_valhi12_reg_result::~netbufferv4_register_range_read_valhi12_reg_result() throw() {
}


uint32_t netbufferv4_register_range_read_valhi12_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size2096;
            ::apache::thrift::protocol::TType _etype2099;
            xfer += iprot->readListBegin(_etype2099, _size2096);
            this->success.resize(_size2096);
            uint32_t _i2100;
            for (_i2100 = 0; _i2100 < _size2096; ++_i2100)
            {
              xfer += iprot->readI32(this->success[_i2100]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_read_valhi12_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_valhi12_reg_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->success.size()));
      std::vector<int32_t> ::const_iterator _iter2101;
      for (_iter2101 = this->success.begin(); _iter2101 != this->success.end(); ++_iter2101)
      {
        xfer += oprot->writeI32((*_iter2101));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_range_read_valhi12_reg_presult::~netbufferv4_register_range_read_valhi12_reg_presult() throw() {
}


uint32_t netbufferv4_register_range_read_valhi12_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size2102;
            ::apache::thrift::protocol::TType _etype2105;
            xfer += iprot->readListBegin(_etype2105, _size2102);
            (*(this->success)).resize(_size2102);
            uint32_t _i2106;
            for (_i2106 = 0; _i2106 < _size2102; ++_i2106)
            {
              xfer += iprot->readI32((*(this->success))[_i2106]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_hw_sync_latest_reg_args::~netbufferv4_register_hw_sync_latest_reg_args() throw() {
}


uint32_t netbufferv4_register_hw_sync_latest_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_hw_sync_latest_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_latest_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_hw_sync_latest_reg_pargs::~netbufferv4_register_hw_sync_latest_reg_pargs() throw() {
}


uint32_t netbufferv4_register_hw_sync_latest_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_latest_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_hw_sync_latest_reg_result::~netbufferv4_register_hw_sync_latest_reg_result() throw() {
}


uint32_t netbufferv4_register_hw_sync_latest_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_hw_sync_latest_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_latest_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_hw_sync_latest_reg_presult::~netbufferv4_register_hw_sync_latest_reg_presult() throw() {
}


uint32_t netbufferv4_register_hw_sync_latest_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_read_latest_reg_args::~netbufferv4_register_read_latest_reg_args() throw() {
}


uint32_t netbufferv4_register_read_latest_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->flags.read(iprot);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_read_latest_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_read_latest_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->flags.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_read_latest_reg_pargs::~netbufferv4_register_read_latest_reg_pargs() throw() {
}


uint32_t netbufferv4_register_read_latest_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_read_latest_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += (*(this->flags)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_read_latest_reg_result::~netbufferv4_register_read_latest_reg_result() throw() {
}


uint32_t netbufferv4_register_read_latest_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size2107;
            ::apache::thrift::protocol::TType _etype2110;
            xfer += iprot->readListBegin(_etype2110, _size2107);
            this->success.resize(_size2107);
            uint32_t _i2111;
            for (_i2111 = 0; _i2111 < _size2107; ++_i2111)
            {
              xfer += iprot->readByte(this->success[_i2111]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_read_latest_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_read_latest_reg_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->success.size()));
      std::vector<int8_t> ::const_iterator _iter2112;
      for (_iter2112 = this->success.begin(); _iter2112 != this->success.end(); ++_iter2112)
      {
        xfer += oprot->writeByte((*_iter2112));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_read_latest_reg_presult::~netbufferv4_register_read_latest_reg_presult() throw() {
}


uint32_t netbufferv4_register_read_latest_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size2113;
            ::apache::thrift::protocol::TType _etype2116;
            xfer += iprot->readListBegin(_etype2116, _size2113);
            (*(this->success)).resize(_size2113);
            uint32_t _i2117;
            for (_i2117 = 0; _i2117 < _size2113; ++_i2117)
            {
              xfer += iprot->readByte((*(this->success))[_i2117]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_write_latest_reg_args::~netbufferv4_register_write_latest_reg_args() throw() {
}


uint32_t netbufferv4_register_write_latest_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->register_value);
          this->__isset.register_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_latest_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_latest_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_BYTE, 4);
  xfer += oprot->writeByte(this->register_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_latest_reg_pargs::~netbufferv4_register_write_latest_reg_pargs() throw() {
}


uint32_t netbufferv4_register_write_latest_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_latest_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_BYTE, 4);
  xfer += oprot->writeByte((*(this->register_value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_latest_reg_result::~netbufferv4_register_write_latest_reg_result() throw() {
}


uint32_t netbufferv4_register_write_latest_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_latest_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_write_latest_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_write_latest_reg_presult::~netbufferv4_register_write_latest_reg_presult() throw() {
}


uint32_t netbufferv4_register_write_latest_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_reset_all_latest_reg_args::~netbufferv4_register_reset_all_latest_reg_args() throw() {
}


uint32_t netbufferv4_register_reset_all_latest_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_reset_all_latest_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_latest_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_reset_all_latest_reg_pargs::~netbufferv4_register_reset_all_latest_reg_pargs() throw() {
}


uint32_t netbufferv4_register_reset_all_latest_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_latest_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_reset_all_latest_reg_result::~netbufferv4_register_reset_all_latest_reg_result() throw() {
}


uint32_t netbufferv4_register_reset_all_latest_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_reset_all_latest_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_latest_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_reset_all_latest_reg_presult::~netbufferv4_register_reset_all_latest_reg_presult() throw() {
}


uint32_t netbufferv4_register_reset_all_latest_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_range_reset_latest_reg_args::~netbufferv4_register_range_reset_latest_reg_args() throw() {
}


uint32_t netbufferv4_register_range_reset_latest_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_reset_latest_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_latest_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_reset_latest_reg_pargs::~netbufferv4_register_range_reset_latest_reg_pargs() throw() {
}


uint32_t netbufferv4_register_range_reset_latest_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_latest_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->count)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_reset_latest_reg_result::~netbufferv4_register_range_reset_latest_reg_result() throw() {
}


uint32_t netbufferv4_register_range_reset_latest_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_reset_latest_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_latest_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_range_reset_latest_reg_presult::~netbufferv4_register_range_reset_latest_reg_presult() throw() {
}


uint32_t netbufferv4_register_range_reset_latest_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_write_all_latest_reg_args::~netbufferv4_register_write_all_latest_reg_args() throw() {
}


uint32_t netbufferv4_register_write_all_latest_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->register_value);
          this->__isset.register_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_all_latest_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_latest_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->register_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_all_latest_reg_pargs::~netbufferv4_register_write_all_latest_reg_pargs() throw() {
}


uint32_t netbufferv4_register_write_all_latest_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_latest_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte((*(this->register_value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_all_latest_reg_result::~netbufferv4_register_write_all_latest_reg_result() throw() {
}


uint32_t netbufferv4_register_write_all_latest_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_all_latest_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_latest_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_write_all_latest_reg_presult::~netbufferv4_register_write_all_latest_reg_presult() throw() {
}


uint32_t netbufferv4_register_write_all_latest_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_range_read_latest_reg_args::~netbufferv4_register_range_read_latest_reg_args() throw() {
}


uint32_t netbufferv4_register_range_read_latest_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->flags.read(iprot);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_read_latest_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_latest_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->flags.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_read_latest_reg_pargs::~netbufferv4_register_range_read_latest_reg_pargs() throw() {
}


uint32_t netbufferv4_register_range_read_latest_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_latest_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->count)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += (*(this->flags)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_read_latest_reg_result::~netbufferv4_register_range_read_latest_reg_result() throw() {
}


uint32_t netbufferv4_register_range_read_latest_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size2118;
            ::apache::thrift::protocol::TType _etype2121;
            xfer += iprot->readListBegin(_etype2121, _size2118);
            this->success.resize(_size2118);
            uint32_t _i2122;
            for (_i2122 = 0; _i2122 < _size2118; ++_i2122)
            {
              xfer += iprot->readByte(this->success[_i2122]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_read_latest_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_latest_reg_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->success.size()));
      std::vector<int8_t> ::const_iterator _iter2123;
      for (_iter2123 = this->success.begin(); _iter2123 != this->success.end(); ++_iter2123)
      {
        xfer += oprot->writeByte((*_iter2123));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_range_read_latest_reg_presult::~netbufferv4_register_range_read_latest_reg_presult() throw() {
}


uint32_t netbufferv4_register_range_read_latest_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size2124;
            ::apache::thrift::protocol::TType _etype2127;
            xfer += iprot->readListBegin(_etype2127, _size2124);
            (*(this->success)).resize(_size2124);
            uint32_t _i2128;
            for (_i2128 = 0; _i2128 < _size2124; ++_i2128)
            {
              xfer += iprot->readByte((*(this->success))[_i2128]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_hw_sync_vallo10_reg_args::~netbufferv4_register_hw_sync_vallo10_reg_args() throw() {
}


uint32_t netbufferv4_register_hw_sync_vallo10_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_hw_sync_vallo10_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_vallo10_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_hw_sync_vallo10_reg_pargs::~netbufferv4_register_hw_sync_vallo10_reg_pargs() throw() {
}


uint32_t netbufferv4_register_hw_sync_vallo10_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_vallo10_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_hw_sync_vallo10_reg_result::~netbufferv4_register_hw_sync_vallo10_reg_result() throw() {
}


uint32_t netbufferv4_register_hw_sync_vallo10_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_hw_sync_vallo10_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_vallo10_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_hw_sync_vallo10_reg_presult::~netbufferv4_register_hw_sync_vallo10_reg_presult() throw() {
}


uint32_t netbufferv4_register_hw_sync_vallo10_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_read_vallo10_reg_args::~netbufferv4_register_read_vallo10_reg_args() throw() {
}


uint32_t netbufferv4_register_read_vallo10_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->flags.read(iprot);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_read_vallo10_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_read_vallo10_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->flags.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_read_vallo10_reg_pargs::~netbufferv4_register_read_vallo10_reg_pargs() throw() {
}


uint32_t netbufferv4_register_read_vallo10_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_read_vallo10_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += (*(this->flags)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_read_vallo10_reg_result::~netbufferv4_register_read_vallo10_reg_result() throw() {
}


uint32_t netbufferv4_register_read_vallo10_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size2129;
            ::apache::thrift::protocol::TType _etype2132;
            xfer += iprot->readListBegin(_etype2132, _size2129);
            this->success.resize(_size2129);
            uint32_t _i2133;
            for (_i2133 = 0; _i2133 < _size2129; ++_i2133)
            {
              xfer += iprot->readI32(this->success[_i2133]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_read_vallo10_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_read_vallo10_reg_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->success.size()));
      std::vector<int32_t> ::const_iterator _iter2134;
      for (_iter2134 = this->success.begin(); _iter2134 != this->success.end(); ++_iter2134)
      {
        xfer += oprot->writeI32((*_iter2134));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_read_vallo10_reg_presult::~netbufferv4_register_read_vallo10_reg_presult() throw() {
}


uint32_t netbufferv4_register_read_vallo10_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size2135;
            ::apache::thrift::protocol::TType _etype2138;
            xfer += iprot->readListBegin(_etype2138, _size2135);
            (*(this->success)).resize(_size2135);
            uint32_t _i2139;
            for (_i2139 = 0; _i2139 < _size2135; ++_i2139)
            {
              xfer += iprot->readI32((*(this->success))[_i2139]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_write_vallo10_reg_args::~netbufferv4_register_write_vallo10_reg_args() throw() {
}


uint32_t netbufferv4_register_write_vallo10_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->register_value);
          this->__isset.register_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_vallo10_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_vallo10_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->register_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_vallo10_reg_pargs::~netbufferv4_register_write_vallo10_reg_pargs() throw() {
}


uint32_t netbufferv4_register_write_vallo10_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_vallo10_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->register_value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_vallo10_reg_result::~netbufferv4_register_write_vallo10_reg_result() throw() {
}


uint32_t netbufferv4_register_write_vallo10_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_vallo10_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_write_vallo10_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_write_vallo10_reg_presult::~netbufferv4_register_write_vallo10_reg_presult() throw() {
}


uint32_t netbufferv4_register_write_vallo10_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_reset_all_vallo10_reg_args::~netbufferv4_register_reset_all_vallo10_reg_args() throw() {
}


uint32_t netbufferv4_register_reset_all_vallo10_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_reset_all_vallo10_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_vallo10_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_reset_all_vallo10_reg_pargs::~netbufferv4_register_reset_all_vallo10_reg_pargs() throw() {
}


uint32_t netbufferv4_register_reset_all_vallo10_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_vallo10_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_reset_all_vallo10_reg_result::~netbufferv4_register_reset_all_vallo10_reg_result() throw() {
}


uint32_t netbufferv4_register_reset_all_vallo10_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_reset_all_vallo10_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_vallo10_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_reset_all_vallo10_reg_presult::~netbufferv4_register_reset_all_vallo10_reg_presult() throw() {
}


uint32_t netbufferv4_register_reset_all_vallo10_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_range_reset_vallo10_reg_args::~netbufferv4_register_range_reset_vallo10_reg_args() throw() {
}


uint32_t netbufferv4_register_range_reset_vallo10_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_reset_vallo10_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_vallo10_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_reset_vallo10_reg_pargs::~netbufferv4_register_range_reset_vallo10_reg_pargs() throw() {
}


uint32_t netbufferv4_register_range_reset_vallo10_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_vallo10_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->count)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_reset_vallo10_reg_result::~netbufferv4_register_range_reset_vallo10_reg_result() throw() {
}


uint32_t netbufferv4_register_range_reset_vallo10_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_reset_vallo10_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_vallo10_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_range_reset_vallo10_reg_presult::~netbufferv4_register_range_reset_vallo10_reg_presult() throw() {
}


uint32_t netbufferv4_register_range_reset_vallo10_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_write_all_vallo10_reg_args::~netbufferv4_register_write_all_vallo10_reg_args() throw() {
}


uint32_t netbufferv4_register_write_all_vallo10_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->register_value);
          this->__isset.register_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_all_vallo10_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_vallo10_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->register_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_all_vallo10_reg_pargs::~netbufferv4_register_write_all_vallo10_reg_pargs() throw() {
}


uint32_t netbufferv4_register_write_all_vallo10_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_vallo10_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->register_value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_all_vallo10_reg_result::~netbufferv4_register_write_all_vallo10_reg_result() throw() {
}


uint32_t netbufferv4_register_write_all_vallo10_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_all_vallo10_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_vallo10_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_write_all_vallo10_reg_presult::~netbufferv4_register_write_all_vallo10_reg_presult() throw() {
}


uint32_t netbufferv4_register_write_all_vallo10_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_range_read_vallo10_reg_args::~netbufferv4_register_range_read_vallo10_reg_args() throw() {
}


uint32_t netbufferv4_register_range_read_vallo10_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->flags.read(iprot);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_read_vallo10_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_vallo10_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->flags.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_read_vallo10_reg_pargs::~netbufferv4_register_range_read_vallo10_reg_pargs() throw() {
}


uint32_t netbufferv4_register_range_read_vallo10_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_vallo10_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->count)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += (*(this->flags)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_read_vallo10_reg_result::~netbufferv4_register_range_read_vallo10_reg_result() throw() {
}


uint32_t netbufferv4_register_range_read_vallo10_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size2140;
            ::apache::thrift::protocol::TType _etype2143;
            xfer += iprot->readListBegin(_etype2143, _size2140);
            this->success.resize(_size2140);
            uint32_t _i2144;
            for (_i2144 = 0; _i2144 < _size2140; ++_i2144)
            {
              xfer += iprot->readI32(this->success[_i2144]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_read_vallo10_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_vallo10_reg_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->success.size()));
      std::vector<int32_t> ::const_iterator _iter2145;
      for (_iter2145 = this->success.begin(); _iter2145 != this->success.end(); ++_iter2145)
      {
        xfer += oprot->writeI32((*_iter2145));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_range_read_vallo10_reg_presult::~netbufferv4_register_range_read_vallo10_reg_presult() throw() {
}


uint32_t netbufferv4_register_range_read_vallo10_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size2146;
            ::apache::thrift::protocol::TType _etype2149;
            xfer += iprot->readListBegin(_etype2149, _size2146);
            (*(this->success)).resize(_size2146);
            uint32_t _i2150;
            for (_i2150 = 0; _i2150 < _size2146; ++_i2150)
            {
              xfer += iprot->readI32((*(this->success))[_i2150]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_hw_sync_vallo4_reg_args::~netbufferv4_register_hw_sync_vallo4_reg_args() throw() {
}


uint32_t netbufferv4_register_hw_sync_vallo4_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_hw_sync_vallo4_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_vallo4_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_hw_sync_vallo4_reg_pargs::~netbufferv4_register_hw_sync_vallo4_reg_pargs() throw() {
}


uint32_t netbufferv4_register_hw_sync_vallo4_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_vallo4_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_hw_sync_vallo4_reg_result::~netbufferv4_register_hw_sync_vallo4_reg_result() throw() {
}


uint32_t netbufferv4_register_hw_sync_vallo4_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_hw_sync_vallo4_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_vallo4_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_hw_sync_vallo4_reg_presult::~netbufferv4_register_hw_sync_vallo4_reg_presult() throw() {
}


uint32_t netbufferv4_register_hw_sync_vallo4_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_read_vallo4_reg_args::~netbufferv4_register_read_vallo4_reg_args() throw() {
}


uint32_t netbufferv4_register_read_vallo4_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->flags.read(iprot);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_read_vallo4_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_read_vallo4_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->flags.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_read_vallo4_reg_pargs::~netbufferv4_register_read_vallo4_reg_pargs() throw() {
}


uint32_t netbufferv4_register_read_vallo4_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_read_vallo4_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += (*(this->flags)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_read_vallo4_reg_result::~netbufferv4_register_read_vallo4_reg_result() throw() {
}


uint32_t netbufferv4_register_read_vallo4_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size2151;
            ::apache::thrift::protocol::TType _etype2154;
            xfer += iprot->readListBegin(_etype2154, _size2151);
            this->success.resize(_size2151);
            uint32_t _i2155;
            for (_i2155 = 0; _i2155 < _size2151; ++_i2155)
            {
              xfer += iprot->readI32(this->success[_i2155]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_read_vallo4_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_read_vallo4_reg_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->success.size()));
      std::vector<int32_t> ::const_iterator _iter2156;
      for (_iter2156 = this->success.begin(); _iter2156 != this->success.end(); ++_iter2156)
      {
        xfer += oprot->writeI32((*_iter2156));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_read_vallo4_reg_presult::~netbufferv4_register_read_vallo4_reg_presult() throw() {
}


uint32_t netbufferv4_register_read_vallo4_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size2157;
            ::apache::thrift::protocol::TType _etype2160;
            xfer += iprot->readListBegin(_etype2160, _size2157);
            (*(this->success)).resize(_size2157);
            uint32_t _i2161;
            for (_i2161 = 0; _i2161 < _size2157; ++_i2161)
            {
              xfer += iprot->readI32((*(this->success))[_i2161]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_write_vallo4_reg_args::~netbufferv4_register_write_vallo4_reg_args() throw() {
}


uint32_t netbufferv4_register_write_vallo4_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->register_value);
          this->__isset.register_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_vallo4_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_vallo4_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->register_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_vallo4_reg_pargs::~netbufferv4_register_write_vallo4_reg_pargs() throw() {
}


uint32_t netbufferv4_register_write_vallo4_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_vallo4_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->register_value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_vallo4_reg_result::~netbufferv4_register_write_vallo4_reg_result() throw() {
}


uint32_t netbufferv4_register_write_vallo4_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_vallo4_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_write_vallo4_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_write_vallo4_reg_presult::~netbufferv4_register_write_vallo4_reg_presult() throw() {
}


uint32_t netbufferv4_register_write_vallo4_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_reset_all_vallo4_reg_args::~netbufferv4_register_reset_all_vallo4_reg_args() throw() {
}


uint32_t netbufferv4_register_reset_all_vallo4_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_reset_all_vallo4_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_vallo4_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_reset_all_vallo4_reg_pargs::~netbufferv4_register_reset_all_vallo4_reg_pargs() throw() {
}


uint32_t netbufferv4_register_reset_all_vallo4_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_vallo4_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_reset_all_vallo4_reg_result::~netbufferv4_register_reset_all_vallo4_reg_result() throw() {
}


uint32_t netbufferv4_register_reset_all_vallo4_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_reset_all_vallo4_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_vallo4_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_reset_all_vallo4_reg_presult::~netbufferv4_register_reset_all_vallo4_reg_presult() throw() {
}


uint32_t netbufferv4_register_reset_all_vallo4_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_range_reset_vallo4_reg_args::~netbufferv4_register_range_reset_vallo4_reg_args() throw() {
}


uint32_t netbufferv4_register_range_reset_vallo4_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_reset_vallo4_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_vallo4_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_reset_vallo4_reg_pargs::~netbufferv4_register_range_reset_vallo4_reg_pargs() throw() {
}


uint32_t netbufferv4_register_range_reset_vallo4_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_vallo4_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->count)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_reset_vallo4_reg_result::~netbufferv4_register_range_reset_vallo4_reg_result() throw() {
}


uint32_t netbufferv4_register_range_reset_vallo4_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_reset_vallo4_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_vallo4_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_range_reset_vallo4_reg_presult::~netbufferv4_register_range_reset_vallo4_reg_presult() throw() {
}


uint32_t netbufferv4_register_range_reset_vallo4_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_write_all_vallo4_reg_args::~netbufferv4_register_write_all_vallo4_reg_args() throw() {
}


uint32_t netbufferv4_register_write_all_vallo4_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->register_value);
          this->__isset.register_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_all_vallo4_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_vallo4_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->register_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_all_vallo4_reg_pargs::~netbufferv4_register_write_all_vallo4_reg_pargs() throw() {
}


uint32_t netbufferv4_register_write_all_vallo4_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_vallo4_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->register_value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_all_vallo4_reg_result::~netbufferv4_register_write_all_vallo4_reg_result() throw() {
}


uint32_t netbufferv4_register_write_all_vallo4_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_all_vallo4_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_vallo4_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_write_all_vallo4_reg_presult::~netbufferv4_register_write_all_vallo4_reg_presult() throw() {
}


uint32_t netbufferv4_register_write_all_vallo4_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_range_read_vallo4_reg_args::~netbufferv4_register_range_read_vallo4_reg_args() throw() {
}


uint32_t netbufferv4_register_range_read_vallo4_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->flags.read(iprot);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_read_vallo4_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_vallo4_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->flags.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_read_vallo4_reg_pargs::~netbufferv4_register_range_read_vallo4_reg_pargs() throw() {
}


uint32_t netbufferv4_register_range_read_vallo4_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_vallo4_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->count)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += (*(this->flags)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_read_vallo4_reg_result::~netbufferv4_register_range_read_vallo4_reg_result() throw() {
}


uint32_t netbufferv4_register_range_read_vallo4_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size2162;
            ::apache::thrift::protocol::TType _etype2165;
            xfer += iprot->readListBegin(_etype2165, _size2162);
            this->success.resize(_size2162);
            uint32_t _i2166;
            for (_i2166 = 0; _i2166 < _size2162; ++_i2166)
            {
              xfer += iprot->readI32(this->success[_i2166]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_read_vallo4_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_vallo4_reg_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->success.size()));
      std::vector<int32_t> ::const_iterator _iter2167;
      for (_iter2167 = this->success.begin(); _iter2167 != this->success.end(); ++_iter2167)
      {
        xfer += oprot->writeI32((*_iter2167));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_range_read_vallo4_reg_presult::~netbufferv4_register_range_read_vallo4_reg_presult() throw() {
}


uint32_t netbufferv4_register_range_read_vallo4_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size2168;
            ::apache::thrift::protocol::TType _etype2171;
            xfer += iprot->readListBegin(_etype2171, _size2168);
            (*(this->success)).resize(_size2168);
            uint32_t _i2172;
            for (_i2172 = 0; _i2172 < _size2168; ++_i2172)
            {
              xfer += iprot->readI32((*(this->success))[_i2172]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_hw_sync_vallo16_reg_args::~netbufferv4_register_hw_sync_vallo16_reg_args() throw() {
}


uint32_t netbufferv4_register_hw_sync_vallo16_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_hw_sync_vallo16_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_vallo16_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_hw_sync_vallo16_reg_pargs::~netbufferv4_register_hw_sync_vallo16_reg_pargs() throw() {
}


uint32_t netbufferv4_register_hw_sync_vallo16_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_vallo16_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_hw_sync_vallo16_reg_result::~netbufferv4_register_hw_sync_vallo16_reg_result() throw() {
}


uint32_t netbufferv4_register_hw_sync_vallo16_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_hw_sync_vallo16_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_vallo16_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_hw_sync_vallo16_reg_presult::~netbufferv4_register_hw_sync_vallo16_reg_presult() throw() {
}


uint32_t netbufferv4_register_hw_sync_vallo16_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_read_vallo16_reg_args::~netbufferv4_register_read_vallo16_reg_args() throw() {
}


uint32_t netbufferv4_register_read_vallo16_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->flags.read(iprot);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_read_vallo16_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_read_vallo16_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->flags.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_read_vallo16_reg_pargs::~netbufferv4_register_read_vallo16_reg_pargs() throw() {
}


uint32_t netbufferv4_register_read_vallo16_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_read_vallo16_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += (*(this->flags)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_read_vallo16_reg_result::~netbufferv4_register_read_vallo16_reg_result() throw() {
}


uint32_t netbufferv4_register_read_vallo16_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size2173;
            ::apache::thrift::protocol::TType _etype2176;
            xfer += iprot->readListBegin(_etype2176, _size2173);
            this->success.resize(_size2173);
            uint32_t _i2177;
            for (_i2177 = 0; _i2177 < _size2173; ++_i2177)
            {
              xfer += iprot->readI32(this->success[_i2177]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_read_vallo16_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_read_vallo16_reg_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->success.size()));
      std::vector<int32_t> ::const_iterator _iter2178;
      for (_iter2178 = this->success.begin(); _iter2178 != this->success.end(); ++_iter2178)
      {
        xfer += oprot->writeI32((*_iter2178));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_read_vallo16_reg_presult::~netbufferv4_register_read_vallo16_reg_presult() throw() {
}


uint32_t netbufferv4_register_read_vallo16_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size2179;
            ::apache::thrift::protocol::TType _etype2182;
            xfer += iprot->readListBegin(_etype2182, _size2179);
            (*(this->success)).resize(_size2179);
            uint32_t _i2183;
            for (_i2183 = 0; _i2183 < _size2179; ++_i2183)
            {
              xfer += iprot->readI32((*(this->success))[_i2183]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_write_vallo16_reg_args::~netbufferv4_register_write_vallo16_reg_args() throw() {
}


uint32_t netbufferv4_register_write_vallo16_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->register_value);
          this->__isset.register_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_vallo16_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_vallo16_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->register_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_vallo16_reg_pargs::~netbufferv4_register_write_vallo16_reg_pargs() throw() {
}


uint32_t netbufferv4_register_write_vallo16_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_vallo16_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->register_value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_vallo16_reg_result::~netbufferv4_register_write_vallo16_reg_result() throw() {
}


uint32_t netbufferv4_register_write_vallo16_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_vallo16_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_write_vallo16_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_write_vallo16_reg_presult::~netbufferv4_register_write_vallo16_reg_presult() throw() {
}


uint32_t netbufferv4_register_write_vallo16_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_reset_all_vallo16_reg_args::~netbufferv4_register_reset_all_vallo16_reg_args() throw() {
}


uint32_t netbufferv4_register_reset_all_vallo16_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_reset_all_vallo16_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_vallo16_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_reset_all_vallo16_reg_pargs::~netbufferv4_register_reset_all_vallo16_reg_pargs() throw() {
}


uint32_t netbufferv4_register_reset_all_vallo16_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_vallo16_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_reset_all_vallo16_reg_result::~netbufferv4_register_reset_all_vallo16_reg_result() throw() {
}


uint32_t netbufferv4_register_reset_all_vallo16_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_reset_all_vallo16_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_vallo16_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_reset_all_vallo16_reg_presult::~netbufferv4_register_reset_all_vallo16_reg_presult() throw() {
}


uint32_t netbufferv4_register_reset_all_vallo16_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_range_reset_vallo16_reg_args::~netbufferv4_register_range_reset_vallo16_reg_args() throw() {
}


uint32_t netbufferv4_register_range_reset_vallo16_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_reset_vallo16_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_vallo16_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_reset_vallo16_reg_pargs::~netbufferv4_register_range_reset_vallo16_reg_pargs() throw() {
}


uint32_t netbufferv4_register_range_reset_vallo16_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_vallo16_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->count)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_reset_vallo16_reg_result::~netbufferv4_register_range_reset_vallo16_reg_result() throw() {
}


uint32_t netbufferv4_register_range_reset_vallo16_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_reset_vallo16_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_vallo16_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_range_reset_vallo16_reg_presult::~netbufferv4_register_range_reset_vallo16_reg_presult() throw() {
}


uint32_t netbufferv4_register_range_reset_vallo16_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_write_all_vallo16_reg_args::~netbufferv4_register_write_all_vallo16_reg_args() throw() {
}


uint32_t netbufferv4_register_write_all_vallo16_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->register_value);
          this->__isset.register_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_all_vallo16_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_vallo16_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->register_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_all_vallo16_reg_pargs::~netbufferv4_register_write_all_vallo16_reg_pargs() throw() {
}


uint32_t netbufferv4_register_write_all_vallo16_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_vallo16_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->register_value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_all_vallo16_reg_result::~netbufferv4_register_write_all_vallo16_reg_result() throw() {
}


uint32_t netbufferv4_register_write_all_vallo16_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_all_vallo16_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_vallo16_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_write_all_vallo16_reg_presult::~netbufferv4_register_write_all_vallo16_reg_presult() throw() {
}


uint32_t netbufferv4_register_write_all_vallo16_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_range_read_vallo16_reg_args::~netbufferv4_register_range_read_vallo16_reg_args() throw() {
}


uint32_t netbufferv4_register_range_read_vallo16_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->flags.read(iprot);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_read_vallo16_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_vallo16_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->flags.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_read_vallo16_reg_pargs::~netbufferv4_register_range_read_vallo16_reg_pargs() throw() {
}


uint32_t netbufferv4_register_range_read_vallo16_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_vallo16_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->count)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += (*(this->flags)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_read_vallo16_reg_result::~netbufferv4_register_range_read_vallo16_reg_result() throw() {
}


uint32_t netbufferv4_register_range_read_vallo16_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size2184;
            ::apache::thrift::protocol::TType _etype2187;
            xfer += iprot->readListBegin(_etype2187, _size2184);
            this->success.resize(_size2184);
            uint32_t _i2188;
            for (_i2188 = 0; _i2188 < _size2184; ++_i2188)
            {
              xfer += iprot->readI32(this->success[_i2188]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_read_vallo16_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_vallo16_reg_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->success.size()));
      std::vector<int32_t> ::const_iterator _iter2189;
      for (_iter2189 = this->success.begin(); _iter2189 != this->success.end(); ++_iter2189)
      {
        xfer += oprot->writeI32((*_iter2189));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_range_read_vallo16_reg_presult::~netbufferv4_register_range_read_vallo16_reg_presult() throw() {
}


uint32_t netbufferv4_register_range_read_vallo16_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size2190;
            ::apache::thrift::protocol::TType _etype2193;
            xfer += iprot->readListBegin(_etype2193, _size2190);
            (*(this->success)).resize(_size2190);
            uint32_t _i2194;
            for (_i2194 = 0; _i2194 < _size2190; ++_i2194)
            {
              xfer += iprot->readI32((*(this->success))[_i2194]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_hw_sync_vallo3_reg_args::~netbufferv4_register_hw_sync_vallo3_reg_args() throw() {
}


uint32_t netbufferv4_register_hw_sync_vallo3_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_hw_sync_vallo3_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_vallo3_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_hw_sync_vallo3_reg_pargs::~netbufferv4_register_hw_sync_vallo3_reg_pargs() throw() {
}


uint32_t netbufferv4_register_hw_sync_vallo3_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_vallo3_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_hw_sync_vallo3_reg_result::~netbufferv4_register_hw_sync_vallo3_reg_result() throw() {
}


uint32_t netbufferv4_register_hw_sync_vallo3_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_hw_sync_vallo3_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_vallo3_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_hw_sync_vallo3_reg_presult::~netbufferv4_register_hw_sync_vallo3_reg_presult() throw() {
}


uint32_t netbufferv4_register_hw_sync_vallo3_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_read_vallo3_reg_args::~netbufferv4_register_read_vallo3_reg_args() throw() {
}


uint32_t netbufferv4_register_read_vallo3_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->flags.read(iprot);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_read_vallo3_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_read_vallo3_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->flags.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_read_vallo3_reg_pargs::~netbufferv4_register_read_vallo3_reg_pargs() throw() {
}


uint32_t netbufferv4_register_read_vallo3_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_read_vallo3_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += (*(this->flags)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_read_vallo3_reg_result::~netbufferv4_register_read_vallo3_reg_result() throw() {
}


uint32_t netbufferv4_register_read_vallo3_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size2195;
            ::apache::thrift::protocol::TType _etype2198;
            xfer += iprot->readListBegin(_etype2198, _size2195);
            this->success.resize(_size2195);
            uint32_t _i2199;
            for (_i2199 = 0; _i2199 < _size2195; ++_i2199)
            {
              xfer += iprot->readI32(this->success[_i2199]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_read_vallo3_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_read_vallo3_reg_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->success.size()));
      std::vector<int32_t> ::const_iterator _iter2200;
      for (_iter2200 = this->success.begin(); _iter2200 != this->success.end(); ++_iter2200)
      {
        xfer += oprot->writeI32((*_iter2200));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_read_vallo3_reg_presult::~netbufferv4_register_read_vallo3_reg_presult() throw() {
}


uint32_t netbufferv4_register_read_vallo3_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size2201;
            ::apache::thrift::protocol::TType _etype2204;
            xfer += iprot->readListBegin(_etype2204, _size2201);
            (*(this->success)).resize(_size2201);
            uint32_t _i2205;
            for (_i2205 = 0; _i2205 < _size2201; ++_i2205)
            {
              xfer += iprot->readI32((*(this->success))[_i2205]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_write_vallo3_reg_args::~netbufferv4_register_write_vallo3_reg_args() throw() {
}


uint32_t netbufferv4_register_write_vallo3_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->register_value);
          this->__isset.register_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_vallo3_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_vallo3_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->register_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_vallo3_reg_pargs::~netbufferv4_register_write_vallo3_reg_pargs() throw() {
}


uint32_t netbufferv4_register_write_vallo3_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_vallo3_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->register_value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_vallo3_reg_result::~netbufferv4_register_write_vallo3_reg_result() throw() {
}


uint32_t netbufferv4_register_write_vallo3_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_vallo3_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_write_vallo3_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_write_vallo3_reg_presult::~netbufferv4_register_write_vallo3_reg_presult() throw() {
}


uint32_t netbufferv4_register_write_vallo3_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_reset_all_vallo3_reg_args::~netbufferv4_register_reset_all_vallo3_reg_args() throw() {
}


uint32_t netbufferv4_register_reset_all_vallo3_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_reset_all_vallo3_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_vallo3_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_reset_all_vallo3_reg_pargs::~netbufferv4_register_reset_all_vallo3_reg_pargs() throw() {
}


uint32_t netbufferv4_register_reset_all_vallo3_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_vallo3_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_reset_all_vallo3_reg_result::~netbufferv4_register_reset_all_vallo3_reg_result() throw() {
}


uint32_t netbufferv4_register_reset_all_vallo3_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_reset_all_vallo3_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_vallo3_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_reset_all_vallo3_reg_presult::~netbufferv4_register_reset_all_vallo3_reg_presult() throw() {
}


uint32_t netbufferv4_register_reset_all_vallo3_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_range_reset_vallo3_reg_args::~netbufferv4_register_range_reset_vallo3_reg_args() throw() {
}


uint32_t netbufferv4_register_range_reset_vallo3_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_reset_vallo3_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_vallo3_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_reset_vallo3_reg_pargs::~netbufferv4_register_range_reset_vallo3_reg_pargs() throw() {
}


uint32_t netbufferv4_register_range_reset_vallo3_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_vallo3_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->count)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_reset_vallo3_reg_result::~netbufferv4_register_range_reset_vallo3_reg_result() throw() {
}


uint32_t netbufferv4_register_range_reset_vallo3_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_reset_vallo3_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_vallo3_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_range_reset_vallo3_reg_presult::~netbufferv4_register_range_reset_vallo3_reg_presult() throw() {
}


uint32_t netbufferv4_register_range_reset_vallo3_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_write_all_vallo3_reg_args::~netbufferv4_register_write_all_vallo3_reg_args() throw() {
}


uint32_t netbufferv4_register_write_all_vallo3_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->register_value);
          this->__isset.register_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_all_vallo3_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_vallo3_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->register_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_all_vallo3_reg_pargs::~netbufferv4_register_write_all_vallo3_reg_pargs() throw() {
}


uint32_t netbufferv4_register_write_all_vallo3_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_vallo3_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->register_value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_all_vallo3_reg_result::~netbufferv4_register_write_all_vallo3_reg_result() throw() {
}


uint32_t netbufferv4_register_write_all_vallo3_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_all_vallo3_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_vallo3_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_write_all_vallo3_reg_presult::~netbufferv4_register_write_all_vallo3_reg_presult() throw() {
}


uint32_t netbufferv4_register_write_all_vallo3_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_range_read_vallo3_reg_args::~netbufferv4_register_range_read_vallo3_reg_args() throw() {
}


uint32_t netbufferv4_register_range_read_vallo3_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->flags.read(iprot);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_read_vallo3_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_vallo3_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->flags.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_read_vallo3_reg_pargs::~netbufferv4_register_range_read_vallo3_reg_pargs() throw() {
}


uint32_t netbufferv4_register_range_read_vallo3_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_vallo3_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->count)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += (*(this->flags)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_read_vallo3_reg_result::~netbufferv4_register_range_read_vallo3_reg_result() throw() {
}


uint32_t netbufferv4_register_range_read_vallo3_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size2206;
            ::apache::thrift::protocol::TType _etype2209;
            xfer += iprot->readListBegin(_etype2209, _size2206);
            this->success.resize(_size2206);
            uint32_t _i2210;
            for (_i2210 = 0; _i2210 < _size2206; ++_i2210)
            {
              xfer += iprot->readI32(this->success[_i2210]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_read_vallo3_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_vallo3_reg_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->success.size()));
      std::vector<int32_t> ::const_iterator _iter2211;
      for (_iter2211 = this->success.begin(); _iter2211 != this->success.end(); ++_iter2211)
      {
        xfer += oprot->writeI32((*_iter2211));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_range_read_vallo3_reg_presult::~netbufferv4_register_range_read_vallo3_reg_presult() throw() {
}


uint32_t netbufferv4_register_range_read_vallo3_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size2212;
            ::apache::thrift::protocol::TType _etype2215;
            xfer += iprot->readListBegin(_etype2215, _size2212);
            (*(this->success)).resize(_size2212);
            uint32_t _i2216;
            for (_i2216 = 0; _i2216 < _size2212; ++_i2216)
            {
              xfer += iprot->readI32((*(this->success))[_i2216]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_hw_sync_valhi8_reg_args::~netbufferv4_register_hw_sync_valhi8_reg_args() throw() {
}


uint32_t netbufferv4_register_hw_sync_valhi8_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_hw_sync_valhi8_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_valhi8_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_hw_sync_valhi8_reg_pargs::~netbufferv4_register_hw_sync_valhi8_reg_pargs() throw() {
}


uint32_t netbufferv4_register_hw_sync_valhi8_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_valhi8_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_hw_sync_valhi8_reg_result::~netbufferv4_register_hw_sync_valhi8_reg_result() throw() {
}


uint32_t netbufferv4_register_hw_sync_valhi8_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_hw_sync_valhi8_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_valhi8_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_hw_sync_valhi8_reg_presult::~netbufferv4_register_hw_sync_valhi8_reg_presult() throw() {
}


uint32_t netbufferv4_register_hw_sync_valhi8_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_read_valhi8_reg_args::~netbufferv4_register_read_valhi8_reg_args() throw() {
}


uint32_t netbufferv4_register_read_valhi8_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->flags.read(iprot);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_read_valhi8_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_read_valhi8_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->flags.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_read_valhi8_reg_pargs::~netbufferv4_register_read_valhi8_reg_pargs() throw() {
}


uint32_t netbufferv4_register_read_valhi8_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_read_valhi8_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += (*(this->flags)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_read_valhi8_reg_result::~netbufferv4_register_read_valhi8_reg_result() throw() {
}


uint32_t netbufferv4_register_read_valhi8_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size2217;
            ::apache::thrift::protocol::TType _etype2220;
            xfer += iprot->readListBegin(_etype2220, _size2217);
            this->success.resize(_size2217);
            uint32_t _i2221;
            for (_i2221 = 0; _i2221 < _size2217; ++_i2221)
            {
              xfer += iprot->readI32(this->success[_i2221]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_read_valhi8_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_read_valhi8_reg_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->success.size()));
      std::vector<int32_t> ::const_iterator _iter2222;
      for (_iter2222 = this->success.begin(); _iter2222 != this->success.end(); ++_iter2222)
      {
        xfer += oprot->writeI32((*_iter2222));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_read_valhi8_reg_presult::~netbufferv4_register_read_valhi8_reg_presult() throw() {
}


uint32_t netbufferv4_register_read_valhi8_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size2223;
            ::apache::thrift::protocol::TType _etype2226;
            xfer += iprot->readListBegin(_etype2226, _size2223);
            (*(this->success)).resize(_size2223);
            uint32_t _i2227;
            for (_i2227 = 0; _i2227 < _size2223; ++_i2227)
            {
              xfer += iprot->readI32((*(this->success))[_i2227]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_write_valhi8_reg_args::~netbufferv4_register_write_valhi8_reg_args() throw() {
}


uint32_t netbufferv4_register_write_valhi8_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->register_value);
          this->__isset.register_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_valhi8_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_valhi8_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->register_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_valhi8_reg_pargs::~netbufferv4_register_write_valhi8_reg_pargs() throw() {
}


uint32_t netbufferv4_register_write_valhi8_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_valhi8_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->register_value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_valhi8_reg_result::~netbufferv4_register_write_valhi8_reg_result() throw() {
}


uint32_t netbufferv4_register_write_valhi8_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_valhi8_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_write_valhi8_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_write_valhi8_reg_presult::~netbufferv4_register_write_valhi8_reg_presult() throw() {
}


uint32_t netbufferv4_register_write_valhi8_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_reset_all_valhi8_reg_args::~netbufferv4_register_reset_all_valhi8_reg_args() throw() {
}


uint32_t netbufferv4_register_reset_all_valhi8_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_reset_all_valhi8_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_valhi8_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_reset_all_valhi8_reg_pargs::~netbufferv4_register_reset_all_valhi8_reg_pargs() throw() {
}


uint32_t netbufferv4_register_reset_all_valhi8_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_valhi8_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_reset_all_valhi8_reg_result::~netbufferv4_register_reset_all_valhi8_reg_result() throw() {
}


uint32_t netbufferv4_register_reset_all_valhi8_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_reset_all_valhi8_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_valhi8_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_reset_all_valhi8_reg_presult::~netbufferv4_register_reset_all_valhi8_reg_presult() throw() {
}


uint32_t netbufferv4_register_reset_all_valhi8_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_range_reset_valhi8_reg_args::~netbufferv4_register_range_reset_valhi8_reg_args() throw() {
}


uint32_t netbufferv4_register_range_reset_valhi8_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_reset_valhi8_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_valhi8_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_reset_valhi8_reg_pargs::~netbufferv4_register_range_reset_valhi8_reg_pargs() throw() {
}


uint32_t netbufferv4_register_range_reset_valhi8_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_valhi8_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->count)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_reset_valhi8_reg_result::~netbufferv4_register_range_reset_valhi8_reg_result() throw() {
}


uint32_t netbufferv4_register_range_reset_valhi8_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_reset_valhi8_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_valhi8_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_range_reset_valhi8_reg_presult::~netbufferv4_register_range_reset_valhi8_reg_presult() throw() {
}


uint32_t netbufferv4_register_range_reset_valhi8_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_write_all_valhi8_reg_args::~netbufferv4_register_write_all_valhi8_reg_args() throw() {
}


uint32_t netbufferv4_register_write_all_valhi8_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->register_value);
          this->__isset.register_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_all_valhi8_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_valhi8_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->register_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_all_valhi8_reg_pargs::~netbufferv4_register_write_all_valhi8_reg_pargs() throw() {
}


uint32_t netbufferv4_register_write_all_valhi8_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_valhi8_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->register_value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_all_valhi8_reg_result::~netbufferv4_register_write_all_valhi8_reg_result() throw() {
}


uint32_t netbufferv4_register_write_all_valhi8_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_all_valhi8_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_valhi8_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_write_all_valhi8_reg_presult::~netbufferv4_register_write_all_valhi8_reg_presult() throw() {
}


uint32_t netbufferv4_register_write_all_valhi8_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_range_read_valhi8_reg_args::~netbufferv4_register_range_read_valhi8_reg_args() throw() {
}


uint32_t netbufferv4_register_range_read_valhi8_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->flags.read(iprot);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_read_valhi8_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_valhi8_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->flags.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_read_valhi8_reg_pargs::~netbufferv4_register_range_read_valhi8_reg_pargs() throw() {
}


uint32_t netbufferv4_register_range_read_valhi8_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_valhi8_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->count)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += (*(this->flags)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_read_valhi8_reg_result::~netbufferv4_register_range_read_valhi8_reg_result() throw() {
}


uint32_t netbufferv4_register_range_read_valhi8_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size2228;
            ::apache::thrift::protocol::TType _etype2231;
            xfer += iprot->readListBegin(_etype2231, _size2228);
            this->success.resize(_size2228);
            uint32_t _i2232;
            for (_i2232 = 0; _i2232 < _size2228; ++_i2232)
            {
              xfer += iprot->readI32(this->success[_i2232]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_read_valhi8_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_valhi8_reg_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->success.size()));
      std::vector<int32_t> ::const_iterator _iter2233;
      for (_iter2233 = this->success.begin(); _iter2233 != this->success.end(); ++_iter2233)
      {
        xfer += oprot->writeI32((*_iter2233));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_range_read_valhi8_reg_presult::~netbufferv4_register_range_read_valhi8_reg_presult() throw() {
}


uint32_t netbufferv4_register_range_read_valhi8_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size2234;
            ::apache::thrift::protocol::TType _etype2237;
            xfer += iprot->readListBegin(_etype2237, _size2234);
            (*(this->success)).resize(_size2234);
            uint32_t _i2238;
            for (_i2238 = 0; _i2238 < _size2234; ++_i2238)
            {
              xfer += iprot->readI32((*(this->success))[_i2238]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_hw_sync_vallen_reg_args::~netbufferv4_register_hw_sync_vallen_reg_args() throw() {
}


uint32_t netbufferv4_register_hw_sync_vallen_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_hw_sync_vallen_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_vallen_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_hw_sync_vallen_reg_pargs::~netbufferv4_register_hw_sync_vallen_reg_pargs() throw() {
}


uint32_t netbufferv4_register_hw_sync_vallen_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_vallen_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_hw_sync_vallen_reg_result::~netbufferv4_register_hw_sync_vallen_reg_result() throw() {
}


uint32_t netbufferv4_register_hw_sync_vallen_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_hw_sync_vallen_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_vallen_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_hw_sync_vallen_reg_presult::~netbufferv4_register_hw_sync_vallen_reg_presult() throw() {
}


uint32_t netbufferv4_register_hw_sync_vallen_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_read_vallen_reg_args::~netbufferv4_register_read_vallen_reg_args() throw() {
}


uint32_t netbufferv4_register_read_vallen_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->flags.read(iprot);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_read_vallen_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_read_vallen_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->flags.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_read_vallen_reg_pargs::~netbufferv4_register_read_vallen_reg_pargs() throw() {
}


uint32_t netbufferv4_register_read_vallen_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_read_vallen_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += (*(this->flags)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_read_vallen_reg_result::~netbufferv4_register_read_vallen_reg_result() throw() {
}


uint32_t netbufferv4_register_read_vallen_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size2239;
            ::apache::thrift::protocol::TType _etype2242;
            xfer += iprot->readListBegin(_etype2242, _size2239);
            this->success.resize(_size2239);
            uint32_t _i2243;
            for (_i2243 = 0; _i2243 < _size2239; ++_i2243)
            {
              xfer += iprot->readI16(this->success[_i2243]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_read_vallen_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_read_vallen_reg_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I16, static_cast<uint32_t>(this->success.size()));
      std::vector<int16_t> ::const_iterator _iter2244;
      for (_iter2244 = this->success.begin(); _iter2244 != this->success.end(); ++_iter2244)
      {
        xfer += oprot->writeI16((*_iter2244));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_read_vallen_reg_presult::~netbufferv4_register_read_vallen_reg_presult() throw() {
}


uint32_t netbufferv4_register_read_vallen_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size2245;
            ::apache::thrift::protocol::TType _etype2248;
            xfer += iprot->readListBegin(_etype2248, _size2245);
            (*(this->success)).resize(_size2245);
            uint32_t _i2249;
            for (_i2249 = 0; _i2249 < _size2245; ++_i2249)
            {
              xfer += iprot->readI16((*(this->success))[_i2249]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_write_vallen_reg_args::~netbufferv4_register_write_vallen_reg_args() throw() {
}


uint32_t netbufferv4_register_write_vallen_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->register_value);
          this->__isset.register_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_vallen_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_vallen_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->register_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_vallen_reg_pargs::~netbufferv4_register_write_vallen_reg_pargs() throw() {
}


uint32_t netbufferv4_register_write_vallen_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_vallen_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16((*(this->register_value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_vallen_reg_result::~netbufferv4_register_write_vallen_reg_result() throw() {
}


uint32_t netbufferv4_register_write_vallen_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_vallen_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_write_vallen_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_write_vallen_reg_presult::~netbufferv4_register_write_vallen_reg_presult() throw() {
}


uint32_t netbufferv4_register_write_vallen_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_reset_all_vallen_reg_args::~netbufferv4_register_reset_all_vallen_reg_args() throw() {
}


uint32_t netbufferv4_register_reset_all_vallen_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_reset_all_vallen_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_vallen_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_reset_all_vallen_reg_pargs::~netbufferv4_register_reset_all_vallen_reg_pargs() throw() {
}


uint32_t netbufferv4_register_reset_all_vallen_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_vallen_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_reset_all_vallen_reg_result::~netbufferv4_register_reset_all_vallen_reg_result() throw() {
}


uint32_t netbufferv4_register_reset_all_vallen_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_reset_all_vallen_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_vallen_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_reset_all_vallen_reg_presult::~netbufferv4_register_reset_all_vallen_reg_presult() throw() {
}


uint32_t netbufferv4_register_reset_all_vallen_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_range_reset_vallen_reg_args::~netbufferv4_register_range_reset_vallen_reg_args() throw() {
}


uint32_t netbufferv4_register_range_reset_vallen_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_reset_vallen_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_vallen_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_reset_vallen_reg_pargs::~netbufferv4_register_range_reset_vallen_reg_pargs() throw() {
}


uint32_t netbufferv4_register_range_reset_vallen_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_vallen_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->count)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_reset_vallen_reg_result::~netbufferv4_register_range_reset_vallen_reg_result() throw() {
}


uint32_t netbufferv4_register_range_reset_vallen_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_reset_vallen_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_vallen_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_range_reset_vallen_reg_presult::~netbufferv4_register_range_reset_vallen_reg_presult() throw() {
}


uint32_t netbufferv4_register_range_reset_vallen_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_write_all_vallen_reg_args::~netbufferv4_register_write_all_vallen_reg_args() throw() {
}


uint32_t netbufferv4_register_write_all_vallen_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->register_value);
          this->__isset.register_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_all_vallen_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_vallen_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->register_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_all_vallen_reg_pargs::~netbufferv4_register_write_all_vallen_reg_pargs() throw() {
}


uint32_t netbufferv4_register_write_all_vallen_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_vallen_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16((*(this->register_value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_all_vallen_reg_result::~netbufferv4_register_write_all_vallen_reg_result() throw() {
}


uint32_t netbufferv4_register_write_all_vallen_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_all_vallen_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_vallen_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_write_all_vallen_reg_presult::~netbufferv4_register_write_all_vallen_reg_presult() throw() {
}


uint32_t netbufferv4_register_write_all_vallen_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_range_read_vallen_reg_args::~netbufferv4_register_range_read_vallen_reg_args() throw() {
}


uint32_t netbufferv4_register_range_read_vallen_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->flags.read(iprot);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_read_vallen_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_vallen_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->flags.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_read_vallen_reg_pargs::~netbufferv4_register_range_read_vallen_reg_pargs() throw() {
}


uint32_t netbufferv4_register_range_read_vallen_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_vallen_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->count)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += (*(this->flags)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_read_vallen_reg_result::~netbufferv4_register_range_read_vallen_reg_result() throw() {
}


uint32_t netbufferv4_register_range_read_vallen_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size2250;
            ::apache::thrift::protocol::TType _etype2253;
            xfer += iprot->readListBegin(_etype2253, _size2250);
            this->success.resize(_size2250);
            uint32_t _i2254;
            for (_i2254 = 0; _i2254 < _size2250; ++_i2254)
            {
              xfer += iprot->readI16(this->success[_i2254]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_read_vallen_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_vallen_reg_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I16, static_cast<uint32_t>(this->success.size()));
      std::vector<int16_t> ::const_iterator _iter2255;
      for (_iter2255 = this->success.begin(); _iter2255 != this->success.end(); ++_iter2255)
      {
        xfer += oprot->writeI16((*_iter2255));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_range_read_vallen_reg_presult::~netbufferv4_register_range_read_vallen_reg_presult() throw() {
}


uint32_t netbufferv4_register_range_read_vallen_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size2256;
            ::apache::thrift::protocol::TType _etype2259;
            xfer += iprot->readListBegin(_etype2259, _size2256);
            (*(this->success)).resize(_size2256);
            uint32_t _i2260;
            for (_i2260 = 0; _i2260 < _size2256; ++_i2260)
            {
              xfer += iprot->readI16((*(this->success))[_i2260]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_hw_sync_vallo1_reg_args::~netbufferv4_register_hw_sync_vallo1_reg_args() throw() {
}


uint32_t netbufferv4_register_hw_sync_vallo1_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_hw_sync_vallo1_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_vallo1_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_hw_sync_vallo1_reg_pargs::~netbufferv4_register_hw_sync_vallo1_reg_pargs() throw() {
}


uint32_t netbufferv4_register_hw_sync_vallo1_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_vallo1_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_hw_sync_vallo1_reg_result::~netbufferv4_register_hw_sync_vallo1_reg_result() throw() {
}


uint32_t netbufferv4_register_hw_sync_vallo1_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_hw_sync_vallo1_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_vallo1_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_hw_sync_vallo1_reg_presult::~netbufferv4_register_hw_sync_vallo1_reg_presult() throw() {
}


uint32_t netbufferv4_register_hw_sync_vallo1_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_read_vallo1_reg_args::~netbufferv4_register_read_vallo1_reg_args() throw() {
}


uint32_t netbufferv4_register_read_vallo1_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->flags.read(iprot);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_read_vallo1_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_read_vallo1_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->flags.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_read_vallo1_reg_pargs::~netbufferv4_register_read_vallo1_reg_pargs() throw() {
}


uint32_t netbufferv4_register_read_vallo1_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_read_vallo1_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += (*(this->flags)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_read_vallo1_reg_result::~netbufferv4_register_read_vallo1_reg_result() throw() {
}


uint32_t netbufferv4_register_read_vallo1_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size2261;
            ::apache::thrift::protocol::TType _etype2264;
            xfer += iprot->readListBegin(_etype2264, _size2261);
            this->success.resize(_size2261);
            uint32_t _i2265;
            for (_i2265 = 0; _i2265 < _size2261; ++_i2265)
            {
              xfer += iprot->readI32(this->success[_i2265]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_read_vallo1_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_read_vallo1_reg_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->success.size()));
      std::vector<int32_t> ::const_iterator _iter2266;
      for (_iter2266 = this->success.begin(); _iter2266 != this->success.end(); ++_iter2266)
      {
        xfer += oprot->writeI32((*_iter2266));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_read_vallo1_reg_presult::~netbufferv4_register_read_vallo1_reg_presult() throw() {
}


uint32_t netbufferv4_register_read_vallo1_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size2267;
            ::apache::thrift::protocol::TType _etype2270;
            xfer += iprot->readListBegin(_etype2270, _size2267);
            (*(this->success)).resize(_size2267);
            uint32_t _i2271;
            for (_i2271 = 0; _i2271 < _size2267; ++_i2271)
            {
              xfer += iprot->readI32((*(this->success))[_i2271]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_write_vallo1_reg_args::~netbufferv4_register_write_vallo1_reg_args() throw() {
}


uint32_t netbufferv4_register_write_vallo1_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->register_value);
          this->__isset.register_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_vallo1_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_vallo1_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->register_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_vallo1_reg_pargs::~netbufferv4_register_write_vallo1_reg_pargs() throw() {
}


uint32_t netbufferv4_register_write_vallo1_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_vallo1_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->register_value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_vallo1_reg_result::~netbufferv4_register_write_vallo1_reg_result() throw() {
}


uint32_t netbufferv4_register_write_vallo1_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_vallo1_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_write_vallo1_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_write_vallo1_reg_presult::~netbufferv4_register_write_vallo1_reg_presult() throw() {
}


uint32_t netbufferv4_register_write_vallo1_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_reset_all_vallo1_reg_args::~netbufferv4_register_reset_all_vallo1_reg_args() throw() {
}


uint32_t netbufferv4_register_reset_all_vallo1_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_reset_all_vallo1_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_vallo1_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_reset_all_vallo1_reg_pargs::~netbufferv4_register_reset_all_vallo1_reg_pargs() throw() {
}


uint32_t netbufferv4_register_reset_all_vallo1_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_vallo1_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_reset_all_vallo1_reg_result::~netbufferv4_register_reset_all_vallo1_reg_result() throw() {
}


uint32_t netbufferv4_register_reset_all_vallo1_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_reset_all_vallo1_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_vallo1_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_reset_all_vallo1_reg_presult::~netbufferv4_register_reset_all_vallo1_reg_presult() throw() {
}


uint32_t netbufferv4_register_reset_all_vallo1_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_range_reset_vallo1_reg_args::~netbufferv4_register_range_reset_vallo1_reg_args() throw() {
}


uint32_t netbufferv4_register_range_reset_vallo1_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_reset_vallo1_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_vallo1_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_reset_vallo1_reg_pargs::~netbufferv4_register_range_reset_vallo1_reg_pargs() throw() {
}


uint32_t netbufferv4_register_range_reset_vallo1_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_vallo1_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->count)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_reset_vallo1_reg_result::~netbufferv4_register_range_reset_vallo1_reg_result() throw() {
}


uint32_t netbufferv4_register_range_reset_vallo1_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_reset_vallo1_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_vallo1_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_range_reset_vallo1_reg_presult::~netbufferv4_register_range_reset_vallo1_reg_presult() throw() {
}


uint32_t netbufferv4_register_range_reset_vallo1_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_write_all_vallo1_reg_args::~netbufferv4_register_write_all_vallo1_reg_args() throw() {
}


uint32_t netbufferv4_register_write_all_vallo1_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->register_value);
          this->__isset.register_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_all_vallo1_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_vallo1_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->register_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_all_vallo1_reg_pargs::~netbufferv4_register_write_all_vallo1_reg_pargs() throw() {
}


uint32_t netbufferv4_register_write_all_vallo1_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_vallo1_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->register_value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_all_vallo1_reg_result::~netbufferv4_register_write_all_vallo1_reg_result() throw() {
}


uint32_t netbufferv4_register_write_all_vallo1_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_all_vallo1_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_vallo1_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_write_all_vallo1_reg_presult::~netbufferv4_register_write_all_vallo1_reg_presult() throw() {
}


uint32_t netbufferv4_register_write_all_vallo1_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_range_read_vallo1_reg_args::~netbufferv4_register_range_read_vallo1_reg_args() throw() {
}


uint32_t netbufferv4_register_range_read_vallo1_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->flags.read(iprot);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_read_vallo1_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_vallo1_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->flags.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_read_vallo1_reg_pargs::~netbufferv4_register_range_read_vallo1_reg_pargs() throw() {
}


uint32_t netbufferv4_register_range_read_vallo1_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_vallo1_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->count)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += (*(this->flags)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_read_vallo1_reg_result::~netbufferv4_register_range_read_vallo1_reg_result() throw() {
}


uint32_t netbufferv4_register_range_read_vallo1_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size2272;
            ::apache::thrift::protocol::TType _etype2275;
            xfer += iprot->readListBegin(_etype2275, _size2272);
            this->success.resize(_size2272);
            uint32_t _i2276;
            for (_i2276 = 0; _i2276 < _size2272; ++_i2276)
            {
              xfer += iprot->readI32(this->success[_i2276]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_read_vallo1_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_vallo1_reg_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->success.size()));
      std::vector<int32_t> ::const_iterator _iter2277;
      for (_iter2277 = this->success.begin(); _iter2277 != this->success.end(); ++_iter2277)
      {
        xfer += oprot->writeI32((*_iter2277));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_range_read_vallo1_reg_presult::~netbufferv4_register_range_read_vallo1_reg_presult() throw() {
}


uint32_t netbufferv4_register_range_read_vallo1_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size2278;
            ::apache::thrift::protocol::TType _etype2281;
            xfer += iprot->readListBegin(_etype2281, _size2278);
            (*(this->success)).resize(_size2278);
            uint32_t _i2282;
            for (_i2282 = 0; _i2282 < _size2278; ++_i2282)
            {
              xfer += iprot->readI32((*(this->success))[_i2282]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_hw_sync_savedseq_reg_args::~netbufferv4_register_hw_sync_savedseq_reg_args() throw() {
}


uint32_t netbufferv4_register_hw_sync_savedseq_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_hw_sync_savedseq_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_savedseq_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_hw_sync_savedseq_reg_pargs::~netbufferv4_register_hw_sync_savedseq_reg_pargs() throw() {
}


uint32_t netbufferv4_register_hw_sync_savedseq_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_savedseq_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_hw_sync_savedseq_reg_result::~netbufferv4_register_hw_sync_savedseq_reg_result() throw() {
}


uint32_t netbufferv4_register_hw_sync_savedseq_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_hw_sync_savedseq_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_savedseq_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_hw_sync_savedseq_reg_presult::~netbufferv4_register_hw_sync_savedseq_reg_presult() throw() {
}


uint32_t netbufferv4_register_hw_sync_savedseq_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_read_savedseq_reg_args::~netbufferv4_register_read_savedseq_reg_args() throw() {
}


uint32_t netbufferv4_register_read_savedseq_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->flags.read(iprot);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_read_savedseq_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_read_savedseq_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->flags.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_read_savedseq_reg_pargs::~netbufferv4_register_read_savedseq_reg_pargs() throw() {
}


uint32_t netbufferv4_register_read_savedseq_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_read_savedseq_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += (*(this->flags)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_read_savedseq_reg_result::~netbufferv4_register_read_savedseq_reg_result() throw() {
}


uint32_t netbufferv4_register_read_savedseq_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size2283;
            ::apache::thrift::protocol::TType _etype2286;
            xfer += iprot->readListBegin(_etype2286, _size2283);
            this->success.resize(_size2283);
            uint32_t _i2287;
            for (_i2287 = 0; _i2287 < _size2283; ++_i2287)
            {
              xfer += iprot->readI32(this->success[_i2287]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_read_savedseq_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_read_savedseq_reg_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->success.size()));
      std::vector<int32_t> ::const_iterator _iter2288;
      for (_iter2288 = this->success.begin(); _iter2288 != this->success.end(); ++_iter2288)
      {
        xfer += oprot->writeI32((*_iter2288));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_read_savedseq_reg_presult::~netbufferv4_register_read_savedseq_reg_presult() throw() {
}


uint32_t netbufferv4_register_read_savedseq_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size2289;
            ::apache::thrift::protocol::TType _etype2292;
            xfer += iprot->readListBegin(_etype2292, _size2289);
            (*(this->success)).resize(_size2289);
            uint32_t _i2293;
            for (_i2293 = 0; _i2293 < _size2289; ++_i2293)
            {
              xfer += iprot->readI32((*(this->success))[_i2293]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_write_savedseq_reg_args::~netbufferv4_register_write_savedseq_reg_args() throw() {
}


uint32_t netbufferv4_register_write_savedseq_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->register_value);
          this->__isset.register_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_savedseq_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_savedseq_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->register_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_savedseq_reg_pargs::~netbufferv4_register_write_savedseq_reg_pargs() throw() {
}


uint32_t netbufferv4_register_write_savedseq_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_savedseq_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->register_value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_savedseq_reg_result::~netbufferv4_register_write_savedseq_reg_result() throw() {
}


uint32_t netbufferv4_register_write_savedseq_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_savedseq_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_write_savedseq_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_write_savedseq_reg_presult::~netbufferv4_register_write_savedseq_reg_presult() throw() {
}


uint32_t netbufferv4_register_write_savedseq_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_reset_all_savedseq_reg_args::~netbufferv4_register_reset_all_savedseq_reg_args() throw() {
}


uint32_t netbufferv4_register_reset_all_savedseq_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_reset_all_savedseq_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_savedseq_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_reset_all_savedseq_reg_pargs::~netbufferv4_register_reset_all_savedseq_reg_pargs() throw() {
}


uint32_t netbufferv4_register_reset_all_savedseq_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_savedseq_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_reset_all_savedseq_reg_result::~netbufferv4_register_reset_all_savedseq_reg_result() throw() {
}


uint32_t netbufferv4_register_reset_all_savedseq_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_reset_all_savedseq_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_savedseq_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_reset_all_savedseq_reg_presult::~netbufferv4_register_reset_all_savedseq_reg_presult() throw() {
}


uint32_t netbufferv4_register_reset_all_savedseq_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_range_reset_savedseq_reg_args::~netbufferv4_register_range_reset_savedseq_reg_args() throw() {
}


uint32_t netbufferv4_register_range_reset_savedseq_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_reset_savedseq_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_savedseq_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_reset_savedseq_reg_pargs::~netbufferv4_register_range_reset_savedseq_reg_pargs() throw() {
}


uint32_t netbufferv4_register_range_reset_savedseq_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_savedseq_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->count)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_reset_savedseq_reg_result::~netbufferv4_register_range_reset_savedseq_reg_result() throw() {
}


uint32_t netbufferv4_register_range_reset_savedseq_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_reset_savedseq_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_savedseq_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_range_reset_savedseq_reg_presult::~netbufferv4_register_range_reset_savedseq_reg_presult() throw() {
}


uint32_t netbufferv4_register_range_reset_savedseq_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_write_all_savedseq_reg_args::~netbufferv4_register_write_all_savedseq_reg_args() throw() {
}


uint32_t netbufferv4_register_write_all_savedseq_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->register_value);
          this->__isset.register_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_all_savedseq_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_savedseq_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->register_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_all_savedseq_reg_pargs::~netbufferv4_register_write_all_savedseq_reg_pargs() throw() {
}


uint32_t netbufferv4_register_write_all_savedseq_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_savedseq_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->register_value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_all_savedseq_reg_result::~netbufferv4_register_write_all_savedseq_reg_result() throw() {
}


uint32_t netbufferv4_register_write_all_savedseq_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_all_savedseq_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_savedseq_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_write_all_savedseq_reg_presult::~netbufferv4_register_write_all_savedseq_reg_presult() throw() {
}


uint32_t netbufferv4_register_write_all_savedseq_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_range_read_savedseq_reg_args::~netbufferv4_register_range_read_savedseq_reg_args() throw() {
}


uint32_t netbufferv4_register_range_read_savedseq_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->flags.read(iprot);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_read_savedseq_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_savedseq_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->flags.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_read_savedseq_reg_pargs::~netbufferv4_register_range_read_savedseq_reg_pargs() throw() {
}


uint32_t netbufferv4_register_range_read_savedseq_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_savedseq_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->count)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += (*(this->flags)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_read_savedseq_reg_result::~netbufferv4_register_range_read_savedseq_reg_result() throw() {
}


uint32_t netbufferv4_register_range_read_savedseq_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size2294;
            ::apache::thrift::protocol::TType _etype2297;
            xfer += iprot->readListBegin(_etype2297, _size2294);
            this->success.resize(_size2294);
            uint32_t _i2298;
            for (_i2298 = 0; _i2298 < _size2294; ++_i2298)
            {
              xfer += iprot->readI32(this->success[_i2298]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_read_savedseq_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_savedseq_reg_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->success.size()));
      std::vector<int32_t> ::const_iterator _iter2299;
      for (_iter2299 = this->success.begin(); _iter2299 != this->success.end(); ++_iter2299)
      {
        xfer += oprot->writeI32((*_iter2299));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_range_read_savedseq_reg_presult::~netbufferv4_register_range_read_savedseq_reg_presult() throw() {
}


uint32_t netbufferv4_register_range_read_savedseq_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size2300;
            ::apache::thrift::protocol::TType _etype2303;
            xfer += iprot->readListBegin(_etype2303, _size2300);
            (*(this->success)).resize(_size2300);
            uint32_t _i2304;
            for (_i2304 = 0; _i2304 < _size2300; ++_i2304)
            {
              xfer += iprot->readI32((*(this->success))[_i2304]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_hw_sync_valhi15_reg_args::~netbufferv4_register_hw_sync_valhi15_reg_args() throw() {
}


uint32_t netbufferv4_register_hw_sync_valhi15_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_hw_sync_valhi15_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_valhi15_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_hw_sync_valhi15_reg_pargs::~netbufferv4_register_hw_sync_valhi15_reg_pargs() throw() {
}


uint32_t netbufferv4_register_hw_sync_valhi15_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_valhi15_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_hw_sync_valhi15_reg_result::~netbufferv4_register_hw_sync_valhi15_reg_result() throw() {
}


uint32_t netbufferv4_register_hw_sync_valhi15_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_hw_sync_valhi15_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_valhi15_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_hw_sync_valhi15_reg_presult::~netbufferv4_register_hw_sync_valhi15_reg_presult() throw() {
}


uint32_t netbufferv4_register_hw_sync_valhi15_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_read_valhi15_reg_args::~netbufferv4_register_read_valhi15_reg_args() throw() {
}


uint32_t netbufferv4_register_read_valhi15_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->flags.read(iprot);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_read_valhi15_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_read_valhi15_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->flags.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_read_valhi15_reg_pargs::~netbufferv4_register_read_valhi15_reg_pargs() throw() {
}


uint32_t netbufferv4_register_read_valhi15_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_read_valhi15_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += (*(this->flags)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_read_valhi15_reg_result::~netbufferv4_register_read_valhi15_reg_result() throw() {
}


uint32_t netbufferv4_register_read_valhi15_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size2305;
            ::apache::thrift::protocol::TType _etype2308;
            xfer += iprot->readListBegin(_etype2308, _size2305);
            this->success.resize(_size2305);
            uint32_t _i2309;
            for (_i2309 = 0; _i2309 < _size2305; ++_i2309)
            {
              xfer += iprot->readI32(this->success[_i2309]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_read_valhi15_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_read_valhi15_reg_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->success.size()));
      std::vector<int32_t> ::const_iterator _iter2310;
      for (_iter2310 = this->success.begin(); _iter2310 != this->success.end(); ++_iter2310)
      {
        xfer += oprot->writeI32((*_iter2310));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_read_valhi15_reg_presult::~netbufferv4_register_read_valhi15_reg_presult() throw() {
}


uint32_t netbufferv4_register_read_valhi15_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size2311;
            ::apache::thrift::protocol::TType _etype2314;
            xfer += iprot->readListBegin(_etype2314, _size2311);
            (*(this->success)).resize(_size2311);
            uint32_t _i2315;
            for (_i2315 = 0; _i2315 < _size2311; ++_i2315)
            {
              xfer += iprot->readI32((*(this->success))[_i2315]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_write_valhi15_reg_args::~netbufferv4_register_write_valhi15_reg_args() throw() {
}


uint32_t netbufferv4_register_write_valhi15_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->register_value);
          this->__isset.register_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_valhi15_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_valhi15_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->register_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_valhi15_reg_pargs::~netbufferv4_register_write_valhi15_reg_pargs() throw() {
}


uint32_t netbufferv4_register_write_valhi15_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_valhi15_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->register_value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_valhi15_reg_result::~netbufferv4_register_write_valhi15_reg_result() throw() {
}


uint32_t netbufferv4_register_write_valhi15_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_valhi15_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_write_valhi15_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_write_valhi15_reg_presult::~netbufferv4_register_write_valhi15_reg_presult() throw() {
}


uint32_t netbufferv4_register_write_valhi15_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_reset_all_valhi15_reg_args::~netbufferv4_register_reset_all_valhi15_reg_args() throw() {
}


uint32_t netbufferv4_register_reset_all_valhi15_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_reset_all_valhi15_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_valhi15_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_reset_all_valhi15_reg_pargs::~netbufferv4_register_reset_all_valhi15_reg_pargs() throw() {
}


uint32_t netbufferv4_register_reset_all_valhi15_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_valhi15_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_reset_all_valhi15_reg_result::~netbufferv4_register_reset_all_valhi15_reg_result() throw() {
}


uint32_t netbufferv4_register_reset_all_valhi15_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_reset_all_valhi15_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_valhi15_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_reset_all_valhi15_reg_presult::~netbufferv4_register_reset_all_valhi15_reg_presult() throw() {
}


uint32_t netbufferv4_register_reset_all_valhi15_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_range_reset_valhi15_reg_args::~netbufferv4_register_range_reset_valhi15_reg_args() throw() {
}


uint32_t netbufferv4_register_range_reset_valhi15_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_reset_valhi15_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_valhi15_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_reset_valhi15_reg_pargs::~netbufferv4_register_range_reset_valhi15_reg_pargs() throw() {
}


uint32_t netbufferv4_register_range_reset_valhi15_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_valhi15_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->count)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_reset_valhi15_reg_result::~netbufferv4_register_range_reset_valhi15_reg_result() throw() {
}


uint32_t netbufferv4_register_range_reset_valhi15_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_reset_valhi15_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_valhi15_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_range_reset_valhi15_reg_presult::~netbufferv4_register_range_reset_valhi15_reg_presult() throw() {
}


uint32_t netbufferv4_register_range_reset_valhi15_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_write_all_valhi15_reg_args::~netbufferv4_register_write_all_valhi15_reg_args() throw() {
}


uint32_t netbufferv4_register_write_all_valhi15_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->register_value);
          this->__isset.register_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_all_valhi15_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_valhi15_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->register_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_all_valhi15_reg_pargs::~netbufferv4_register_write_all_valhi15_reg_pargs() throw() {
}


uint32_t netbufferv4_register_write_all_valhi15_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_valhi15_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->register_value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_all_valhi15_reg_result::~netbufferv4_register_write_all_valhi15_reg_result() throw() {
}


uint32_t netbufferv4_register_write_all_valhi15_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_all_valhi15_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_valhi15_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_write_all_valhi15_reg_presult::~netbufferv4_register_write_all_valhi15_reg_presult() throw() {
}


uint32_t netbufferv4_register_write_all_valhi15_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_range_read_valhi15_reg_args::~netbufferv4_register_range_read_valhi15_reg_args() throw() {
}


uint32_t netbufferv4_register_range_read_valhi15_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->flags.read(iprot);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_read_valhi15_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_valhi15_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->flags.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_read_valhi15_reg_pargs::~netbufferv4_register_range_read_valhi15_reg_pargs() throw() {
}


uint32_t netbufferv4_register_range_read_valhi15_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_valhi15_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->count)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += (*(this->flags)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_read_valhi15_reg_result::~netbufferv4_register_range_read_valhi15_reg_result() throw() {
}


uint32_t netbufferv4_register_range_read_valhi15_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size2316;
            ::apache::thrift::protocol::TType _etype2319;
            xfer += iprot->readListBegin(_etype2319, _size2316);
            this->success.resize(_size2316);
            uint32_t _i2320;
            for (_i2320 = 0; _i2320 < _size2316; ++_i2320)
            {
              xfer += iprot->readI32(this->success[_i2320]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_read_valhi15_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_valhi15_reg_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->success.size()));
      std::vector<int32_t> ::const_iterator _iter2321;
      for (_iter2321 = this->success.begin(); _iter2321 != this->success.end(); ++_iter2321)
      {
        xfer += oprot->writeI32((*_iter2321));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_range_read_valhi15_reg_presult::~netbufferv4_register_range_read_valhi15_reg_presult() throw() {
}


uint32_t netbufferv4_register_range_read_valhi15_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size2322;
            ::apache::thrift::protocol::TType _etype2325;
            xfer += iprot->readListBegin(_etype2325, _size2322);
            (*(this->success)).resize(_size2322);
            uint32_t _i2326;
            for (_i2326 = 0; _i2326 < _size2322; ++_i2326)
            {
              xfer += iprot->readI32((*(this->success))[_i2326]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_hw_sync_case1_reg_args::~netbufferv4_register_hw_sync_case1_reg_args() throw() {
}


uint32_t netbufferv4_register_hw_sync_case1_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_hw_sync_case1_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_case1_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_hw_sync_case1_reg_pargs::~netbufferv4_register_hw_sync_case1_reg_pargs() throw() {
}


uint32_t netbufferv4_register_hw_sync_case1_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_case1_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_hw_sync_case1_reg_result::~netbufferv4_register_hw_sync_case1_reg_result() throw() {
}


uint32_t netbufferv4_register_hw_sync_case1_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_hw_sync_case1_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_case1_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_hw_sync_case1_reg_presult::~netbufferv4_register_hw_sync_case1_reg_presult() throw() {
}


uint32_t netbufferv4_register_hw_sync_case1_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_read_case1_reg_args::~netbufferv4_register_read_case1_reg_args() throw() {
}


uint32_t netbufferv4_register_read_case1_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->flags.read(iprot);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_read_case1_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_read_case1_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->flags.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_read_case1_reg_pargs::~netbufferv4_register_read_case1_reg_pargs() throw() {
}


uint32_t netbufferv4_register_read_case1_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_read_case1_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += (*(this->flags)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_read_case1_reg_result::~netbufferv4_register_read_case1_reg_result() throw() {
}


uint32_t netbufferv4_register_read_case1_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size2327;
            ::apache::thrift::protocol::TType _etype2330;
            xfer += iprot->readListBegin(_etype2330, _size2327);
            this->success.resize(_size2327);
            uint32_t _i2331;
            for (_i2331 = 0; _i2331 < _size2327; ++_i2331)
            {
              xfer += iprot->readByte(this->success[_i2331]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_read_case1_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_read_case1_reg_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->success.size()));
      std::vector<int8_t> ::const_iterator _iter2332;
      for (_iter2332 = this->success.begin(); _iter2332 != this->success.end(); ++_iter2332)
      {
        xfer += oprot->writeByte((*_iter2332));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_read_case1_reg_presult::~netbufferv4_register_read_case1_reg_presult() throw() {
}


uint32_t netbufferv4_register_read_case1_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size2333;
            ::apache::thrift::protocol::TType _etype2336;
            xfer += iprot->readListBegin(_etype2336, _size2333);
            (*(this->success)).resize(_size2333);
            uint32_t _i2337;
            for (_i2337 = 0; _i2337 < _size2333; ++_i2337)
            {
              xfer += iprot->readByte((*(this->success))[_i2337]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_write_case1_reg_args::~netbufferv4_register_write_case1_reg_args() throw() {
}


uint32_t netbufferv4_register_write_case1_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->register_value);
          this->__isset.register_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_case1_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_case1_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_BYTE, 4);
  xfer += oprot->writeByte(this->register_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_case1_reg_pargs::~netbufferv4_register_write_case1_reg_pargs() throw() {
}


uint32_t netbufferv4_register_write_case1_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_case1_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_BYTE, 4);
  xfer += oprot->writeByte((*(this->register_value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_case1_reg_result::~netbufferv4_register_write_case1_reg_result() throw() {
}


uint32_t netbufferv4_register_write_case1_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_case1_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_write_case1_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_write_case1_reg_presult::~netbufferv4_register_write_case1_reg_presult() throw() {
}


uint32_t netbufferv4_register_write_case1_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_reset_all_case1_reg_args::~netbufferv4_register_reset_all_case1_reg_args() throw() {
}


uint32_t netbufferv4_register_reset_all_case1_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_reset_all_case1_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_case1_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_reset_all_case1_reg_pargs::~netbufferv4_register_reset_all_case1_reg_pargs() throw() {
}


uint32_t netbufferv4_register_reset_all_case1_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_case1_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_reset_all_case1_reg_result::~netbufferv4_register_reset_all_case1_reg_result() throw() {
}


uint32_t netbufferv4_register_reset_all_case1_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_reset_all_case1_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_case1_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_reset_all_case1_reg_presult::~netbufferv4_register_reset_all_case1_reg_presult() throw() {
}


uint32_t netbufferv4_register_reset_all_case1_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_range_reset_case1_reg_args::~netbufferv4_register_range_reset_case1_reg_args() throw() {
}


uint32_t netbufferv4_register_range_reset_case1_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_reset_case1_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_case1_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_reset_case1_reg_pargs::~netbufferv4_register_range_reset_case1_reg_pargs() throw() {
}


uint32_t netbufferv4_register_range_reset_case1_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_case1_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->count)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_reset_case1_reg_result::~netbufferv4_register_range_reset_case1_reg_result() throw() {
}


uint32_t netbufferv4_register_range_reset_case1_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_reset_case1_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_case1_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_range_reset_case1_reg_presult::~netbufferv4_register_range_reset_case1_reg_presult() throw() {
}


uint32_t netbufferv4_register_range_reset_case1_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_write_all_case1_reg_args::~netbufferv4_register_write_all_case1_reg_args() throw() {
}


uint32_t netbufferv4_register_write_all_case1_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->register_value);
          this->__isset.register_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_all_case1_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_case1_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->register_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_all_case1_reg_pargs::~netbufferv4_register_write_all_case1_reg_pargs() throw() {
}


uint32_t netbufferv4_register_write_all_case1_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_case1_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte((*(this->register_value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_all_case1_reg_result::~netbufferv4_register_write_all_case1_reg_result() throw() {
}


uint32_t netbufferv4_register_write_all_case1_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_all_case1_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_case1_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_write_all_case1_reg_presult::~netbufferv4_register_write_all_case1_reg_presult() throw() {
}


uint32_t netbufferv4_register_write_all_case1_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_range_read_case1_reg_args::~netbufferv4_register_range_read_case1_reg_args() throw() {
}


uint32_t netbufferv4_register_range_read_case1_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->flags.read(iprot);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_read_case1_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_case1_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->flags.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_read_case1_reg_pargs::~netbufferv4_register_range_read_case1_reg_pargs() throw() {
}


uint32_t netbufferv4_register_range_read_case1_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_case1_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->count)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += (*(this->flags)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_read_case1_reg_result::~netbufferv4_register_range_read_case1_reg_result() throw() {
}


uint32_t netbufferv4_register_range_read_case1_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size2338;
            ::apache::thrift::protocol::TType _etype2341;
            xfer += iprot->readListBegin(_etype2341, _size2338);
            this->success.resize(_size2338);
            uint32_t _i2342;
            for (_i2342 = 0; _i2342 < _size2338; ++_i2342)
            {
              xfer += iprot->readByte(this->success[_i2342]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_read_case1_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_case1_reg_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->success.size()));
      std::vector<int8_t> ::const_iterator _iter2343;
      for (_iter2343 = this->success.begin(); _iter2343 != this->success.end(); ++_iter2343)
      {
        xfer += oprot->writeByte((*_iter2343));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_range_read_case1_reg_presult::~netbufferv4_register_range_read_case1_reg_presult() throw() {
}


uint32_t netbufferv4_register_range_read_case1_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size2344;
            ::apache::thrift::protocol::TType _etype2347;
            xfer += iprot->readListBegin(_etype2347, _size2344);
            (*(this->success)).resize(_size2344);
            uint32_t _i2348;
            for (_i2348 = 0; _i2348 < _size2344; ++_i2348)
            {
              xfer += iprot->readByte((*(this->success))[_i2348]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

EntryHandle_t netbufferv4Client::access_cache_frequency_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cache_frequency_tbl_match_spec_t& match_spec)
{
  send_access_cache_frequency_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_access_cache_frequency_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_access_cache_frequency_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cache_frequency_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cache_frequency_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cache_frequency_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_cache_frequency_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cache_frequency_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_cache_frequency_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cache_frequency_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_case1_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_case1_tbl_match_spec_t& match_spec)
{
  send_access_case1_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_access_case1_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_access_case1_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_case1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_case1_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_case1_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_case1_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_case1_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_case1_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_case1_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_cm1_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm1_tbl_match_spec_t& match_spec)
{
  send_access_cm1_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_access_cm1_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_access_cm1_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm1_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm1_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_cm1_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm1_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_cm1_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cm1_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_cm2_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm2_tbl_match_spec_t& match_spec)
{
  send_access_cm2_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_access_cm2_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_access_cm2_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm2_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm2_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm2_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_cm2_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm2_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_cm2_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cm2_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_cm3_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm3_tbl_match_spec_t& match_spec)
{
  send_access_cm3_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_access_cm3_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_access_cm3_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm3_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm3_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm3_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_cm3_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm3_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_cm3_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cm3_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_cm4_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm4_tbl_match_spec_t& match_spec)
{
  send_access_cm4_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_access_cm4_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_access_cm4_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm4_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm4_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm4_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_cm4_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm4_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_cm4_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cm4_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_deleted_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_deleted_tbl_match_spec_t& match_spec)
{
  send_access_deleted_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_access_deleted_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_access_deleted_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_deleted_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_deleted_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_deleted_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_deleted_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_deleted_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_deleted_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_deleted_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_latest_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_latest_tbl_match_spec_t& match_spec)
{
  send_access_latest_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_access_latest_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_access_latest_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_latest_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_latest_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_latest_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_latest_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_latest_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_latest_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_latest_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_savedseq_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_savedseq_tbl_match_spec_t& match_spec)
{
  send_access_savedseq_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_access_savedseq_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_access_savedseq_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_savedseq_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_savedseq_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_savedseq_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_savedseq_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_savedseq_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_savedseq_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_savedseq_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_seq_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_seq_tbl_match_spec_t& match_spec)
{
  send_access_seq_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_access_seq_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_access_seq_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_seq_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_seq_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_seq_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_seq_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_seq_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_seq_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_seq_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_validvalue_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_validvalue_tbl_match_spec_t& match_spec)
{
  send_access_validvalue_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_access_validvalue_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_access_validvalue_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_validvalue_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_validvalue_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_validvalue_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_validvalue_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_validvalue_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_validvalue_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_validvalue_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::add_and_remove_value_header_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec, priority);
  return recv_add_and_remove_value_header_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_add_and_remove_value_header_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_add_and_remove_value_header_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "add_and_remove_value_header_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::cache_lookup_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_cache_lookup_tbl_match_spec_t& match_spec)
{
  send_cache_lookup_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_cache_lookup_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_cache_lookup_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_cache_lookup_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("cache_lookup_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_cache_lookup_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_cache_lookup_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("cache_lookup_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_cache_lookup_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "cache_lookup_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::drop_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_drop_tbl_match_spec_t& match_spec)
{
  send_drop_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_drop_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_drop_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_drop_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("drop_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_drop_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_drop_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("drop_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_drop_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "drop_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::eg_port_forward_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  send_eg_port_forward_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_eg_port_forward_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_eg_port_forward_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_eg_port_forward_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_eg_port_forward_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::hash_for_cm1_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm1_tbl_match_spec_t& match_spec)
{
  send_hash_for_cm1_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_hash_for_cm1_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_hash_for_cm1_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm1_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm1_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_hash_for_cm1_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm1_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_hash_for_cm1_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_cm1_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::hash_for_cm2_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm2_tbl_match_spec_t& match_spec)
{
  send_hash_for_cm2_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_hash_for_cm2_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_hash_for_cm2_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm2_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm2_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm2_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_hash_for_cm2_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm2_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_hash_for_cm2_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_cm2_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::hash_for_cm3_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm3_tbl_match_spec_t& match_spec)
{
  send_hash_for_cm3_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_hash_for_cm3_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_hash_for_cm3_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm3_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm3_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm3_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_hash_for_cm3_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm3_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_hash_for_cm3_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_cm3_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::hash_for_cm4_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm4_tbl_match_spec_t& match_spec)
{
  send_hash_for_cm4_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_hash_for_cm4_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_hash_for_cm4_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm4_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm4_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm4_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_hash_for_cm4_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm4_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_hash_for_cm4_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_cm4_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::hash_for_partition_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_partition_tbl_match_spec_t& match_spec)
{
  send_hash_for_partition_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_hash_for_partition_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_hash_for_partition_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_partition_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_partition_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_partition_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_hash_for_partition_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_partition_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_hash_for_partition_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_partition_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::hash_for_seq_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_seq_tbl_match_spec_t& match_spec)
{
  send_hash_for_seq_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_hash_for_seq_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_hash_for_seq_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_seq_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_seq_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_seq_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_hash_for_seq_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_seq_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_hash_for_seq_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_seq_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::hash_partition_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_partition_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_hash_partition_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec, priority);
  return recv_hash_partition_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_hash_partition_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_partition_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_partition_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_partition_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_hash_partition_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_partition_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_hash_partition_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_partition_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::ig_port_forward_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ig_port_forward_tbl_match_spec_t& match_spec)
{
  send_ig_port_forward_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_ig_port_forward_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_ig_port_forward_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ig_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ig_port_forward_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ig_port_forward_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_ig_port_forward_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ig_port_forward_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_ig_port_forward_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "ig_port_forward_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::ipv4_forward_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ipv4_forward_tbl_match_spec_t& match_spec)
{
  send_ipv4_forward_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_ipv4_forward_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_ipv4_forward_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ipv4_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ipv4_forward_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ipv4_forward_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_ipv4_forward_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ipv4_forward_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_ipv4_forward_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "ipv4_forward_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::is_hot_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_is_hot_tbl_match_spec_t& match_spec)
{
  send_is_hot_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_is_hot_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_is_hot_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_is_hot_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("is_hot_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_is_hot_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_is_hot_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("is_hot_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_is_hot_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "is_hot_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::l2l3_forward_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_l2l3_forward_tbl_match_spec_t& match_spec)
{
  send_l2l3_forward_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_l2l3_forward_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_l2l3_forward_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_l2l3_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("l2l3_forward_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_l2l3_forward_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_l2l3_forward_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("l2l3_forward_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_l2l3_forward_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "l2l3_forward_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::lastclone_lastscansplit_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_lastclone_lastscansplit_tbl_match_spec_t& match_spec)
{
  send_lastclone_lastscansplit_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_lastclone_lastscansplit_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_lastclone_lastscansplit_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_lastclone_lastscansplit_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("lastclone_lastscansplit_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_lastclone_lastscansplit_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_lastclone_lastscansplit_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("lastclone_lastscansplit_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_lastclone_lastscansplit_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "lastclone_lastscansplit_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::need_recirculate_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_need_recirculate_tbl_match_spec_t& match_spec)
{
  send_need_recirculate_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_need_recirculate_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_need_recirculate_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_need_recirculate_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("need_recirculate_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_need_recirculate_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_need_recirculate_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("need_recirculate_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_need_recirculate_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "need_recirculate_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::prepare_for_cachehit_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_prepare_for_cachehit_tbl_match_spec_t& match_spec)
{
  send_prepare_for_cachehit_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_prepare_for_cachehit_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_prepare_for_cachehit_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_prepare_for_cachehit_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("prepare_for_cachehit_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_prepare_for_cachehit_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_prepare_for_cachehit_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("prepare_for_cachehit_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_prepare_for_cachehit_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "prepare_for_cachehit_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::recirculate_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_recirculate_tbl_match_spec_t& match_spec)
{
  send_recirculate_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_recirculate_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_recirculate_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_recirculate_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("recirculate_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_recirculate_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_recirculate_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("recirculate_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_recirculate_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "recirculate_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::sample_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_sample_tbl_match_spec_t& match_spec)
{
  send_sample_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_sample_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_sample_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_sample_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sample_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_sample_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_sample_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sample_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_sample_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sample_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::save_client_udpport_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_save_client_udpport_tbl_match_spec_t& match_spec)
{
  send_save_client_udpport_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_save_client_udpport_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_save_client_udpport_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_save_client_udpport_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("save_client_udpport_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_save_client_udpport_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_save_client_udpport_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("save_client_udpport_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_save_client_udpport_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "save_client_udpport_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::snapshot_flag_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_snapshot_flag_tbl_match_spec_t& match_spec)
{
  send_snapshot_flag_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_snapshot_flag_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_snapshot_flag_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_snapshot_flag_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("snapshot_flag_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_snapshot_flag_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_snapshot_flag_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("snapshot_flag_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_snapshot_flag_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "snapshot_flag_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_ipmac_srcport_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_ipmac_srcport_tbl_match_spec_t& match_spec)
{
  send_update_ipmac_srcport_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_update_ipmac_srcport_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_ipmac_srcport_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_ipmac_srcport_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_ipmac_srcport_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_ipmac_srcport_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_ipmac_srcport_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_ipmac_srcport_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_ipmac_srcport_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_ipmac_srcport_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_pktlen_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_pktlen_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_update_pktlen_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec, priority);
  return recv_update_pktlen_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_pktlen_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_pktlen_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_pktlen_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_pktlen_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_pktlen_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_pktlen_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_pktlen_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_pktlen_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi10_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi10_tbl_match_spec_t& match_spec)
{
  send_update_valhi10_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi10_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_valhi10_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi10_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi10_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi10_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi10_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi10_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi10_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi10_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi11_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi11_tbl_match_spec_t& match_spec)
{
  send_update_valhi11_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi11_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_valhi11_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi11_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi11_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi11_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi11_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi11_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi11_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi11_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi12_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi12_tbl_match_spec_t& match_spec)
{
  send_update_valhi12_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi12_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_valhi12_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi12_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi12_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi12_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi12_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi12_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi12_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi12_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi13_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi13_tbl_match_spec_t& match_spec)
{
  send_update_valhi13_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi13_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_valhi13_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi13_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi13_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi13_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi13_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi13_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi13_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi13_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi14_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi14_tbl_match_spec_t& match_spec)
{
  send_update_valhi14_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi14_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_valhi14_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi14_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi14_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi14_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi14_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi14_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi14_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi14_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi15_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi15_tbl_match_spec_t& match_spec)
{
  send_update_valhi15_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi15_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_valhi15_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi15_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi15_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi15_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi15_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi15_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi15_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi15_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi16_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi16_tbl_match_spec_t& match_spec)
{
  send_update_valhi16_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi16_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_valhi16_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi16_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi16_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi16_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi16_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi16_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi16_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi16_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi1_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi1_tbl_match_spec_t& match_spec)
{
  send_update_valhi1_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi1_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_valhi1_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi1_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi1_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi1_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi1_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi1_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi1_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi2_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi2_tbl_match_spec_t& match_spec)
{
  send_update_valhi2_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi2_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_valhi2_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi2_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi2_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi2_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi2_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi2_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi2_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi2_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi3_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi3_tbl_match_spec_t& match_spec)
{
  send_update_valhi3_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi3_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_valhi3_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi3_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi3_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi3_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi3_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi3_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi3_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi3_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi4_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi4_tbl_match_spec_t& match_spec)
{
  send_update_valhi4_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi4_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_valhi4_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi4_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi4_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi4_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi4_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi4_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi4_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi4_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi5_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi5_tbl_match_spec_t& match_spec)
{
  send_update_valhi5_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi5_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_valhi5_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi5_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi5_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi5_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi5_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi5_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi5_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi5_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi6_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi6_tbl_match_spec_t& match_spec)
{
  send_update_valhi6_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi6_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_valhi6_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi6_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi6_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi6_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi6_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi6_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi6_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi6_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi7_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi7_tbl_match_spec_t& match_spec)
{
  send_update_valhi7_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi7_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_valhi7_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi7_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi7_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi7_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi7_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi7_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi7_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi7_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi8_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi8_tbl_match_spec_t& match_spec)
{
  send_update_valhi8_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi8_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_valhi8_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi8_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi8_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi8_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi8_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi8_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi8_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi8_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi9_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi9_tbl_match_spec_t& match_spec)
{
  send_update_valhi9_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi9_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_valhi9_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi9_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi9_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi9_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi9_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi9_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi9_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi9_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallen_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallen_tbl_match_spec_t& match_spec)
{
  send_update_vallen_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallen_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_vallen_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallen_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallen_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallen_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallen_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallen_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallen_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallen_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo10_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo10_tbl_match_spec_t& match_spec)
{
  send_update_vallo10_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo10_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_vallo10_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo10_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo10_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo10_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo10_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo10_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo10_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo10_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo11_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo11_tbl_match_spec_t& match_spec)
{
  send_update_vallo11_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo11_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_vallo11_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo11_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo11_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo11_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo11_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo11_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo11_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo11_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo12_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo12_tbl_match_spec_t& match_spec)
{
  send_update_vallo12_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo12_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_vallo12_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo12_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo12_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo12_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo12_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo12_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo12_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo12_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo13_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo13_tbl_match_spec_t& match_spec)
{
  send_update_vallo13_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo13_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_vallo13_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo13_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo13_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo13_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo13_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo13_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo13_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo13_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo14_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo14_tbl_match_spec_t& match_spec)
{
  send_update_vallo14_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo14_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_vallo14_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo14_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo14_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo14_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo14_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo14_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo14_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo14_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo15_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo15_tbl_match_spec_t& match_spec)
{
  send_update_vallo15_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo15_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_vallo15_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo15_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo15_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo15_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo15_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo15_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo15_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo15_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo16_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo16_tbl_match_spec_t& match_spec)
{
  send_update_vallo16_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo16_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_vallo16_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo16_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo16_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo16_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo16_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo16_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo16_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo16_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo1_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo1_tbl_match_spec_t& match_spec)
{
  send_update_vallo1_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo1_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_vallo1_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo1_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo1_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo1_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo1_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo1_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo1_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo2_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo2_tbl_match_spec_t& match_spec)
{
  send_update_vallo2_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo2_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_vallo2_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo2_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo2_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo2_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo2_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo2_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo2_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo2_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo3_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo3_tbl_match_spec_t& match_spec)
{
  send_update_vallo3_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo3_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_vallo3_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo3_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo3_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo3_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo3_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo3_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo3_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo3_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo4_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo4_tbl_match_spec_t& match_spec)
{
  send_update_vallo4_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo4_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_vallo4_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo4_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo4_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo4_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo4_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo4_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo4_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo4_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo5_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo5_tbl_match_spec_t& match_spec)
{
  send_update_vallo5_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo5_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_vallo5_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo5_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo5_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo5_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo5_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo5_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo5_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo5_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo6_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo6_tbl_match_spec_t& match_spec)
{
  send_update_vallo6_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo6_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_vallo6_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo6_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo6_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo6_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo6_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo6_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo6_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo6_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo7_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo7_tbl_match_spec_t& match_spec)
{
  send_update_vallo7_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo7_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_vallo7_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo7_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo7_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo7_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo7_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo7_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo7_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo7_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo8_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo8_tbl_match_spec_t& match_spec)
{
  send_update_vallo8_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo8_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_vallo8_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo8_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo8_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo8_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo8_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo8_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo8_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo8_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo9_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo9_tbl_match_spec_t& match_spec)
{
  send_update_vallo9_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo9_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_vallo9_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo9_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo9_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo9_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo9_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo9_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo9_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo9_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_cache_frequency_tbl_table_add_with_get_cache_frequency(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cache_frequency_tbl_match_spec_t& match_spec)
{
  send_access_cache_frequency_tbl_table_add_with_get_cache_frequency(sess_hdl, dev_tgt, match_spec);
  return recv_access_cache_frequency_tbl_table_add_with_get_cache_frequency();
}

void netbufferv4Client::send_access_cache_frequency_tbl_table_add_with_get_cache_frequency(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cache_frequency_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cache_frequency_tbl_table_add_with_get_cache_frequency", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cache_frequency_tbl_table_add_with_get_cache_frequency_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_cache_frequency_tbl_table_add_with_get_cache_frequency()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cache_frequency_tbl_table_add_with_get_cache_frequency") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_cache_frequency_tbl_table_add_with_get_cache_frequency_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cache_frequency_tbl_table_add_with_get_cache_frequency failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_cache_frequency_tbl_table_add_with_update_cache_frequency(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cache_frequency_tbl_match_spec_t& match_spec)
{
  send_access_cache_frequency_tbl_table_add_with_update_cache_frequency(sess_hdl, dev_tgt, match_spec);
  return recv_access_cache_frequency_tbl_table_add_with_update_cache_frequency();
}

void netbufferv4Client::send_access_cache_frequency_tbl_table_add_with_update_cache_frequency(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cache_frequency_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cache_frequency_tbl_table_add_with_update_cache_frequency", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cache_frequency_tbl_table_add_with_update_cache_frequency_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_cache_frequency_tbl_table_add_with_update_cache_frequency()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cache_frequency_tbl_table_add_with_update_cache_frequency") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_cache_frequency_tbl_table_add_with_update_cache_frequency_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cache_frequency_tbl_table_add_with_update_cache_frequency failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_cache_frequency_tbl_table_add_with_reset_cache_frequency(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cache_frequency_tbl_match_spec_t& match_spec)
{
  send_access_cache_frequency_tbl_table_add_with_reset_cache_frequency(sess_hdl, dev_tgt, match_spec);
  return recv_access_cache_frequency_tbl_table_add_with_reset_cache_frequency();
}

void netbufferv4Client::send_access_cache_frequency_tbl_table_add_with_reset_cache_frequency(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cache_frequency_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cache_frequency_tbl_table_add_with_reset_cache_frequency", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cache_frequency_tbl_table_add_with_reset_cache_frequency_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_cache_frequency_tbl_table_add_with_reset_cache_frequency()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cache_frequency_tbl_table_add_with_reset_cache_frequency") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_cache_frequency_tbl_table_add_with_reset_cache_frequency_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cache_frequency_tbl_table_add_with_reset_cache_frequency failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_cache_frequency_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cache_frequency_tbl_match_spec_t& match_spec)
{
  send_access_cache_frequency_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_access_cache_frequency_tbl_table_add_with_nop();
}

void netbufferv4Client::send_access_cache_frequency_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cache_frequency_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cache_frequency_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cache_frequency_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_cache_frequency_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cache_frequency_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_cache_frequency_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cache_frequency_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_case1_tbl_table_add_with_try_case1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_case1_tbl_match_spec_t& match_spec)
{
  send_access_case1_tbl_table_add_with_try_case1(sess_hdl, dev_tgt, match_spec);
  return recv_access_case1_tbl_table_add_with_try_case1();
}

void netbufferv4Client::send_access_case1_tbl_table_add_with_try_case1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_case1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_case1_tbl_table_add_with_try_case1", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_case1_tbl_table_add_with_try_case1_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_case1_tbl_table_add_with_try_case1()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_case1_tbl_table_add_with_try_case1") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_case1_tbl_table_add_with_try_case1_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_case1_tbl_table_add_with_try_case1 failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_case1_tbl_table_add_with_read_case1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_case1_tbl_match_spec_t& match_spec)
{
  send_access_case1_tbl_table_add_with_read_case1(sess_hdl, dev_tgt, match_spec);
  return recv_access_case1_tbl_table_add_with_read_case1();
}

void netbufferv4Client::send_access_case1_tbl_table_add_with_read_case1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_case1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_case1_tbl_table_add_with_read_case1", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_case1_tbl_table_add_with_read_case1_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_case1_tbl_table_add_with_read_case1()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_case1_tbl_table_add_with_read_case1") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_case1_tbl_table_add_with_read_case1_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_case1_tbl_table_add_with_read_case1 failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_case1_tbl_table_add_with_reset_is_case1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_case1_tbl_match_spec_t& match_spec)
{
  send_access_case1_tbl_table_add_with_reset_is_case1(sess_hdl, dev_tgt, match_spec);
  return recv_access_case1_tbl_table_add_with_reset_is_case1();
}

void netbufferv4Client::send_access_case1_tbl_table_add_with_reset_is_case1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_case1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_case1_tbl_table_add_with_reset_is_case1", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_case1_tbl_table_add_with_reset_is_case1_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_case1_tbl_table_add_with_reset_is_case1()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_case1_tbl_table_add_with_reset_is_case1") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_case1_tbl_table_add_with_reset_is_case1_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_case1_tbl_table_add_with_reset_is_case1 failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_cm1_tbl_table_add_with_update_cm1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm1_tbl_match_spec_t& match_spec)
{
  send_access_cm1_tbl_table_add_with_update_cm1(sess_hdl, dev_tgt, match_spec);
  return recv_access_cm1_tbl_table_add_with_update_cm1();
}

void netbufferv4Client::send_access_cm1_tbl_table_add_with_update_cm1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm1_tbl_table_add_with_update_cm1", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm1_tbl_table_add_with_update_cm1_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_cm1_tbl_table_add_with_update_cm1()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm1_tbl_table_add_with_update_cm1") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_cm1_tbl_table_add_with_update_cm1_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cm1_tbl_table_add_with_update_cm1 failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_cm1_tbl_table_add_with_initialize_cm1_predicate(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm1_tbl_match_spec_t& match_spec)
{
  send_access_cm1_tbl_table_add_with_initialize_cm1_predicate(sess_hdl, dev_tgt, match_spec);
  return recv_access_cm1_tbl_table_add_with_initialize_cm1_predicate();
}

void netbufferv4Client::send_access_cm1_tbl_table_add_with_initialize_cm1_predicate(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm1_tbl_table_add_with_initialize_cm1_predicate", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm1_tbl_table_add_with_initialize_cm1_predicate_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_cm1_tbl_table_add_with_initialize_cm1_predicate()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm1_tbl_table_add_with_initialize_cm1_predicate") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_cm1_tbl_table_add_with_initialize_cm1_predicate_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cm1_tbl_table_add_with_initialize_cm1_predicate failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_cm2_tbl_table_add_with_update_cm2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm2_tbl_match_spec_t& match_spec)
{
  send_access_cm2_tbl_table_add_with_update_cm2(sess_hdl, dev_tgt, match_spec);
  return recv_access_cm2_tbl_table_add_with_update_cm2();
}

void netbufferv4Client::send_access_cm2_tbl_table_add_with_update_cm2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm2_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm2_tbl_table_add_with_update_cm2", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm2_tbl_table_add_with_update_cm2_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_cm2_tbl_table_add_with_update_cm2()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm2_tbl_table_add_with_update_cm2") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_cm2_tbl_table_add_with_update_cm2_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cm2_tbl_table_add_with_update_cm2 failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_cm2_tbl_table_add_with_initialize_cm2_predicate(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm2_tbl_match_spec_t& match_spec)
{
  send_access_cm2_tbl_table_add_with_initialize_cm2_predicate(sess_hdl, dev_tgt, match_spec);
  return recv_access_cm2_tbl_table_add_with_initialize_cm2_predicate();
}

void netbufferv4Client::send_access_cm2_tbl_table_add_with_initialize_cm2_predicate(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm2_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm2_tbl_table_add_with_initialize_cm2_predicate", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm2_tbl_table_add_with_initialize_cm2_predicate_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_cm2_tbl_table_add_with_initialize_cm2_predicate()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm2_tbl_table_add_with_initialize_cm2_predicate") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_cm2_tbl_table_add_with_initialize_cm2_predicate_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cm2_tbl_table_add_with_initialize_cm2_predicate failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_cm3_tbl_table_add_with_update_cm3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm3_tbl_match_spec_t& match_spec)
{
  send_access_cm3_tbl_table_add_with_update_cm3(sess_hdl, dev_tgt, match_spec);
  return recv_access_cm3_tbl_table_add_with_update_cm3();
}

void netbufferv4Client::send_access_cm3_tbl_table_add_with_update_cm3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm3_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm3_tbl_table_add_with_update_cm3", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm3_tbl_table_add_with_update_cm3_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_cm3_tbl_table_add_with_update_cm3()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm3_tbl_table_add_with_update_cm3") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_cm3_tbl_table_add_with_update_cm3_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cm3_tbl_table_add_with_update_cm3 failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_cm3_tbl_table_add_with_initialize_cm3_predicate(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm3_tbl_match_spec_t& match_spec)
{
  send_access_cm3_tbl_table_add_with_initialize_cm3_predicate(sess_hdl, dev_tgt, match_spec);
  return recv_access_cm3_tbl_table_add_with_initialize_cm3_predicate();
}

void netbufferv4Client::send_access_cm3_tbl_table_add_with_initialize_cm3_predicate(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm3_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm3_tbl_table_add_with_initialize_cm3_predicate", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm3_tbl_table_add_with_initialize_cm3_predicate_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_cm3_tbl_table_add_with_initialize_cm3_predicate()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm3_tbl_table_add_with_initialize_cm3_predicate") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_cm3_tbl_table_add_with_initialize_cm3_predicate_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cm3_tbl_table_add_with_initialize_cm3_predicate failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_cm4_tbl_table_add_with_update_cm4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm4_tbl_match_spec_t& match_spec)
{
  send_access_cm4_tbl_table_add_with_update_cm4(sess_hdl, dev_tgt, match_spec);
  return recv_access_cm4_tbl_table_add_with_update_cm4();
}

void netbufferv4Client::send_access_cm4_tbl_table_add_with_update_cm4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm4_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm4_tbl_table_add_with_update_cm4", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm4_tbl_table_add_with_update_cm4_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_cm4_tbl_table_add_with_update_cm4()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm4_tbl_table_add_with_update_cm4") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_cm4_tbl_table_add_with_update_cm4_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cm4_tbl_table_add_with_update_cm4 failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_cm4_tbl_table_add_with_initialize_cm4_predicate(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm4_tbl_match_spec_t& match_spec)
{
  send_access_cm4_tbl_table_add_with_initialize_cm4_predicate(sess_hdl, dev_tgt, match_spec);
  return recv_access_cm4_tbl_table_add_with_initialize_cm4_predicate();
}

void netbufferv4Client::send_access_cm4_tbl_table_add_with_initialize_cm4_predicate(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm4_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm4_tbl_table_add_with_initialize_cm4_predicate", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm4_tbl_table_add_with_initialize_cm4_predicate_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_cm4_tbl_table_add_with_initialize_cm4_predicate()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm4_tbl_table_add_with_initialize_cm4_predicate") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_cm4_tbl_table_add_with_initialize_cm4_predicate_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cm4_tbl_table_add_with_initialize_cm4_predicate failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_deleted_tbl_table_add_with_get_deleted(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_deleted_tbl_match_spec_t& match_spec)
{
  send_access_deleted_tbl_table_add_with_get_deleted(sess_hdl, dev_tgt, match_spec);
  return recv_access_deleted_tbl_table_add_with_get_deleted();
}

void netbufferv4Client::send_access_deleted_tbl_table_add_with_get_deleted(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_deleted_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_deleted_tbl_table_add_with_get_deleted", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_deleted_tbl_table_add_with_get_deleted_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_deleted_tbl_table_add_with_get_deleted()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_deleted_tbl_table_add_with_get_deleted") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_deleted_tbl_table_add_with_get_deleted_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_deleted_tbl_table_add_with_get_deleted failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_deleted_tbl_table_add_with_set_and_get_deleted(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_deleted_tbl_match_spec_t& match_spec)
{
  send_access_deleted_tbl_table_add_with_set_and_get_deleted(sess_hdl, dev_tgt, match_spec);
  return recv_access_deleted_tbl_table_add_with_set_and_get_deleted();
}

void netbufferv4Client::send_access_deleted_tbl_table_add_with_set_and_get_deleted(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_deleted_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_deleted_tbl_table_add_with_set_and_get_deleted", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_deleted_tbl_table_add_with_set_and_get_deleted_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_deleted_tbl_table_add_with_set_and_get_deleted()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_deleted_tbl_table_add_with_set_and_get_deleted") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_deleted_tbl_table_add_with_set_and_get_deleted_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_deleted_tbl_table_add_with_set_and_get_deleted failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_deleted_tbl_table_add_with_reset_and_get_deleted(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_deleted_tbl_match_spec_t& match_spec)
{
  send_access_deleted_tbl_table_add_with_reset_and_get_deleted(sess_hdl, dev_tgt, match_spec);
  return recv_access_deleted_tbl_table_add_with_reset_and_get_deleted();
}

void netbufferv4Client::send_access_deleted_tbl_table_add_with_reset_and_get_deleted(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_deleted_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_deleted_tbl_table_add_with_reset_and_get_deleted", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_deleted_tbl_table_add_with_reset_and_get_deleted_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_deleted_tbl_table_add_with_reset_and_get_deleted()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_deleted_tbl_table_add_with_reset_and_get_deleted") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_deleted_tbl_table_add_with_reset_and_get_deleted_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_deleted_tbl_table_add_with_reset_and_get_deleted failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_deleted_tbl_table_add_with_reset_is_deleted(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_deleted_tbl_match_spec_t& match_spec)
{
  send_access_deleted_tbl_table_add_with_reset_is_deleted(sess_hdl, dev_tgt, match_spec);
  return recv_access_deleted_tbl_table_add_with_reset_is_deleted();
}

void netbufferv4Client::send_access_deleted_tbl_table_add_with_reset_is_deleted(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_deleted_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_deleted_tbl_table_add_with_reset_is_deleted", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_deleted_tbl_table_add_with_reset_is_deleted_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_deleted_tbl_table_add_with_reset_is_deleted()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_deleted_tbl_table_add_with_reset_is_deleted") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_deleted_tbl_table_add_with_reset_is_deleted_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_deleted_tbl_table_add_with_reset_is_deleted failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_latest_tbl_table_add_with_get_latest(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_latest_tbl_match_spec_t& match_spec)
{
  send_access_latest_tbl_table_add_with_get_latest(sess_hdl, dev_tgt, match_spec);
  return recv_access_latest_tbl_table_add_with_get_latest();
}

void netbufferv4Client::send_access_latest_tbl_table_add_with_get_latest(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_latest_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_latest_tbl_table_add_with_get_latest", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_latest_tbl_table_add_with_get_latest_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_latest_tbl_table_add_with_get_latest()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_latest_tbl_table_add_with_get_latest") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_latest_tbl_table_add_with_get_latest_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_latest_tbl_table_add_with_get_latest failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_latest_tbl_table_add_with_set_and_get_latest(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_latest_tbl_match_spec_t& match_spec)
{
  send_access_latest_tbl_table_add_with_set_and_get_latest(sess_hdl, dev_tgt, match_spec);
  return recv_access_latest_tbl_table_add_with_set_and_get_latest();
}

void netbufferv4Client::send_access_latest_tbl_table_add_with_set_and_get_latest(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_latest_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_latest_tbl_table_add_with_set_and_get_latest", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_latest_tbl_table_add_with_set_and_get_latest_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_latest_tbl_table_add_with_set_and_get_latest()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_latest_tbl_table_add_with_set_and_get_latest") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_latest_tbl_table_add_with_set_and_get_latest_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_latest_tbl_table_add_with_set_and_get_latest failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_latest_tbl_table_add_with_reset_and_get_latest(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_latest_tbl_match_spec_t& match_spec)
{
  send_access_latest_tbl_table_add_with_reset_and_get_latest(sess_hdl, dev_tgt, match_spec);
  return recv_access_latest_tbl_table_add_with_reset_and_get_latest();
}

void netbufferv4Client::send_access_latest_tbl_table_add_with_reset_and_get_latest(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_latest_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_latest_tbl_table_add_with_reset_and_get_latest", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_latest_tbl_table_add_with_reset_and_get_latest_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_latest_tbl_table_add_with_reset_and_get_latest()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_latest_tbl_table_add_with_reset_and_get_latest") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_latest_tbl_table_add_with_reset_and_get_latest_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_latest_tbl_table_add_with_reset_and_get_latest failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_latest_tbl_table_add_with_reset_is_latest(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_latest_tbl_match_spec_t& match_spec)
{
  send_access_latest_tbl_table_add_with_reset_is_latest(sess_hdl, dev_tgt, match_spec);
  return recv_access_latest_tbl_table_add_with_reset_is_latest();
}

void netbufferv4Client::send_access_latest_tbl_table_add_with_reset_is_latest(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_latest_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_latest_tbl_table_add_with_reset_is_latest", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_latest_tbl_table_add_with_reset_is_latest_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_latest_tbl_table_add_with_reset_is_latest()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_latest_tbl_table_add_with_reset_is_latest") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_latest_tbl_table_add_with_reset_is_latest_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_latest_tbl_table_add_with_reset_is_latest failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_savedseq_tbl_table_add_with_get_savedseq(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_savedseq_tbl_match_spec_t& match_spec)
{
  send_access_savedseq_tbl_table_add_with_get_savedseq(sess_hdl, dev_tgt, match_spec);
  return recv_access_savedseq_tbl_table_add_with_get_savedseq();
}

void netbufferv4Client::send_access_savedseq_tbl_table_add_with_get_savedseq(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_savedseq_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_savedseq_tbl_table_add_with_get_savedseq", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_savedseq_tbl_table_add_with_get_savedseq_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_savedseq_tbl_table_add_with_get_savedseq()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_savedseq_tbl_table_add_with_get_savedseq") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_savedseq_tbl_table_add_with_get_savedseq_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_savedseq_tbl_table_add_with_get_savedseq failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_savedseq_tbl_table_add_with_set_and_get_savedseq(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_savedseq_tbl_match_spec_t& match_spec)
{
  send_access_savedseq_tbl_table_add_with_set_and_get_savedseq(sess_hdl, dev_tgt, match_spec);
  return recv_access_savedseq_tbl_table_add_with_set_and_get_savedseq();
}

void netbufferv4Client::send_access_savedseq_tbl_table_add_with_set_and_get_savedseq(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_savedseq_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_savedseq_tbl_table_add_with_set_and_get_savedseq", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_savedseq_tbl_table_add_with_set_and_get_savedseq_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_savedseq_tbl_table_add_with_set_and_get_savedseq()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_savedseq_tbl_table_add_with_set_and_get_savedseq") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_savedseq_tbl_table_add_with_set_and_get_savedseq_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_savedseq_tbl_table_add_with_set_and_get_savedseq failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_savedseq_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_savedseq_tbl_match_spec_t& match_spec)
{
  send_access_savedseq_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_access_savedseq_tbl_table_add_with_nop();
}

void netbufferv4Client::send_access_savedseq_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_savedseq_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_savedseq_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_savedseq_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_savedseq_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_savedseq_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_savedseq_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_savedseq_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_seq_tbl_table_add_with_assign_seq(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_seq_tbl_match_spec_t& match_spec)
{
  send_access_seq_tbl_table_add_with_assign_seq(sess_hdl, dev_tgt, match_spec);
  return recv_access_seq_tbl_table_add_with_assign_seq();
}

void netbufferv4Client::send_access_seq_tbl_table_add_with_assign_seq(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_seq_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_seq_tbl_table_add_with_assign_seq", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_seq_tbl_table_add_with_assign_seq_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_seq_tbl_table_add_with_assign_seq()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_seq_tbl_table_add_with_assign_seq") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_seq_tbl_table_add_with_assign_seq_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_seq_tbl_table_add_with_assign_seq failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_seq_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_seq_tbl_match_spec_t& match_spec)
{
  send_access_seq_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_access_seq_tbl_table_add_with_nop();
}

void netbufferv4Client::send_access_seq_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_seq_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_seq_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_seq_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_seq_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_seq_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_seq_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_seq_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_validvalue_tbl_table_add_with_get_validvalue(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_validvalue_tbl_match_spec_t& match_spec)
{
  send_access_validvalue_tbl_table_add_with_get_validvalue(sess_hdl, dev_tgt, match_spec);
  return recv_access_validvalue_tbl_table_add_with_get_validvalue();
}

void netbufferv4Client::send_access_validvalue_tbl_table_add_with_get_validvalue(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_validvalue_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_validvalue_tbl_table_add_with_get_validvalue", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_validvalue_tbl_table_add_with_get_validvalue_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_validvalue_tbl_table_add_with_get_validvalue()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_validvalue_tbl_table_add_with_get_validvalue") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_validvalue_tbl_table_add_with_get_validvalue_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_validvalue_tbl_table_add_with_get_validvalue failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_validvalue_tbl_table_add_with_set_validvalue(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_validvalue_tbl_match_spec_t& match_spec)
{
  send_access_validvalue_tbl_table_add_with_set_validvalue(sess_hdl, dev_tgt, match_spec);
  return recv_access_validvalue_tbl_table_add_with_set_validvalue();
}

void netbufferv4Client::send_access_validvalue_tbl_table_add_with_set_validvalue(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_validvalue_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_validvalue_tbl_table_add_with_set_validvalue", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_validvalue_tbl_table_add_with_set_validvalue_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_validvalue_tbl_table_add_with_set_validvalue()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_validvalue_tbl_table_add_with_set_validvalue") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_validvalue_tbl_table_add_with_set_validvalue_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_validvalue_tbl_table_add_with_set_validvalue failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_validvalue_tbl_table_add_with_reset_meta_validvalue(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_validvalue_tbl_match_spec_t& match_spec)
{
  send_access_validvalue_tbl_table_add_with_reset_meta_validvalue(sess_hdl, dev_tgt, match_spec);
  return recv_access_validvalue_tbl_table_add_with_reset_meta_validvalue();
}

void netbufferv4Client::send_access_validvalue_tbl_table_add_with_reset_meta_validvalue(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_validvalue_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_validvalue_tbl_table_add_with_reset_meta_validvalue", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_validvalue_tbl_table_add_with_reset_meta_validvalue_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_validvalue_tbl_table_add_with_reset_meta_validvalue()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_validvalue_tbl_table_add_with_reset_meta_validvalue") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_validvalue_tbl_table_add_with_reset_meta_validvalue_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_validvalue_tbl_table_add_with_reset_meta_validvalue failed: unknown result");
}

EntryHandle_t netbufferv4Client::add_and_remove_value_header_tbl_table_add_with_add_only_vallen(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_add_with_add_only_vallen(sess_hdl, dev_tgt, match_spec, priority);
  return recv_add_and_remove_value_header_tbl_table_add_with_add_only_vallen();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_add_with_add_only_vallen(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_add_only_vallen", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_only_vallen_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_add_and_remove_value_header_tbl_table_add_with_add_only_vallen()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_add_with_add_only_vallen") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_only_vallen_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "add_and_remove_value_header_tbl_table_add_with_add_only_vallen failed: unknown result");
}

EntryHandle_t netbufferv4Client::add_and_remove_value_header_tbl_table_add_with_add_to_val1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_add_with_add_to_val1(sess_hdl, dev_tgt, match_spec, priority);
  return recv_add_and_remove_value_header_tbl_table_add_with_add_to_val1();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_add_with_add_to_val1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_add_to_val1", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val1_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_add_and_remove_value_header_tbl_table_add_with_add_to_val1()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_add_with_add_to_val1") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val1_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "add_and_remove_value_header_tbl_table_add_with_add_to_val1 failed: unknown result");
}

EntryHandle_t netbufferv4Client::add_and_remove_value_header_tbl_table_add_with_add_to_val2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_add_with_add_to_val2(sess_hdl, dev_tgt, match_spec, priority);
  return recv_add_and_remove_value_header_tbl_table_add_with_add_to_val2();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_add_with_add_to_val2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_add_to_val2", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val2_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_add_and_remove_value_header_tbl_table_add_with_add_to_val2()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_add_with_add_to_val2") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val2_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "add_and_remove_value_header_tbl_table_add_with_add_to_val2 failed: unknown result");
}

EntryHandle_t netbufferv4Client::add_and_remove_value_header_tbl_table_add_with_add_to_val3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_add_with_add_to_val3(sess_hdl, dev_tgt, match_spec, priority);
  return recv_add_and_remove_value_header_tbl_table_add_with_add_to_val3();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_add_with_add_to_val3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_add_to_val3", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val3_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_add_and_remove_value_header_tbl_table_add_with_add_to_val3()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_add_with_add_to_val3") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val3_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "add_and_remove_value_header_tbl_table_add_with_add_to_val3 failed: unknown result");
}

EntryHandle_t netbufferv4Client::add_and_remove_value_header_tbl_table_add_with_add_to_val4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_add_with_add_to_val4(sess_hdl, dev_tgt, match_spec, priority);
  return recv_add_and_remove_value_header_tbl_table_add_with_add_to_val4();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_add_with_add_to_val4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_add_to_val4", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val4_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_add_and_remove_value_header_tbl_table_add_with_add_to_val4()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_add_with_add_to_val4") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val4_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "add_and_remove_value_header_tbl_table_add_with_add_to_val4 failed: unknown result");
}

EntryHandle_t netbufferv4Client::add_and_remove_value_header_tbl_table_add_with_add_to_val5(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_add_with_add_to_val5(sess_hdl, dev_tgt, match_spec, priority);
  return recv_add_and_remove_value_header_tbl_table_add_with_add_to_val5();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_add_with_add_to_val5(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_add_to_val5", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val5_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_add_and_remove_value_header_tbl_table_add_with_add_to_val5()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_add_with_add_to_val5") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val5_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "add_and_remove_value_header_tbl_table_add_with_add_to_val5 failed: unknown result");
}

EntryHandle_t netbufferv4Client::add_and_remove_value_header_tbl_table_add_with_add_to_val6(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_add_with_add_to_val6(sess_hdl, dev_tgt, match_spec, priority);
  return recv_add_and_remove_value_header_tbl_table_add_with_add_to_val6();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_add_with_add_to_val6(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_add_to_val6", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val6_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_add_and_remove_value_header_tbl_table_add_with_add_to_val6()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_add_with_add_to_val6") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val6_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "add_and_remove_value_header_tbl_table_add_with_add_to_val6 failed: unknown result");
}

EntryHandle_t netbufferv4Client::add_and_remove_value_header_tbl_table_add_with_add_to_val7(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_add_with_add_to_val7(sess_hdl, dev_tgt, match_spec, priority);
  return recv_add_and_remove_value_header_tbl_table_add_with_add_to_val7();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_add_with_add_to_val7(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_add_to_val7", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val7_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_add_and_remove_value_header_tbl_table_add_with_add_to_val7()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_add_with_add_to_val7") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val7_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "add_and_remove_value_header_tbl_table_add_with_add_to_val7 failed: unknown result");
}

EntryHandle_t netbufferv4Client::add_and_remove_value_header_tbl_table_add_with_add_to_val8(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_add_with_add_to_val8(sess_hdl, dev_tgt, match_spec, priority);
  return recv_add_and_remove_value_header_tbl_table_add_with_add_to_val8();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_add_with_add_to_val8(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_add_to_val8", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val8_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_add_and_remove_value_header_tbl_table_add_with_add_to_val8()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_add_with_add_to_val8") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val8_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "add_and_remove_value_header_tbl_table_add_with_add_to_val8 failed: unknown result");
}

EntryHandle_t netbufferv4Client::add_and_remove_value_header_tbl_table_add_with_add_to_val9(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_add_with_add_to_val9(sess_hdl, dev_tgt, match_spec, priority);
  return recv_add_and_remove_value_header_tbl_table_add_with_add_to_val9();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_add_with_add_to_val9(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_add_to_val9", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val9_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_add_and_remove_value_header_tbl_table_add_with_add_to_val9()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_add_with_add_to_val9") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val9_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "add_and_remove_value_header_tbl_table_add_with_add_to_val9 failed: unknown result");
}

EntryHandle_t netbufferv4Client::add_and_remove_value_header_tbl_table_add_with_add_to_val10(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_add_with_add_to_val10(sess_hdl, dev_tgt, match_spec, priority);
  return recv_add_and_remove_value_header_tbl_table_add_with_add_to_val10();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_add_with_add_to_val10(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_add_to_val10", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val10_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_add_and_remove_value_header_tbl_table_add_with_add_to_val10()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_add_with_add_to_val10") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val10_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "add_and_remove_value_header_tbl_table_add_with_add_to_val10 failed: unknown result");
}

EntryHandle_t netbufferv4Client::add_and_remove_value_header_tbl_table_add_with_add_to_val11(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_add_with_add_to_val11(sess_hdl, dev_tgt, match_spec, priority);
  return recv_add_and_remove_value_header_tbl_table_add_with_add_to_val11();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_add_with_add_to_val11(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_add_to_val11", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val11_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_add_and_remove_value_header_tbl_table_add_with_add_to_val11()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_add_with_add_to_val11") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val11_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "add_and_remove_value_header_tbl_table_add_with_add_to_val11 failed: unknown result");
}

EntryHandle_t netbufferv4Client::add_and_remove_value_header_tbl_table_add_with_add_to_val12(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_add_with_add_to_val12(sess_hdl, dev_tgt, match_spec, priority);
  return recv_add_and_remove_value_header_tbl_table_add_with_add_to_val12();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_add_with_add_to_val12(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_add_to_val12", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val12_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_add_and_remove_value_header_tbl_table_add_with_add_to_val12()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_add_with_add_to_val12") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val12_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "add_and_remove_value_header_tbl_table_add_with_add_to_val12 failed: unknown result");
}

EntryHandle_t netbufferv4Client::add_and_remove_value_header_tbl_table_add_with_add_to_val13(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_add_with_add_to_val13(sess_hdl, dev_tgt, match_spec, priority);
  return recv_add_and_remove_value_header_tbl_table_add_with_add_to_val13();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_add_with_add_to_val13(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_add_to_val13", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val13_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_add_and_remove_value_header_tbl_table_add_with_add_to_val13()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_add_with_add_to_val13") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val13_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "add_and_remove_value_header_tbl_table_add_with_add_to_val13 failed: unknown result");
}

EntryHandle_t netbufferv4Client::add_and_remove_value_header_tbl_table_add_with_add_to_val14(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_add_with_add_to_val14(sess_hdl, dev_tgt, match_spec, priority);
  return recv_add_and_remove_value_header_tbl_table_add_with_add_to_val14();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_add_with_add_to_val14(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_add_to_val14", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val14_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_add_and_remove_value_header_tbl_table_add_with_add_to_val14()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_add_with_add_to_val14") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val14_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "add_and_remove_value_header_tbl_table_add_with_add_to_val14 failed: unknown result");
}

EntryHandle_t netbufferv4Client::add_and_remove_value_header_tbl_table_add_with_add_to_val15(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_add_with_add_to_val15(sess_hdl, dev_tgt, match_spec, priority);
  return recv_add_and_remove_value_header_tbl_table_add_with_add_to_val15();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_add_with_add_to_val15(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_add_to_val15", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val15_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_add_and_remove_value_header_tbl_table_add_with_add_to_val15()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_add_with_add_to_val15") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val15_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "add_and_remove_value_header_tbl_table_add_with_add_to_val15 failed: unknown result");
}

EntryHandle_t netbufferv4Client::add_and_remove_value_header_tbl_table_add_with_add_to_val16(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_add_with_add_to_val16(sess_hdl, dev_tgt, match_spec, priority);
  return recv_add_and_remove_value_header_tbl_table_add_with_add_to_val16();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_add_with_add_to_val16(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_add_to_val16", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val16_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_add_and_remove_value_header_tbl_table_add_with_add_to_val16()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_add_with_add_to_val16") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val16_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "add_and_remove_value_header_tbl_table_add_with_add_to_val16 failed: unknown result");
}

EntryHandle_t netbufferv4Client::add_and_remove_value_header_tbl_table_add_with_remove_all(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_add_with_remove_all(sess_hdl, dev_tgt, match_spec, priority);
  return recv_add_and_remove_value_header_tbl_table_add_with_remove_all();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_add_with_remove_all(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_remove_all", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_remove_all_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_add_and_remove_value_header_tbl_table_add_with_remove_all()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_add_with_remove_all") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_add_and_remove_value_header_tbl_table_add_with_remove_all_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "add_and_remove_value_header_tbl_table_add_with_remove_all failed: unknown result");
}

EntryHandle_t netbufferv4Client::cache_lookup_tbl_table_add_with_cached_action(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_cache_lookup_tbl_match_spec_t& match_spec, const netbufferv4_cached_action_action_spec_t& action_spec)
{
  send_cache_lookup_tbl_table_add_with_cached_action(sess_hdl, dev_tgt, match_spec, action_spec);
  return recv_cache_lookup_tbl_table_add_with_cached_action();
}

void netbufferv4Client::send_cache_lookup_tbl_table_add_with_cached_action(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_cache_lookup_tbl_match_spec_t& match_spec, const netbufferv4_cached_action_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("cache_lookup_tbl_table_add_with_cached_action", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_cache_lookup_tbl_table_add_with_cached_action_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_cache_lookup_tbl_table_add_with_cached_action()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("cache_lookup_tbl_table_add_with_cached_action") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_cache_lookup_tbl_table_add_with_cached_action_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "cache_lookup_tbl_table_add_with_cached_action failed: unknown result");
}

EntryHandle_t netbufferv4Client::cache_lookup_tbl_table_add_with_uncached_action(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_cache_lookup_tbl_match_spec_t& match_spec)
{
  send_cache_lookup_tbl_table_add_with_uncached_action(sess_hdl, dev_tgt, match_spec);
  return recv_cache_lookup_tbl_table_add_with_uncached_action();
}

void netbufferv4Client::send_cache_lookup_tbl_table_add_with_uncached_action(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_cache_lookup_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("cache_lookup_tbl_table_add_with_uncached_action", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_cache_lookup_tbl_table_add_with_uncached_action_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_cache_lookup_tbl_table_add_with_uncached_action()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("cache_lookup_tbl_table_add_with_uncached_action") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_cache_lookup_tbl_table_add_with_uncached_action_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "cache_lookup_tbl_table_add_with_uncached_action failed: unknown result");
}

EntryHandle_t netbufferv4Client::drop_tbl_table_add_with_drop_getres_latest_seq_inswitch(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_drop_tbl_match_spec_t& match_spec)
{
  send_drop_tbl_table_add_with_drop_getres_latest_seq_inswitch(sess_hdl, dev_tgt, match_spec);
  return recv_drop_tbl_table_add_with_drop_getres_latest_seq_inswitch();
}

void netbufferv4Client::send_drop_tbl_table_add_with_drop_getres_latest_seq_inswitch(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_drop_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("drop_tbl_table_add_with_drop_getres_latest_seq_inswitch", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_drop_tbl_table_add_with_drop_getres_latest_seq_inswitch_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_drop_tbl_table_add_with_drop_getres_latest_seq_inswitch()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("drop_tbl_table_add_with_drop_getres_latest_seq_inswitch") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_drop_tbl_table_add_with_drop_getres_latest_seq_inswitch_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "drop_tbl_table_add_with_drop_getres_latest_seq_inswitch failed: unknown result");
}

EntryHandle_t netbufferv4Client::drop_tbl_table_add_with_drop_getres_deleted_seq_inswitch(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_drop_tbl_match_spec_t& match_spec)
{
  send_drop_tbl_table_add_with_drop_getres_deleted_seq_inswitch(sess_hdl, dev_tgt, match_spec);
  return recv_drop_tbl_table_add_with_drop_getres_deleted_seq_inswitch();
}

void netbufferv4Client::send_drop_tbl_table_add_with_drop_getres_deleted_seq_inswitch(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_drop_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("drop_tbl_table_add_with_drop_getres_deleted_seq_inswitch", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_drop_tbl_table_add_with_drop_getres_deleted_seq_inswitch_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_drop_tbl_table_add_with_drop_getres_deleted_seq_inswitch()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("drop_tbl_table_add_with_drop_getres_deleted_seq_inswitch") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_drop_tbl_table_add_with_drop_getres_deleted_seq_inswitch_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "drop_tbl_table_add_with_drop_getres_deleted_seq_inswitch failed: unknown result");
}

EntryHandle_t netbufferv4Client::drop_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_drop_tbl_match_spec_t& match_spec)
{
  send_drop_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_drop_tbl_table_add_with_nop();
}

void netbufferv4Client::send_drop_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_drop_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("drop_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_drop_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_drop_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("drop_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_drop_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "drop_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  send_eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq(sess_hdl, dev_tgt, match_spec);
  return recv_eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq failed: unknown result");
}

EntryHandle_t netbufferv4Client::eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_pop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  send_eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_pop(sess_hdl, dev_tgt, match_spec);
  return recv_eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_pop();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_pop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_pop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_pop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_pop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_pop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_pop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_pop failed: unknown result");
}

EntryHandle_t netbufferv4Client::eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_nlatest(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  send_eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_nlatest(sess_hdl, dev_tgt, match_spec);
  return recv_eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_nlatest();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_nlatest(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_nlatest", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_nlatest_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_nlatest()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_nlatest") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_nlatest_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_nlatest failed: unknown result");
}

EntryHandle_t netbufferv4Client::eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getres_by_mirroring(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_getreq_inswitch_to_getres_by_mirroring_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getres_by_mirroring(sess_hdl, dev_tgt, match_spec, action_spec);
  return recv_eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getres_by_mirroring();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getres_by_mirroring(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_getreq_inswitch_to_getres_by_mirroring_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getres_by_mirroring", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getres_by_mirroring_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getres_by_mirroring()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getres_by_mirroring") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getres_by_mirroring_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getres_by_mirroring failed: unknown result");
}

EntryHandle_t netbufferv4Client::eg_port_forward_tbl_table_add_with_update_getres_latest_seq_to_getres(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  send_eg_port_forward_tbl_table_add_with_update_getres_latest_seq_to_getres(sess_hdl, dev_tgt, match_spec);
  return recv_eg_port_forward_tbl_table_add_with_update_getres_latest_seq_to_getres();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_add_with_update_getres_latest_seq_to_getres(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_getres_latest_seq_to_getres", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_add_with_update_getres_latest_seq_to_getres_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_eg_port_forward_tbl_table_add_with_update_getres_latest_seq_to_getres()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_add_with_update_getres_latest_seq_to_getres") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_eg_port_forward_tbl_table_add_with_update_getres_latest_seq_to_getres_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_table_add_with_update_getres_latest_seq_to_getres failed: unknown result");
}

EntryHandle_t netbufferv4Client::eg_port_forward_tbl_table_add_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_add_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss(sess_hdl, dev_tgt, match_spec, action_spec);
  return recv_eg_port_forward_tbl_table_add_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_add_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_add_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_eg_port_forward_tbl_table_add_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_add_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_eg_port_forward_tbl_table_add_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_table_add_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss failed: unknown result");
}

EntryHandle_t netbufferv4Client::eg_port_forward_tbl_table_add_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_add_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss(sess_hdl, dev_tgt, match_spec, action_spec);
  return recv_eg_port_forward_tbl_table_add_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_add_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_add_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_add_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_eg_port_forward_tbl_table_add_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_add_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_eg_port_forward_tbl_table_add_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_table_add_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss failed: unknown result");
}

EntryHandle_t netbufferv4Client::eg_port_forward_tbl_table_add_with_update_getres_deleted_seq_to_getres(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  send_eg_port_forward_tbl_table_add_with_update_getres_deleted_seq_to_getres(sess_hdl, dev_tgt, match_spec);
  return recv_eg_port_forward_tbl_table_add_with_update_getres_deleted_seq_to_getres();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_add_with_update_getres_deleted_seq_to_getres(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_getres_deleted_seq_to_getres", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_add_with_update_getres_deleted_seq_to_getres_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_eg_port_forward_tbl_table_add_with_update_getres_deleted_seq_to_getres()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_add_with_update_getres_deleted_seq_to_getres") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_eg_port_forward_tbl_table_add_with_update_getres_deleted_seq_to_getres_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_table_add_with_update_getres_deleted_seq_to_getres failed: unknown result");
}

EntryHandle_t netbufferv4Client::eg_port_forward_tbl_table_add_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_add_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss(sess_hdl, dev_tgt, match_spec, action_spec);
  return recv_eg_port_forward_tbl_table_add_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_add_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_add_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_eg_port_forward_tbl_table_add_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_add_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_eg_port_forward_tbl_table_add_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_table_add_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss failed: unknown result");
}

EntryHandle_t netbufferv4Client::eg_port_forward_tbl_table_add_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_add_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss(sess_hdl, dev_tgt, match_spec, action_spec);
  return recv_eg_port_forward_tbl_table_add_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_add_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_add_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_add_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_eg_port_forward_tbl_table_add_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_add_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_eg_port_forward_tbl_table_add_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_table_add_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss failed: unknown result");
}

EntryHandle_t netbufferv4Client::eg_port_forward_tbl_table_add_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_add_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone(sess_hdl, dev_tgt, match_spec, action_spec);
  return recv_eg_port_forward_tbl_table_add_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_add_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_add_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_eg_port_forward_tbl_table_add_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_add_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_eg_port_forward_tbl_table_add_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_table_add_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone failed: unknown result");
}

EntryHandle_t netbufferv4Client::eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  send_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq(sess_hdl, dev_tgt, match_spec);
  return recv_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq failed: unknown result");
}

EntryHandle_t netbufferv4Client::eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_pop_seq(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  send_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_pop_seq(sess_hdl, dev_tgt, match_spec);
  return recv_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_pop_seq();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_pop_seq(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_pop_seq", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_pop_seq_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_pop_seq()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_pop_seq") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_pop_seq_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_pop_seq failed: unknown result");
}

EntryHandle_t netbufferv4Client::eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putres_by_mirroring(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_putreq_inswitch_to_putres_by_mirroring_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putres_by_mirroring(sess_hdl, dev_tgt, match_spec, action_spec);
  return recv_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putres_by_mirroring();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putres_by_mirroring(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_putreq_inswitch_to_putres_by_mirroring_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putres_by_mirroring", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putres_by_mirroring_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putres_by_mirroring()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putres_by_mirroring") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putres_by_mirroring_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putres_by_mirroring failed: unknown result");
}

EntryHandle_t netbufferv4Client::eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres(sess_hdl, dev_tgt, match_spec, action_spec);
  return recv_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres failed: unknown result");
}

EntryHandle_t netbufferv4Client::eg_port_forward_tbl_table_add_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_add_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres(sess_hdl, dev_tgt, match_spec, action_spec);
  return recv_eg_port_forward_tbl_table_add_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_add_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_add_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_add_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_eg_port_forward_tbl_table_add_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_add_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_eg_port_forward_tbl_table_add_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_table_add_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres failed: unknown result");
}

EntryHandle_t netbufferv4Client::eg_port_forward_tbl_table_add_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_add_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring(sess_hdl, dev_tgt, match_spec, action_spec);
  return recv_eg_port_forward_tbl_table_add_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_add_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_add_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_eg_port_forward_tbl_table_add_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_add_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_eg_port_forward_tbl_table_add_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_table_add_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring failed: unknown result");
}

EntryHandle_t netbufferv4Client::eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_case3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  send_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_case3(sess_hdl, dev_tgt, match_spec);
  return recv_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_case3();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_case3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_case3", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_case3_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_case3()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_case3") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_case3_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_case3 failed: unknown result");
}

EntryHandle_t netbufferv4Client::eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_pop_seq_case3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  send_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_pop_seq_case3(sess_hdl, dev_tgt, match_spec);
  return recv_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_pop_seq_case3();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_pop_seq_case3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_pop_seq_case3", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_pop_seq_case3_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_pop_seq_case3()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_pop_seq_case3") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_pop_seq_case3_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_pop_seq_case3 failed: unknown result");
}

EntryHandle_t netbufferv4Client::eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  send_eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq(sess_hdl, dev_tgt, match_spec);
  return recv_eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq failed: unknown result");
}

EntryHandle_t netbufferv4Client::eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delres_by_mirroring(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_delreq_inswitch_to_delres_by_mirroring_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delres_by_mirroring(sess_hdl, dev_tgt, match_spec, action_spec);
  return recv_eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delres_by_mirroring();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delres_by_mirroring(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_delreq_inswitch_to_delres_by_mirroring_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delres_by_mirroring", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delres_by_mirroring_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delres_by_mirroring()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delres_by_mirroring") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delres_by_mirroring_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delres_by_mirroring failed: unknown result");
}

EntryHandle_t netbufferv4Client::eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres(sess_hdl, dev_tgt, match_spec, action_spec);
  return recv_eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres failed: unknown result");
}

EntryHandle_t netbufferv4Client::eg_port_forward_tbl_table_add_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_add_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres(sess_hdl, dev_tgt, match_spec, action_spec);
  return recv_eg_port_forward_tbl_table_add_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_add_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_add_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_add_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_eg_port_forward_tbl_table_add_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_add_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_eg_port_forward_tbl_table_add_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_table_add_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres failed: unknown result");
}

EntryHandle_t netbufferv4Client::eg_port_forward_tbl_table_add_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_add_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring(sess_hdl, dev_tgt, match_spec, action_spec);
  return recv_eg_port_forward_tbl_table_add_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_add_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_add_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_eg_port_forward_tbl_table_add_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_add_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_eg_port_forward_tbl_table_add_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_table_add_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring failed: unknown result");
}

EntryHandle_t netbufferv4Client::eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_case3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  send_eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_case3(sess_hdl, dev_tgt, match_spec);
  return recv_eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_case3();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_case3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_case3", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_case3_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_case3()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_case3") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_case3_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_case3 failed: unknown result");
}

EntryHandle_t netbufferv4Client::eg_port_forward_tbl_table_add_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_add_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone(sess_hdl, dev_tgt, match_spec, action_spec);
  return recv_eg_port_forward_tbl_table_add_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_add_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_add_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_eg_port_forward_tbl_table_add_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_add_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_eg_port_forward_tbl_table_add_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_table_add_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone failed: unknown result");
}

EntryHandle_t netbufferv4Client::eg_port_forward_tbl_table_add_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_add_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone(sess_hdl, dev_tgt, match_spec, action_spec);
  return recv_eg_port_forward_tbl_table_add_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_add_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_add_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_eg_port_forward_tbl_table_add_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_add_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_eg_port_forward_tbl_table_add_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_table_add_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone failed: unknown result");
}

EntryHandle_t netbufferv4Client::eg_port_forward_tbl_table_add_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_add_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone(sess_hdl, dev_tgt, match_spec, action_spec);
  return recv_eg_port_forward_tbl_table_add_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_add_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_add_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_eg_port_forward_tbl_table_add_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_add_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_eg_port_forward_tbl_table_add_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_table_add_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone failed: unknown result");
}

EntryHandle_t netbufferv4Client::eg_port_forward_tbl_table_add_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_add_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone(sess_hdl, dev_tgt, match_spec, action_spec);
  return recv_eg_port_forward_tbl_table_add_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_add_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_add_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_eg_port_forward_tbl_table_add_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_add_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_eg_port_forward_tbl_table_add_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_table_add_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone failed: unknown result");
}

EntryHandle_t netbufferv4Client::eg_port_forward_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  send_eg_port_forward_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_eg_port_forward_tbl_table_add_with_nop();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_eg_port_forward_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_eg_port_forward_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::hash_for_cm1_tbl_table_add_with_hash_for_cm1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm1_tbl_match_spec_t& match_spec)
{
  send_hash_for_cm1_tbl_table_add_with_hash_for_cm1(sess_hdl, dev_tgt, match_spec);
  return recv_hash_for_cm1_tbl_table_add_with_hash_for_cm1();
}

void netbufferv4Client::send_hash_for_cm1_tbl_table_add_with_hash_for_cm1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm1_tbl_table_add_with_hash_for_cm1", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm1_tbl_table_add_with_hash_for_cm1_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_hash_for_cm1_tbl_table_add_with_hash_for_cm1()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm1_tbl_table_add_with_hash_for_cm1") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_hash_for_cm1_tbl_table_add_with_hash_for_cm1_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_cm1_tbl_table_add_with_hash_for_cm1 failed: unknown result");
}

EntryHandle_t netbufferv4Client::hash_for_cm1_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm1_tbl_match_spec_t& match_spec)
{
  send_hash_for_cm1_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_hash_for_cm1_tbl_table_add_with_nop();
}

void netbufferv4Client::send_hash_for_cm1_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm1_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm1_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_hash_for_cm1_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm1_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_hash_for_cm1_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_cm1_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::hash_for_cm2_tbl_table_add_with_hash_for_cm2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm2_tbl_match_spec_t& match_spec)
{
  send_hash_for_cm2_tbl_table_add_with_hash_for_cm2(sess_hdl, dev_tgt, match_spec);
  return recv_hash_for_cm2_tbl_table_add_with_hash_for_cm2();
}

void netbufferv4Client::send_hash_for_cm2_tbl_table_add_with_hash_for_cm2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm2_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm2_tbl_table_add_with_hash_for_cm2", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm2_tbl_table_add_with_hash_for_cm2_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_hash_for_cm2_tbl_table_add_with_hash_for_cm2()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm2_tbl_table_add_with_hash_for_cm2") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_hash_for_cm2_tbl_table_add_with_hash_for_cm2_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_cm2_tbl_table_add_with_hash_for_cm2 failed: unknown result");
}

EntryHandle_t netbufferv4Client::hash_for_cm2_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm2_tbl_match_spec_t& match_spec)
{
  send_hash_for_cm2_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_hash_for_cm2_tbl_table_add_with_nop();
}

void netbufferv4Client::send_hash_for_cm2_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm2_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm2_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm2_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_hash_for_cm2_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm2_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_hash_for_cm2_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_cm2_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::hash_for_cm3_tbl_table_add_with_hash_for_cm3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm3_tbl_match_spec_t& match_spec)
{
  send_hash_for_cm3_tbl_table_add_with_hash_for_cm3(sess_hdl, dev_tgt, match_spec);
  return recv_hash_for_cm3_tbl_table_add_with_hash_for_cm3();
}

void netbufferv4Client::send_hash_for_cm3_tbl_table_add_with_hash_for_cm3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm3_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm3_tbl_table_add_with_hash_for_cm3", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm3_tbl_table_add_with_hash_for_cm3_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_hash_for_cm3_tbl_table_add_with_hash_for_cm3()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm3_tbl_table_add_with_hash_for_cm3") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_hash_for_cm3_tbl_table_add_with_hash_for_cm3_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_cm3_tbl_table_add_with_hash_for_cm3 failed: unknown result");
}

EntryHandle_t netbufferv4Client::hash_for_cm3_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm3_tbl_match_spec_t& match_spec)
{
  send_hash_for_cm3_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_hash_for_cm3_tbl_table_add_with_nop();
}

void netbufferv4Client::send_hash_for_cm3_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm3_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm3_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm3_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_hash_for_cm3_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm3_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_hash_for_cm3_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_cm3_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::hash_for_cm4_tbl_table_add_with_hash_for_cm4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm4_tbl_match_spec_t& match_spec)
{
  send_hash_for_cm4_tbl_table_add_with_hash_for_cm4(sess_hdl, dev_tgt, match_spec);
  return recv_hash_for_cm4_tbl_table_add_with_hash_for_cm4();
}

void netbufferv4Client::send_hash_for_cm4_tbl_table_add_with_hash_for_cm4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm4_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm4_tbl_table_add_with_hash_for_cm4", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm4_tbl_table_add_with_hash_for_cm4_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_hash_for_cm4_tbl_table_add_with_hash_for_cm4()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm4_tbl_table_add_with_hash_for_cm4") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_hash_for_cm4_tbl_table_add_with_hash_for_cm4_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_cm4_tbl_table_add_with_hash_for_cm4 failed: unknown result");
}

EntryHandle_t netbufferv4Client::hash_for_cm4_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm4_tbl_match_spec_t& match_spec)
{
  send_hash_for_cm4_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_hash_for_cm4_tbl_table_add_with_nop();
}

void netbufferv4Client::send_hash_for_cm4_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm4_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm4_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm4_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_hash_for_cm4_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm4_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_hash_for_cm4_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_cm4_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::hash_for_partition_tbl_table_add_with_hash_for_partition(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_partition_tbl_match_spec_t& match_spec)
{
  send_hash_for_partition_tbl_table_add_with_hash_for_partition(sess_hdl, dev_tgt, match_spec);
  return recv_hash_for_partition_tbl_table_add_with_hash_for_partition();
}

void netbufferv4Client::send_hash_for_partition_tbl_table_add_with_hash_for_partition(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_partition_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_partition_tbl_table_add_with_hash_for_partition", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_partition_tbl_table_add_with_hash_for_partition_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_hash_for_partition_tbl_table_add_with_hash_for_partition()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_partition_tbl_table_add_with_hash_for_partition") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_hash_for_partition_tbl_table_add_with_hash_for_partition_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_partition_tbl_table_add_with_hash_for_partition failed: unknown result");
}

EntryHandle_t netbufferv4Client::hash_for_partition_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_partition_tbl_match_spec_t& match_spec)
{
  send_hash_for_partition_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_hash_for_partition_tbl_table_add_with_nop();
}

void netbufferv4Client::send_hash_for_partition_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_partition_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_partition_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_partition_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_hash_for_partition_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_partition_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_hash_for_partition_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_partition_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::hash_for_seq_tbl_table_add_with_hash_for_seq(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_seq_tbl_match_spec_t& match_spec)
{
  send_hash_for_seq_tbl_table_add_with_hash_for_seq(sess_hdl, dev_tgt, match_spec);
  return recv_hash_for_seq_tbl_table_add_with_hash_for_seq();
}

void netbufferv4Client::send_hash_for_seq_tbl_table_add_with_hash_for_seq(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_seq_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_seq_tbl_table_add_with_hash_for_seq", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_seq_tbl_table_add_with_hash_for_seq_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_hash_for_seq_tbl_table_add_with_hash_for_seq()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_seq_tbl_table_add_with_hash_for_seq") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_hash_for_seq_tbl_table_add_with_hash_for_seq_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_seq_tbl_table_add_with_hash_for_seq failed: unknown result");
}

EntryHandle_t netbufferv4Client::hash_for_seq_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_seq_tbl_match_spec_t& match_spec)
{
  send_hash_for_seq_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_hash_for_seq_tbl_table_add_with_nop();
}

void netbufferv4Client::send_hash_for_seq_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_seq_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_seq_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_seq_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_hash_for_seq_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_seq_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_hash_for_seq_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_seq_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::hash_partition_tbl_table_add_with_hash_partition(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_partition_tbl_match_spec_t& match_spec, const int32_t priority, const netbufferv4_hash_partition_action_spec_t& action_spec)
{
  send_hash_partition_tbl_table_add_with_hash_partition(sess_hdl, dev_tgt, match_spec, priority, action_spec);
  return recv_hash_partition_tbl_table_add_with_hash_partition();
}

void netbufferv4Client::send_hash_partition_tbl_table_add_with_hash_partition(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_partition_tbl_match_spec_t& match_spec, const int32_t priority, const netbufferv4_hash_partition_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_partition_tbl_table_add_with_hash_partition", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_partition_tbl_table_add_with_hash_partition_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_hash_partition_tbl_table_add_with_hash_partition()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_partition_tbl_table_add_with_hash_partition") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_hash_partition_tbl_table_add_with_hash_partition_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_partition_tbl_table_add_with_hash_partition failed: unknown result");
}

EntryHandle_t netbufferv4Client::hash_partition_tbl_table_add_with_hash_partition_for_special_response(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_partition_tbl_match_spec_t& match_spec, const int32_t priority, const netbufferv4_hash_partition_for_special_response_action_spec_t& action_spec)
{
  send_hash_partition_tbl_table_add_with_hash_partition_for_special_response(sess_hdl, dev_tgt, match_spec, priority, action_spec);
  return recv_hash_partition_tbl_table_add_with_hash_partition_for_special_response();
}

void netbufferv4Client::send_hash_partition_tbl_table_add_with_hash_partition_for_special_response(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_partition_tbl_match_spec_t& match_spec, const int32_t priority, const netbufferv4_hash_partition_for_special_response_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_partition_tbl_table_add_with_hash_partition_for_special_response", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_partition_tbl_table_add_with_hash_partition_for_special_response_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_hash_partition_tbl_table_add_with_hash_partition_for_special_response()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_partition_tbl_table_add_with_hash_partition_for_special_response") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_hash_partition_tbl_table_add_with_hash_partition_for_special_response_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_partition_tbl_table_add_with_hash_partition_for_special_response failed: unknown result");
}

EntryHandle_t netbufferv4Client::hash_partition_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_partition_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_hash_partition_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec, priority);
  return recv_hash_partition_tbl_table_add_with_nop();
}

void netbufferv4Client::send_hash_partition_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_partition_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_partition_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_partition_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_hash_partition_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_partition_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_hash_partition_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_partition_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::ig_port_forward_tbl_table_add_with_update_getreq_to_getreq_inswitch(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ig_port_forward_tbl_match_spec_t& match_spec)
{
  send_ig_port_forward_tbl_table_add_with_update_getreq_to_getreq_inswitch(sess_hdl, dev_tgt, match_spec);
  return recv_ig_port_forward_tbl_table_add_with_update_getreq_to_getreq_inswitch();
}

void netbufferv4Client::send_ig_port_forward_tbl_table_add_with_update_getreq_to_getreq_inswitch(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ig_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ig_port_forward_tbl_table_add_with_update_getreq_to_getreq_inswitch", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ig_port_forward_tbl_table_add_with_update_getreq_to_getreq_inswitch_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_ig_port_forward_tbl_table_add_with_update_getreq_to_getreq_inswitch()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ig_port_forward_tbl_table_add_with_update_getreq_to_getreq_inswitch") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_ig_port_forward_tbl_table_add_with_update_getreq_to_getreq_inswitch_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "ig_port_forward_tbl_table_add_with_update_getreq_to_getreq_inswitch failed: unknown result");
}

EntryHandle_t netbufferv4Client::ig_port_forward_tbl_table_add_with_update_getres_latest_seq_to_getres_latest_seq_inswitch(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ig_port_forward_tbl_match_spec_t& match_spec)
{
  send_ig_port_forward_tbl_table_add_with_update_getres_latest_seq_to_getres_latest_seq_inswitch(sess_hdl, dev_tgt, match_spec);
  return recv_ig_port_forward_tbl_table_add_with_update_getres_latest_seq_to_getres_latest_seq_inswitch();
}

void netbufferv4Client::send_ig_port_forward_tbl_table_add_with_update_getres_latest_seq_to_getres_latest_seq_inswitch(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ig_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ig_port_forward_tbl_table_add_with_update_getres_latest_seq_to_getres_latest_seq_inswitch", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ig_port_forward_tbl_table_add_with_update_getres_latest_seq_to_getres_latest_seq_inswitch_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_ig_port_forward_tbl_table_add_with_update_getres_latest_seq_to_getres_latest_seq_inswitch()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ig_port_forward_tbl_table_add_with_update_getres_latest_seq_to_getres_latest_seq_inswitch") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_ig_port_forward_tbl_table_add_with_update_getres_latest_seq_to_getres_latest_seq_inswitch_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "ig_port_forward_tbl_table_add_with_update_getres_latest_seq_to_getres_latest_seq_inswitch failed: unknown result");
}

EntryHandle_t netbufferv4Client::ig_port_forward_tbl_table_add_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ig_port_forward_tbl_match_spec_t& match_spec)
{
  send_ig_port_forward_tbl_table_add_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch(sess_hdl, dev_tgt, match_spec);
  return recv_ig_port_forward_tbl_table_add_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch();
}

void netbufferv4Client::send_ig_port_forward_tbl_table_add_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ig_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ig_port_forward_tbl_table_add_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ig_port_forward_tbl_table_add_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_ig_port_forward_tbl_table_add_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ig_port_forward_tbl_table_add_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_ig_port_forward_tbl_table_add_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "ig_port_forward_tbl_table_add_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch failed: unknown result");
}

EntryHandle_t netbufferv4Client::ig_port_forward_tbl_table_add_with_update_putreq_to_putreq_inswitch(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ig_port_forward_tbl_match_spec_t& match_spec)
{
  send_ig_port_forward_tbl_table_add_with_update_putreq_to_putreq_inswitch(sess_hdl, dev_tgt, match_spec);
  return recv_ig_port_forward_tbl_table_add_with_update_putreq_to_putreq_inswitch();
}

void netbufferv4Client::send_ig_port_forward_tbl_table_add_with_update_putreq_to_putreq_inswitch(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ig_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ig_port_forward_tbl_table_add_with_update_putreq_to_putreq_inswitch", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ig_port_forward_tbl_table_add_with_update_putreq_to_putreq_inswitch_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_ig_port_forward_tbl_table_add_with_update_putreq_to_putreq_inswitch()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ig_port_forward_tbl_table_add_with_update_putreq_to_putreq_inswitch") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_ig_port_forward_tbl_table_add_with_update_putreq_to_putreq_inswitch_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "ig_port_forward_tbl_table_add_with_update_putreq_to_putreq_inswitch failed: unknown result");
}

EntryHandle_t netbufferv4Client::ig_port_forward_tbl_table_add_with_update_delreq_to_delreq_inswitch(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ig_port_forward_tbl_match_spec_t& match_spec)
{
  send_ig_port_forward_tbl_table_add_with_update_delreq_to_delreq_inswitch(sess_hdl, dev_tgt, match_spec);
  return recv_ig_port_forward_tbl_table_add_with_update_delreq_to_delreq_inswitch();
}

void netbufferv4Client::send_ig_port_forward_tbl_table_add_with_update_delreq_to_delreq_inswitch(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ig_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ig_port_forward_tbl_table_add_with_update_delreq_to_delreq_inswitch", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ig_port_forward_tbl_table_add_with_update_delreq_to_delreq_inswitch_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_ig_port_forward_tbl_table_add_with_update_delreq_to_delreq_inswitch()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ig_port_forward_tbl_table_add_with_update_delreq_to_delreq_inswitch") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_ig_port_forward_tbl_table_add_with_update_delreq_to_delreq_inswitch_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "ig_port_forward_tbl_table_add_with_update_delreq_to_delreq_inswitch failed: unknown result");
}

EntryHandle_t netbufferv4Client::ig_port_forward_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ig_port_forward_tbl_match_spec_t& match_spec)
{
  send_ig_port_forward_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_ig_port_forward_tbl_table_add_with_nop();
}

void netbufferv4Client::send_ig_port_forward_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ig_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ig_port_forward_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ig_port_forward_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_ig_port_forward_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ig_port_forward_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_ig_port_forward_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "ig_port_forward_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::ipv4_forward_tbl_table_add_with_forward_normal_response(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ipv4_forward_tbl_match_spec_t& match_spec, const netbufferv4_forward_normal_response_action_spec_t& action_spec)
{
  send_ipv4_forward_tbl_table_add_with_forward_normal_response(sess_hdl, dev_tgt, match_spec, action_spec);
  return recv_ipv4_forward_tbl_table_add_with_forward_normal_response();
}

void netbufferv4Client::send_ipv4_forward_tbl_table_add_with_forward_normal_response(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ipv4_forward_tbl_match_spec_t& match_spec, const netbufferv4_forward_normal_response_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ipv4_forward_tbl_table_add_with_forward_normal_response", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ipv4_forward_tbl_table_add_with_forward_normal_response_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_ipv4_forward_tbl_table_add_with_forward_normal_response()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ipv4_forward_tbl_table_add_with_forward_normal_response") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_ipv4_forward_tbl_table_add_with_forward_normal_response_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "ipv4_forward_tbl_table_add_with_forward_normal_response failed: unknown result");
}

EntryHandle_t netbufferv4Client::ipv4_forward_tbl_table_add_with_forward_special_get_response(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ipv4_forward_tbl_match_spec_t& match_spec, const netbufferv4_forward_special_get_response_action_spec_t& action_spec)
{
  send_ipv4_forward_tbl_table_add_with_forward_special_get_response(sess_hdl, dev_tgt, match_spec, action_spec);
  return recv_ipv4_forward_tbl_table_add_with_forward_special_get_response();
}

void netbufferv4Client::send_ipv4_forward_tbl_table_add_with_forward_special_get_response(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ipv4_forward_tbl_match_spec_t& match_spec, const netbufferv4_forward_special_get_response_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ipv4_forward_tbl_table_add_with_forward_special_get_response", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ipv4_forward_tbl_table_add_with_forward_special_get_response_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_ipv4_forward_tbl_table_add_with_forward_special_get_response()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ipv4_forward_tbl_table_add_with_forward_special_get_response") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_ipv4_forward_tbl_table_add_with_forward_special_get_response_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "ipv4_forward_tbl_table_add_with_forward_special_get_response failed: unknown result");
}

EntryHandle_t netbufferv4Client::ipv4_forward_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ipv4_forward_tbl_match_spec_t& match_spec)
{
  send_ipv4_forward_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_ipv4_forward_tbl_table_add_with_nop();
}

void netbufferv4Client::send_ipv4_forward_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ipv4_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ipv4_forward_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ipv4_forward_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_ipv4_forward_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ipv4_forward_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_ipv4_forward_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "ipv4_forward_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::is_hot_tbl_table_add_with_set_is_hot(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_is_hot_tbl_match_spec_t& match_spec)
{
  send_is_hot_tbl_table_add_with_set_is_hot(sess_hdl, dev_tgt, match_spec);
  return recv_is_hot_tbl_table_add_with_set_is_hot();
}

void netbufferv4Client::send_is_hot_tbl_table_add_with_set_is_hot(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_is_hot_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("is_hot_tbl_table_add_with_set_is_hot", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_is_hot_tbl_table_add_with_set_is_hot_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_is_hot_tbl_table_add_with_set_is_hot()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("is_hot_tbl_table_add_with_set_is_hot") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_is_hot_tbl_table_add_with_set_is_hot_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "is_hot_tbl_table_add_with_set_is_hot failed: unknown result");
}

EntryHandle_t netbufferv4Client::is_hot_tbl_table_add_with_reset_is_hot(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_is_hot_tbl_match_spec_t& match_spec)
{
  send_is_hot_tbl_table_add_with_reset_is_hot(sess_hdl, dev_tgt, match_spec);
  return recv_is_hot_tbl_table_add_with_reset_is_hot();
}

void netbufferv4Client::send_is_hot_tbl_table_add_with_reset_is_hot(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_is_hot_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("is_hot_tbl_table_add_with_reset_is_hot", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_is_hot_tbl_table_add_with_reset_is_hot_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_is_hot_tbl_table_add_with_reset_is_hot()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("is_hot_tbl_table_add_with_reset_is_hot") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_is_hot_tbl_table_add_with_reset_is_hot_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "is_hot_tbl_table_add_with_reset_is_hot failed: unknown result");
}

EntryHandle_t netbufferv4Client::l2l3_forward_tbl_table_add_with_l2l3_forward(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_l2l3_forward_tbl_match_spec_t& match_spec, const netbufferv4_l2l3_forward_action_spec_t& action_spec)
{
  send_l2l3_forward_tbl_table_add_with_l2l3_forward(sess_hdl, dev_tgt, match_spec, action_spec);
  return recv_l2l3_forward_tbl_table_add_with_l2l3_forward();
}

void netbufferv4Client::send_l2l3_forward_tbl_table_add_with_l2l3_forward(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_l2l3_forward_tbl_match_spec_t& match_spec, const netbufferv4_l2l3_forward_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("l2l3_forward_tbl_table_add_with_l2l3_forward", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_l2l3_forward_tbl_table_add_with_l2l3_forward_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_l2l3_forward_tbl_table_add_with_l2l3_forward()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("l2l3_forward_tbl_table_add_with_l2l3_forward") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_l2l3_forward_tbl_table_add_with_l2l3_forward_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "l2l3_forward_tbl_table_add_with_l2l3_forward failed: unknown result");
}

EntryHandle_t netbufferv4Client::l2l3_forward_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_l2l3_forward_tbl_match_spec_t& match_spec)
{
  send_l2l3_forward_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_l2l3_forward_tbl_table_add_with_nop();
}

void netbufferv4Client::send_l2l3_forward_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_l2l3_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("l2l3_forward_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_l2l3_forward_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_l2l3_forward_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("l2l3_forward_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_l2l3_forward_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "l2l3_forward_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::lastclone_lastscansplit_tbl_table_add_with_set_is_lastclone(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_lastclone_lastscansplit_tbl_match_spec_t& match_spec)
{
  send_lastclone_lastscansplit_tbl_table_add_with_set_is_lastclone(sess_hdl, dev_tgt, match_spec);
  return recv_lastclone_lastscansplit_tbl_table_add_with_set_is_lastclone();
}

void netbufferv4Client::send_lastclone_lastscansplit_tbl_table_add_with_set_is_lastclone(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_lastclone_lastscansplit_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("lastclone_lastscansplit_tbl_table_add_with_set_is_lastclone", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_lastclone_lastscansplit_tbl_table_add_with_set_is_lastclone_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_lastclone_lastscansplit_tbl_table_add_with_set_is_lastclone()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("lastclone_lastscansplit_tbl_table_add_with_set_is_lastclone") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_lastclone_lastscansplit_tbl_table_add_with_set_is_lastclone_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "lastclone_lastscansplit_tbl_table_add_with_set_is_lastclone failed: unknown result");
}

EntryHandle_t netbufferv4Client::lastclone_lastscansplit_tbl_table_add_with_reset_is_lastclone_lastscansplit(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_lastclone_lastscansplit_tbl_match_spec_t& match_spec)
{
  send_lastclone_lastscansplit_tbl_table_add_with_reset_is_lastclone_lastscansplit(sess_hdl, dev_tgt, match_spec);
  return recv_lastclone_lastscansplit_tbl_table_add_with_reset_is_lastclone_lastscansplit();
}

void netbufferv4Client::send_lastclone_lastscansplit_tbl_table_add_with_reset_is_lastclone_lastscansplit(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_lastclone_lastscansplit_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("lastclone_lastscansplit_tbl_table_add_with_reset_is_lastclone_lastscansplit", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_lastclone_lastscansplit_tbl_table_add_with_reset_is_lastclone_lastscansplit_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_lastclone_lastscansplit_tbl_table_add_with_reset_is_lastclone_lastscansplit()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("lastclone_lastscansplit_tbl_table_add_with_reset_is_lastclone_lastscansplit") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_lastclone_lastscansplit_tbl_table_add_with_reset_is_lastclone_lastscansplit_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "lastclone_lastscansplit_tbl_table_add_with_reset_is_lastclone_lastscansplit failed: unknown result");
}

EntryHandle_t netbufferv4Client::need_recirculate_tbl_table_add_with_set_need_recirculate(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_need_recirculate_tbl_match_spec_t& match_spec)
{
  send_need_recirculate_tbl_table_add_with_set_need_recirculate(sess_hdl, dev_tgt, match_spec);
  return recv_need_recirculate_tbl_table_add_with_set_need_recirculate();
}

void netbufferv4Client::send_need_recirculate_tbl_table_add_with_set_need_recirculate(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_need_recirculate_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("need_recirculate_tbl_table_add_with_set_need_recirculate", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_need_recirculate_tbl_table_add_with_set_need_recirculate_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_need_recirculate_tbl_table_add_with_set_need_recirculate()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("need_recirculate_tbl_table_add_with_set_need_recirculate") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_need_recirculate_tbl_table_add_with_set_need_recirculate_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "need_recirculate_tbl_table_add_with_set_need_recirculate failed: unknown result");
}

EntryHandle_t netbufferv4Client::need_recirculate_tbl_table_add_with_reset_need_recirculate(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_need_recirculate_tbl_match_spec_t& match_spec)
{
  send_need_recirculate_tbl_table_add_with_reset_need_recirculate(sess_hdl, dev_tgt, match_spec);
  return recv_need_recirculate_tbl_table_add_with_reset_need_recirculate();
}

void netbufferv4Client::send_need_recirculate_tbl_table_add_with_reset_need_recirculate(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_need_recirculate_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("need_recirculate_tbl_table_add_with_reset_need_recirculate", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_need_recirculate_tbl_table_add_with_reset_need_recirculate_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_need_recirculate_tbl_table_add_with_reset_need_recirculate()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("need_recirculate_tbl_table_add_with_reset_need_recirculate") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_need_recirculate_tbl_table_add_with_reset_need_recirculate_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "need_recirculate_tbl_table_add_with_reset_need_recirculate failed: unknown result");
}

EntryHandle_t netbufferv4Client::prepare_for_cachehit_tbl_table_add_with_set_client_sid(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_prepare_for_cachehit_tbl_match_spec_t& match_spec, const netbufferv4_set_client_sid_action_spec_t& action_spec)
{
  send_prepare_for_cachehit_tbl_table_add_with_set_client_sid(sess_hdl, dev_tgt, match_spec, action_spec);
  return recv_prepare_for_cachehit_tbl_table_add_with_set_client_sid();
}

void netbufferv4Client::send_prepare_for_cachehit_tbl_table_add_with_set_client_sid(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_prepare_for_cachehit_tbl_match_spec_t& match_spec, const netbufferv4_set_client_sid_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("prepare_for_cachehit_tbl_table_add_with_set_client_sid", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_prepare_for_cachehit_tbl_table_add_with_set_client_sid_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_prepare_for_cachehit_tbl_table_add_with_set_client_sid()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("prepare_for_cachehit_tbl_table_add_with_set_client_sid") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_prepare_for_cachehit_tbl_table_add_with_set_client_sid_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "prepare_for_cachehit_tbl_table_add_with_set_client_sid failed: unknown result");
}

EntryHandle_t netbufferv4Client::prepare_for_cachehit_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_prepare_for_cachehit_tbl_match_spec_t& match_spec)
{
  send_prepare_for_cachehit_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_prepare_for_cachehit_tbl_table_add_with_nop();
}

void netbufferv4Client::send_prepare_for_cachehit_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_prepare_for_cachehit_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("prepare_for_cachehit_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_prepare_for_cachehit_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_prepare_for_cachehit_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("prepare_for_cachehit_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_prepare_for_cachehit_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "prepare_for_cachehit_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::recirculate_tbl_table_add_with_recirculate_pkt(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_recirculate_tbl_match_spec_t& match_spec, const netbufferv4_recirculate_pkt_action_spec_t& action_spec)
{
  send_recirculate_tbl_table_add_with_recirculate_pkt(sess_hdl, dev_tgt, match_spec, action_spec);
  return recv_recirculate_tbl_table_add_with_recirculate_pkt();
}

void netbufferv4Client::send_recirculate_tbl_table_add_with_recirculate_pkt(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_recirculate_tbl_match_spec_t& match_spec, const netbufferv4_recirculate_pkt_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("recirculate_tbl_table_add_with_recirculate_pkt", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_recirculate_tbl_table_add_with_recirculate_pkt_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_recirculate_tbl_table_add_with_recirculate_pkt()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("recirculate_tbl_table_add_with_recirculate_pkt") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_recirculate_tbl_table_add_with_recirculate_pkt_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "recirculate_tbl_table_add_with_recirculate_pkt failed: unknown result");
}

EntryHandle_t netbufferv4Client::recirculate_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_recirculate_tbl_match_spec_t& match_spec)
{
  send_recirculate_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_recirculate_tbl_table_add_with_nop();
}

void netbufferv4Client::send_recirculate_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_recirculate_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("recirculate_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_recirculate_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_recirculate_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("recirculate_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_recirculate_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "recirculate_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::sample_tbl_table_add_with_sample(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_sample_tbl_match_spec_t& match_spec)
{
  send_sample_tbl_table_add_with_sample(sess_hdl, dev_tgt, match_spec);
  return recv_sample_tbl_table_add_with_sample();
}

void netbufferv4Client::send_sample_tbl_table_add_with_sample(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_sample_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sample_tbl_table_add_with_sample", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_sample_tbl_table_add_with_sample_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_sample_tbl_table_add_with_sample()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sample_tbl_table_add_with_sample") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_sample_tbl_table_add_with_sample_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sample_tbl_table_add_with_sample failed: unknown result");
}

EntryHandle_t netbufferv4Client::sample_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_sample_tbl_match_spec_t& match_spec)
{
  send_sample_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_sample_tbl_table_add_with_nop();
}

void netbufferv4Client::send_sample_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_sample_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sample_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_sample_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_sample_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sample_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_sample_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sample_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::save_client_udpport_tbl_table_add_with_save_client_udpport(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_save_client_udpport_tbl_match_spec_t& match_spec)
{
  send_save_client_udpport_tbl_table_add_with_save_client_udpport(sess_hdl, dev_tgt, match_spec);
  return recv_save_client_udpport_tbl_table_add_with_save_client_udpport();
}

void netbufferv4Client::send_save_client_udpport_tbl_table_add_with_save_client_udpport(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_save_client_udpport_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("save_client_udpport_tbl_table_add_with_save_client_udpport", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_save_client_udpport_tbl_table_add_with_save_client_udpport_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_save_client_udpport_tbl_table_add_with_save_client_udpport()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("save_client_udpport_tbl_table_add_with_save_client_udpport") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_save_client_udpport_tbl_table_add_with_save_client_udpport_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "save_client_udpport_tbl_table_add_with_save_client_udpport failed: unknown result");
}

EntryHandle_t netbufferv4Client::save_client_udpport_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_save_client_udpport_tbl_match_spec_t& match_spec)
{
  send_save_client_udpport_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_save_client_udpport_tbl_table_add_with_nop();
}

void netbufferv4Client::send_save_client_udpport_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_save_client_udpport_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("save_client_udpport_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_save_client_udpport_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_save_client_udpport_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("save_client_udpport_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_save_client_udpport_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "save_client_udpport_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::snapshot_flag_tbl_table_add_with_set_snapshot_flag(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_snapshot_flag_tbl_match_spec_t& match_spec)
{
  send_snapshot_flag_tbl_table_add_with_set_snapshot_flag(sess_hdl, dev_tgt, match_spec);
  return recv_snapshot_flag_tbl_table_add_with_set_snapshot_flag();
}

void netbufferv4Client::send_snapshot_flag_tbl_table_add_with_set_snapshot_flag(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_snapshot_flag_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("snapshot_flag_tbl_table_add_with_set_snapshot_flag", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_snapshot_flag_tbl_table_add_with_set_snapshot_flag_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_snapshot_flag_tbl_table_add_with_set_snapshot_flag()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("snapshot_flag_tbl_table_add_with_set_snapshot_flag") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_snapshot_flag_tbl_table_add_with_set_snapshot_flag_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "snapshot_flag_tbl_table_add_with_set_snapshot_flag failed: unknown result");
}

EntryHandle_t netbufferv4Client::snapshot_flag_tbl_table_add_with_reset_snapshot_flag(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_snapshot_flag_tbl_match_spec_t& match_spec)
{
  send_snapshot_flag_tbl_table_add_with_reset_snapshot_flag(sess_hdl, dev_tgt, match_spec);
  return recv_snapshot_flag_tbl_table_add_with_reset_snapshot_flag();
}

void netbufferv4Client::send_snapshot_flag_tbl_table_add_with_reset_snapshot_flag(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_snapshot_flag_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("snapshot_flag_tbl_table_add_with_reset_snapshot_flag", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_snapshot_flag_tbl_table_add_with_reset_snapshot_flag_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_snapshot_flag_tbl_table_add_with_reset_snapshot_flag()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("snapshot_flag_tbl_table_add_with_reset_snapshot_flag") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_snapshot_flag_tbl_table_add_with_reset_snapshot_flag_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "snapshot_flag_tbl_table_add_with_reset_snapshot_flag failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_ipmac_srcport_tbl_table_add_with_update_ipmac_srcport_server2client(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_ipmac_srcport_tbl_match_spec_t& match_spec, const netbufferv4_update_ipmac_srcport_server2client_action_spec_t& action_spec)
{
  send_update_ipmac_srcport_tbl_table_add_with_update_ipmac_srcport_server2client(sess_hdl, dev_tgt, match_spec, action_spec);
  return recv_update_ipmac_srcport_tbl_table_add_with_update_ipmac_srcport_server2client();
}

void netbufferv4Client::send_update_ipmac_srcport_tbl_table_add_with_update_ipmac_srcport_server2client(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_ipmac_srcport_tbl_match_spec_t& match_spec, const netbufferv4_update_ipmac_srcport_server2client_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_ipmac_srcport_tbl_table_add_with_update_ipmac_srcport_server2client", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_ipmac_srcport_tbl_table_add_with_update_ipmac_srcport_server2client_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_ipmac_srcport_tbl_table_add_with_update_ipmac_srcport_server2client()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_ipmac_srcport_tbl_table_add_with_update_ipmac_srcport_server2client") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_ipmac_srcport_tbl_table_add_with_update_ipmac_srcport_server2client_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_ipmac_srcport_tbl_table_add_with_update_ipmac_srcport_server2client failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_ipmac_srcport_tbl_table_add_with_update_ipmac_srcport_switch2switchos(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_ipmac_srcport_tbl_match_spec_t& match_spec, const netbufferv4_update_ipmac_srcport_switch2switchos_action_spec_t& action_spec)
{
  send_update_ipmac_srcport_tbl_table_add_with_update_ipmac_srcport_switch2switchos(sess_hdl, dev_tgt, match_spec, action_spec);
  return recv_update_ipmac_srcport_tbl_table_add_with_update_ipmac_srcport_switch2switchos();
}

void netbufferv4Client::send_update_ipmac_srcport_tbl_table_add_with_update_ipmac_srcport_switch2switchos(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_ipmac_srcport_tbl_match_spec_t& match_spec, const netbufferv4_update_ipmac_srcport_switch2switchos_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_ipmac_srcport_tbl_table_add_with_update_ipmac_srcport_switch2switchos", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_ipmac_srcport_tbl_table_add_with_update_ipmac_srcport_switch2switchos_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_ipmac_srcport_tbl_table_add_with_update_ipmac_srcport_switch2switchos()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_ipmac_srcport_tbl_table_add_with_update_ipmac_srcport_switch2switchos") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_ipmac_srcport_tbl_table_add_with_update_ipmac_srcport_switch2switchos_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_ipmac_srcport_tbl_table_add_with_update_ipmac_srcport_switch2switchos failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_ipmac_srcport_tbl_table_add_with_update_dstipmac_client2server(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_ipmac_srcport_tbl_match_spec_t& match_spec, const netbufferv4_update_dstipmac_client2server_action_spec_t& action_spec)
{
  send_update_ipmac_srcport_tbl_table_add_with_update_dstipmac_client2server(sess_hdl, dev_tgt, match_spec, action_spec);
  return recv_update_ipmac_srcport_tbl_table_add_with_update_dstipmac_client2server();
}

void netbufferv4Client::send_update_ipmac_srcport_tbl_table_add_with_update_dstipmac_client2server(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_ipmac_srcport_tbl_match_spec_t& match_spec, const netbufferv4_update_dstipmac_client2server_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_ipmac_srcport_tbl_table_add_with_update_dstipmac_client2server", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_ipmac_srcport_tbl_table_add_with_update_dstipmac_client2server_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_ipmac_srcport_tbl_table_add_with_update_dstipmac_client2server()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_ipmac_srcport_tbl_table_add_with_update_dstipmac_client2server") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_ipmac_srcport_tbl_table_add_with_update_dstipmac_client2server_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_ipmac_srcport_tbl_table_add_with_update_dstipmac_client2server failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_ipmac_srcport_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_ipmac_srcport_tbl_match_spec_t& match_spec)
{
  send_update_ipmac_srcport_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_update_ipmac_srcport_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_ipmac_srcport_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_ipmac_srcport_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_ipmac_srcport_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_ipmac_srcport_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_ipmac_srcport_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_ipmac_srcport_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_ipmac_srcport_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_ipmac_srcport_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_pktlen_tbl_table_add_with_update_pktlen(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_pktlen_tbl_match_spec_t& match_spec, const int32_t priority, const netbufferv4_update_pktlen_action_spec_t& action_spec)
{
  send_update_pktlen_tbl_table_add_with_update_pktlen(sess_hdl, dev_tgt, match_spec, priority, action_spec);
  return recv_update_pktlen_tbl_table_add_with_update_pktlen();
}

void netbufferv4Client::send_update_pktlen_tbl_table_add_with_update_pktlen(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_pktlen_tbl_match_spec_t& match_spec, const int32_t priority, const netbufferv4_update_pktlen_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_pktlen_tbl_table_add_with_update_pktlen", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_pktlen_tbl_table_add_with_update_pktlen_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_pktlen_tbl_table_add_with_update_pktlen()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_pktlen_tbl_table_add_with_update_pktlen") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_pktlen_tbl_table_add_with_update_pktlen_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_pktlen_tbl_table_add_with_update_pktlen failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_pktlen_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_pktlen_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_update_pktlen_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec, priority);
  return recv_update_pktlen_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_pktlen_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_pktlen_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_pktlen_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_pktlen_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_pktlen_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_pktlen_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_pktlen_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_pktlen_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi10_tbl_table_add_with_get_valhi10(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi10_tbl_match_spec_t& match_spec)
{
  send_update_valhi10_tbl_table_add_with_get_valhi10(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi10_tbl_table_add_with_get_valhi10();
}

void netbufferv4Client::send_update_valhi10_tbl_table_add_with_get_valhi10(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi10_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi10_tbl_table_add_with_get_valhi10", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi10_tbl_table_add_with_get_valhi10_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi10_tbl_table_add_with_get_valhi10()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi10_tbl_table_add_with_get_valhi10") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi10_tbl_table_add_with_get_valhi10_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi10_tbl_table_add_with_get_valhi10 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi10_tbl_table_add_with_set_and_get_valhi10(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi10_tbl_match_spec_t& match_spec)
{
  send_update_valhi10_tbl_table_add_with_set_and_get_valhi10(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi10_tbl_table_add_with_set_and_get_valhi10();
}

void netbufferv4Client::send_update_valhi10_tbl_table_add_with_set_and_get_valhi10(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi10_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi10_tbl_table_add_with_set_and_get_valhi10", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi10_tbl_table_add_with_set_and_get_valhi10_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi10_tbl_table_add_with_set_and_get_valhi10()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi10_tbl_table_add_with_set_and_get_valhi10") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi10_tbl_table_add_with_set_and_get_valhi10_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi10_tbl_table_add_with_set_and_get_valhi10 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi10_tbl_table_add_with_reset_and_get_valhi10(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi10_tbl_match_spec_t& match_spec)
{
  send_update_valhi10_tbl_table_add_with_reset_and_get_valhi10(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi10_tbl_table_add_with_reset_and_get_valhi10();
}

void netbufferv4Client::send_update_valhi10_tbl_table_add_with_reset_and_get_valhi10(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi10_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi10_tbl_table_add_with_reset_and_get_valhi10", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi10_tbl_table_add_with_reset_and_get_valhi10_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi10_tbl_table_add_with_reset_and_get_valhi10()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi10_tbl_table_add_with_reset_and_get_valhi10") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi10_tbl_table_add_with_reset_and_get_valhi10_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi10_tbl_table_add_with_reset_and_get_valhi10 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi10_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi10_tbl_match_spec_t& match_spec)
{
  send_update_valhi10_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi10_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_valhi10_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi10_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi10_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi10_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi10_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi10_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi10_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi10_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi11_tbl_table_add_with_get_valhi11(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi11_tbl_match_spec_t& match_spec)
{
  send_update_valhi11_tbl_table_add_with_get_valhi11(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi11_tbl_table_add_with_get_valhi11();
}

void netbufferv4Client::send_update_valhi11_tbl_table_add_with_get_valhi11(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi11_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi11_tbl_table_add_with_get_valhi11", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi11_tbl_table_add_with_get_valhi11_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi11_tbl_table_add_with_get_valhi11()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi11_tbl_table_add_with_get_valhi11") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi11_tbl_table_add_with_get_valhi11_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi11_tbl_table_add_with_get_valhi11 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi11_tbl_table_add_with_set_and_get_valhi11(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi11_tbl_match_spec_t& match_spec)
{
  send_update_valhi11_tbl_table_add_with_set_and_get_valhi11(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi11_tbl_table_add_with_set_and_get_valhi11();
}

void netbufferv4Client::send_update_valhi11_tbl_table_add_with_set_and_get_valhi11(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi11_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi11_tbl_table_add_with_set_and_get_valhi11", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi11_tbl_table_add_with_set_and_get_valhi11_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi11_tbl_table_add_with_set_and_get_valhi11()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi11_tbl_table_add_with_set_and_get_valhi11") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi11_tbl_table_add_with_set_and_get_valhi11_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi11_tbl_table_add_with_set_and_get_valhi11 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi11_tbl_table_add_with_reset_and_get_valhi11(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi11_tbl_match_spec_t& match_spec)
{
  send_update_valhi11_tbl_table_add_with_reset_and_get_valhi11(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi11_tbl_table_add_with_reset_and_get_valhi11();
}

void netbufferv4Client::send_update_valhi11_tbl_table_add_with_reset_and_get_valhi11(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi11_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi11_tbl_table_add_with_reset_and_get_valhi11", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi11_tbl_table_add_with_reset_and_get_valhi11_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi11_tbl_table_add_with_reset_and_get_valhi11()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi11_tbl_table_add_with_reset_and_get_valhi11") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi11_tbl_table_add_with_reset_and_get_valhi11_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi11_tbl_table_add_with_reset_and_get_valhi11 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi11_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi11_tbl_match_spec_t& match_spec)
{
  send_update_valhi11_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi11_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_valhi11_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi11_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi11_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi11_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi11_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi11_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi11_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi11_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi12_tbl_table_add_with_get_valhi12(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi12_tbl_match_spec_t& match_spec)
{
  send_update_valhi12_tbl_table_add_with_get_valhi12(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi12_tbl_table_add_with_get_valhi12();
}

void netbufferv4Client::send_update_valhi12_tbl_table_add_with_get_valhi12(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi12_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi12_tbl_table_add_with_get_valhi12", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi12_tbl_table_add_with_get_valhi12_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi12_tbl_table_add_with_get_valhi12()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi12_tbl_table_add_with_get_valhi12") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi12_tbl_table_add_with_get_valhi12_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi12_tbl_table_add_with_get_valhi12 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi12_tbl_table_add_with_set_and_get_valhi12(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi12_tbl_match_spec_t& match_spec)
{
  send_update_valhi12_tbl_table_add_with_set_and_get_valhi12(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi12_tbl_table_add_with_set_and_get_valhi12();
}

void netbufferv4Client::send_update_valhi12_tbl_table_add_with_set_and_get_valhi12(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi12_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi12_tbl_table_add_with_set_and_get_valhi12", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi12_tbl_table_add_with_set_and_get_valhi12_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi12_tbl_table_add_with_set_and_get_valhi12()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi12_tbl_table_add_with_set_and_get_valhi12") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi12_tbl_table_add_with_set_and_get_valhi12_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi12_tbl_table_add_with_set_and_get_valhi12 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi12_tbl_table_add_with_reset_and_get_valhi12(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi12_tbl_match_spec_t& match_spec)
{
  send_update_valhi12_tbl_table_add_with_reset_and_get_valhi12(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi12_tbl_table_add_with_reset_and_get_valhi12();
}

void netbufferv4Client::send_update_valhi12_tbl_table_add_with_reset_and_get_valhi12(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi12_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi12_tbl_table_add_with_reset_and_get_valhi12", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi12_tbl_table_add_with_reset_and_get_valhi12_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi12_tbl_table_add_with_reset_and_get_valhi12()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi12_tbl_table_add_with_reset_and_get_valhi12") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi12_tbl_table_add_with_reset_and_get_valhi12_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi12_tbl_table_add_with_reset_and_get_valhi12 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi12_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi12_tbl_match_spec_t& match_spec)
{
  send_update_valhi12_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi12_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_valhi12_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi12_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi12_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi12_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi12_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi12_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi12_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi12_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi13_tbl_table_add_with_get_valhi13(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi13_tbl_match_spec_t& match_spec)
{
  send_update_valhi13_tbl_table_add_with_get_valhi13(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi13_tbl_table_add_with_get_valhi13();
}

void netbufferv4Client::send_update_valhi13_tbl_table_add_with_get_valhi13(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi13_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi13_tbl_table_add_with_get_valhi13", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi13_tbl_table_add_with_get_valhi13_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi13_tbl_table_add_with_get_valhi13()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi13_tbl_table_add_with_get_valhi13") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi13_tbl_table_add_with_get_valhi13_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi13_tbl_table_add_with_get_valhi13 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi13_tbl_table_add_with_set_and_get_valhi13(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi13_tbl_match_spec_t& match_spec)
{
  send_update_valhi13_tbl_table_add_with_set_and_get_valhi13(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi13_tbl_table_add_with_set_and_get_valhi13();
}

void netbufferv4Client::send_update_valhi13_tbl_table_add_with_set_and_get_valhi13(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi13_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi13_tbl_table_add_with_set_and_get_valhi13", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi13_tbl_table_add_with_set_and_get_valhi13_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi13_tbl_table_add_with_set_and_get_valhi13()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi13_tbl_table_add_with_set_and_get_valhi13") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi13_tbl_table_add_with_set_and_get_valhi13_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi13_tbl_table_add_with_set_and_get_valhi13 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi13_tbl_table_add_with_reset_and_get_valhi13(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi13_tbl_match_spec_t& match_spec)
{
  send_update_valhi13_tbl_table_add_with_reset_and_get_valhi13(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi13_tbl_table_add_with_reset_and_get_valhi13();
}

void netbufferv4Client::send_update_valhi13_tbl_table_add_with_reset_and_get_valhi13(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi13_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi13_tbl_table_add_with_reset_and_get_valhi13", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi13_tbl_table_add_with_reset_and_get_valhi13_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi13_tbl_table_add_with_reset_and_get_valhi13()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi13_tbl_table_add_with_reset_and_get_valhi13") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi13_tbl_table_add_with_reset_and_get_valhi13_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi13_tbl_table_add_with_reset_and_get_valhi13 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi13_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi13_tbl_match_spec_t& match_spec)
{
  send_update_valhi13_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi13_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_valhi13_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi13_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi13_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi13_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi13_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi13_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi13_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi13_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi14_tbl_table_add_with_get_valhi14(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi14_tbl_match_spec_t& match_spec)
{
  send_update_valhi14_tbl_table_add_with_get_valhi14(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi14_tbl_table_add_with_get_valhi14();
}

void netbufferv4Client::send_update_valhi14_tbl_table_add_with_get_valhi14(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi14_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi14_tbl_table_add_with_get_valhi14", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi14_tbl_table_add_with_get_valhi14_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi14_tbl_table_add_with_get_valhi14()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi14_tbl_table_add_with_get_valhi14") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi14_tbl_table_add_with_get_valhi14_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi14_tbl_table_add_with_get_valhi14 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi14_tbl_table_add_with_set_and_get_valhi14(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi14_tbl_match_spec_t& match_spec)
{
  send_update_valhi14_tbl_table_add_with_set_and_get_valhi14(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi14_tbl_table_add_with_set_and_get_valhi14();
}

void netbufferv4Client::send_update_valhi14_tbl_table_add_with_set_and_get_valhi14(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi14_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi14_tbl_table_add_with_set_and_get_valhi14", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi14_tbl_table_add_with_set_and_get_valhi14_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi14_tbl_table_add_with_set_and_get_valhi14()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi14_tbl_table_add_with_set_and_get_valhi14") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi14_tbl_table_add_with_set_and_get_valhi14_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi14_tbl_table_add_with_set_and_get_valhi14 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi14_tbl_table_add_with_reset_and_get_valhi14(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi14_tbl_match_spec_t& match_spec)
{
  send_update_valhi14_tbl_table_add_with_reset_and_get_valhi14(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi14_tbl_table_add_with_reset_and_get_valhi14();
}

void netbufferv4Client::send_update_valhi14_tbl_table_add_with_reset_and_get_valhi14(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi14_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi14_tbl_table_add_with_reset_and_get_valhi14", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi14_tbl_table_add_with_reset_and_get_valhi14_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi14_tbl_table_add_with_reset_and_get_valhi14()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi14_tbl_table_add_with_reset_and_get_valhi14") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi14_tbl_table_add_with_reset_and_get_valhi14_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi14_tbl_table_add_with_reset_and_get_valhi14 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi14_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi14_tbl_match_spec_t& match_spec)
{
  send_update_valhi14_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi14_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_valhi14_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi14_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi14_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi14_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi14_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi14_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi14_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi14_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi15_tbl_table_add_with_get_valhi15(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi15_tbl_match_spec_t& match_spec)
{
  send_update_valhi15_tbl_table_add_with_get_valhi15(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi15_tbl_table_add_with_get_valhi15();
}

void netbufferv4Client::send_update_valhi15_tbl_table_add_with_get_valhi15(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi15_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi15_tbl_table_add_with_get_valhi15", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi15_tbl_table_add_with_get_valhi15_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi15_tbl_table_add_with_get_valhi15()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi15_tbl_table_add_with_get_valhi15") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi15_tbl_table_add_with_get_valhi15_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi15_tbl_table_add_with_get_valhi15 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi15_tbl_table_add_with_set_and_get_valhi15(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi15_tbl_match_spec_t& match_spec)
{
  send_update_valhi15_tbl_table_add_with_set_and_get_valhi15(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi15_tbl_table_add_with_set_and_get_valhi15();
}

void netbufferv4Client::send_update_valhi15_tbl_table_add_with_set_and_get_valhi15(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi15_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi15_tbl_table_add_with_set_and_get_valhi15", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi15_tbl_table_add_with_set_and_get_valhi15_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi15_tbl_table_add_with_set_and_get_valhi15()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi15_tbl_table_add_with_set_and_get_valhi15") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi15_tbl_table_add_with_set_and_get_valhi15_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi15_tbl_table_add_with_set_and_get_valhi15 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi15_tbl_table_add_with_reset_and_get_valhi15(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi15_tbl_match_spec_t& match_spec)
{
  send_update_valhi15_tbl_table_add_with_reset_and_get_valhi15(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi15_tbl_table_add_with_reset_and_get_valhi15();
}

void netbufferv4Client::send_update_valhi15_tbl_table_add_with_reset_and_get_valhi15(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi15_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi15_tbl_table_add_with_reset_and_get_valhi15", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi15_tbl_table_add_with_reset_and_get_valhi15_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi15_tbl_table_add_with_reset_and_get_valhi15()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi15_tbl_table_add_with_reset_and_get_valhi15") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi15_tbl_table_add_with_reset_and_get_valhi15_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi15_tbl_table_add_with_reset_and_get_valhi15 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi15_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi15_tbl_match_spec_t& match_spec)
{
  send_update_valhi15_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi15_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_valhi15_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi15_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi15_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi15_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi15_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi15_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi15_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi15_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi16_tbl_table_add_with_get_valhi16(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi16_tbl_match_spec_t& match_spec)
{
  send_update_valhi16_tbl_table_add_with_get_valhi16(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi16_tbl_table_add_with_get_valhi16();
}

void netbufferv4Client::send_update_valhi16_tbl_table_add_with_get_valhi16(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi16_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi16_tbl_table_add_with_get_valhi16", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi16_tbl_table_add_with_get_valhi16_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi16_tbl_table_add_with_get_valhi16()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi16_tbl_table_add_with_get_valhi16") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi16_tbl_table_add_with_get_valhi16_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi16_tbl_table_add_with_get_valhi16 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi16_tbl_table_add_with_set_and_get_valhi16(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi16_tbl_match_spec_t& match_spec)
{
  send_update_valhi16_tbl_table_add_with_set_and_get_valhi16(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi16_tbl_table_add_with_set_and_get_valhi16();
}

void netbufferv4Client::send_update_valhi16_tbl_table_add_with_set_and_get_valhi16(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi16_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi16_tbl_table_add_with_set_and_get_valhi16", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi16_tbl_table_add_with_set_and_get_valhi16_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi16_tbl_table_add_with_set_and_get_valhi16()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi16_tbl_table_add_with_set_and_get_valhi16") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi16_tbl_table_add_with_set_and_get_valhi16_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi16_tbl_table_add_with_set_and_get_valhi16 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi16_tbl_table_add_with_reset_and_get_valhi16(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi16_tbl_match_spec_t& match_spec)
{
  send_update_valhi16_tbl_table_add_with_reset_and_get_valhi16(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi16_tbl_table_add_with_reset_and_get_valhi16();
}

void netbufferv4Client::send_update_valhi16_tbl_table_add_with_reset_and_get_valhi16(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi16_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi16_tbl_table_add_with_reset_and_get_valhi16", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi16_tbl_table_add_with_reset_and_get_valhi16_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi16_tbl_table_add_with_reset_and_get_valhi16()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi16_tbl_table_add_with_reset_and_get_valhi16") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi16_tbl_table_add_with_reset_and_get_valhi16_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi16_tbl_table_add_with_reset_and_get_valhi16 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi16_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi16_tbl_match_spec_t& match_spec)
{
  send_update_valhi16_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi16_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_valhi16_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi16_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi16_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi16_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi16_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi16_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi16_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi16_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi1_tbl_table_add_with_get_valhi1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi1_tbl_match_spec_t& match_spec)
{
  send_update_valhi1_tbl_table_add_with_get_valhi1(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi1_tbl_table_add_with_get_valhi1();
}

void netbufferv4Client::send_update_valhi1_tbl_table_add_with_get_valhi1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi1_tbl_table_add_with_get_valhi1", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi1_tbl_table_add_with_get_valhi1_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi1_tbl_table_add_with_get_valhi1()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi1_tbl_table_add_with_get_valhi1") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi1_tbl_table_add_with_get_valhi1_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi1_tbl_table_add_with_get_valhi1 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi1_tbl_table_add_with_set_and_get_valhi1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi1_tbl_match_spec_t& match_spec)
{
  send_update_valhi1_tbl_table_add_with_set_and_get_valhi1(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi1_tbl_table_add_with_set_and_get_valhi1();
}

void netbufferv4Client::send_update_valhi1_tbl_table_add_with_set_and_get_valhi1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi1_tbl_table_add_with_set_and_get_valhi1", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi1_tbl_table_add_with_set_and_get_valhi1_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi1_tbl_table_add_with_set_and_get_valhi1()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi1_tbl_table_add_with_set_and_get_valhi1") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi1_tbl_table_add_with_set_and_get_valhi1_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi1_tbl_table_add_with_set_and_get_valhi1 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi1_tbl_table_add_with_reset_and_get_valhi1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi1_tbl_match_spec_t& match_spec)
{
  send_update_valhi1_tbl_table_add_with_reset_and_get_valhi1(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi1_tbl_table_add_with_reset_and_get_valhi1();
}

void netbufferv4Client::send_update_valhi1_tbl_table_add_with_reset_and_get_valhi1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi1_tbl_table_add_with_reset_and_get_valhi1", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi1_tbl_table_add_with_reset_and_get_valhi1_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi1_tbl_table_add_with_reset_and_get_valhi1()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi1_tbl_table_add_with_reset_and_get_valhi1") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi1_tbl_table_add_with_reset_and_get_valhi1_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi1_tbl_table_add_with_reset_and_get_valhi1 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi1_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi1_tbl_match_spec_t& match_spec)
{
  send_update_valhi1_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi1_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_valhi1_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi1_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi1_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi1_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi1_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi1_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi1_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi2_tbl_table_add_with_get_valhi2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi2_tbl_match_spec_t& match_spec)
{
  send_update_valhi2_tbl_table_add_with_get_valhi2(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi2_tbl_table_add_with_get_valhi2();
}

void netbufferv4Client::send_update_valhi2_tbl_table_add_with_get_valhi2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi2_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi2_tbl_table_add_with_get_valhi2", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi2_tbl_table_add_with_get_valhi2_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi2_tbl_table_add_with_get_valhi2()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi2_tbl_table_add_with_get_valhi2") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi2_tbl_table_add_with_get_valhi2_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi2_tbl_table_add_with_get_valhi2 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi2_tbl_table_add_with_set_and_get_valhi2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi2_tbl_match_spec_t& match_spec)
{
  send_update_valhi2_tbl_table_add_with_set_and_get_valhi2(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi2_tbl_table_add_with_set_and_get_valhi2();
}

void netbufferv4Client::send_update_valhi2_tbl_table_add_with_set_and_get_valhi2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi2_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi2_tbl_table_add_with_set_and_get_valhi2", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi2_tbl_table_add_with_set_and_get_valhi2_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi2_tbl_table_add_with_set_and_get_valhi2()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi2_tbl_table_add_with_set_and_get_valhi2") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi2_tbl_table_add_with_set_and_get_valhi2_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi2_tbl_table_add_with_set_and_get_valhi2 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi2_tbl_table_add_with_reset_and_get_valhi2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi2_tbl_match_spec_t& match_spec)
{
  send_update_valhi2_tbl_table_add_with_reset_and_get_valhi2(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi2_tbl_table_add_with_reset_and_get_valhi2();
}

void netbufferv4Client::send_update_valhi2_tbl_table_add_with_reset_and_get_valhi2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi2_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi2_tbl_table_add_with_reset_and_get_valhi2", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi2_tbl_table_add_with_reset_and_get_valhi2_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi2_tbl_table_add_with_reset_and_get_valhi2()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi2_tbl_table_add_with_reset_and_get_valhi2") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi2_tbl_table_add_with_reset_and_get_valhi2_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi2_tbl_table_add_with_reset_and_get_valhi2 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi2_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi2_tbl_match_spec_t& match_spec)
{
  send_update_valhi2_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi2_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_valhi2_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi2_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi2_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi2_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi2_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi2_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi2_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi2_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi3_tbl_table_add_with_get_valhi3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi3_tbl_match_spec_t& match_spec)
{
  send_update_valhi3_tbl_table_add_with_get_valhi3(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi3_tbl_table_add_with_get_valhi3();
}

void netbufferv4Client::send_update_valhi3_tbl_table_add_with_get_valhi3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi3_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi3_tbl_table_add_with_get_valhi3", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi3_tbl_table_add_with_get_valhi3_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi3_tbl_table_add_with_get_valhi3()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi3_tbl_table_add_with_get_valhi3") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi3_tbl_table_add_with_get_valhi3_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi3_tbl_table_add_with_get_valhi3 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi3_tbl_table_add_with_set_and_get_valhi3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi3_tbl_match_spec_t& match_spec)
{
  send_update_valhi3_tbl_table_add_with_set_and_get_valhi3(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi3_tbl_table_add_with_set_and_get_valhi3();
}

void netbufferv4Client::send_update_valhi3_tbl_table_add_with_set_and_get_valhi3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi3_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi3_tbl_table_add_with_set_and_get_valhi3", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi3_tbl_table_add_with_set_and_get_valhi3_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi3_tbl_table_add_with_set_and_get_valhi3()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi3_tbl_table_add_with_set_and_get_valhi3") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi3_tbl_table_add_with_set_and_get_valhi3_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi3_tbl_table_add_with_set_and_get_valhi3 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi3_tbl_table_add_with_reset_and_get_valhi3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi3_tbl_match_spec_t& match_spec)
{
  send_update_valhi3_tbl_table_add_with_reset_and_get_valhi3(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi3_tbl_table_add_with_reset_and_get_valhi3();
}

void netbufferv4Client::send_update_valhi3_tbl_table_add_with_reset_and_get_valhi3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi3_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi3_tbl_table_add_with_reset_and_get_valhi3", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi3_tbl_table_add_with_reset_and_get_valhi3_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi3_tbl_table_add_with_reset_and_get_valhi3()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi3_tbl_table_add_with_reset_and_get_valhi3") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi3_tbl_table_add_with_reset_and_get_valhi3_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi3_tbl_table_add_with_reset_and_get_valhi3 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi3_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi3_tbl_match_spec_t& match_spec)
{
  send_update_valhi3_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi3_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_valhi3_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi3_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi3_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi3_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi3_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi3_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi3_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi3_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi4_tbl_table_add_with_get_valhi4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi4_tbl_match_spec_t& match_spec)
{
  send_update_valhi4_tbl_table_add_with_get_valhi4(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi4_tbl_table_add_with_get_valhi4();
}

void netbufferv4Client::send_update_valhi4_tbl_table_add_with_get_valhi4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi4_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi4_tbl_table_add_with_get_valhi4", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi4_tbl_table_add_with_get_valhi4_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi4_tbl_table_add_with_get_valhi4()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi4_tbl_table_add_with_get_valhi4") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi4_tbl_table_add_with_get_valhi4_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi4_tbl_table_add_with_get_valhi4 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi4_tbl_table_add_with_set_and_get_valhi4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi4_tbl_match_spec_t& match_spec)
{
  send_update_valhi4_tbl_table_add_with_set_and_get_valhi4(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi4_tbl_table_add_with_set_and_get_valhi4();
}

void netbufferv4Client::send_update_valhi4_tbl_table_add_with_set_and_get_valhi4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi4_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi4_tbl_table_add_with_set_and_get_valhi4", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi4_tbl_table_add_with_set_and_get_valhi4_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi4_tbl_table_add_with_set_and_get_valhi4()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi4_tbl_table_add_with_set_and_get_valhi4") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi4_tbl_table_add_with_set_and_get_valhi4_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi4_tbl_table_add_with_set_and_get_valhi4 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi4_tbl_table_add_with_reset_and_get_valhi4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi4_tbl_match_spec_t& match_spec)
{
  send_update_valhi4_tbl_table_add_with_reset_and_get_valhi4(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi4_tbl_table_add_with_reset_and_get_valhi4();
}

void netbufferv4Client::send_update_valhi4_tbl_table_add_with_reset_and_get_valhi4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi4_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi4_tbl_table_add_with_reset_and_get_valhi4", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi4_tbl_table_add_with_reset_and_get_valhi4_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi4_tbl_table_add_with_reset_and_get_valhi4()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi4_tbl_table_add_with_reset_and_get_valhi4") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi4_tbl_table_add_with_reset_and_get_valhi4_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi4_tbl_table_add_with_reset_and_get_valhi4 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi4_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi4_tbl_match_spec_t& match_spec)
{
  send_update_valhi4_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi4_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_valhi4_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi4_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi4_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi4_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi4_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi4_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi4_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi4_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi5_tbl_table_add_with_get_valhi5(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi5_tbl_match_spec_t& match_spec)
{
  send_update_valhi5_tbl_table_add_with_get_valhi5(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi5_tbl_table_add_with_get_valhi5();
}

void netbufferv4Client::send_update_valhi5_tbl_table_add_with_get_valhi5(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi5_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi5_tbl_table_add_with_get_valhi5", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi5_tbl_table_add_with_get_valhi5_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi5_tbl_table_add_with_get_valhi5()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi5_tbl_table_add_with_get_valhi5") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi5_tbl_table_add_with_get_valhi5_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi5_tbl_table_add_with_get_valhi5 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi5_tbl_table_add_with_set_and_get_valhi5(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi5_tbl_match_spec_t& match_spec)
{
  send_update_valhi5_tbl_table_add_with_set_and_get_valhi5(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi5_tbl_table_add_with_set_and_get_valhi5();
}

void netbufferv4Client::send_update_valhi5_tbl_table_add_with_set_and_get_valhi5(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi5_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi5_tbl_table_add_with_set_and_get_valhi5", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi5_tbl_table_add_with_set_and_get_valhi5_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi5_tbl_table_add_with_set_and_get_valhi5()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi5_tbl_table_add_with_set_and_get_valhi5") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi5_tbl_table_add_with_set_and_get_valhi5_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi5_tbl_table_add_with_set_and_get_valhi5 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi5_tbl_table_add_with_reset_and_get_valhi5(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi5_tbl_match_spec_t& match_spec)
{
  send_update_valhi5_tbl_table_add_with_reset_and_get_valhi5(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi5_tbl_table_add_with_reset_and_get_valhi5();
}

void netbufferv4Client::send_update_valhi5_tbl_table_add_with_reset_and_get_valhi5(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi5_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi5_tbl_table_add_with_reset_and_get_valhi5", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi5_tbl_table_add_with_reset_and_get_valhi5_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi5_tbl_table_add_with_reset_and_get_valhi5()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi5_tbl_table_add_with_reset_and_get_valhi5") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi5_tbl_table_add_with_reset_and_get_valhi5_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi5_tbl_table_add_with_reset_and_get_valhi5 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi5_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi5_tbl_match_spec_t& match_spec)
{
  send_update_valhi5_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi5_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_valhi5_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi5_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi5_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi5_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi5_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi5_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi5_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi5_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi6_tbl_table_add_with_get_valhi6(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi6_tbl_match_spec_t& match_spec)
{
  send_update_valhi6_tbl_table_add_with_get_valhi6(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi6_tbl_table_add_with_get_valhi6();
}

void netbufferv4Client::send_update_valhi6_tbl_table_add_with_get_valhi6(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi6_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi6_tbl_table_add_with_get_valhi6", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi6_tbl_table_add_with_get_valhi6_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi6_tbl_table_add_with_get_valhi6()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi6_tbl_table_add_with_get_valhi6") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi6_tbl_table_add_with_get_valhi6_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi6_tbl_table_add_with_get_valhi6 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi6_tbl_table_add_with_set_and_get_valhi6(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi6_tbl_match_spec_t& match_spec)
{
  send_update_valhi6_tbl_table_add_with_set_and_get_valhi6(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi6_tbl_table_add_with_set_and_get_valhi6();
}

void netbufferv4Client::send_update_valhi6_tbl_table_add_with_set_and_get_valhi6(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi6_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi6_tbl_table_add_with_set_and_get_valhi6", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi6_tbl_table_add_with_set_and_get_valhi6_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi6_tbl_table_add_with_set_and_get_valhi6()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi6_tbl_table_add_with_set_and_get_valhi6") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi6_tbl_table_add_with_set_and_get_valhi6_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi6_tbl_table_add_with_set_and_get_valhi6 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi6_tbl_table_add_with_reset_and_get_valhi6(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi6_tbl_match_spec_t& match_spec)
{
  send_update_valhi6_tbl_table_add_with_reset_and_get_valhi6(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi6_tbl_table_add_with_reset_and_get_valhi6();
}

void netbufferv4Client::send_update_valhi6_tbl_table_add_with_reset_and_get_valhi6(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi6_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi6_tbl_table_add_with_reset_and_get_valhi6", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi6_tbl_table_add_with_reset_and_get_valhi6_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi6_tbl_table_add_with_reset_and_get_valhi6()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi6_tbl_table_add_with_reset_and_get_valhi6") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi6_tbl_table_add_with_reset_and_get_valhi6_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi6_tbl_table_add_with_reset_and_get_valhi6 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi6_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi6_tbl_match_spec_t& match_spec)
{
  send_update_valhi6_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi6_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_valhi6_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi6_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi6_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi6_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi6_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi6_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi6_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi6_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi7_tbl_table_add_with_get_valhi7(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi7_tbl_match_spec_t& match_spec)
{
  send_update_valhi7_tbl_table_add_with_get_valhi7(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi7_tbl_table_add_with_get_valhi7();
}

void netbufferv4Client::send_update_valhi7_tbl_table_add_with_get_valhi7(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi7_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi7_tbl_table_add_with_get_valhi7", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi7_tbl_table_add_with_get_valhi7_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi7_tbl_table_add_with_get_valhi7()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi7_tbl_table_add_with_get_valhi7") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi7_tbl_table_add_with_get_valhi7_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi7_tbl_table_add_with_get_valhi7 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi7_tbl_table_add_with_set_and_get_valhi7(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi7_tbl_match_spec_t& match_spec)
{
  send_update_valhi7_tbl_table_add_with_set_and_get_valhi7(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi7_tbl_table_add_with_set_and_get_valhi7();
}

void netbufferv4Client::send_update_valhi7_tbl_table_add_with_set_and_get_valhi7(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi7_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi7_tbl_table_add_with_set_and_get_valhi7", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi7_tbl_table_add_with_set_and_get_valhi7_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi7_tbl_table_add_with_set_and_get_valhi7()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi7_tbl_table_add_with_set_and_get_valhi7") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi7_tbl_table_add_with_set_and_get_valhi7_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi7_tbl_table_add_with_set_and_get_valhi7 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi7_tbl_table_add_with_reset_and_get_valhi7(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi7_tbl_match_spec_t& match_spec)
{
  send_update_valhi7_tbl_table_add_with_reset_and_get_valhi7(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi7_tbl_table_add_with_reset_and_get_valhi7();
}

void netbufferv4Client::send_update_valhi7_tbl_table_add_with_reset_and_get_valhi7(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi7_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi7_tbl_table_add_with_reset_and_get_valhi7", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi7_tbl_table_add_with_reset_and_get_valhi7_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi7_tbl_table_add_with_reset_and_get_valhi7()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi7_tbl_table_add_with_reset_and_get_valhi7") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi7_tbl_table_add_with_reset_and_get_valhi7_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi7_tbl_table_add_with_reset_and_get_valhi7 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi7_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi7_tbl_match_spec_t& match_spec)
{
  send_update_valhi7_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi7_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_valhi7_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi7_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi7_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi7_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi7_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi7_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi7_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi7_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi8_tbl_table_add_with_get_valhi8(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi8_tbl_match_spec_t& match_spec)
{
  send_update_valhi8_tbl_table_add_with_get_valhi8(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi8_tbl_table_add_with_get_valhi8();
}

void netbufferv4Client::send_update_valhi8_tbl_table_add_with_get_valhi8(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi8_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi8_tbl_table_add_with_get_valhi8", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi8_tbl_table_add_with_get_valhi8_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi8_tbl_table_add_with_get_valhi8()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi8_tbl_table_add_with_get_valhi8") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi8_tbl_table_add_with_get_valhi8_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi8_tbl_table_add_with_get_valhi8 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi8_tbl_table_add_with_set_and_get_valhi8(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi8_tbl_match_spec_t& match_spec)
{
  send_update_valhi8_tbl_table_add_with_set_and_get_valhi8(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi8_tbl_table_add_with_set_and_get_valhi8();
}

void netbufferv4Client::send_update_valhi8_tbl_table_add_with_set_and_get_valhi8(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi8_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi8_tbl_table_add_with_set_and_get_valhi8", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi8_tbl_table_add_with_set_and_get_valhi8_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi8_tbl_table_add_with_set_and_get_valhi8()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi8_tbl_table_add_with_set_and_get_valhi8") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi8_tbl_table_add_with_set_and_get_valhi8_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi8_tbl_table_add_with_set_and_get_valhi8 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi8_tbl_table_add_with_reset_and_get_valhi8(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi8_tbl_match_spec_t& match_spec)
{
  send_update_valhi8_tbl_table_add_with_reset_and_get_valhi8(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi8_tbl_table_add_with_reset_and_get_valhi8();
}

void netbufferv4Client::send_update_valhi8_tbl_table_add_with_reset_and_get_valhi8(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi8_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi8_tbl_table_add_with_reset_and_get_valhi8", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi8_tbl_table_add_with_reset_and_get_valhi8_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi8_tbl_table_add_with_reset_and_get_valhi8()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi8_tbl_table_add_with_reset_and_get_valhi8") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi8_tbl_table_add_with_reset_and_get_valhi8_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi8_tbl_table_add_with_reset_and_get_valhi8 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi8_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi8_tbl_match_spec_t& match_spec)
{
  send_update_valhi8_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi8_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_valhi8_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi8_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi8_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi8_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi8_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi8_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi8_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi8_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi9_tbl_table_add_with_get_valhi9(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi9_tbl_match_spec_t& match_spec)
{
  send_update_valhi9_tbl_table_add_with_get_valhi9(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi9_tbl_table_add_with_get_valhi9();
}

void netbufferv4Client::send_update_valhi9_tbl_table_add_with_get_valhi9(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi9_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi9_tbl_table_add_with_get_valhi9", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi9_tbl_table_add_with_get_valhi9_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi9_tbl_table_add_with_get_valhi9()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi9_tbl_table_add_with_get_valhi9") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi9_tbl_table_add_with_get_valhi9_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi9_tbl_table_add_with_get_valhi9 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi9_tbl_table_add_with_set_and_get_valhi9(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi9_tbl_match_spec_t& match_spec)
{
  send_update_valhi9_tbl_table_add_with_set_and_get_valhi9(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi9_tbl_table_add_with_set_and_get_valhi9();
}

void netbufferv4Client::send_update_valhi9_tbl_table_add_with_set_and_get_valhi9(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi9_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi9_tbl_table_add_with_set_and_get_valhi9", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi9_tbl_table_add_with_set_and_get_valhi9_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi9_tbl_table_add_with_set_and_get_valhi9()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi9_tbl_table_add_with_set_and_get_valhi9") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi9_tbl_table_add_with_set_and_get_valhi9_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi9_tbl_table_add_with_set_and_get_valhi9 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi9_tbl_table_add_with_reset_and_get_valhi9(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi9_tbl_match_spec_t& match_spec)
{
  send_update_valhi9_tbl_table_add_with_reset_and_get_valhi9(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi9_tbl_table_add_with_reset_and_get_valhi9();
}

void netbufferv4Client::send_update_valhi9_tbl_table_add_with_reset_and_get_valhi9(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi9_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi9_tbl_table_add_with_reset_and_get_valhi9", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi9_tbl_table_add_with_reset_and_get_valhi9_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi9_tbl_table_add_with_reset_and_get_valhi9()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi9_tbl_table_add_with_reset_and_get_valhi9") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi9_tbl_table_add_with_reset_and_get_valhi9_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi9_tbl_table_add_with_reset_and_get_valhi9 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi9_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi9_tbl_match_spec_t& match_spec)
{
  send_update_valhi9_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi9_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_valhi9_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi9_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi9_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi9_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi9_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi9_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi9_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi9_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallen_tbl_table_add_with_get_vallen(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallen_tbl_match_spec_t& match_spec)
{
  send_update_vallen_tbl_table_add_with_get_vallen(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallen_tbl_table_add_with_get_vallen();
}

void netbufferv4Client::send_update_vallen_tbl_table_add_with_get_vallen(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallen_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallen_tbl_table_add_with_get_vallen", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallen_tbl_table_add_with_get_vallen_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallen_tbl_table_add_with_get_vallen()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallen_tbl_table_add_with_get_vallen") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallen_tbl_table_add_with_get_vallen_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallen_tbl_table_add_with_get_vallen failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallen_tbl_table_add_with_set_and_get_vallen(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallen_tbl_match_spec_t& match_spec)
{
  send_update_vallen_tbl_table_add_with_set_and_get_vallen(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallen_tbl_table_add_with_set_and_get_vallen();
}

void netbufferv4Client::send_update_vallen_tbl_table_add_with_set_and_get_vallen(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallen_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallen_tbl_table_add_with_set_and_get_vallen", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallen_tbl_table_add_with_set_and_get_vallen_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallen_tbl_table_add_with_set_and_get_vallen()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallen_tbl_table_add_with_set_and_get_vallen") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallen_tbl_table_add_with_set_and_get_vallen_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallen_tbl_table_add_with_set_and_get_vallen failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallen_tbl_table_add_with_reset_and_get_vallen(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallen_tbl_match_spec_t& match_spec)
{
  send_update_vallen_tbl_table_add_with_reset_and_get_vallen(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallen_tbl_table_add_with_reset_and_get_vallen();
}

void netbufferv4Client::send_update_vallen_tbl_table_add_with_reset_and_get_vallen(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallen_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallen_tbl_table_add_with_reset_and_get_vallen", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallen_tbl_table_add_with_reset_and_get_vallen_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallen_tbl_table_add_with_reset_and_get_vallen()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallen_tbl_table_add_with_reset_and_get_vallen") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallen_tbl_table_add_with_reset_and_get_vallen_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallen_tbl_table_add_with_reset_and_get_vallen failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallen_tbl_table_add_with_reset_access_val_mode(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallen_tbl_match_spec_t& match_spec)
{
  send_update_vallen_tbl_table_add_with_reset_access_val_mode(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallen_tbl_table_add_with_reset_access_val_mode();
}

void netbufferv4Client::send_update_vallen_tbl_table_add_with_reset_access_val_mode(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallen_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallen_tbl_table_add_with_reset_access_val_mode", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallen_tbl_table_add_with_reset_access_val_mode_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallen_tbl_table_add_with_reset_access_val_mode()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallen_tbl_table_add_with_reset_access_val_mode") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallen_tbl_table_add_with_reset_access_val_mode_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallen_tbl_table_add_with_reset_access_val_mode failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallen_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallen_tbl_match_spec_t& match_spec)
{
  send_update_vallen_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallen_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_vallen_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallen_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallen_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallen_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallen_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallen_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallen_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallen_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo10_tbl_table_add_with_get_vallo10(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo10_tbl_match_spec_t& match_spec)
{
  send_update_vallo10_tbl_table_add_with_get_vallo10(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo10_tbl_table_add_with_get_vallo10();
}

void netbufferv4Client::send_update_vallo10_tbl_table_add_with_get_vallo10(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo10_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo10_tbl_table_add_with_get_vallo10", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo10_tbl_table_add_with_get_vallo10_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo10_tbl_table_add_with_get_vallo10()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo10_tbl_table_add_with_get_vallo10") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo10_tbl_table_add_with_get_vallo10_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo10_tbl_table_add_with_get_vallo10 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo10_tbl_table_add_with_set_and_get_vallo10(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo10_tbl_match_spec_t& match_spec)
{
  send_update_vallo10_tbl_table_add_with_set_and_get_vallo10(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo10_tbl_table_add_with_set_and_get_vallo10();
}

void netbufferv4Client::send_update_vallo10_tbl_table_add_with_set_and_get_vallo10(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo10_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo10_tbl_table_add_with_set_and_get_vallo10", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo10_tbl_table_add_with_set_and_get_vallo10_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo10_tbl_table_add_with_set_and_get_vallo10()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo10_tbl_table_add_with_set_and_get_vallo10") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo10_tbl_table_add_with_set_and_get_vallo10_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo10_tbl_table_add_with_set_and_get_vallo10 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo10_tbl_table_add_with_reset_and_get_vallo10(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo10_tbl_match_spec_t& match_spec)
{
  send_update_vallo10_tbl_table_add_with_reset_and_get_vallo10(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo10_tbl_table_add_with_reset_and_get_vallo10();
}

void netbufferv4Client::send_update_vallo10_tbl_table_add_with_reset_and_get_vallo10(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo10_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo10_tbl_table_add_with_reset_and_get_vallo10", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo10_tbl_table_add_with_reset_and_get_vallo10_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo10_tbl_table_add_with_reset_and_get_vallo10()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo10_tbl_table_add_with_reset_and_get_vallo10") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo10_tbl_table_add_with_reset_and_get_vallo10_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo10_tbl_table_add_with_reset_and_get_vallo10 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo10_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo10_tbl_match_spec_t& match_spec)
{
  send_update_vallo10_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo10_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_vallo10_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo10_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo10_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo10_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo10_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo10_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo10_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo10_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo11_tbl_table_add_with_get_vallo11(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo11_tbl_match_spec_t& match_spec)
{
  send_update_vallo11_tbl_table_add_with_get_vallo11(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo11_tbl_table_add_with_get_vallo11();
}

void netbufferv4Client::send_update_vallo11_tbl_table_add_with_get_vallo11(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo11_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo11_tbl_table_add_with_get_vallo11", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo11_tbl_table_add_with_get_vallo11_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo11_tbl_table_add_with_get_vallo11()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo11_tbl_table_add_with_get_vallo11") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo11_tbl_table_add_with_get_vallo11_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo11_tbl_table_add_with_get_vallo11 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo11_tbl_table_add_with_set_and_get_vallo11(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo11_tbl_match_spec_t& match_spec)
{
  send_update_vallo11_tbl_table_add_with_set_and_get_vallo11(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo11_tbl_table_add_with_set_and_get_vallo11();
}

void netbufferv4Client::send_update_vallo11_tbl_table_add_with_set_and_get_vallo11(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo11_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo11_tbl_table_add_with_set_and_get_vallo11", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo11_tbl_table_add_with_set_and_get_vallo11_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo11_tbl_table_add_with_set_and_get_vallo11()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo11_tbl_table_add_with_set_and_get_vallo11") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo11_tbl_table_add_with_set_and_get_vallo11_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo11_tbl_table_add_with_set_and_get_vallo11 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo11_tbl_table_add_with_reset_and_get_vallo11(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo11_tbl_match_spec_t& match_spec)
{
  send_update_vallo11_tbl_table_add_with_reset_and_get_vallo11(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo11_tbl_table_add_with_reset_and_get_vallo11();
}

void netbufferv4Client::send_update_vallo11_tbl_table_add_with_reset_and_get_vallo11(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo11_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo11_tbl_table_add_with_reset_and_get_vallo11", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo11_tbl_table_add_with_reset_and_get_vallo11_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo11_tbl_table_add_with_reset_and_get_vallo11()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo11_tbl_table_add_with_reset_and_get_vallo11") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo11_tbl_table_add_with_reset_and_get_vallo11_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo11_tbl_table_add_with_reset_and_get_vallo11 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo11_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo11_tbl_match_spec_t& match_spec)
{
  send_update_vallo11_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo11_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_vallo11_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo11_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo11_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo11_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo11_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo11_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo11_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo11_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo12_tbl_table_add_with_get_vallo12(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo12_tbl_match_spec_t& match_spec)
{
  send_update_vallo12_tbl_table_add_with_get_vallo12(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo12_tbl_table_add_with_get_vallo12();
}

void netbufferv4Client::send_update_vallo12_tbl_table_add_with_get_vallo12(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo12_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo12_tbl_table_add_with_get_vallo12", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo12_tbl_table_add_with_get_vallo12_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo12_tbl_table_add_with_get_vallo12()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo12_tbl_table_add_with_get_vallo12") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo12_tbl_table_add_with_get_vallo12_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo12_tbl_table_add_with_get_vallo12 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo12_tbl_table_add_with_set_and_get_vallo12(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo12_tbl_match_spec_t& match_spec)
{
  send_update_vallo12_tbl_table_add_with_set_and_get_vallo12(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo12_tbl_table_add_with_set_and_get_vallo12();
}

void netbufferv4Client::send_update_vallo12_tbl_table_add_with_set_and_get_vallo12(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo12_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo12_tbl_table_add_with_set_and_get_vallo12", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo12_tbl_table_add_with_set_and_get_vallo12_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo12_tbl_table_add_with_set_and_get_vallo12()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo12_tbl_table_add_with_set_and_get_vallo12") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo12_tbl_table_add_with_set_and_get_vallo12_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo12_tbl_table_add_with_set_and_get_vallo12 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo12_tbl_table_add_with_reset_and_get_vallo12(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo12_tbl_match_spec_t& match_spec)
{
  send_update_vallo12_tbl_table_add_with_reset_and_get_vallo12(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo12_tbl_table_add_with_reset_and_get_vallo12();
}

void netbufferv4Client::send_update_vallo12_tbl_table_add_with_reset_and_get_vallo12(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo12_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo12_tbl_table_add_with_reset_and_get_vallo12", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo12_tbl_table_add_with_reset_and_get_vallo12_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo12_tbl_table_add_with_reset_and_get_vallo12()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo12_tbl_table_add_with_reset_and_get_vallo12") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo12_tbl_table_add_with_reset_and_get_vallo12_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo12_tbl_table_add_with_reset_and_get_vallo12 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo12_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo12_tbl_match_spec_t& match_spec)
{
  send_update_vallo12_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo12_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_vallo12_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo12_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo12_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo12_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo12_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo12_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo12_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo12_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo13_tbl_table_add_with_get_vallo13(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo13_tbl_match_spec_t& match_spec)
{
  send_update_vallo13_tbl_table_add_with_get_vallo13(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo13_tbl_table_add_with_get_vallo13();
}

void netbufferv4Client::send_update_vallo13_tbl_table_add_with_get_vallo13(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo13_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo13_tbl_table_add_with_get_vallo13", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo13_tbl_table_add_with_get_vallo13_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo13_tbl_table_add_with_get_vallo13()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo13_tbl_table_add_with_get_vallo13") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo13_tbl_table_add_with_get_vallo13_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo13_tbl_table_add_with_get_vallo13 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo13_tbl_table_add_with_set_and_get_vallo13(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo13_tbl_match_spec_t& match_spec)
{
  send_update_vallo13_tbl_table_add_with_set_and_get_vallo13(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo13_tbl_table_add_with_set_and_get_vallo13();
}

void netbufferv4Client::send_update_vallo13_tbl_table_add_with_set_and_get_vallo13(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo13_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo13_tbl_table_add_with_set_and_get_vallo13", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo13_tbl_table_add_with_set_and_get_vallo13_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo13_tbl_table_add_with_set_and_get_vallo13()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo13_tbl_table_add_with_set_and_get_vallo13") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo13_tbl_table_add_with_set_and_get_vallo13_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo13_tbl_table_add_with_set_and_get_vallo13 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo13_tbl_table_add_with_reset_and_get_vallo13(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo13_tbl_match_spec_t& match_spec)
{
  send_update_vallo13_tbl_table_add_with_reset_and_get_vallo13(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo13_tbl_table_add_with_reset_and_get_vallo13();
}

void netbufferv4Client::send_update_vallo13_tbl_table_add_with_reset_and_get_vallo13(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo13_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo13_tbl_table_add_with_reset_and_get_vallo13", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo13_tbl_table_add_with_reset_and_get_vallo13_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo13_tbl_table_add_with_reset_and_get_vallo13()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo13_tbl_table_add_with_reset_and_get_vallo13") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo13_tbl_table_add_with_reset_and_get_vallo13_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo13_tbl_table_add_with_reset_and_get_vallo13 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo13_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo13_tbl_match_spec_t& match_spec)
{
  send_update_vallo13_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo13_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_vallo13_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo13_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo13_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo13_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo13_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo13_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo13_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo13_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo14_tbl_table_add_with_get_vallo14(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo14_tbl_match_spec_t& match_spec)
{
  send_update_vallo14_tbl_table_add_with_get_vallo14(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo14_tbl_table_add_with_get_vallo14();
}

void netbufferv4Client::send_update_vallo14_tbl_table_add_with_get_vallo14(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo14_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo14_tbl_table_add_with_get_vallo14", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo14_tbl_table_add_with_get_vallo14_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo14_tbl_table_add_with_get_vallo14()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo14_tbl_table_add_with_get_vallo14") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo14_tbl_table_add_with_get_vallo14_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo14_tbl_table_add_with_get_vallo14 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo14_tbl_table_add_with_set_and_get_vallo14(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo14_tbl_match_spec_t& match_spec)
{
  send_update_vallo14_tbl_table_add_with_set_and_get_vallo14(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo14_tbl_table_add_with_set_and_get_vallo14();
}

void netbufferv4Client::send_update_vallo14_tbl_table_add_with_set_and_get_vallo14(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo14_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo14_tbl_table_add_with_set_and_get_vallo14", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo14_tbl_table_add_with_set_and_get_vallo14_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo14_tbl_table_add_with_set_and_get_vallo14()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo14_tbl_table_add_with_set_and_get_vallo14") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo14_tbl_table_add_with_set_and_get_vallo14_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo14_tbl_table_add_with_set_and_get_vallo14 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo14_tbl_table_add_with_reset_and_get_vallo14(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo14_tbl_match_spec_t& match_spec)
{
  send_update_vallo14_tbl_table_add_with_reset_and_get_vallo14(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo14_tbl_table_add_with_reset_and_get_vallo14();
}

void netbufferv4Client::send_update_vallo14_tbl_table_add_with_reset_and_get_vallo14(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo14_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo14_tbl_table_add_with_reset_and_get_vallo14", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo14_tbl_table_add_with_reset_and_get_vallo14_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo14_tbl_table_add_with_reset_and_get_vallo14()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo14_tbl_table_add_with_reset_and_get_vallo14") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo14_tbl_table_add_with_reset_and_get_vallo14_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo14_tbl_table_add_with_reset_and_get_vallo14 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo14_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo14_tbl_match_spec_t& match_spec)
{
  send_update_vallo14_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo14_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_vallo14_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo14_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo14_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo14_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo14_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo14_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo14_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo14_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo15_tbl_table_add_with_get_vallo15(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo15_tbl_match_spec_t& match_spec)
{
  send_update_vallo15_tbl_table_add_with_get_vallo15(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo15_tbl_table_add_with_get_vallo15();
}

void netbufferv4Client::send_update_vallo15_tbl_table_add_with_get_vallo15(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo15_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo15_tbl_table_add_with_get_vallo15", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo15_tbl_table_add_with_get_vallo15_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo15_tbl_table_add_with_get_vallo15()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo15_tbl_table_add_with_get_vallo15") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo15_tbl_table_add_with_get_vallo15_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo15_tbl_table_add_with_get_vallo15 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo15_tbl_table_add_with_set_and_get_vallo15(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo15_tbl_match_spec_t& match_spec)
{
  send_update_vallo15_tbl_table_add_with_set_and_get_vallo15(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo15_tbl_table_add_with_set_and_get_vallo15();
}

void netbufferv4Client::send_update_vallo15_tbl_table_add_with_set_and_get_vallo15(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo15_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo15_tbl_table_add_with_set_and_get_vallo15", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo15_tbl_table_add_with_set_and_get_vallo15_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo15_tbl_table_add_with_set_and_get_vallo15()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo15_tbl_table_add_with_set_and_get_vallo15") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo15_tbl_table_add_with_set_and_get_vallo15_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo15_tbl_table_add_with_set_and_get_vallo15 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo15_tbl_table_add_with_reset_and_get_vallo15(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo15_tbl_match_spec_t& match_spec)
{
  send_update_vallo15_tbl_table_add_with_reset_and_get_vallo15(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo15_tbl_table_add_with_reset_and_get_vallo15();
}

void netbufferv4Client::send_update_vallo15_tbl_table_add_with_reset_and_get_vallo15(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo15_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo15_tbl_table_add_with_reset_and_get_vallo15", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo15_tbl_table_add_with_reset_and_get_vallo15_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo15_tbl_table_add_with_reset_and_get_vallo15()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo15_tbl_table_add_with_reset_and_get_vallo15") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo15_tbl_table_add_with_reset_and_get_vallo15_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo15_tbl_table_add_with_reset_and_get_vallo15 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo15_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo15_tbl_match_spec_t& match_spec)
{
  send_update_vallo15_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo15_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_vallo15_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo15_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo15_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo15_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo15_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo15_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo15_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo15_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo16_tbl_table_add_with_get_vallo16(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo16_tbl_match_spec_t& match_spec)
{
  send_update_vallo16_tbl_table_add_with_get_vallo16(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo16_tbl_table_add_with_get_vallo16();
}

void netbufferv4Client::send_update_vallo16_tbl_table_add_with_get_vallo16(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo16_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo16_tbl_table_add_with_get_vallo16", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo16_tbl_table_add_with_get_vallo16_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo16_tbl_table_add_with_get_vallo16()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo16_tbl_table_add_with_get_vallo16") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo16_tbl_table_add_with_get_vallo16_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo16_tbl_table_add_with_get_vallo16 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo16_tbl_table_add_with_set_and_get_vallo16(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo16_tbl_match_spec_t& match_spec)
{
  send_update_vallo16_tbl_table_add_with_set_and_get_vallo16(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo16_tbl_table_add_with_set_and_get_vallo16();
}

void netbufferv4Client::send_update_vallo16_tbl_table_add_with_set_and_get_vallo16(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo16_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo16_tbl_table_add_with_set_and_get_vallo16", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo16_tbl_table_add_with_set_and_get_vallo16_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo16_tbl_table_add_with_set_and_get_vallo16()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo16_tbl_table_add_with_set_and_get_vallo16") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo16_tbl_table_add_with_set_and_get_vallo16_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo16_tbl_table_add_with_set_and_get_vallo16 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo16_tbl_table_add_with_reset_and_get_vallo16(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo16_tbl_match_spec_t& match_spec)
{
  send_update_vallo16_tbl_table_add_with_reset_and_get_vallo16(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo16_tbl_table_add_with_reset_and_get_vallo16();
}

void netbufferv4Client::send_update_vallo16_tbl_table_add_with_reset_and_get_vallo16(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo16_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo16_tbl_table_add_with_reset_and_get_vallo16", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo16_tbl_table_add_with_reset_and_get_vallo16_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo16_tbl_table_add_with_reset_and_get_vallo16()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo16_tbl_table_add_with_reset_and_get_vallo16") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo16_tbl_table_add_with_reset_and_get_vallo16_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo16_tbl_table_add_with_reset_and_get_vallo16 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo16_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo16_tbl_match_spec_t& match_spec)
{
  send_update_vallo16_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo16_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_vallo16_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo16_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo16_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo16_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo16_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo16_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo16_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo16_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo1_tbl_table_add_with_get_vallo1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo1_tbl_match_spec_t& match_spec)
{
  send_update_vallo1_tbl_table_add_with_get_vallo1(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo1_tbl_table_add_with_get_vallo1();
}

void netbufferv4Client::send_update_vallo1_tbl_table_add_with_get_vallo1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo1_tbl_table_add_with_get_vallo1", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo1_tbl_table_add_with_get_vallo1_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo1_tbl_table_add_with_get_vallo1()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo1_tbl_table_add_with_get_vallo1") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo1_tbl_table_add_with_get_vallo1_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo1_tbl_table_add_with_get_vallo1 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo1_tbl_table_add_with_set_and_get_vallo1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo1_tbl_match_spec_t& match_spec)
{
  send_update_vallo1_tbl_table_add_with_set_and_get_vallo1(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo1_tbl_table_add_with_set_and_get_vallo1();
}

void netbufferv4Client::send_update_vallo1_tbl_table_add_with_set_and_get_vallo1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo1_tbl_table_add_with_set_and_get_vallo1", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo1_tbl_table_add_with_set_and_get_vallo1_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo1_tbl_table_add_with_set_and_get_vallo1()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo1_tbl_table_add_with_set_and_get_vallo1") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo1_tbl_table_add_with_set_and_get_vallo1_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo1_tbl_table_add_with_set_and_get_vallo1 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo1_tbl_table_add_with_reset_and_get_vallo1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo1_tbl_match_spec_t& match_spec)
{
  send_update_vallo1_tbl_table_add_with_reset_and_get_vallo1(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo1_tbl_table_add_with_reset_and_get_vallo1();
}

void netbufferv4Client::send_update_vallo1_tbl_table_add_with_reset_and_get_vallo1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo1_tbl_table_add_with_reset_and_get_vallo1", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo1_tbl_table_add_with_reset_and_get_vallo1_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo1_tbl_table_add_with_reset_and_get_vallo1()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo1_tbl_table_add_with_reset_and_get_vallo1") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo1_tbl_table_add_with_reset_and_get_vallo1_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo1_tbl_table_add_with_reset_and_get_vallo1 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo1_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo1_tbl_match_spec_t& match_spec)
{
  send_update_vallo1_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo1_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_vallo1_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo1_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo1_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo1_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo1_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo1_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo1_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo2_tbl_table_add_with_get_vallo2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo2_tbl_match_spec_t& match_spec)
{
  send_update_vallo2_tbl_table_add_with_get_vallo2(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo2_tbl_table_add_with_get_vallo2();
}

void netbufferv4Client::send_update_vallo2_tbl_table_add_with_get_vallo2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo2_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo2_tbl_table_add_with_get_vallo2", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo2_tbl_table_add_with_get_vallo2_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo2_tbl_table_add_with_get_vallo2()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo2_tbl_table_add_with_get_vallo2") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo2_tbl_table_add_with_get_vallo2_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo2_tbl_table_add_with_get_vallo2 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo2_tbl_table_add_with_set_and_get_vallo2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo2_tbl_match_spec_t& match_spec)
{
  send_update_vallo2_tbl_table_add_with_set_and_get_vallo2(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo2_tbl_table_add_with_set_and_get_vallo2();
}

void netbufferv4Client::send_update_vallo2_tbl_table_add_with_set_and_get_vallo2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo2_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo2_tbl_table_add_with_set_and_get_vallo2", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo2_tbl_table_add_with_set_and_get_vallo2_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo2_tbl_table_add_with_set_and_get_vallo2()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo2_tbl_table_add_with_set_and_get_vallo2") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo2_tbl_table_add_with_set_and_get_vallo2_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo2_tbl_table_add_with_set_and_get_vallo2 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo2_tbl_table_add_with_reset_and_get_vallo2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo2_tbl_match_spec_t& match_spec)
{
  send_update_vallo2_tbl_table_add_with_reset_and_get_vallo2(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo2_tbl_table_add_with_reset_and_get_vallo2();
}

void netbufferv4Client::send_update_vallo2_tbl_table_add_with_reset_and_get_vallo2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo2_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo2_tbl_table_add_with_reset_and_get_vallo2", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo2_tbl_table_add_with_reset_and_get_vallo2_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo2_tbl_table_add_with_reset_and_get_vallo2()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo2_tbl_table_add_with_reset_and_get_vallo2") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo2_tbl_table_add_with_reset_and_get_vallo2_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo2_tbl_table_add_with_reset_and_get_vallo2 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo2_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo2_tbl_match_spec_t& match_spec)
{
  send_update_vallo2_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo2_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_vallo2_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo2_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo2_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo2_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo2_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo2_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo2_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo2_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo3_tbl_table_add_with_get_vallo3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo3_tbl_match_spec_t& match_spec)
{
  send_update_vallo3_tbl_table_add_with_get_vallo3(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo3_tbl_table_add_with_get_vallo3();
}

void netbufferv4Client::send_update_vallo3_tbl_table_add_with_get_vallo3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo3_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo3_tbl_table_add_with_get_vallo3", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo3_tbl_table_add_with_get_vallo3_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo3_tbl_table_add_with_get_vallo3()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo3_tbl_table_add_with_get_vallo3") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo3_tbl_table_add_with_get_vallo3_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo3_tbl_table_add_with_get_vallo3 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo3_tbl_table_add_with_set_and_get_vallo3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo3_tbl_match_spec_t& match_spec)
{
  send_update_vallo3_tbl_table_add_with_set_and_get_vallo3(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo3_tbl_table_add_with_set_and_get_vallo3();
}

void netbufferv4Client::send_update_vallo3_tbl_table_add_with_set_and_get_vallo3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo3_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo3_tbl_table_add_with_set_and_get_vallo3", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo3_tbl_table_add_with_set_and_get_vallo3_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo3_tbl_table_add_with_set_and_get_vallo3()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo3_tbl_table_add_with_set_and_get_vallo3") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo3_tbl_table_add_with_set_and_get_vallo3_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo3_tbl_table_add_with_set_and_get_vallo3 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo3_tbl_table_add_with_reset_and_get_vallo3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo3_tbl_match_spec_t& match_spec)
{
  send_update_vallo3_tbl_table_add_with_reset_and_get_vallo3(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo3_tbl_table_add_with_reset_and_get_vallo3();
}

void netbufferv4Client::send_update_vallo3_tbl_table_add_with_reset_and_get_vallo3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo3_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo3_tbl_table_add_with_reset_and_get_vallo3", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo3_tbl_table_add_with_reset_and_get_vallo3_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo3_tbl_table_add_with_reset_and_get_vallo3()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo3_tbl_table_add_with_reset_and_get_vallo3") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo3_tbl_table_add_with_reset_and_get_vallo3_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo3_tbl_table_add_with_reset_and_get_vallo3 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo3_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo3_tbl_match_spec_t& match_spec)
{
  send_update_vallo3_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo3_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_vallo3_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo3_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo3_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo3_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo3_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo3_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo3_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo3_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo4_tbl_table_add_with_get_vallo4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo4_tbl_match_spec_t& match_spec)
{
  send_update_vallo4_tbl_table_add_with_get_vallo4(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo4_tbl_table_add_with_get_vallo4();
}

void netbufferv4Client::send_update_vallo4_tbl_table_add_with_get_vallo4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo4_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo4_tbl_table_add_with_get_vallo4", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo4_tbl_table_add_with_get_vallo4_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo4_tbl_table_add_with_get_vallo4()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo4_tbl_table_add_with_get_vallo4") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo4_tbl_table_add_with_get_vallo4_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo4_tbl_table_add_with_get_vallo4 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo4_tbl_table_add_with_set_and_get_vallo4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo4_tbl_match_spec_t& match_spec)
{
  send_update_vallo4_tbl_table_add_with_set_and_get_vallo4(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo4_tbl_table_add_with_set_and_get_vallo4();
}

void netbufferv4Client::send_update_vallo4_tbl_table_add_with_set_and_get_vallo4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo4_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo4_tbl_table_add_with_set_and_get_vallo4", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo4_tbl_table_add_with_set_and_get_vallo4_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo4_tbl_table_add_with_set_and_get_vallo4()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo4_tbl_table_add_with_set_and_get_vallo4") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo4_tbl_table_add_with_set_and_get_vallo4_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo4_tbl_table_add_with_set_and_get_vallo4 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo4_tbl_table_add_with_reset_and_get_vallo4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo4_tbl_match_spec_t& match_spec)
{
  send_update_vallo4_tbl_table_add_with_reset_and_get_vallo4(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo4_tbl_table_add_with_reset_and_get_vallo4();
}

void netbufferv4Client::send_update_vallo4_tbl_table_add_with_reset_and_get_vallo4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo4_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo4_tbl_table_add_with_reset_and_get_vallo4", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo4_tbl_table_add_with_reset_and_get_vallo4_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo4_tbl_table_add_with_reset_and_get_vallo4()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo4_tbl_table_add_with_reset_and_get_vallo4") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo4_tbl_table_add_with_reset_and_get_vallo4_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo4_tbl_table_add_with_reset_and_get_vallo4 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo4_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo4_tbl_match_spec_t& match_spec)
{
  send_update_vallo4_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo4_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_vallo4_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo4_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo4_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo4_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo4_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo4_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo4_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo4_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo5_tbl_table_add_with_get_vallo5(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo5_tbl_match_spec_t& match_spec)
{
  send_update_vallo5_tbl_table_add_with_get_vallo5(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo5_tbl_table_add_with_get_vallo5();
}

void netbufferv4Client::send_update_vallo5_tbl_table_add_with_get_vallo5(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo5_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo5_tbl_table_add_with_get_vallo5", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo5_tbl_table_add_with_get_vallo5_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo5_tbl_table_add_with_get_vallo5()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo5_tbl_table_add_with_get_vallo5") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo5_tbl_table_add_with_get_vallo5_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo5_tbl_table_add_with_get_vallo5 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo5_tbl_table_add_with_set_and_get_vallo5(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo5_tbl_match_spec_t& match_spec)
{
  send_update_vallo5_tbl_table_add_with_set_and_get_vallo5(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo5_tbl_table_add_with_set_and_get_vallo5();
}

void netbufferv4Client::send_update_vallo5_tbl_table_add_with_set_and_get_vallo5(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo5_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo5_tbl_table_add_with_set_and_get_vallo5", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo5_tbl_table_add_with_set_and_get_vallo5_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo5_tbl_table_add_with_set_and_get_vallo5()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo5_tbl_table_add_with_set_and_get_vallo5") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo5_tbl_table_add_with_set_and_get_vallo5_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo5_tbl_table_add_with_set_and_get_vallo5 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo5_tbl_table_add_with_reset_and_get_vallo5(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo5_tbl_match_spec_t& match_spec)
{
  send_update_vallo5_tbl_table_add_with_reset_and_get_vallo5(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo5_tbl_table_add_with_reset_and_get_vallo5();
}

void netbufferv4Client::send_update_vallo5_tbl_table_add_with_reset_and_get_vallo5(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo5_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo5_tbl_table_add_with_reset_and_get_vallo5", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo5_tbl_table_add_with_reset_and_get_vallo5_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo5_tbl_table_add_with_reset_and_get_vallo5()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo5_tbl_table_add_with_reset_and_get_vallo5") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo5_tbl_table_add_with_reset_and_get_vallo5_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo5_tbl_table_add_with_reset_and_get_vallo5 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo5_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo5_tbl_match_spec_t& match_spec)
{
  send_update_vallo5_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo5_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_vallo5_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo5_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo5_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo5_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo5_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo5_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo5_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo5_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo6_tbl_table_add_with_get_vallo6(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo6_tbl_match_spec_t& match_spec)
{
  send_update_vallo6_tbl_table_add_with_get_vallo6(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo6_tbl_table_add_with_get_vallo6();
}

void netbufferv4Client::send_update_vallo6_tbl_table_add_with_get_vallo6(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo6_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo6_tbl_table_add_with_get_vallo6", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo6_tbl_table_add_with_get_vallo6_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo6_tbl_table_add_with_get_vallo6()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo6_tbl_table_add_with_get_vallo6") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo6_tbl_table_add_with_get_vallo6_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo6_tbl_table_add_with_get_vallo6 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo6_tbl_table_add_with_set_and_get_vallo6(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo6_tbl_match_spec_t& match_spec)
{
  send_update_vallo6_tbl_table_add_with_set_and_get_vallo6(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo6_tbl_table_add_with_set_and_get_vallo6();
}

void netbufferv4Client::send_update_vallo6_tbl_table_add_with_set_and_get_vallo6(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo6_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo6_tbl_table_add_with_set_and_get_vallo6", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo6_tbl_table_add_with_set_and_get_vallo6_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo6_tbl_table_add_with_set_and_get_vallo6()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo6_tbl_table_add_with_set_and_get_vallo6") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo6_tbl_table_add_with_set_and_get_vallo6_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo6_tbl_table_add_with_set_and_get_vallo6 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo6_tbl_table_add_with_reset_and_get_vallo6(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo6_tbl_match_spec_t& match_spec)
{
  send_update_vallo6_tbl_table_add_with_reset_and_get_vallo6(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo6_tbl_table_add_with_reset_and_get_vallo6();
}

void netbufferv4Client::send_update_vallo6_tbl_table_add_with_reset_and_get_vallo6(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo6_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo6_tbl_table_add_with_reset_and_get_vallo6", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo6_tbl_table_add_with_reset_and_get_vallo6_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo6_tbl_table_add_with_reset_and_get_vallo6()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo6_tbl_table_add_with_reset_and_get_vallo6") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo6_tbl_table_add_with_reset_and_get_vallo6_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo6_tbl_table_add_with_reset_and_get_vallo6 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo6_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo6_tbl_match_spec_t& match_spec)
{
  send_update_vallo6_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo6_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_vallo6_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo6_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo6_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo6_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo6_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo6_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo6_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo6_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo7_tbl_table_add_with_get_vallo7(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo7_tbl_match_spec_t& match_spec)
{
  send_update_vallo7_tbl_table_add_with_get_vallo7(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo7_tbl_table_add_with_get_vallo7();
}

void netbufferv4Client::send_update_vallo7_tbl_table_add_with_get_vallo7(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo7_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo7_tbl_table_add_with_get_vallo7", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo7_tbl_table_add_with_get_vallo7_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo7_tbl_table_add_with_get_vallo7()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo7_tbl_table_add_with_get_vallo7") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo7_tbl_table_add_with_get_vallo7_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo7_tbl_table_add_with_get_vallo7 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo7_tbl_table_add_with_set_and_get_vallo7(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo7_tbl_match_spec_t& match_spec)
{
  send_update_vallo7_tbl_table_add_with_set_and_get_vallo7(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo7_tbl_table_add_with_set_and_get_vallo7();
}

void netbufferv4Client::send_update_vallo7_tbl_table_add_with_set_and_get_vallo7(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo7_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo7_tbl_table_add_with_set_and_get_vallo7", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo7_tbl_table_add_with_set_and_get_vallo7_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo7_tbl_table_add_with_set_and_get_vallo7()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo7_tbl_table_add_with_set_and_get_vallo7") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo7_tbl_table_add_with_set_and_get_vallo7_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo7_tbl_table_add_with_set_and_get_vallo7 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo7_tbl_table_add_with_reset_and_get_vallo7(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo7_tbl_match_spec_t& match_spec)
{
  send_update_vallo7_tbl_table_add_with_reset_and_get_vallo7(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo7_tbl_table_add_with_reset_and_get_vallo7();
}

void netbufferv4Client::send_update_vallo7_tbl_table_add_with_reset_and_get_vallo7(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo7_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo7_tbl_table_add_with_reset_and_get_vallo7", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo7_tbl_table_add_with_reset_and_get_vallo7_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo7_tbl_table_add_with_reset_and_get_vallo7()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo7_tbl_table_add_with_reset_and_get_vallo7") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo7_tbl_table_add_with_reset_and_get_vallo7_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo7_tbl_table_add_with_reset_and_get_vallo7 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo7_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo7_tbl_match_spec_t& match_spec)
{
  send_update_vallo7_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo7_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_vallo7_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo7_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo7_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo7_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo7_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo7_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo7_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo7_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo8_tbl_table_add_with_get_vallo8(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo8_tbl_match_spec_t& match_spec)
{
  send_update_vallo8_tbl_table_add_with_get_vallo8(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo8_tbl_table_add_with_get_vallo8();
}

void netbufferv4Client::send_update_vallo8_tbl_table_add_with_get_vallo8(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo8_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo8_tbl_table_add_with_get_vallo8", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo8_tbl_table_add_with_get_vallo8_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo8_tbl_table_add_with_get_vallo8()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo8_tbl_table_add_with_get_vallo8") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo8_tbl_table_add_with_get_vallo8_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo8_tbl_table_add_with_get_vallo8 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo8_tbl_table_add_with_set_and_get_vallo8(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo8_tbl_match_spec_t& match_spec)
{
  send_update_vallo8_tbl_table_add_with_set_and_get_vallo8(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo8_tbl_table_add_with_set_and_get_vallo8();
}

void netbufferv4Client::send_update_vallo8_tbl_table_add_with_set_and_get_vallo8(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo8_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo8_tbl_table_add_with_set_and_get_vallo8", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo8_tbl_table_add_with_set_and_get_vallo8_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo8_tbl_table_add_with_set_and_get_vallo8()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo8_tbl_table_add_with_set_and_get_vallo8") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo8_tbl_table_add_with_set_and_get_vallo8_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo8_tbl_table_add_with_set_and_get_vallo8 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo8_tbl_table_add_with_reset_and_get_vallo8(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo8_tbl_match_spec_t& match_spec)
{
  send_update_vallo8_tbl_table_add_with_reset_and_get_vallo8(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo8_tbl_table_add_with_reset_and_get_vallo8();
}

void netbufferv4Client::send_update_vallo8_tbl_table_add_with_reset_and_get_vallo8(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo8_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo8_tbl_table_add_with_reset_and_get_vallo8", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo8_tbl_table_add_with_reset_and_get_vallo8_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo8_tbl_table_add_with_reset_and_get_vallo8()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo8_tbl_table_add_with_reset_and_get_vallo8") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo8_tbl_table_add_with_reset_and_get_vallo8_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo8_tbl_table_add_with_reset_and_get_vallo8 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo8_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo8_tbl_match_spec_t& match_spec)
{
  send_update_vallo8_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo8_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_vallo8_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo8_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo8_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo8_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo8_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo8_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo8_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo8_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo9_tbl_table_add_with_get_vallo9(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo9_tbl_match_spec_t& match_spec)
{
  send_update_vallo9_tbl_table_add_with_get_vallo9(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo9_tbl_table_add_with_get_vallo9();
}

void netbufferv4Client::send_update_vallo9_tbl_table_add_with_get_vallo9(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo9_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo9_tbl_table_add_with_get_vallo9", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo9_tbl_table_add_with_get_vallo9_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo9_tbl_table_add_with_get_vallo9()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo9_tbl_table_add_with_get_vallo9") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo9_tbl_table_add_with_get_vallo9_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo9_tbl_table_add_with_get_vallo9 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo9_tbl_table_add_with_set_and_get_vallo9(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo9_tbl_match_spec_t& match_spec)
{
  send_update_vallo9_tbl_table_add_with_set_and_get_vallo9(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo9_tbl_table_add_with_set_and_get_vallo9();
}

void netbufferv4Client::send_update_vallo9_tbl_table_add_with_set_and_get_vallo9(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo9_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo9_tbl_table_add_with_set_and_get_vallo9", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo9_tbl_table_add_with_set_and_get_vallo9_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo9_tbl_table_add_with_set_and_get_vallo9()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo9_tbl_table_add_with_set_and_get_vallo9") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo9_tbl_table_add_with_set_and_get_vallo9_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo9_tbl_table_add_with_set_and_get_vallo9 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo9_tbl_table_add_with_reset_and_get_vallo9(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo9_tbl_match_spec_t& match_spec)
{
  send_update_vallo9_tbl_table_add_with_reset_and_get_vallo9(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo9_tbl_table_add_with_reset_and_get_vallo9();
}

void netbufferv4Client::send_update_vallo9_tbl_table_add_with_reset_and_get_vallo9(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo9_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo9_tbl_table_add_with_reset_and_get_vallo9", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo9_tbl_table_add_with_reset_and_get_vallo9_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo9_tbl_table_add_with_reset_and_get_vallo9()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo9_tbl_table_add_with_reset_and_get_vallo9") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo9_tbl_table_add_with_reset_and_get_vallo9_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo9_tbl_table_add_with_reset_and_get_vallo9 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo9_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo9_tbl_match_spec_t& match_spec)
{
  send_update_vallo9_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo9_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_vallo9_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo9_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo9_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo9_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo9_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo9_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo9_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo9_tbl_table_add_with_nop failed: unknown result");
}

void netbufferv4Client::access_cache_frequency_tbl_table_modify_with_get_cache_frequency(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_cache_frequency_tbl_table_modify_with_get_cache_frequency(sess_hdl, dev_id, entry);
  recv_access_cache_frequency_tbl_table_modify_with_get_cache_frequency();
}

void netbufferv4Client::send_access_cache_frequency_tbl_table_modify_with_get_cache_frequency(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cache_frequency_tbl_table_modify_with_get_cache_frequency", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cache_frequency_tbl_table_modify_with_get_cache_frequency_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cache_frequency_tbl_table_modify_with_get_cache_frequency()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cache_frequency_tbl_table_modify_with_get_cache_frequency") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cache_frequency_tbl_table_modify_with_get_cache_frequency_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cache_frequency_tbl_table_modify_with_get_cache_frequency_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cache_frequency_tbl_match_spec_t& match_spec)
{
  send_access_cache_frequency_tbl_table_modify_with_get_cache_frequency_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_cache_frequency_tbl_table_modify_with_get_cache_frequency_by_match_spec();
}

void netbufferv4Client::send_access_cache_frequency_tbl_table_modify_with_get_cache_frequency_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cache_frequency_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cache_frequency_tbl_table_modify_with_get_cache_frequency_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cache_frequency_tbl_table_modify_with_get_cache_frequency_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cache_frequency_tbl_table_modify_with_get_cache_frequency_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cache_frequency_tbl_table_modify_with_get_cache_frequency_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cache_frequency_tbl_table_modify_with_get_cache_frequency_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cache_frequency_tbl_table_modify_with_update_cache_frequency(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_cache_frequency_tbl_table_modify_with_update_cache_frequency(sess_hdl, dev_id, entry);
  recv_access_cache_frequency_tbl_table_modify_with_update_cache_frequency();
}

void netbufferv4Client::send_access_cache_frequency_tbl_table_modify_with_update_cache_frequency(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cache_frequency_tbl_table_modify_with_update_cache_frequency", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cache_frequency_tbl_table_modify_with_update_cache_frequency_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cache_frequency_tbl_table_modify_with_update_cache_frequency()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cache_frequency_tbl_table_modify_with_update_cache_frequency") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cache_frequency_tbl_table_modify_with_update_cache_frequency_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cache_frequency_tbl_table_modify_with_update_cache_frequency_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cache_frequency_tbl_match_spec_t& match_spec)
{
  send_access_cache_frequency_tbl_table_modify_with_update_cache_frequency_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_cache_frequency_tbl_table_modify_with_update_cache_frequency_by_match_spec();
}

void netbufferv4Client::send_access_cache_frequency_tbl_table_modify_with_update_cache_frequency_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cache_frequency_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cache_frequency_tbl_table_modify_with_update_cache_frequency_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cache_frequency_tbl_table_modify_with_update_cache_frequency_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cache_frequency_tbl_table_modify_with_update_cache_frequency_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cache_frequency_tbl_table_modify_with_update_cache_frequency_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cache_frequency_tbl_table_modify_with_update_cache_frequency_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cache_frequency_tbl_table_modify_with_reset_cache_frequency(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_cache_frequency_tbl_table_modify_with_reset_cache_frequency(sess_hdl, dev_id, entry);
  recv_access_cache_frequency_tbl_table_modify_with_reset_cache_frequency();
}

void netbufferv4Client::send_access_cache_frequency_tbl_table_modify_with_reset_cache_frequency(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cache_frequency_tbl_table_modify_with_reset_cache_frequency", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cache_frequency_tbl_table_modify_with_reset_cache_frequency_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cache_frequency_tbl_table_modify_with_reset_cache_frequency()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cache_frequency_tbl_table_modify_with_reset_cache_frequency") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cache_frequency_tbl_table_modify_with_reset_cache_frequency_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cache_frequency_tbl_table_modify_with_reset_cache_frequency_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cache_frequency_tbl_match_spec_t& match_spec)
{
  send_access_cache_frequency_tbl_table_modify_with_reset_cache_frequency_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_cache_frequency_tbl_table_modify_with_reset_cache_frequency_by_match_spec();
}

void netbufferv4Client::send_access_cache_frequency_tbl_table_modify_with_reset_cache_frequency_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cache_frequency_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cache_frequency_tbl_table_modify_with_reset_cache_frequency_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cache_frequency_tbl_table_modify_with_reset_cache_frequency_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cache_frequency_tbl_table_modify_with_reset_cache_frequency_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cache_frequency_tbl_table_modify_with_reset_cache_frequency_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cache_frequency_tbl_table_modify_with_reset_cache_frequency_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cache_frequency_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_cache_frequency_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_access_cache_frequency_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_access_cache_frequency_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cache_frequency_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cache_frequency_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cache_frequency_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cache_frequency_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cache_frequency_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cache_frequency_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cache_frequency_tbl_match_spec_t& match_spec)
{
  send_access_cache_frequency_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_cache_frequency_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_access_cache_frequency_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cache_frequency_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cache_frequency_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cache_frequency_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cache_frequency_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cache_frequency_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cache_frequency_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_case1_tbl_table_modify_with_try_case1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_case1_tbl_table_modify_with_try_case1(sess_hdl, dev_id, entry);
  recv_access_case1_tbl_table_modify_with_try_case1();
}

void netbufferv4Client::send_access_case1_tbl_table_modify_with_try_case1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_case1_tbl_table_modify_with_try_case1", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_case1_tbl_table_modify_with_try_case1_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_case1_tbl_table_modify_with_try_case1()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_case1_tbl_table_modify_with_try_case1") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_case1_tbl_table_modify_with_try_case1_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_case1_tbl_table_modify_with_try_case1_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_case1_tbl_match_spec_t& match_spec)
{
  send_access_case1_tbl_table_modify_with_try_case1_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_case1_tbl_table_modify_with_try_case1_by_match_spec();
}

void netbufferv4Client::send_access_case1_tbl_table_modify_with_try_case1_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_case1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_case1_tbl_table_modify_with_try_case1_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_case1_tbl_table_modify_with_try_case1_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_case1_tbl_table_modify_with_try_case1_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_case1_tbl_table_modify_with_try_case1_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_case1_tbl_table_modify_with_try_case1_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_case1_tbl_table_modify_with_read_case1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_case1_tbl_table_modify_with_read_case1(sess_hdl, dev_id, entry);
  recv_access_case1_tbl_table_modify_with_read_case1();
}

void netbufferv4Client::send_access_case1_tbl_table_modify_with_read_case1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_case1_tbl_table_modify_with_read_case1", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_case1_tbl_table_modify_with_read_case1_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_case1_tbl_table_modify_with_read_case1()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_case1_tbl_table_modify_with_read_case1") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_case1_tbl_table_modify_with_read_case1_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_case1_tbl_table_modify_with_read_case1_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_case1_tbl_match_spec_t& match_spec)
{
  send_access_case1_tbl_table_modify_with_read_case1_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_case1_tbl_table_modify_with_read_case1_by_match_spec();
}

void netbufferv4Client::send_access_case1_tbl_table_modify_with_read_case1_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_case1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_case1_tbl_table_modify_with_read_case1_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_case1_tbl_table_modify_with_read_case1_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_case1_tbl_table_modify_with_read_case1_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_case1_tbl_table_modify_with_read_case1_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_case1_tbl_table_modify_with_read_case1_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_case1_tbl_table_modify_with_reset_is_case1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_case1_tbl_table_modify_with_reset_is_case1(sess_hdl, dev_id, entry);
  recv_access_case1_tbl_table_modify_with_reset_is_case1();
}

void netbufferv4Client::send_access_case1_tbl_table_modify_with_reset_is_case1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_case1_tbl_table_modify_with_reset_is_case1", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_case1_tbl_table_modify_with_reset_is_case1_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_case1_tbl_table_modify_with_reset_is_case1()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_case1_tbl_table_modify_with_reset_is_case1") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_case1_tbl_table_modify_with_reset_is_case1_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_case1_tbl_table_modify_with_reset_is_case1_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_case1_tbl_match_spec_t& match_spec)
{
  send_access_case1_tbl_table_modify_with_reset_is_case1_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_case1_tbl_table_modify_with_reset_is_case1_by_match_spec();
}

void netbufferv4Client::send_access_case1_tbl_table_modify_with_reset_is_case1_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_case1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_case1_tbl_table_modify_with_reset_is_case1_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_case1_tbl_table_modify_with_reset_is_case1_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_case1_tbl_table_modify_with_reset_is_case1_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_case1_tbl_table_modify_with_reset_is_case1_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_case1_tbl_table_modify_with_reset_is_case1_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cm1_tbl_table_modify_with_update_cm1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_cm1_tbl_table_modify_with_update_cm1(sess_hdl, dev_id, entry);
  recv_access_cm1_tbl_table_modify_with_update_cm1();
}

void netbufferv4Client::send_access_cm1_tbl_table_modify_with_update_cm1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm1_tbl_table_modify_with_update_cm1", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm1_tbl_table_modify_with_update_cm1_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm1_tbl_table_modify_with_update_cm1()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm1_tbl_table_modify_with_update_cm1") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm1_tbl_table_modify_with_update_cm1_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cm1_tbl_table_modify_with_update_cm1_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm1_tbl_match_spec_t& match_spec)
{
  send_access_cm1_tbl_table_modify_with_update_cm1_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_cm1_tbl_table_modify_with_update_cm1_by_match_spec();
}

void netbufferv4Client::send_access_cm1_tbl_table_modify_with_update_cm1_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm1_tbl_table_modify_with_update_cm1_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm1_tbl_table_modify_with_update_cm1_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm1_tbl_table_modify_with_update_cm1_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm1_tbl_table_modify_with_update_cm1_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm1_tbl_table_modify_with_update_cm1_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cm1_tbl_table_modify_with_initialize_cm1_predicate(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_cm1_tbl_table_modify_with_initialize_cm1_predicate(sess_hdl, dev_id, entry);
  recv_access_cm1_tbl_table_modify_with_initialize_cm1_predicate();
}

void netbufferv4Client::send_access_cm1_tbl_table_modify_with_initialize_cm1_predicate(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm1_tbl_table_modify_with_initialize_cm1_predicate", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm1_tbl_table_modify_with_initialize_cm1_predicate_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm1_tbl_table_modify_with_initialize_cm1_predicate()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm1_tbl_table_modify_with_initialize_cm1_predicate") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm1_tbl_table_modify_with_initialize_cm1_predicate_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cm1_tbl_table_modify_with_initialize_cm1_predicate_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm1_tbl_match_spec_t& match_spec)
{
  send_access_cm1_tbl_table_modify_with_initialize_cm1_predicate_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_cm1_tbl_table_modify_with_initialize_cm1_predicate_by_match_spec();
}

void netbufferv4Client::send_access_cm1_tbl_table_modify_with_initialize_cm1_predicate_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm1_tbl_table_modify_with_initialize_cm1_predicate_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm1_tbl_table_modify_with_initialize_cm1_predicate_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm1_tbl_table_modify_with_initialize_cm1_predicate_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm1_tbl_table_modify_with_initialize_cm1_predicate_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm1_tbl_table_modify_with_initialize_cm1_predicate_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cm2_tbl_table_modify_with_update_cm2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_cm2_tbl_table_modify_with_update_cm2(sess_hdl, dev_id, entry);
  recv_access_cm2_tbl_table_modify_with_update_cm2();
}

void netbufferv4Client::send_access_cm2_tbl_table_modify_with_update_cm2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm2_tbl_table_modify_with_update_cm2", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm2_tbl_table_modify_with_update_cm2_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm2_tbl_table_modify_with_update_cm2()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm2_tbl_table_modify_with_update_cm2") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm2_tbl_table_modify_with_update_cm2_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cm2_tbl_table_modify_with_update_cm2_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm2_tbl_match_spec_t& match_spec)
{
  send_access_cm2_tbl_table_modify_with_update_cm2_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_cm2_tbl_table_modify_with_update_cm2_by_match_spec();
}

void netbufferv4Client::send_access_cm2_tbl_table_modify_with_update_cm2_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm2_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm2_tbl_table_modify_with_update_cm2_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm2_tbl_table_modify_with_update_cm2_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm2_tbl_table_modify_with_update_cm2_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm2_tbl_table_modify_with_update_cm2_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm2_tbl_table_modify_with_update_cm2_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cm2_tbl_table_modify_with_initialize_cm2_predicate(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_cm2_tbl_table_modify_with_initialize_cm2_predicate(sess_hdl, dev_id, entry);
  recv_access_cm2_tbl_table_modify_with_initialize_cm2_predicate();
}

void netbufferv4Client::send_access_cm2_tbl_table_modify_with_initialize_cm2_predicate(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm2_tbl_table_modify_with_initialize_cm2_predicate", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm2_tbl_table_modify_with_initialize_cm2_predicate_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm2_tbl_table_modify_with_initialize_cm2_predicate()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm2_tbl_table_modify_with_initialize_cm2_predicate") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm2_tbl_table_modify_with_initialize_cm2_predicate_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cm2_tbl_table_modify_with_initialize_cm2_predicate_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm2_tbl_match_spec_t& match_spec)
{
  send_access_cm2_tbl_table_modify_with_initialize_cm2_predicate_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_cm2_tbl_table_modify_with_initialize_cm2_predicate_by_match_spec();
}

void netbufferv4Client::send_access_cm2_tbl_table_modify_with_initialize_cm2_predicate_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm2_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm2_tbl_table_modify_with_initialize_cm2_predicate_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm2_tbl_table_modify_with_initialize_cm2_predicate_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm2_tbl_table_modify_with_initialize_cm2_predicate_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm2_tbl_table_modify_with_initialize_cm2_predicate_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm2_tbl_table_modify_with_initialize_cm2_predicate_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cm3_tbl_table_modify_with_update_cm3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_cm3_tbl_table_modify_with_update_cm3(sess_hdl, dev_id, entry);
  recv_access_cm3_tbl_table_modify_with_update_cm3();
}

void netbufferv4Client::send_access_cm3_tbl_table_modify_with_update_cm3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm3_tbl_table_modify_with_update_cm3", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm3_tbl_table_modify_with_update_cm3_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm3_tbl_table_modify_with_update_cm3()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm3_tbl_table_modify_with_update_cm3") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm3_tbl_table_modify_with_update_cm3_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cm3_tbl_table_modify_with_update_cm3_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm3_tbl_match_spec_t& match_spec)
{
  send_access_cm3_tbl_table_modify_with_update_cm3_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_cm3_tbl_table_modify_with_update_cm3_by_match_spec();
}

void netbufferv4Client::send_access_cm3_tbl_table_modify_with_update_cm3_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm3_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm3_tbl_table_modify_with_update_cm3_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm3_tbl_table_modify_with_update_cm3_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm3_tbl_table_modify_with_update_cm3_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm3_tbl_table_modify_with_update_cm3_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm3_tbl_table_modify_with_update_cm3_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cm3_tbl_table_modify_with_initialize_cm3_predicate(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_cm3_tbl_table_modify_with_initialize_cm3_predicate(sess_hdl, dev_id, entry);
  recv_access_cm3_tbl_table_modify_with_initialize_cm3_predicate();
}

void netbufferv4Client::send_access_cm3_tbl_table_modify_with_initialize_cm3_predicate(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm3_tbl_table_modify_with_initialize_cm3_predicate", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm3_tbl_table_modify_with_initialize_cm3_predicate_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm3_tbl_table_modify_with_initialize_cm3_predicate()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm3_tbl_table_modify_with_initialize_cm3_predicate") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm3_tbl_table_modify_with_initialize_cm3_predicate_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cm3_tbl_table_modify_with_initialize_cm3_predicate_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm3_tbl_match_spec_t& match_spec)
{
  send_access_cm3_tbl_table_modify_with_initialize_cm3_predicate_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_cm3_tbl_table_modify_with_initialize_cm3_predicate_by_match_spec();
}

void netbufferv4Client::send_access_cm3_tbl_table_modify_with_initialize_cm3_predicate_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm3_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm3_tbl_table_modify_with_initialize_cm3_predicate_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm3_tbl_table_modify_with_initialize_cm3_predicate_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm3_tbl_table_modify_with_initialize_cm3_predicate_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm3_tbl_table_modify_with_initialize_cm3_predicate_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm3_tbl_table_modify_with_initialize_cm3_predicate_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cm4_tbl_table_modify_with_update_cm4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_cm4_tbl_table_modify_with_update_cm4(sess_hdl, dev_id, entry);
  recv_access_cm4_tbl_table_modify_with_update_cm4();
}

void netbufferv4Client::send_access_cm4_tbl_table_modify_with_update_cm4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm4_tbl_table_modify_with_update_cm4", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm4_tbl_table_modify_with_update_cm4_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm4_tbl_table_modify_with_update_cm4()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm4_tbl_table_modify_with_update_cm4") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm4_tbl_table_modify_with_update_cm4_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cm4_tbl_table_modify_with_update_cm4_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm4_tbl_match_spec_t& match_spec)
{
  send_access_cm4_tbl_table_modify_with_update_cm4_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_cm4_tbl_table_modify_with_update_cm4_by_match_spec();
}

void netbufferv4Client::send_access_cm4_tbl_table_modify_with_update_cm4_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm4_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm4_tbl_table_modify_with_update_cm4_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm4_tbl_table_modify_with_update_cm4_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm4_tbl_table_modify_with_update_cm4_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm4_tbl_table_modify_with_update_cm4_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm4_tbl_table_modify_with_update_cm4_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cm4_tbl_table_modify_with_initialize_cm4_predicate(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_cm4_tbl_table_modify_with_initialize_cm4_predicate(sess_hdl, dev_id, entry);
  recv_access_cm4_tbl_table_modify_with_initialize_cm4_predicate();
}

void netbufferv4Client::send_access_cm4_tbl_table_modify_with_initialize_cm4_predicate(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm4_tbl_table_modify_with_initialize_cm4_predicate", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm4_tbl_table_modify_with_initialize_cm4_predicate_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm4_tbl_table_modify_with_initialize_cm4_predicate()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm4_tbl_table_modify_with_initialize_cm4_predicate") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm4_tbl_table_modify_with_initialize_cm4_predicate_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cm4_tbl_table_modify_with_initialize_cm4_predicate_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm4_tbl_match_spec_t& match_spec)
{
  send_access_cm4_tbl_table_modify_with_initialize_cm4_predicate_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_cm4_tbl_table_modify_with_initialize_cm4_predicate_by_match_spec();
}

void netbufferv4Client::send_access_cm4_tbl_table_modify_with_initialize_cm4_predicate_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm4_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm4_tbl_table_modify_with_initialize_cm4_predicate_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm4_tbl_table_modify_with_initialize_cm4_predicate_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm4_tbl_table_modify_with_initialize_cm4_predicate_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm4_tbl_table_modify_with_initialize_cm4_predicate_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm4_tbl_table_modify_with_initialize_cm4_predicate_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_deleted_tbl_table_modify_with_get_deleted(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_deleted_tbl_table_modify_with_get_deleted(sess_hdl, dev_id, entry);
  recv_access_deleted_tbl_table_modify_with_get_deleted();
}

void netbufferv4Client::send_access_deleted_tbl_table_modify_with_get_deleted(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_deleted_tbl_table_modify_with_get_deleted", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_deleted_tbl_table_modify_with_get_deleted_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_deleted_tbl_table_modify_with_get_deleted()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_deleted_tbl_table_modify_with_get_deleted") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_deleted_tbl_table_modify_with_get_deleted_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_deleted_tbl_table_modify_with_get_deleted_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_deleted_tbl_match_spec_t& match_spec)
{
  send_access_deleted_tbl_table_modify_with_get_deleted_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_deleted_tbl_table_modify_with_get_deleted_by_match_spec();
}

void netbufferv4Client::send_access_deleted_tbl_table_modify_with_get_deleted_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_deleted_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_deleted_tbl_table_modify_with_get_deleted_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_deleted_tbl_table_modify_with_get_deleted_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_deleted_tbl_table_modify_with_get_deleted_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_deleted_tbl_table_modify_with_get_deleted_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_deleted_tbl_table_modify_with_get_deleted_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_deleted_tbl_table_modify_with_set_and_get_deleted(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_deleted_tbl_table_modify_with_set_and_get_deleted(sess_hdl, dev_id, entry);
  recv_access_deleted_tbl_table_modify_with_set_and_get_deleted();
}

void netbufferv4Client::send_access_deleted_tbl_table_modify_with_set_and_get_deleted(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_deleted_tbl_table_modify_with_set_and_get_deleted", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_deleted_tbl_table_modify_with_set_and_get_deleted_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_deleted_tbl_table_modify_with_set_and_get_deleted()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_deleted_tbl_table_modify_with_set_and_get_deleted") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_deleted_tbl_table_modify_with_set_and_get_deleted_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_deleted_tbl_table_modify_with_set_and_get_deleted_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_deleted_tbl_match_spec_t& match_spec)
{
  send_access_deleted_tbl_table_modify_with_set_and_get_deleted_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_deleted_tbl_table_modify_with_set_and_get_deleted_by_match_spec();
}

void netbufferv4Client::send_access_deleted_tbl_table_modify_with_set_and_get_deleted_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_deleted_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_deleted_tbl_table_modify_with_set_and_get_deleted_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_deleted_tbl_table_modify_with_set_and_get_deleted_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_deleted_tbl_table_modify_with_set_and_get_deleted_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_deleted_tbl_table_modify_with_set_and_get_deleted_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_deleted_tbl_table_modify_with_set_and_get_deleted_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_deleted_tbl_table_modify_with_reset_and_get_deleted(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_deleted_tbl_table_modify_with_reset_and_get_deleted(sess_hdl, dev_id, entry);
  recv_access_deleted_tbl_table_modify_with_reset_and_get_deleted();
}

void netbufferv4Client::send_access_deleted_tbl_table_modify_with_reset_and_get_deleted(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_deleted_tbl_table_modify_with_reset_and_get_deleted", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_deleted_tbl_table_modify_with_reset_and_get_deleted_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_deleted_tbl_table_modify_with_reset_and_get_deleted()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_deleted_tbl_table_modify_with_reset_and_get_deleted") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_deleted_tbl_table_modify_with_reset_and_get_deleted_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_deleted_tbl_table_modify_with_reset_and_get_deleted_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_deleted_tbl_match_spec_t& match_spec)
{
  send_access_deleted_tbl_table_modify_with_reset_and_get_deleted_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_deleted_tbl_table_modify_with_reset_and_get_deleted_by_match_spec();
}

void netbufferv4Client::send_access_deleted_tbl_table_modify_with_reset_and_get_deleted_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_deleted_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_deleted_tbl_table_modify_with_reset_and_get_deleted_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_deleted_tbl_table_modify_with_reset_and_get_deleted_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_deleted_tbl_table_modify_with_reset_and_get_deleted_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_deleted_tbl_table_modify_with_reset_and_get_deleted_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_deleted_tbl_table_modify_with_reset_and_get_deleted_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_deleted_tbl_table_modify_with_reset_is_deleted(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_deleted_tbl_table_modify_with_reset_is_deleted(sess_hdl, dev_id, entry);
  recv_access_deleted_tbl_table_modify_with_reset_is_deleted();
}

void netbufferv4Client::send_access_deleted_tbl_table_modify_with_reset_is_deleted(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_deleted_tbl_table_modify_with_reset_is_deleted", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_deleted_tbl_table_modify_with_reset_is_deleted_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_deleted_tbl_table_modify_with_reset_is_deleted()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_deleted_tbl_table_modify_with_reset_is_deleted") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_deleted_tbl_table_modify_with_reset_is_deleted_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_deleted_tbl_table_modify_with_reset_is_deleted_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_deleted_tbl_match_spec_t& match_spec)
{
  send_access_deleted_tbl_table_modify_with_reset_is_deleted_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_deleted_tbl_table_modify_with_reset_is_deleted_by_match_spec();
}

void netbufferv4Client::send_access_deleted_tbl_table_modify_with_reset_is_deleted_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_deleted_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_deleted_tbl_table_modify_with_reset_is_deleted_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_deleted_tbl_table_modify_with_reset_is_deleted_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_deleted_tbl_table_modify_with_reset_is_deleted_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_deleted_tbl_table_modify_with_reset_is_deleted_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_deleted_tbl_table_modify_with_reset_is_deleted_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_latest_tbl_table_modify_with_get_latest(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_latest_tbl_table_modify_with_get_latest(sess_hdl, dev_id, entry);
  recv_access_latest_tbl_table_modify_with_get_latest();
}

void netbufferv4Client::send_access_latest_tbl_table_modify_with_get_latest(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_latest_tbl_table_modify_with_get_latest", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_latest_tbl_table_modify_with_get_latest_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_latest_tbl_table_modify_with_get_latest()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_latest_tbl_table_modify_with_get_latest") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_latest_tbl_table_modify_with_get_latest_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_latest_tbl_table_modify_with_get_latest_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_latest_tbl_match_spec_t& match_spec)
{
  send_access_latest_tbl_table_modify_with_get_latest_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_latest_tbl_table_modify_with_get_latest_by_match_spec();
}

void netbufferv4Client::send_access_latest_tbl_table_modify_with_get_latest_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_latest_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_latest_tbl_table_modify_with_get_latest_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_latest_tbl_table_modify_with_get_latest_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_latest_tbl_table_modify_with_get_latest_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_latest_tbl_table_modify_with_get_latest_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_latest_tbl_table_modify_with_get_latest_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_latest_tbl_table_modify_with_set_and_get_latest(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_latest_tbl_table_modify_with_set_and_get_latest(sess_hdl, dev_id, entry);
  recv_access_latest_tbl_table_modify_with_set_and_get_latest();
}

void netbufferv4Client::send_access_latest_tbl_table_modify_with_set_and_get_latest(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_latest_tbl_table_modify_with_set_and_get_latest", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_latest_tbl_table_modify_with_set_and_get_latest_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_latest_tbl_table_modify_with_set_and_get_latest()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_latest_tbl_table_modify_with_set_and_get_latest") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_latest_tbl_table_modify_with_set_and_get_latest_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_latest_tbl_table_modify_with_set_and_get_latest_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_latest_tbl_match_spec_t& match_spec)
{
  send_access_latest_tbl_table_modify_with_set_and_get_latest_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_latest_tbl_table_modify_with_set_and_get_latest_by_match_spec();
}

void netbufferv4Client::send_access_latest_tbl_table_modify_with_set_and_get_latest_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_latest_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_latest_tbl_table_modify_with_set_and_get_latest_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_latest_tbl_table_modify_with_set_and_get_latest_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_latest_tbl_table_modify_with_set_and_get_latest_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_latest_tbl_table_modify_with_set_and_get_latest_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_latest_tbl_table_modify_with_set_and_get_latest_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_latest_tbl_table_modify_with_reset_and_get_latest(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_latest_tbl_table_modify_with_reset_and_get_latest(sess_hdl, dev_id, entry);
  recv_access_latest_tbl_table_modify_with_reset_and_get_latest();
}

void netbufferv4Client::send_access_latest_tbl_table_modify_with_reset_and_get_latest(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_latest_tbl_table_modify_with_reset_and_get_latest", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_latest_tbl_table_modify_with_reset_and_get_latest_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_latest_tbl_table_modify_with_reset_and_get_latest()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_latest_tbl_table_modify_with_reset_and_get_latest") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_latest_tbl_table_modify_with_reset_and_get_latest_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_latest_tbl_table_modify_with_reset_and_get_latest_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_latest_tbl_match_spec_t& match_spec)
{
  send_access_latest_tbl_table_modify_with_reset_and_get_latest_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_latest_tbl_table_modify_with_reset_and_get_latest_by_match_spec();
}

void netbufferv4Client::send_access_latest_tbl_table_modify_with_reset_and_get_latest_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_latest_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_latest_tbl_table_modify_with_reset_and_get_latest_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_latest_tbl_table_modify_with_reset_and_get_latest_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_latest_tbl_table_modify_with_reset_and_get_latest_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_latest_tbl_table_modify_with_reset_and_get_latest_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_latest_tbl_table_modify_with_reset_and_get_latest_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_latest_tbl_table_modify_with_reset_is_latest(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_latest_tbl_table_modify_with_reset_is_latest(sess_hdl, dev_id, entry);
  recv_access_latest_tbl_table_modify_with_reset_is_latest();
}

void netbufferv4Client::send_access_latest_tbl_table_modify_with_reset_is_latest(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_latest_tbl_table_modify_with_reset_is_latest", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_latest_tbl_table_modify_with_reset_is_latest_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_latest_tbl_table_modify_with_reset_is_latest()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_latest_tbl_table_modify_with_reset_is_latest") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_latest_tbl_table_modify_with_reset_is_latest_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_latest_tbl_table_modify_with_reset_is_latest_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_latest_tbl_match_spec_t& match_spec)
{
  send_access_latest_tbl_table_modify_with_reset_is_latest_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_latest_tbl_table_modify_with_reset_is_latest_by_match_spec();
}

void netbufferv4Client::send_access_latest_tbl_table_modify_with_reset_is_latest_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_latest_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_latest_tbl_table_modify_with_reset_is_latest_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_latest_tbl_table_modify_with_reset_is_latest_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_latest_tbl_table_modify_with_reset_is_latest_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_latest_tbl_table_modify_with_reset_is_latest_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_latest_tbl_table_modify_with_reset_is_latest_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_savedseq_tbl_table_modify_with_get_savedseq(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_savedseq_tbl_table_modify_with_get_savedseq(sess_hdl, dev_id, entry);
  recv_access_savedseq_tbl_table_modify_with_get_savedseq();
}

void netbufferv4Client::send_access_savedseq_tbl_table_modify_with_get_savedseq(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_savedseq_tbl_table_modify_with_get_savedseq", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_savedseq_tbl_table_modify_with_get_savedseq_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_savedseq_tbl_table_modify_with_get_savedseq()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_savedseq_tbl_table_modify_with_get_savedseq") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_savedseq_tbl_table_modify_with_get_savedseq_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_savedseq_tbl_table_modify_with_get_savedseq_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_savedseq_tbl_match_spec_t& match_spec)
{
  send_access_savedseq_tbl_table_modify_with_get_savedseq_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_savedseq_tbl_table_modify_with_get_savedseq_by_match_spec();
}

void netbufferv4Client::send_access_savedseq_tbl_table_modify_with_get_savedseq_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_savedseq_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_savedseq_tbl_table_modify_with_get_savedseq_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_savedseq_tbl_table_modify_with_get_savedseq_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_savedseq_tbl_table_modify_with_get_savedseq_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_savedseq_tbl_table_modify_with_get_savedseq_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_savedseq_tbl_table_modify_with_get_savedseq_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_savedseq_tbl_table_modify_with_set_and_get_savedseq(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_savedseq_tbl_table_modify_with_set_and_get_savedseq(sess_hdl, dev_id, entry);
  recv_access_savedseq_tbl_table_modify_with_set_and_get_savedseq();
}

void netbufferv4Client::send_access_savedseq_tbl_table_modify_with_set_and_get_savedseq(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_savedseq_tbl_table_modify_with_set_and_get_savedseq", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_savedseq_tbl_table_modify_with_set_and_get_savedseq_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_savedseq_tbl_table_modify_with_set_and_get_savedseq()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_savedseq_tbl_table_modify_with_set_and_get_savedseq") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_savedseq_tbl_table_modify_with_set_and_get_savedseq_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_savedseq_tbl_table_modify_with_set_and_get_savedseq_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_savedseq_tbl_match_spec_t& match_spec)
{
  send_access_savedseq_tbl_table_modify_with_set_and_get_savedseq_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_savedseq_tbl_table_modify_with_set_and_get_savedseq_by_match_spec();
}

void netbufferv4Client::send_access_savedseq_tbl_table_modify_with_set_and_get_savedseq_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_savedseq_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_savedseq_tbl_table_modify_with_set_and_get_savedseq_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_savedseq_tbl_table_modify_with_set_and_get_savedseq_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_savedseq_tbl_table_modify_with_set_and_get_savedseq_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_savedseq_tbl_table_modify_with_set_and_get_savedseq_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_savedseq_tbl_table_modify_with_set_and_get_savedseq_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_savedseq_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_savedseq_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_access_savedseq_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_access_savedseq_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_savedseq_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_savedseq_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_savedseq_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_savedseq_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_savedseq_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_savedseq_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_savedseq_tbl_match_spec_t& match_spec)
{
  send_access_savedseq_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_savedseq_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_access_savedseq_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_savedseq_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_savedseq_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_savedseq_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_savedseq_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_savedseq_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_savedseq_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_seq_tbl_table_modify_with_assign_seq(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_seq_tbl_table_modify_with_assign_seq(sess_hdl, dev_id, entry);
  recv_access_seq_tbl_table_modify_with_assign_seq();
}

void netbufferv4Client::send_access_seq_tbl_table_modify_with_assign_seq(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_seq_tbl_table_modify_with_assign_seq", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_seq_tbl_table_modify_with_assign_seq_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_seq_tbl_table_modify_with_assign_seq()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_seq_tbl_table_modify_with_assign_seq") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_seq_tbl_table_modify_with_assign_seq_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_seq_tbl_table_modify_with_assign_seq_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_seq_tbl_match_spec_t& match_spec)
{
  send_access_seq_tbl_table_modify_with_assign_seq_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_seq_tbl_table_modify_with_assign_seq_by_match_spec();
}

void netbufferv4Client::send_access_seq_tbl_table_modify_with_assign_seq_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_seq_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_seq_tbl_table_modify_with_assign_seq_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_seq_tbl_table_modify_with_assign_seq_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_seq_tbl_table_modify_with_assign_seq_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_seq_tbl_table_modify_with_assign_seq_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_seq_tbl_table_modify_with_assign_seq_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_seq_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_seq_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_access_seq_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_access_seq_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_seq_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_seq_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_seq_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_seq_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_seq_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_seq_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_seq_tbl_match_spec_t& match_spec)
{
  send_access_seq_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_seq_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_access_seq_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_seq_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_seq_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_seq_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_seq_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_seq_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_seq_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_validvalue_tbl_table_modify_with_get_validvalue(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_validvalue_tbl_table_modify_with_get_validvalue(sess_hdl, dev_id, entry);
  recv_access_validvalue_tbl_table_modify_with_get_validvalue();
}

void netbufferv4Client::send_access_validvalue_tbl_table_modify_with_get_validvalue(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_validvalue_tbl_table_modify_with_get_validvalue", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_validvalue_tbl_table_modify_with_get_validvalue_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_validvalue_tbl_table_modify_with_get_validvalue()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_validvalue_tbl_table_modify_with_get_validvalue") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_validvalue_tbl_table_modify_with_get_validvalue_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_validvalue_tbl_table_modify_with_get_validvalue_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_validvalue_tbl_match_spec_t& match_spec)
{
  send_access_validvalue_tbl_table_modify_with_get_validvalue_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_validvalue_tbl_table_modify_with_get_validvalue_by_match_spec();
}

void netbufferv4Client::send_access_validvalue_tbl_table_modify_with_get_validvalue_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_validvalue_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_validvalue_tbl_table_modify_with_get_validvalue_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_validvalue_tbl_table_modify_with_get_validvalue_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_validvalue_tbl_table_modify_with_get_validvalue_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_validvalue_tbl_table_modify_with_get_validvalue_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_validvalue_tbl_table_modify_with_get_validvalue_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_validvalue_tbl_table_modify_with_set_validvalue(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_validvalue_tbl_table_modify_with_set_validvalue(sess_hdl, dev_id, entry);
  recv_access_validvalue_tbl_table_modify_with_set_validvalue();
}

void netbufferv4Client::send_access_validvalue_tbl_table_modify_with_set_validvalue(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_validvalue_tbl_table_modify_with_set_validvalue", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_validvalue_tbl_table_modify_with_set_validvalue_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_validvalue_tbl_table_modify_with_set_validvalue()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_validvalue_tbl_table_modify_with_set_validvalue") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_validvalue_tbl_table_modify_with_set_validvalue_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_validvalue_tbl_table_modify_with_set_validvalue_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_validvalue_tbl_match_spec_t& match_spec)
{
  send_access_validvalue_tbl_table_modify_with_set_validvalue_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_validvalue_tbl_table_modify_with_set_validvalue_by_match_spec();
}

void netbufferv4Client::send_access_validvalue_tbl_table_modify_with_set_validvalue_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_validvalue_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_validvalue_tbl_table_modify_with_set_validvalue_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_validvalue_tbl_table_modify_with_set_validvalue_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_validvalue_tbl_table_modify_with_set_validvalue_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_validvalue_tbl_table_modify_with_set_validvalue_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_validvalue_tbl_table_modify_with_set_validvalue_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_validvalue_tbl_table_modify_with_reset_meta_validvalue(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_validvalue_tbl_table_modify_with_reset_meta_validvalue(sess_hdl, dev_id, entry);
  recv_access_validvalue_tbl_table_modify_with_reset_meta_validvalue();
}

void netbufferv4Client::send_access_validvalue_tbl_table_modify_with_reset_meta_validvalue(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_validvalue_tbl_table_modify_with_reset_meta_validvalue", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_validvalue_tbl_table_modify_with_reset_meta_validvalue_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_validvalue_tbl_table_modify_with_reset_meta_validvalue()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_validvalue_tbl_table_modify_with_reset_meta_validvalue") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_validvalue_tbl_table_modify_with_reset_meta_validvalue_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_validvalue_tbl_table_modify_with_reset_meta_validvalue_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_validvalue_tbl_match_spec_t& match_spec)
{
  send_access_validvalue_tbl_table_modify_with_reset_meta_validvalue_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_validvalue_tbl_table_modify_with_reset_meta_validvalue_by_match_spec();
}

void netbufferv4Client::send_access_validvalue_tbl_table_modify_with_reset_meta_validvalue_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_validvalue_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_validvalue_tbl_table_modify_with_reset_meta_validvalue_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_validvalue_tbl_table_modify_with_reset_meta_validvalue_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_validvalue_tbl_table_modify_with_reset_meta_validvalue_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_validvalue_tbl_table_modify_with_reset_meta_validvalue_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_validvalue_tbl_table_modify_with_reset_meta_validvalue_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_add_only_vallen(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_add_and_remove_value_header_tbl_table_modify_with_add_only_vallen(sess_hdl, dev_id, entry);
  recv_add_and_remove_value_header_tbl_table_modify_with_add_only_vallen();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_add_only_vallen(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_only_vallen", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_only_vallen_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_add_only_vallen()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_add_only_vallen") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_only_vallen_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_add_only_vallen_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_modify_with_add_only_vallen_by_match_spec(sess_hdl, dev_tgt, match_spec, priority);
  recv_add_and_remove_value_header_tbl_table_modify_with_add_only_vallen_by_match_spec();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_add_only_vallen_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_only_vallen_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_only_vallen_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_add_only_vallen_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_add_only_vallen_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_only_vallen_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_add_to_val1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_add_and_remove_value_header_tbl_table_modify_with_add_to_val1(sess_hdl, dev_id, entry);
  recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val1();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_add_to_val1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val1", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val1_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val1()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_add_to_val1") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val1_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_add_to_val1_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_modify_with_add_to_val1_by_match_spec(sess_hdl, dev_tgt, match_spec, priority);
  recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val1_by_match_spec();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_add_to_val1_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val1_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val1_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val1_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_add_to_val1_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val1_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_add_to_val2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_add_and_remove_value_header_tbl_table_modify_with_add_to_val2(sess_hdl, dev_id, entry);
  recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val2();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_add_to_val2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val2", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val2_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val2()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_add_to_val2") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val2_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_add_to_val2_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_modify_with_add_to_val2_by_match_spec(sess_hdl, dev_tgt, match_spec, priority);
  recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val2_by_match_spec();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_add_to_val2_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val2_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val2_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val2_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_add_to_val2_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val2_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_add_to_val3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_add_and_remove_value_header_tbl_table_modify_with_add_to_val3(sess_hdl, dev_id, entry);
  recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val3();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_add_to_val3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val3", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val3_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val3()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_add_to_val3") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val3_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_add_to_val3_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_modify_with_add_to_val3_by_match_spec(sess_hdl, dev_tgt, match_spec, priority);
  recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val3_by_match_spec();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_add_to_val3_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val3_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val3_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val3_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_add_to_val3_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val3_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_add_to_val4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_add_and_remove_value_header_tbl_table_modify_with_add_to_val4(sess_hdl, dev_id, entry);
  recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val4();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_add_to_val4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val4", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val4_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val4()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_add_to_val4") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val4_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_add_to_val4_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_modify_with_add_to_val4_by_match_spec(sess_hdl, dev_tgt, match_spec, priority);
  recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val4_by_match_spec();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_add_to_val4_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val4_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val4_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val4_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_add_to_val4_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val4_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_add_to_val5(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_add_and_remove_value_header_tbl_table_modify_with_add_to_val5(sess_hdl, dev_id, entry);
  recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val5();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_add_to_val5(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val5", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val5_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val5()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_add_to_val5") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val5_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_add_to_val5_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_modify_with_add_to_val5_by_match_spec(sess_hdl, dev_tgt, match_spec, priority);
  recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val5_by_match_spec();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_add_to_val5_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val5_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val5_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val5_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_add_to_val5_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val5_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_add_to_val6(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_add_and_remove_value_header_tbl_table_modify_with_add_to_val6(sess_hdl, dev_id, entry);
  recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val6();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_add_to_val6(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val6", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val6_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val6()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_add_to_val6") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val6_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_add_to_val6_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_modify_with_add_to_val6_by_match_spec(sess_hdl, dev_tgt, match_spec, priority);
  recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val6_by_match_spec();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_add_to_val6_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val6_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val6_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val6_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_add_to_val6_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val6_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_add_to_val7(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_add_and_remove_value_header_tbl_table_modify_with_add_to_val7(sess_hdl, dev_id, entry);
  recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val7();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_add_to_val7(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val7", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val7_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val7()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_add_to_val7") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val7_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_add_to_val7_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_modify_with_add_to_val7_by_match_spec(sess_hdl, dev_tgt, match_spec, priority);
  recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val7_by_match_spec();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_add_to_val7_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val7_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val7_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val7_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_add_to_val7_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val7_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_add_to_val8(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_add_and_remove_value_header_tbl_table_modify_with_add_to_val8(sess_hdl, dev_id, entry);
  recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val8();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_add_to_val8(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val8", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val8_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val8()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_add_to_val8") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val8_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_add_to_val8_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_modify_with_add_to_val8_by_match_spec(sess_hdl, dev_tgt, match_spec, priority);
  recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val8_by_match_spec();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_add_to_val8_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val8_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val8_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val8_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_add_to_val8_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val8_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_add_to_val9(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_add_and_remove_value_header_tbl_table_modify_with_add_to_val9(sess_hdl, dev_id, entry);
  recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val9();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_add_to_val9(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val9", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val9_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val9()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_add_to_val9") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val9_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_add_to_val9_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_modify_with_add_to_val9_by_match_spec(sess_hdl, dev_tgt, match_spec, priority);
  recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val9_by_match_spec();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_add_to_val9_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val9_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val9_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val9_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_add_to_val9_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val9_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_add_to_val10(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_add_and_remove_value_header_tbl_table_modify_with_add_to_val10(sess_hdl, dev_id, entry);
  recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val10();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_add_to_val10(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val10", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val10_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val10()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_add_to_val10") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val10_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_add_to_val10_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_modify_with_add_to_val10_by_match_spec(sess_hdl, dev_tgt, match_spec, priority);
  recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val10_by_match_spec();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_add_to_val10_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val10_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val10_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val10_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_add_to_val10_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val10_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_add_to_val11(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_add_and_remove_value_header_tbl_table_modify_with_add_to_val11(sess_hdl, dev_id, entry);
  recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val11();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_add_to_val11(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val11", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val11_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val11()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_add_to_val11") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val11_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_add_to_val11_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_modify_with_add_to_val11_by_match_spec(sess_hdl, dev_tgt, match_spec, priority);
  recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val11_by_match_spec();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_add_to_val11_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val11_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val11_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val11_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_add_to_val11_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val11_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_add_to_val12(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_add_and_remove_value_header_tbl_table_modify_with_add_to_val12(sess_hdl, dev_id, entry);
  recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val12();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_add_to_val12(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val12", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val12_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val12()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_add_to_val12") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val12_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_add_to_val12_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_modify_with_add_to_val12_by_match_spec(sess_hdl, dev_tgt, match_spec, priority);
  recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val12_by_match_spec();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_add_to_val12_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val12_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val12_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val12_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_add_to_val12_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val12_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_add_to_val13(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_add_and_remove_value_header_tbl_table_modify_with_add_to_val13(sess_hdl, dev_id, entry);
  recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val13();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_add_to_val13(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val13", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val13_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val13()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_add_to_val13") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val13_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_add_to_val13_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_modify_with_add_to_val13_by_match_spec(sess_hdl, dev_tgt, match_spec, priority);
  recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val13_by_match_spec();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_add_to_val13_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val13_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val13_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val13_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_add_to_val13_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val13_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_add_to_val14(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_add_and_remove_value_header_tbl_table_modify_with_add_to_val14(sess_hdl, dev_id, entry);
  recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val14();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_add_to_val14(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val14", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val14_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val14()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_add_to_val14") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val14_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_add_to_val14_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_modify_with_add_to_val14_by_match_spec(sess_hdl, dev_tgt, match_spec, priority);
  recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val14_by_match_spec();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_add_to_val14_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val14_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val14_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val14_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_add_to_val14_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val14_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_add_to_val15(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_add_and_remove_value_header_tbl_table_modify_with_add_to_val15(sess_hdl, dev_id, entry);
  recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val15();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_add_to_val15(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val15", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val15_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val15()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_add_to_val15") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val15_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_add_to_val15_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_modify_with_add_to_val15_by_match_spec(sess_hdl, dev_tgt, match_spec, priority);
  recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val15_by_match_spec();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_add_to_val15_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val15_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val15_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val15_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_add_to_val15_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val15_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_add_to_val16(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_add_and_remove_value_header_tbl_table_modify_with_add_to_val16(sess_hdl, dev_id, entry);
  recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val16();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_add_to_val16(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val16", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val16_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val16()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_add_to_val16") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val16_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_add_to_val16_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_modify_with_add_to_val16_by_match_spec(sess_hdl, dev_tgt, match_spec, priority);
  recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val16_by_match_spec();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_add_to_val16_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val16_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val16_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val16_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_add_to_val16_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val16_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_remove_all(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_add_and_remove_value_header_tbl_table_modify_with_remove_all(sess_hdl, dev_id, entry);
  recv_add_and_remove_value_header_tbl_table_modify_with_remove_all();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_remove_all(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_remove_all", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_remove_all_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_remove_all()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_remove_all") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_remove_all_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_remove_all_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_modify_with_remove_all_by_match_spec(sess_hdl, dev_tgt, match_spec, priority);
  recv_add_and_remove_value_header_tbl_table_modify_with_remove_all_by_match_spec();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_remove_all_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_remove_all_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_remove_all_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_remove_all_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_remove_all_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_remove_all_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::cache_lookup_tbl_table_modify_with_cached_action(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_cached_action_action_spec_t& action_spec)
{
  send_cache_lookup_tbl_table_modify_with_cached_action(sess_hdl, dev_id, entry, action_spec);
  recv_cache_lookup_tbl_table_modify_with_cached_action();
}

void netbufferv4Client::send_cache_lookup_tbl_table_modify_with_cached_action(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_cached_action_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("cache_lookup_tbl_table_modify_with_cached_action", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_cache_lookup_tbl_table_modify_with_cached_action_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_cache_lookup_tbl_table_modify_with_cached_action()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("cache_lookup_tbl_table_modify_with_cached_action") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_cache_lookup_tbl_table_modify_with_cached_action_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::cache_lookup_tbl_table_modify_with_cached_action_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_cache_lookup_tbl_match_spec_t& match_spec, const netbufferv4_cached_action_action_spec_t& action_spec)
{
  send_cache_lookup_tbl_table_modify_with_cached_action_by_match_spec(sess_hdl, dev_tgt, match_spec, action_spec);
  recv_cache_lookup_tbl_table_modify_with_cached_action_by_match_spec();
}

void netbufferv4Client::send_cache_lookup_tbl_table_modify_with_cached_action_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_cache_lookup_tbl_match_spec_t& match_spec, const netbufferv4_cached_action_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("cache_lookup_tbl_table_modify_with_cached_action_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_cache_lookup_tbl_table_modify_with_cached_action_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_cache_lookup_tbl_table_modify_with_cached_action_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("cache_lookup_tbl_table_modify_with_cached_action_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_cache_lookup_tbl_table_modify_with_cached_action_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::cache_lookup_tbl_table_modify_with_uncached_action(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_cache_lookup_tbl_table_modify_with_uncached_action(sess_hdl, dev_id, entry);
  recv_cache_lookup_tbl_table_modify_with_uncached_action();
}

void netbufferv4Client::send_cache_lookup_tbl_table_modify_with_uncached_action(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("cache_lookup_tbl_table_modify_with_uncached_action", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_cache_lookup_tbl_table_modify_with_uncached_action_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_cache_lookup_tbl_table_modify_with_uncached_action()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("cache_lookup_tbl_table_modify_with_uncached_action") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_cache_lookup_tbl_table_modify_with_uncached_action_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::cache_lookup_tbl_table_modify_with_uncached_action_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_cache_lookup_tbl_match_spec_t& match_spec)
{
  send_cache_lookup_tbl_table_modify_with_uncached_action_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_cache_lookup_tbl_table_modify_with_uncached_action_by_match_spec();
}

void netbufferv4Client::send_cache_lookup_tbl_table_modify_with_uncached_action_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_cache_lookup_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("cache_lookup_tbl_table_modify_with_uncached_action_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_cache_lookup_tbl_table_modify_with_uncached_action_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_cache_lookup_tbl_table_modify_with_uncached_action_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("cache_lookup_tbl_table_modify_with_uncached_action_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_cache_lookup_tbl_table_modify_with_uncached_action_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::drop_tbl_table_modify_with_drop_getres_latest_seq_inswitch(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_drop_tbl_table_modify_with_drop_getres_latest_seq_inswitch(sess_hdl, dev_id, entry);
  recv_drop_tbl_table_modify_with_drop_getres_latest_seq_inswitch();
}

void netbufferv4Client::send_drop_tbl_table_modify_with_drop_getres_latest_seq_inswitch(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("drop_tbl_table_modify_with_drop_getres_latest_seq_inswitch", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_drop_tbl_table_modify_with_drop_getres_latest_seq_inswitch_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_drop_tbl_table_modify_with_drop_getres_latest_seq_inswitch()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("drop_tbl_table_modify_with_drop_getres_latest_seq_inswitch") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_drop_tbl_table_modify_with_drop_getres_latest_seq_inswitch_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::drop_tbl_table_modify_with_drop_getres_latest_seq_inswitch_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_drop_tbl_match_spec_t& match_spec)
{
  send_drop_tbl_table_modify_with_drop_getres_latest_seq_inswitch_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_drop_tbl_table_modify_with_drop_getres_latest_seq_inswitch_by_match_spec();
}

void netbufferv4Client::send_drop_tbl_table_modify_with_drop_getres_latest_seq_inswitch_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_drop_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("drop_tbl_table_modify_with_drop_getres_latest_seq_inswitch_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_drop_tbl_table_modify_with_drop_getres_latest_seq_inswitch_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_drop_tbl_table_modify_with_drop_getres_latest_seq_inswitch_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("drop_tbl_table_modify_with_drop_getres_latest_seq_inswitch_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_drop_tbl_table_modify_with_drop_getres_latest_seq_inswitch_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::drop_tbl_table_modify_with_drop_getres_deleted_seq_inswitch(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_drop_tbl_table_modify_with_drop_getres_deleted_seq_inswitch(sess_hdl, dev_id, entry);
  recv_drop_tbl_table_modify_with_drop_getres_deleted_seq_inswitch();
}

void netbufferv4Client::send_drop_tbl_table_modify_with_drop_getres_deleted_seq_inswitch(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("drop_tbl_table_modify_with_drop_getres_deleted_seq_inswitch", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_drop_tbl_table_modify_with_drop_getres_deleted_seq_inswitch_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_drop_tbl_table_modify_with_drop_getres_deleted_seq_inswitch()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("drop_tbl_table_modify_with_drop_getres_deleted_seq_inswitch") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_drop_tbl_table_modify_with_drop_getres_deleted_seq_inswitch_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::drop_tbl_table_modify_with_drop_getres_deleted_seq_inswitch_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_drop_tbl_match_spec_t& match_spec)
{
  send_drop_tbl_table_modify_with_drop_getres_deleted_seq_inswitch_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_drop_tbl_table_modify_with_drop_getres_deleted_seq_inswitch_by_match_spec();
}

void netbufferv4Client::send_drop_tbl_table_modify_with_drop_getres_deleted_seq_inswitch_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_drop_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("drop_tbl_table_modify_with_drop_getres_deleted_seq_inswitch_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_drop_tbl_table_modify_with_drop_getres_deleted_seq_inswitch_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_drop_tbl_table_modify_with_drop_getres_deleted_seq_inswitch_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("drop_tbl_table_modify_with_drop_getres_deleted_seq_inswitch_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_drop_tbl_table_modify_with_drop_getres_deleted_seq_inswitch_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::drop_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_drop_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_drop_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_drop_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("drop_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_drop_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_drop_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("drop_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_drop_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::drop_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_drop_tbl_match_spec_t& match_spec)
{
  send_drop_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_drop_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_drop_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_drop_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("drop_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_drop_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_drop_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("drop_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_drop_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq(sess_hdl, dev_id, entry);
  recv_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_by_match_spec();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_pop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_pop(sess_hdl, dev_id, entry);
  recv_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_pop();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_pop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_pop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_pop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_pop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_pop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_pop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_pop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_pop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_pop_by_match_spec();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_pop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_pop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_pop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_pop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_pop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_pop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_nlatest(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_nlatest(sess_hdl, dev_id, entry);
  recv_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_nlatest();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_nlatest(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_nlatest", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_nlatest_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_nlatest()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_nlatest") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_nlatest_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_nlatest_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_nlatest_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_nlatest_by_match_spec();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_nlatest_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_nlatest_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_nlatest_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_nlatest_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_nlatest_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_nlatest_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getres_by_mirroring(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_getreq_inswitch_to_getres_by_mirroring_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getres_by_mirroring(sess_hdl, dev_id, entry, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getres_by_mirroring();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getres_by_mirroring(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_getreq_inswitch_to_getres_by_mirroring_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getres_by_mirroring", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getres_by_mirroring_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getres_by_mirroring()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getres_by_mirroring") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getres_by_mirroring_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getres_by_mirroring_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_getreq_inswitch_to_getres_by_mirroring_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getres_by_mirroring_by_match_spec(sess_hdl, dev_tgt, match_spec, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getres_by_mirroring_by_match_spec();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getres_by_mirroring_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_getreq_inswitch_to_getres_by_mirroring_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getres_by_mirroring_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getres_by_mirroring_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getres_by_mirroring_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getres_by_mirroring_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getres_by_mirroring_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres(sess_hdl, dev_id, entry);
  recv_eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_by_match_spec();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss(sess_hdl, dev_id, entry, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_by_match_spec(sess_hdl, dev_tgt, match_spec, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_by_match_spec();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss(sess_hdl, dev_id, entry, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_by_match_spec(sess_hdl, dev_tgt, match_spec, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_by_match_spec();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres(sess_hdl, dev_id, entry);
  recv_eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_by_match_spec();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss(sess_hdl, dev_id, entry, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_by_match_spec(sess_hdl, dev_tgt, match_spec, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_by_match_spec();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss(sess_hdl, dev_id, entry, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_by_match_spec(sess_hdl, dev_tgt, match_spec, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_by_match_spec();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone(sess_hdl, dev_id, entry, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_by_match_spec(sess_hdl, dev_tgt, match_spec, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_by_match_spec();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq(sess_hdl, dev_id, entry);
  recv_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_by_match_spec();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq(sess_hdl, dev_id, entry);
  recv_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_by_match_spec();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putres_by_mirroring(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_putreq_inswitch_to_putres_by_mirroring_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putres_by_mirroring(sess_hdl, dev_id, entry, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putres_by_mirroring();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putres_by_mirroring(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_putreq_inswitch_to_putres_by_mirroring_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putres_by_mirroring", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putres_by_mirroring_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putres_by_mirroring()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putres_by_mirroring") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putres_by_mirroring_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putres_by_mirroring_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_putreq_inswitch_to_putres_by_mirroring_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putres_by_mirroring_by_match_spec(sess_hdl, dev_tgt, match_spec, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putres_by_mirroring_by_match_spec();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putres_by_mirroring_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_putreq_inswitch_to_putres_by_mirroring_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putres_by_mirroring_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putres_by_mirroring_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putres_by_mirroring_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putres_by_mirroring_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putres_by_mirroring_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres(sess_hdl, dev_id, entry, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_by_match_spec(sess_hdl, dev_tgt, match_spec, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_by_match_spec();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres(sess_hdl, dev_id, entry, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_by_match_spec(sess_hdl, dev_tgt, match_spec, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_by_match_spec();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring(sess_hdl, dev_id, entry, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_by_match_spec(sess_hdl, dev_tgt, match_spec, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_by_match_spec();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_case3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_case3(sess_hdl, dev_id, entry);
  recv_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_case3();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_case3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_case3", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_case3_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_case3()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_case3") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_case3_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_case3_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_case3_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_case3_by_match_spec();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_case3_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_case3_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_case3_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_case3_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_case3_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_case3_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_case3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_case3(sess_hdl, dev_id, entry);
  recv_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_case3();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_case3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_case3", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_case3_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_case3()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_case3") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_case3_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_case3_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_case3_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_case3_by_match_spec();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_case3_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_case3_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_case3_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_case3_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_case3_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_case3_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq(sess_hdl, dev_id, entry);
  recv_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_by_match_spec();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delres_by_mirroring(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_delreq_inswitch_to_delres_by_mirroring_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delres_by_mirroring(sess_hdl, dev_id, entry, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delres_by_mirroring();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delres_by_mirroring(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_delreq_inswitch_to_delres_by_mirroring_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delres_by_mirroring", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delres_by_mirroring_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delres_by_mirroring()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delres_by_mirroring") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delres_by_mirroring_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delres_by_mirroring_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_delreq_inswitch_to_delres_by_mirroring_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delres_by_mirroring_by_match_spec(sess_hdl, dev_tgt, match_spec, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delres_by_mirroring_by_match_spec();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delres_by_mirroring_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_delreq_inswitch_to_delres_by_mirroring_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delres_by_mirroring_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delres_by_mirroring_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delres_by_mirroring_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delres_by_mirroring_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delres_by_mirroring_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres(sess_hdl, dev_id, entry, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_by_match_spec(sess_hdl, dev_tgt, match_spec, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_by_match_spec();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres(sess_hdl, dev_id, entry, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_by_match_spec(sess_hdl, dev_tgt, match_spec, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_by_match_spec();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring(sess_hdl, dev_id, entry, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_by_match_spec(sess_hdl, dev_tgt, match_spec, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_by_match_spec();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_case3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_case3(sess_hdl, dev_id, entry);
  recv_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_case3();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_case3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_case3", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_case3_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_case3()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_case3") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_case3_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_case3_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_case3_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_case3_by_match_spec();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_case3_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_case3_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_case3_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_case3_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_case3_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_case3_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone(sess_hdl, dev_id, entry, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_by_match_spec(sess_hdl, dev_tgt, match_spec, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_by_match_spec();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone(sess_hdl, dev_id, entry, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_by_match_spec(sess_hdl, dev_tgt, match_spec, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_by_match_spec();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone(sess_hdl, dev_id, entry, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_by_match_spec(sess_hdl, dev_tgt, match_spec, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_by_match_spec();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone(sess_hdl, dev_id, entry, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_by_match_spec(sess_hdl, dev_tgt, match_spec, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_by_match_spec();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_eg_port_forward_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_eg_port_forward_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  send_eg_port_forward_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_eg_port_forward_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_cm1_tbl_table_modify_with_hash_for_cm1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_hash_for_cm1_tbl_table_modify_with_hash_for_cm1(sess_hdl, dev_id, entry);
  recv_hash_for_cm1_tbl_table_modify_with_hash_for_cm1();
}

void netbufferv4Client::send_hash_for_cm1_tbl_table_modify_with_hash_for_cm1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm1_tbl_table_modify_with_hash_for_cm1", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm1_tbl_table_modify_with_hash_for_cm1_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm1_tbl_table_modify_with_hash_for_cm1()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm1_tbl_table_modify_with_hash_for_cm1") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm1_tbl_table_modify_with_hash_for_cm1_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_cm1_tbl_table_modify_with_hash_for_cm1_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm1_tbl_match_spec_t& match_spec)
{
  send_hash_for_cm1_tbl_table_modify_with_hash_for_cm1_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_hash_for_cm1_tbl_table_modify_with_hash_for_cm1_by_match_spec();
}

void netbufferv4Client::send_hash_for_cm1_tbl_table_modify_with_hash_for_cm1_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm1_tbl_table_modify_with_hash_for_cm1_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm1_tbl_table_modify_with_hash_for_cm1_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm1_tbl_table_modify_with_hash_for_cm1_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm1_tbl_table_modify_with_hash_for_cm1_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm1_tbl_table_modify_with_hash_for_cm1_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_cm1_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_hash_for_cm1_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_hash_for_cm1_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_hash_for_cm1_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm1_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm1_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm1_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm1_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm1_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_cm1_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm1_tbl_match_spec_t& match_spec)
{
  send_hash_for_cm1_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_hash_for_cm1_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_hash_for_cm1_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm1_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm1_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm1_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm1_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm1_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_cm2_tbl_table_modify_with_hash_for_cm2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_hash_for_cm2_tbl_table_modify_with_hash_for_cm2(sess_hdl, dev_id, entry);
  recv_hash_for_cm2_tbl_table_modify_with_hash_for_cm2();
}

void netbufferv4Client::send_hash_for_cm2_tbl_table_modify_with_hash_for_cm2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm2_tbl_table_modify_with_hash_for_cm2", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm2_tbl_table_modify_with_hash_for_cm2_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm2_tbl_table_modify_with_hash_for_cm2()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm2_tbl_table_modify_with_hash_for_cm2") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm2_tbl_table_modify_with_hash_for_cm2_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_cm2_tbl_table_modify_with_hash_for_cm2_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm2_tbl_match_spec_t& match_spec)
{
  send_hash_for_cm2_tbl_table_modify_with_hash_for_cm2_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_hash_for_cm2_tbl_table_modify_with_hash_for_cm2_by_match_spec();
}

void netbufferv4Client::send_hash_for_cm2_tbl_table_modify_with_hash_for_cm2_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm2_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm2_tbl_table_modify_with_hash_for_cm2_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm2_tbl_table_modify_with_hash_for_cm2_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm2_tbl_table_modify_with_hash_for_cm2_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm2_tbl_table_modify_with_hash_for_cm2_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm2_tbl_table_modify_with_hash_for_cm2_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_cm2_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_hash_for_cm2_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_hash_for_cm2_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_hash_for_cm2_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm2_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm2_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm2_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm2_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm2_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_cm2_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm2_tbl_match_spec_t& match_spec)
{
  send_hash_for_cm2_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_hash_for_cm2_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_hash_for_cm2_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm2_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm2_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm2_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm2_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm2_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm2_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_cm3_tbl_table_modify_with_hash_for_cm3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_hash_for_cm3_tbl_table_modify_with_hash_for_cm3(sess_hdl, dev_id, entry);
  recv_hash_for_cm3_tbl_table_modify_with_hash_for_cm3();
}

void netbufferv4Client::send_hash_for_cm3_tbl_table_modify_with_hash_for_cm3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm3_tbl_table_modify_with_hash_for_cm3", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm3_tbl_table_modify_with_hash_for_cm3_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm3_tbl_table_modify_with_hash_for_cm3()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm3_tbl_table_modify_with_hash_for_cm3") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm3_tbl_table_modify_with_hash_for_cm3_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_cm3_tbl_table_modify_with_hash_for_cm3_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm3_tbl_match_spec_t& match_spec)
{
  send_hash_for_cm3_tbl_table_modify_with_hash_for_cm3_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_hash_for_cm3_tbl_table_modify_with_hash_for_cm3_by_match_spec();
}

void netbufferv4Client::send_hash_for_cm3_tbl_table_modify_with_hash_for_cm3_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm3_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm3_tbl_table_modify_with_hash_for_cm3_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm3_tbl_table_modify_with_hash_for_cm3_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm3_tbl_table_modify_with_hash_for_cm3_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm3_tbl_table_modify_with_hash_for_cm3_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm3_tbl_table_modify_with_hash_for_cm3_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_cm3_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_hash_for_cm3_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_hash_for_cm3_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_hash_for_cm3_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm3_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm3_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm3_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm3_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm3_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_cm3_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm3_tbl_match_spec_t& match_spec)
{
  send_hash_for_cm3_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_hash_for_cm3_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_hash_for_cm3_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm3_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm3_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm3_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm3_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm3_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm3_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_cm4_tbl_table_modify_with_hash_for_cm4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_hash_for_cm4_tbl_table_modify_with_hash_for_cm4(sess_hdl, dev_id, entry);
  recv_hash_for_cm4_tbl_table_modify_with_hash_for_cm4();
}

void netbufferv4Client::send_hash_for_cm4_tbl_table_modify_with_hash_for_cm4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm4_tbl_table_modify_with_hash_for_cm4", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm4_tbl_table_modify_with_hash_for_cm4_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm4_tbl_table_modify_with_hash_for_cm4()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm4_tbl_table_modify_with_hash_for_cm4") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm4_tbl_table_modify_with_hash_for_cm4_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_cm4_tbl_table_modify_with_hash_for_cm4_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm4_tbl_match_spec_t& match_spec)
{
  send_hash_for_cm4_tbl_table_modify_with_hash_for_cm4_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_hash_for_cm4_tbl_table_modify_with_hash_for_cm4_by_match_spec();
}

void netbufferv4Client::send_hash_for_cm4_tbl_table_modify_with_hash_for_cm4_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm4_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm4_tbl_table_modify_with_hash_for_cm4_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm4_tbl_table_modify_with_hash_for_cm4_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm4_tbl_table_modify_with_hash_for_cm4_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm4_tbl_table_modify_with_hash_for_cm4_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm4_tbl_table_modify_with_hash_for_cm4_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_cm4_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_hash_for_cm4_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_hash_for_cm4_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_hash_for_cm4_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm4_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm4_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm4_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm4_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm4_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_cm4_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm4_tbl_match_spec_t& match_spec)
{
  send_hash_for_cm4_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_hash_for_cm4_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_hash_for_cm4_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm4_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm4_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm4_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm4_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm4_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm4_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_partition_tbl_table_modify_with_hash_for_partition(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_hash_for_partition_tbl_table_modify_with_hash_for_partition(sess_hdl, dev_id, entry);
  recv_hash_for_partition_tbl_table_modify_with_hash_for_partition();
}

void netbufferv4Client::send_hash_for_partition_tbl_table_modify_with_hash_for_partition(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_partition_tbl_table_modify_with_hash_for_partition", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_partition_tbl_table_modify_with_hash_for_partition_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_partition_tbl_table_modify_with_hash_for_partition()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_partition_tbl_table_modify_with_hash_for_partition") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_partition_tbl_table_modify_with_hash_for_partition_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_partition_tbl_table_modify_with_hash_for_partition_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_partition_tbl_match_spec_t& match_spec)
{
  send_hash_for_partition_tbl_table_modify_with_hash_for_partition_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_hash_for_partition_tbl_table_modify_with_hash_for_partition_by_match_spec();
}

void netbufferv4Client::send_hash_for_partition_tbl_table_modify_with_hash_for_partition_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_partition_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_partition_tbl_table_modify_with_hash_for_partition_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_partition_tbl_table_modify_with_hash_for_partition_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_partition_tbl_table_modify_with_hash_for_partition_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_partition_tbl_table_modify_with_hash_for_partition_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_partition_tbl_table_modify_with_hash_for_partition_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_partition_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_hash_for_partition_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_hash_for_partition_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_hash_for_partition_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_partition_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_partition_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_partition_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_partition_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_partition_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_partition_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_partition_tbl_match_spec_t& match_spec)
{
  send_hash_for_partition_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_hash_for_partition_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_hash_for_partition_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_partition_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_partition_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_partition_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_partition_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_partition_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_partition_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_seq_tbl_table_modify_with_hash_for_seq(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_hash_for_seq_tbl_table_modify_with_hash_for_seq(sess_hdl, dev_id, entry);
  recv_hash_for_seq_tbl_table_modify_with_hash_for_seq();
}

void netbufferv4Client::send_hash_for_seq_tbl_table_modify_with_hash_for_seq(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_seq_tbl_table_modify_with_hash_for_seq", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_seq_tbl_table_modify_with_hash_for_seq_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_seq_tbl_table_modify_with_hash_for_seq()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_seq_tbl_table_modify_with_hash_for_seq") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_seq_tbl_table_modify_with_hash_for_seq_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_seq_tbl_table_modify_with_hash_for_seq_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_seq_tbl_match_spec_t& match_spec)
{
  send_hash_for_seq_tbl_table_modify_with_hash_for_seq_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_hash_for_seq_tbl_table_modify_with_hash_for_seq_by_match_spec();
}

void netbufferv4Client::send_hash_for_seq_tbl_table_modify_with_hash_for_seq_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_seq_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_seq_tbl_table_modify_with_hash_for_seq_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_seq_tbl_table_modify_with_hash_for_seq_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_seq_tbl_table_modify_with_hash_for_seq_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_seq_tbl_table_modify_with_hash_for_seq_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_seq_tbl_table_modify_with_hash_for_seq_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_seq_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_hash_for_seq_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_hash_for_seq_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_hash_for_seq_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_seq_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_seq_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_seq_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_seq_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_seq_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_seq_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_seq_tbl_match_spec_t& match_spec)
{
  send_hash_for_seq_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_hash_for_seq_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_hash_for_seq_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_seq_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_seq_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_seq_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_seq_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_seq_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_seq_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_partition_tbl_table_modify_with_hash_partition(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_hash_partition_action_spec_t& action_spec)
{
  send_hash_partition_tbl_table_modify_with_hash_partition(sess_hdl, dev_id, entry, action_spec);
  recv_hash_partition_tbl_table_modify_with_hash_partition();
}

void netbufferv4Client::send_hash_partition_tbl_table_modify_with_hash_partition(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_hash_partition_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_partition_tbl_table_modify_with_hash_partition", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_partition_tbl_table_modify_with_hash_partition_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_partition_tbl_table_modify_with_hash_partition()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_partition_tbl_table_modify_with_hash_partition") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_partition_tbl_table_modify_with_hash_partition_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_partition_tbl_table_modify_with_hash_partition_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_partition_tbl_match_spec_t& match_spec, const int32_t priority, const netbufferv4_hash_partition_action_spec_t& action_spec)
{
  send_hash_partition_tbl_table_modify_with_hash_partition_by_match_spec(sess_hdl, dev_tgt, match_spec, priority, action_spec);
  recv_hash_partition_tbl_table_modify_with_hash_partition_by_match_spec();
}

void netbufferv4Client::send_hash_partition_tbl_table_modify_with_hash_partition_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_partition_tbl_match_spec_t& match_spec, const int32_t priority, const netbufferv4_hash_partition_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_partition_tbl_table_modify_with_hash_partition_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_partition_tbl_table_modify_with_hash_partition_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_partition_tbl_table_modify_with_hash_partition_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_partition_tbl_table_modify_with_hash_partition_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_partition_tbl_table_modify_with_hash_partition_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_partition_tbl_table_modify_with_hash_partition_for_special_response(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_hash_partition_for_special_response_action_spec_t& action_spec)
{
  send_hash_partition_tbl_table_modify_with_hash_partition_for_special_response(sess_hdl, dev_id, entry, action_spec);
  recv_hash_partition_tbl_table_modify_with_hash_partition_for_special_response();
}

void netbufferv4Client::send_hash_partition_tbl_table_modify_with_hash_partition_for_special_response(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_hash_partition_for_special_response_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_partition_tbl_table_modify_with_hash_partition_for_special_response", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_partition_tbl_table_modify_with_hash_partition_for_special_response_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_partition_tbl_table_modify_with_hash_partition_for_special_response()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_partition_tbl_table_modify_with_hash_partition_for_special_response") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_partition_tbl_table_modify_with_hash_partition_for_special_response_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_partition_tbl_table_modify_with_hash_partition_for_special_response_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_partition_tbl_match_spec_t& match_spec, const int32_t priority, const netbufferv4_hash_partition_for_special_response_action_spec_t& action_spec)
{
  send_hash_partition_tbl_table_modify_with_hash_partition_for_special_response_by_match_spec(sess_hdl, dev_tgt, match_spec, priority, action_spec);
  recv_hash_partition_tbl_table_modify_with_hash_partition_for_special_response_by_match_spec();
}

void netbufferv4Client::send_hash_partition_tbl_table_modify_with_hash_partition_for_special_response_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_partition_tbl_match_spec_t& match_spec, const int32_t priority, const netbufferv4_hash_partition_for_special_response_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_partition_tbl_table_modify_with_hash_partition_for_special_response_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_partition_tbl_table_modify_with_hash_partition_for_special_response_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_partition_tbl_table_modify_with_hash_partition_for_special_response_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_partition_tbl_table_modify_with_hash_partition_for_special_response_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_partition_tbl_table_modify_with_hash_partition_for_special_response_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_partition_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_hash_partition_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_hash_partition_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_hash_partition_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_partition_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_partition_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_partition_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_partition_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_partition_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_partition_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_partition_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_hash_partition_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec, priority);
  recv_hash_partition_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_hash_partition_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_partition_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_partition_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_partition_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_partition_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_partition_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_partition_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::ig_port_forward_tbl_table_modify_with_update_getreq_to_getreq_inswitch(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_ig_port_forward_tbl_table_modify_with_update_getreq_to_getreq_inswitch(sess_hdl, dev_id, entry);
  recv_ig_port_forward_tbl_table_modify_with_update_getreq_to_getreq_inswitch();
}

void netbufferv4Client::send_ig_port_forward_tbl_table_modify_with_update_getreq_to_getreq_inswitch(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ig_port_forward_tbl_table_modify_with_update_getreq_to_getreq_inswitch", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ig_port_forward_tbl_table_modify_with_update_getreq_to_getreq_inswitch_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_ig_port_forward_tbl_table_modify_with_update_getreq_to_getreq_inswitch()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ig_port_forward_tbl_table_modify_with_update_getreq_to_getreq_inswitch") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_ig_port_forward_tbl_table_modify_with_update_getreq_to_getreq_inswitch_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::ig_port_forward_tbl_table_modify_with_update_getreq_to_getreq_inswitch_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ig_port_forward_tbl_match_spec_t& match_spec)
{
  send_ig_port_forward_tbl_table_modify_with_update_getreq_to_getreq_inswitch_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_ig_port_forward_tbl_table_modify_with_update_getreq_to_getreq_inswitch_by_match_spec();
}

void netbufferv4Client::send_ig_port_forward_tbl_table_modify_with_update_getreq_to_getreq_inswitch_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ig_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ig_port_forward_tbl_table_modify_with_update_getreq_to_getreq_inswitch_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ig_port_forward_tbl_table_modify_with_update_getreq_to_getreq_inswitch_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_ig_port_forward_tbl_table_modify_with_update_getreq_to_getreq_inswitch_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ig_port_forward_tbl_table_modify_with_update_getreq_to_getreq_inswitch_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_ig_port_forward_tbl_table_modify_with_update_getreq_to_getreq_inswitch_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::ig_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_latest_seq_inswitch(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_ig_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_latest_seq_inswitch(sess_hdl, dev_id, entry);
  recv_ig_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_latest_seq_inswitch();
}

void netbufferv4Client::send_ig_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_latest_seq_inswitch(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ig_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_latest_seq_inswitch", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ig_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_latest_seq_inswitch_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_ig_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_latest_seq_inswitch()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ig_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_latest_seq_inswitch") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_ig_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_latest_seq_inswitch_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::ig_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_latest_seq_inswitch_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ig_port_forward_tbl_match_spec_t& match_spec)
{
  send_ig_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_latest_seq_inswitch_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_ig_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_latest_seq_inswitch_by_match_spec();
}

void netbufferv4Client::send_ig_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_latest_seq_inswitch_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ig_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ig_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_latest_seq_inswitch_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ig_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_latest_seq_inswitch_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_ig_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_latest_seq_inswitch_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ig_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_latest_seq_inswitch_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_ig_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_latest_seq_inswitch_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::ig_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_ig_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch(sess_hdl, dev_id, entry);
  recv_ig_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch();
}

void netbufferv4Client::send_ig_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ig_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ig_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_ig_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ig_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_ig_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::ig_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ig_port_forward_tbl_match_spec_t& match_spec)
{
  send_ig_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_ig_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch_by_match_spec();
}

void netbufferv4Client::send_ig_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ig_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ig_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ig_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_ig_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ig_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_ig_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::ig_port_forward_tbl_table_modify_with_update_putreq_to_putreq_inswitch(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_ig_port_forward_tbl_table_modify_with_update_putreq_to_putreq_inswitch(sess_hdl, dev_id, entry);
  recv_ig_port_forward_tbl_table_modify_with_update_putreq_to_putreq_inswitch();
}

void netbufferv4Client::send_ig_port_forward_tbl_table_modify_with_update_putreq_to_putreq_inswitch(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ig_port_forward_tbl_table_modify_with_update_putreq_to_putreq_inswitch", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ig_port_forward_tbl_table_modify_with_update_putreq_to_putreq_inswitch_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_ig_port_forward_tbl_table_modify_with_update_putreq_to_putreq_inswitch()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ig_port_forward_tbl_table_modify_with_update_putreq_to_putreq_inswitch") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_ig_port_forward_tbl_table_modify_with_update_putreq_to_putreq_inswitch_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::ig_port_forward_tbl_table_modify_with_update_putreq_to_putreq_inswitch_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ig_port_forward_tbl_match_spec_t& match_spec)
{
  send_ig_port_forward_tbl_table_modify_with_update_putreq_to_putreq_inswitch_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_ig_port_forward_tbl_table_modify_with_update_putreq_to_putreq_inswitch_by_match_spec();
}

void netbufferv4Client::send_ig_port_forward_tbl_table_modify_with_update_putreq_to_putreq_inswitch_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ig_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ig_port_forward_tbl_table_modify_with_update_putreq_to_putreq_inswitch_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ig_port_forward_tbl_table_modify_with_update_putreq_to_putreq_inswitch_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_ig_port_forward_tbl_table_modify_with_update_putreq_to_putreq_inswitch_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ig_port_forward_tbl_table_modify_with_update_putreq_to_putreq_inswitch_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_ig_port_forward_tbl_table_modify_with_update_putreq_to_putreq_inswitch_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::ig_port_forward_tbl_table_modify_with_update_delreq_to_delreq_inswitch(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_ig_port_forward_tbl_table_modify_with_update_delreq_to_delreq_inswitch(sess_hdl, dev_id, entry);
  recv_ig_port_forward_tbl_table_modify_with_update_delreq_to_delreq_inswitch();
}

void netbufferv4Client::send_ig_port_forward_tbl_table_modify_with_update_delreq_to_delreq_inswitch(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ig_port_forward_tbl_table_modify_with_update_delreq_to_delreq_inswitch", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ig_port_forward_tbl_table_modify_with_update_delreq_to_delreq_inswitch_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_ig_port_forward_tbl_table_modify_with_update_delreq_to_delreq_inswitch()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ig_port_forward_tbl_table_modify_with_update_delreq_to_delreq_inswitch") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_ig_port_forward_tbl_table_modify_with_update_delreq_to_delreq_inswitch_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::ig_port_forward_tbl_table_modify_with_update_delreq_to_delreq_inswitch_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ig_port_forward_tbl_match_spec_t& match_spec)
{
  send_ig_port_forward_tbl_table_modify_with_update_delreq_to_delreq_inswitch_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_ig_port_forward_tbl_table_modify_with_update_delreq_to_delreq_inswitch_by_match_spec();
}

void netbufferv4Client::send_ig_port_forward_tbl_table_modify_with_update_delreq_to_delreq_inswitch_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ig_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ig_port_forward_tbl_table_modify_with_update_delreq_to_delreq_inswitch_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ig_port_forward_tbl_table_modify_with_update_delreq_to_delreq_inswitch_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_ig_port_forward_tbl_table_modify_with_update_delreq_to_delreq_inswitch_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ig_port_forward_tbl_table_modify_with_update_delreq_to_delreq_inswitch_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_ig_port_forward_tbl_table_modify_with_update_delreq_to_delreq_inswitch_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::ig_port_forward_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_ig_port_forward_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_ig_port_forward_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_ig_port_forward_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ig_port_forward_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ig_port_forward_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_ig_port_forward_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ig_port_forward_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_ig_port_forward_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::ig_port_forward_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ig_port_forward_tbl_match_spec_t& match_spec)
{
  send_ig_port_forward_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_ig_port_forward_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_ig_port_forward_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ig_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ig_port_forward_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ig_port_forward_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_ig_port_forward_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ig_port_forward_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_ig_port_forward_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::ipv4_forward_tbl_table_modify_with_forward_normal_response(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_forward_normal_response_action_spec_t& action_spec)
{
  send_ipv4_forward_tbl_table_modify_with_forward_normal_response(sess_hdl, dev_id, entry, action_spec);
  recv_ipv4_forward_tbl_table_modify_with_forward_normal_response();
}

void netbufferv4Client::send_ipv4_forward_tbl_table_modify_with_forward_normal_response(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_forward_normal_response_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ipv4_forward_tbl_table_modify_with_forward_normal_response", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ipv4_forward_tbl_table_modify_with_forward_normal_response_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_ipv4_forward_tbl_table_modify_with_forward_normal_response()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ipv4_forward_tbl_table_modify_with_forward_normal_response") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_ipv4_forward_tbl_table_modify_with_forward_normal_response_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::ipv4_forward_tbl_table_modify_with_forward_normal_response_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ipv4_forward_tbl_match_spec_t& match_spec, const netbufferv4_forward_normal_response_action_spec_t& action_spec)
{
  send_ipv4_forward_tbl_table_modify_with_forward_normal_response_by_match_spec(sess_hdl, dev_tgt, match_spec, action_spec);
  recv_ipv4_forward_tbl_table_modify_with_forward_normal_response_by_match_spec();
}

void netbufferv4Client::send_ipv4_forward_tbl_table_modify_with_forward_normal_response_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ipv4_forward_tbl_match_spec_t& match_spec, const netbufferv4_forward_normal_response_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ipv4_forward_tbl_table_modify_with_forward_normal_response_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ipv4_forward_tbl_table_modify_with_forward_normal_response_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_ipv4_forward_tbl_table_modify_with_forward_normal_response_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ipv4_forward_tbl_table_modify_with_forward_normal_response_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_ipv4_forward_tbl_table_modify_with_forward_normal_response_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::ipv4_forward_tbl_table_modify_with_forward_special_get_response(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_forward_special_get_response_action_spec_t& action_spec)
{
  send_ipv4_forward_tbl_table_modify_with_forward_special_get_response(sess_hdl, dev_id, entry, action_spec);
  recv_ipv4_forward_tbl_table_modify_with_forward_special_get_response();
}

void netbufferv4Client::send_ipv4_forward_tbl_table_modify_with_forward_special_get_response(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_forward_special_get_response_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ipv4_forward_tbl_table_modify_with_forward_special_get_response", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ipv4_forward_tbl_table_modify_with_forward_special_get_response_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_ipv4_forward_tbl_table_modify_with_forward_special_get_response()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ipv4_forward_tbl_table_modify_with_forward_special_get_response") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_ipv4_forward_tbl_table_modify_with_forward_special_get_response_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::ipv4_forward_tbl_table_modify_with_forward_special_get_response_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ipv4_forward_tbl_match_spec_t& match_spec, const netbufferv4_forward_special_get_response_action_spec_t& action_spec)
{
  send_ipv4_forward_tbl_table_modify_with_forward_special_get_response_by_match_spec(sess_hdl, dev_tgt, match_spec, action_spec);
  recv_ipv4_forward_tbl_table_modify_with_forward_special_get_response_by_match_spec();
}

void netbufferv4Client::send_ipv4_forward_tbl_table_modify_with_forward_special_get_response_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ipv4_forward_tbl_match_spec_t& match_spec, const netbufferv4_forward_special_get_response_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ipv4_forward_tbl_table_modify_with_forward_special_get_response_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ipv4_forward_tbl_table_modify_with_forward_special_get_response_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_ipv4_forward_tbl_table_modify_with_forward_special_get_response_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ipv4_forward_tbl_table_modify_with_forward_special_get_response_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_ipv4_forward_tbl_table_modify_with_forward_special_get_response_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::ipv4_forward_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_ipv4_forward_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_ipv4_forward_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_ipv4_forward_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ipv4_forward_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ipv4_forward_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_ipv4_forward_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ipv4_forward_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_ipv4_forward_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::ipv4_forward_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ipv4_forward_tbl_match_spec_t& match_spec)
{
  send_ipv4_forward_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_ipv4_forward_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_ipv4_forward_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ipv4_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ipv4_forward_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ipv4_forward_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_ipv4_forward_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ipv4_forward_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_ipv4_forward_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::is_hot_tbl_table_modify_with_set_is_hot(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_is_hot_tbl_table_modify_with_set_is_hot(sess_hdl, dev_id, entry);
  recv_is_hot_tbl_table_modify_with_set_is_hot();
}

void netbufferv4Client::send_is_hot_tbl_table_modify_with_set_is_hot(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("is_hot_tbl_table_modify_with_set_is_hot", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_is_hot_tbl_table_modify_with_set_is_hot_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_is_hot_tbl_table_modify_with_set_is_hot()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("is_hot_tbl_table_modify_with_set_is_hot") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_is_hot_tbl_table_modify_with_set_is_hot_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::is_hot_tbl_table_modify_with_set_is_hot_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_is_hot_tbl_match_spec_t& match_spec)
{
  send_is_hot_tbl_table_modify_with_set_is_hot_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_is_hot_tbl_table_modify_with_set_is_hot_by_match_spec();
}

void netbufferv4Client::send_is_hot_tbl_table_modify_with_set_is_hot_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_is_hot_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("is_hot_tbl_table_modify_with_set_is_hot_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_is_hot_tbl_table_modify_with_set_is_hot_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_is_hot_tbl_table_modify_with_set_is_hot_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("is_hot_tbl_table_modify_with_set_is_hot_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_is_hot_tbl_table_modify_with_set_is_hot_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::is_hot_tbl_table_modify_with_reset_is_hot(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_is_hot_tbl_table_modify_with_reset_is_hot(sess_hdl, dev_id, entry);
  recv_is_hot_tbl_table_modify_with_reset_is_hot();
}

void netbufferv4Client::send_is_hot_tbl_table_modify_with_reset_is_hot(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("is_hot_tbl_table_modify_with_reset_is_hot", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_is_hot_tbl_table_modify_with_reset_is_hot_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_is_hot_tbl_table_modify_with_reset_is_hot()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("is_hot_tbl_table_modify_with_reset_is_hot") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_is_hot_tbl_table_modify_with_reset_is_hot_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::is_hot_tbl_table_modify_with_reset_is_hot_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_is_hot_tbl_match_spec_t& match_spec)
{
  send_is_hot_tbl_table_modify_with_reset_is_hot_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_is_hot_tbl_table_modify_with_reset_is_hot_by_match_spec();
}

void netbufferv4Client::send_is_hot_tbl_table_modify_with_reset_is_hot_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_is_hot_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("is_hot_tbl_table_modify_with_reset_is_hot_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_is_hot_tbl_table_modify_with_reset_is_hot_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_is_hot_tbl_table_modify_with_reset_is_hot_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("is_hot_tbl_table_modify_with_reset_is_hot_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_is_hot_tbl_table_modify_with_reset_is_hot_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::l2l3_forward_tbl_table_modify_with_l2l3_forward(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_l2l3_forward_action_spec_t& action_spec)
{
  send_l2l3_forward_tbl_table_modify_with_l2l3_forward(sess_hdl, dev_id, entry, action_spec);
  recv_l2l3_forward_tbl_table_modify_with_l2l3_forward();
}

void netbufferv4Client::send_l2l3_forward_tbl_table_modify_with_l2l3_forward(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_l2l3_forward_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("l2l3_forward_tbl_table_modify_with_l2l3_forward", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_l2l3_forward_tbl_table_modify_with_l2l3_forward_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_l2l3_forward_tbl_table_modify_with_l2l3_forward()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("l2l3_forward_tbl_table_modify_with_l2l3_forward") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_l2l3_forward_tbl_table_modify_with_l2l3_forward_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::l2l3_forward_tbl_table_modify_with_l2l3_forward_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_l2l3_forward_tbl_match_spec_t& match_spec, const netbufferv4_l2l3_forward_action_spec_t& action_spec)
{
  send_l2l3_forward_tbl_table_modify_with_l2l3_forward_by_match_spec(sess_hdl, dev_tgt, match_spec, action_spec);
  recv_l2l3_forward_tbl_table_modify_with_l2l3_forward_by_match_spec();
}

void netbufferv4Client::send_l2l3_forward_tbl_table_modify_with_l2l3_forward_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_l2l3_forward_tbl_match_spec_t& match_spec, const netbufferv4_l2l3_forward_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("l2l3_forward_tbl_table_modify_with_l2l3_forward_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_l2l3_forward_tbl_table_modify_with_l2l3_forward_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_l2l3_forward_tbl_table_modify_with_l2l3_forward_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("l2l3_forward_tbl_table_modify_with_l2l3_forward_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_l2l3_forward_tbl_table_modify_with_l2l3_forward_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::l2l3_forward_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_l2l3_forward_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_l2l3_forward_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_l2l3_forward_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("l2l3_forward_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_l2l3_forward_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_l2l3_forward_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("l2l3_forward_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_l2l3_forward_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::l2l3_forward_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_l2l3_forward_tbl_match_spec_t& match_spec)
{
  send_l2l3_forward_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_l2l3_forward_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_l2l3_forward_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_l2l3_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("l2l3_forward_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_l2l3_forward_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_l2l3_forward_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("l2l3_forward_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_l2l3_forward_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::lastclone_lastscansplit_tbl_table_modify_with_set_is_lastclone(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_lastclone_lastscansplit_tbl_table_modify_with_set_is_lastclone(sess_hdl, dev_id, entry);
  recv_lastclone_lastscansplit_tbl_table_modify_with_set_is_lastclone();
}

void netbufferv4Client::send_lastclone_lastscansplit_tbl_table_modify_with_set_is_lastclone(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("lastclone_lastscansplit_tbl_table_modify_with_set_is_lastclone", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_lastclone_lastscansplit_tbl_table_modify_with_set_is_lastclone_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_lastclone_lastscansplit_tbl_table_modify_with_set_is_lastclone()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("lastclone_lastscansplit_tbl_table_modify_with_set_is_lastclone") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_lastclone_lastscansplit_tbl_table_modify_with_set_is_lastclone_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::lastclone_lastscansplit_tbl_table_modify_with_set_is_lastclone_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_lastclone_lastscansplit_tbl_match_spec_t& match_spec)
{
  send_lastclone_lastscansplit_tbl_table_modify_with_set_is_lastclone_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_lastclone_lastscansplit_tbl_table_modify_with_set_is_lastclone_by_match_spec();
}

void netbufferv4Client::send_lastclone_lastscansplit_tbl_table_modify_with_set_is_lastclone_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_lastclone_lastscansplit_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("lastclone_lastscansplit_tbl_table_modify_with_set_is_lastclone_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_lastclone_lastscansplit_tbl_table_modify_with_set_is_lastclone_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_lastclone_lastscansplit_tbl_table_modify_with_set_is_lastclone_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("lastclone_lastscansplit_tbl_table_modify_with_set_is_lastclone_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_lastclone_lastscansplit_tbl_table_modify_with_set_is_lastclone_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::lastclone_lastscansplit_tbl_table_modify_with_reset_is_lastclone_lastscansplit(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_lastclone_lastscansplit_tbl_table_modify_with_reset_is_lastclone_lastscansplit(sess_hdl, dev_id, entry);
  recv_lastclone_lastscansplit_tbl_table_modify_with_reset_is_lastclone_lastscansplit();
}

void netbufferv4Client::send_lastclone_lastscansplit_tbl_table_modify_with_reset_is_lastclone_lastscansplit(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("lastclone_lastscansplit_tbl_table_modify_with_reset_is_lastclone_lastscansplit", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_lastclone_lastscansplit_tbl_table_modify_with_reset_is_lastclone_lastscansplit_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_lastclone_lastscansplit_tbl_table_modify_with_reset_is_lastclone_lastscansplit()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("lastclone_lastscansplit_tbl_table_modify_with_reset_is_lastclone_lastscansplit") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_lastclone_lastscansplit_tbl_table_modify_with_reset_is_lastclone_lastscansplit_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::lastclone_lastscansplit_tbl_table_modify_with_reset_is_lastclone_lastscansplit_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_lastclone_lastscansplit_tbl_match_spec_t& match_spec)
{
  send_lastclone_lastscansplit_tbl_table_modify_with_reset_is_lastclone_lastscansplit_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_lastclone_lastscansplit_tbl_table_modify_with_reset_is_lastclone_lastscansplit_by_match_spec();
}

void netbufferv4Client::send_lastclone_lastscansplit_tbl_table_modify_with_reset_is_lastclone_lastscansplit_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_lastclone_lastscansplit_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("lastclone_lastscansplit_tbl_table_modify_with_reset_is_lastclone_lastscansplit_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_lastclone_lastscansplit_tbl_table_modify_with_reset_is_lastclone_lastscansplit_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_lastclone_lastscansplit_tbl_table_modify_with_reset_is_lastclone_lastscansplit_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("lastclone_lastscansplit_tbl_table_modify_with_reset_is_lastclone_lastscansplit_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_lastclone_lastscansplit_tbl_table_modify_with_reset_is_lastclone_lastscansplit_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::need_recirculate_tbl_table_modify_with_set_need_recirculate(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_need_recirculate_tbl_table_modify_with_set_need_recirculate(sess_hdl, dev_id, entry);
  recv_need_recirculate_tbl_table_modify_with_set_need_recirculate();
}

void netbufferv4Client::send_need_recirculate_tbl_table_modify_with_set_need_recirculate(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("need_recirculate_tbl_table_modify_with_set_need_recirculate", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_need_recirculate_tbl_table_modify_with_set_need_recirculate_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_need_recirculate_tbl_table_modify_with_set_need_recirculate()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("need_recirculate_tbl_table_modify_with_set_need_recirculate") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_need_recirculate_tbl_table_modify_with_set_need_recirculate_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::need_recirculate_tbl_table_modify_with_set_need_recirculate_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_need_recirculate_tbl_match_spec_t& match_spec)
{
  send_need_recirculate_tbl_table_modify_with_set_need_recirculate_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_need_recirculate_tbl_table_modify_with_set_need_recirculate_by_match_spec();
}

void netbufferv4Client::send_need_recirculate_tbl_table_modify_with_set_need_recirculate_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_need_recirculate_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("need_recirculate_tbl_table_modify_with_set_need_recirculate_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_need_recirculate_tbl_table_modify_with_set_need_recirculate_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_need_recirculate_tbl_table_modify_with_set_need_recirculate_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("need_recirculate_tbl_table_modify_with_set_need_recirculate_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_need_recirculate_tbl_table_modify_with_set_need_recirculate_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::need_recirculate_tbl_table_modify_with_reset_need_recirculate(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_need_recirculate_tbl_table_modify_with_reset_need_recirculate(sess_hdl, dev_id, entry);
  recv_need_recirculate_tbl_table_modify_with_reset_need_recirculate();
}

void netbufferv4Client::send_need_recirculate_tbl_table_modify_with_reset_need_recirculate(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("need_recirculate_tbl_table_modify_with_reset_need_recirculate", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_need_recirculate_tbl_table_modify_with_reset_need_recirculate_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_need_recirculate_tbl_table_modify_with_reset_need_recirculate()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("need_recirculate_tbl_table_modify_with_reset_need_recirculate") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_need_recirculate_tbl_table_modify_with_reset_need_recirculate_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::need_recirculate_tbl_table_modify_with_reset_need_recirculate_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_need_recirculate_tbl_match_spec_t& match_spec)
{
  send_need_recirculate_tbl_table_modify_with_reset_need_recirculate_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_need_recirculate_tbl_table_modify_with_reset_need_recirculate_by_match_spec();
}

void netbufferv4Client::send_need_recirculate_tbl_table_modify_with_reset_need_recirculate_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_need_recirculate_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("need_recirculate_tbl_table_modify_with_reset_need_recirculate_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_need_recirculate_tbl_table_modify_with_reset_need_recirculate_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_need_recirculate_tbl_table_modify_with_reset_need_recirculate_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("need_recirculate_tbl_table_modify_with_reset_need_recirculate_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_need_recirculate_tbl_table_modify_with_reset_need_recirculate_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::prepare_for_cachehit_tbl_table_modify_with_set_client_sid(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_set_client_sid_action_spec_t& action_spec)
{
  send_prepare_for_cachehit_tbl_table_modify_with_set_client_sid(sess_hdl, dev_id, entry, action_spec);
  recv_prepare_for_cachehit_tbl_table_modify_with_set_client_sid();
}

void netbufferv4Client::send_prepare_for_cachehit_tbl_table_modify_with_set_client_sid(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_set_client_sid_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("prepare_for_cachehit_tbl_table_modify_with_set_client_sid", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_prepare_for_cachehit_tbl_table_modify_with_set_client_sid_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_prepare_for_cachehit_tbl_table_modify_with_set_client_sid()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("prepare_for_cachehit_tbl_table_modify_with_set_client_sid") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_prepare_for_cachehit_tbl_table_modify_with_set_client_sid_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::prepare_for_cachehit_tbl_table_modify_with_set_client_sid_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_prepare_for_cachehit_tbl_match_spec_t& match_spec, const netbufferv4_set_client_sid_action_spec_t& action_spec)
{
  send_prepare_for_cachehit_tbl_table_modify_with_set_client_sid_by_match_spec(sess_hdl, dev_tgt, match_spec, action_spec);
  recv_prepare_for_cachehit_tbl_table_modify_with_set_client_sid_by_match_spec();
}

void netbufferv4Client::send_prepare_for_cachehit_tbl_table_modify_with_set_client_sid_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_prepare_for_cachehit_tbl_match_spec_t& match_spec, const netbufferv4_set_client_sid_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("prepare_for_cachehit_tbl_table_modify_with_set_client_sid_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_prepare_for_cachehit_tbl_table_modify_with_set_client_sid_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_prepare_for_cachehit_tbl_table_modify_with_set_client_sid_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("prepare_for_cachehit_tbl_table_modify_with_set_client_sid_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_prepare_for_cachehit_tbl_table_modify_with_set_client_sid_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::prepare_for_cachehit_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_prepare_for_cachehit_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_prepare_for_cachehit_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_prepare_for_cachehit_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("prepare_for_cachehit_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_prepare_for_cachehit_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_prepare_for_cachehit_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("prepare_for_cachehit_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_prepare_for_cachehit_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::prepare_for_cachehit_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_prepare_for_cachehit_tbl_match_spec_t& match_spec)
{
  send_prepare_for_cachehit_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_prepare_for_cachehit_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_prepare_for_cachehit_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_prepare_for_cachehit_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("prepare_for_cachehit_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_prepare_for_cachehit_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_prepare_for_cachehit_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("prepare_for_cachehit_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_prepare_for_cachehit_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::recirculate_tbl_table_modify_with_recirculate_pkt(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_recirculate_pkt_action_spec_t& action_spec)
{
  send_recirculate_tbl_table_modify_with_recirculate_pkt(sess_hdl, dev_id, entry, action_spec);
  recv_recirculate_tbl_table_modify_with_recirculate_pkt();
}

void netbufferv4Client::send_recirculate_tbl_table_modify_with_recirculate_pkt(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_recirculate_pkt_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("recirculate_tbl_table_modify_with_recirculate_pkt", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_recirculate_tbl_table_modify_with_recirculate_pkt_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_recirculate_tbl_table_modify_with_recirculate_pkt()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("recirculate_tbl_table_modify_with_recirculate_pkt") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_recirculate_tbl_table_modify_with_recirculate_pkt_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::recirculate_tbl_table_modify_with_recirculate_pkt_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_recirculate_tbl_match_spec_t& match_spec, const netbufferv4_recirculate_pkt_action_spec_t& action_spec)
{
  send_recirculate_tbl_table_modify_with_recirculate_pkt_by_match_spec(sess_hdl, dev_tgt, match_spec, action_spec);
  recv_recirculate_tbl_table_modify_with_recirculate_pkt_by_match_spec();
}

void netbufferv4Client::send_recirculate_tbl_table_modify_with_recirculate_pkt_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_recirculate_tbl_match_spec_t& match_spec, const netbufferv4_recirculate_pkt_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("recirculate_tbl_table_modify_with_recirculate_pkt_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_recirculate_tbl_table_modify_with_recirculate_pkt_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_recirculate_tbl_table_modify_with_recirculate_pkt_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("recirculate_tbl_table_modify_with_recirculate_pkt_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_recirculate_tbl_table_modify_with_recirculate_pkt_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::recirculate_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_recirculate_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_recirculate_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_recirculate_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("recirculate_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_recirculate_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_recirculate_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("recirculate_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_recirculate_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::recirculate_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_recirculate_tbl_match_spec_t& match_spec)
{
  send_recirculate_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_recirculate_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_recirculate_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_recirculate_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("recirculate_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_recirculate_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_recirculate_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("recirculate_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_recirculate_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::sample_tbl_table_modify_with_sample(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_sample_tbl_table_modify_with_sample(sess_hdl, dev_id, entry);
  recv_sample_tbl_table_modify_with_sample();
}

void netbufferv4Client::send_sample_tbl_table_modify_with_sample(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sample_tbl_table_modify_with_sample", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_sample_tbl_table_modify_with_sample_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_sample_tbl_table_modify_with_sample()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sample_tbl_table_modify_with_sample") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_sample_tbl_table_modify_with_sample_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::sample_tbl_table_modify_with_sample_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_sample_tbl_match_spec_t& match_spec)
{
  send_sample_tbl_table_modify_with_sample_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_sample_tbl_table_modify_with_sample_by_match_spec();
}

void netbufferv4Client::send_sample_tbl_table_modify_with_sample_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_sample_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sample_tbl_table_modify_with_sample_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_sample_tbl_table_modify_with_sample_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_sample_tbl_table_modify_with_sample_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sample_tbl_table_modify_with_sample_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_sample_tbl_table_modify_with_sample_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::sample_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_sample_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_sample_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_sample_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sample_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_sample_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_sample_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sample_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_sample_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::sample_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_sample_tbl_match_spec_t& match_spec)
{
  send_sample_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_sample_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_sample_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_sample_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sample_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_sample_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_sample_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sample_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_sample_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::save_client_udpport_tbl_table_modify_with_save_client_udpport(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_save_client_udpport_tbl_table_modify_with_save_client_udpport(sess_hdl, dev_id, entry);
  recv_save_client_udpport_tbl_table_modify_with_save_client_udpport();
}

void netbufferv4Client::send_save_client_udpport_tbl_table_modify_with_save_client_udpport(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("save_client_udpport_tbl_table_modify_with_save_client_udpport", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_save_client_udpport_tbl_table_modify_with_save_client_udpport_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_save_client_udpport_tbl_table_modify_with_save_client_udpport()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("save_client_udpport_tbl_table_modify_with_save_client_udpport") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_save_client_udpport_tbl_table_modify_with_save_client_udpport_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::save_client_udpport_tbl_table_modify_with_save_client_udpport_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_save_client_udpport_tbl_match_spec_t& match_spec)
{
  send_save_client_udpport_tbl_table_modify_with_save_client_udpport_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_save_client_udpport_tbl_table_modify_with_save_client_udpport_by_match_spec();
}

void netbufferv4Client::send_save_client_udpport_tbl_table_modify_with_save_client_udpport_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_save_client_udpport_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("save_client_udpport_tbl_table_modify_with_save_client_udpport_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_save_client_udpport_tbl_table_modify_with_save_client_udpport_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_save_client_udpport_tbl_table_modify_with_save_client_udpport_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("save_client_udpport_tbl_table_modify_with_save_client_udpport_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_save_client_udpport_tbl_table_modify_with_save_client_udpport_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::save_client_udpport_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_save_client_udpport_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_save_client_udpport_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_save_client_udpport_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("save_client_udpport_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_save_client_udpport_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_save_client_udpport_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("save_client_udpport_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_save_client_udpport_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::save_client_udpport_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_save_client_udpport_tbl_match_spec_t& match_spec)
{
  send_save_client_udpport_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_save_client_udpport_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_save_client_udpport_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_save_client_udpport_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("save_client_udpport_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_save_client_udpport_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_save_client_udpport_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("save_client_udpport_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_save_client_udpport_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::snapshot_flag_tbl_table_modify_with_set_snapshot_flag(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_snapshot_flag_tbl_table_modify_with_set_snapshot_flag(sess_hdl, dev_id, entry);
  recv_snapshot_flag_tbl_table_modify_with_set_snapshot_flag();
}

void netbufferv4Client::send_snapshot_flag_tbl_table_modify_with_set_snapshot_flag(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("snapshot_flag_tbl_table_modify_with_set_snapshot_flag", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_snapshot_flag_tbl_table_modify_with_set_snapshot_flag_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_snapshot_flag_tbl_table_modify_with_set_snapshot_flag()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("snapshot_flag_tbl_table_modify_with_set_snapshot_flag") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_snapshot_flag_tbl_table_modify_with_set_snapshot_flag_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::snapshot_flag_tbl_table_modify_with_set_snapshot_flag_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_snapshot_flag_tbl_match_spec_t& match_spec)
{
  send_snapshot_flag_tbl_table_modify_with_set_snapshot_flag_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_snapshot_flag_tbl_table_modify_with_set_snapshot_flag_by_match_spec();
}

void netbufferv4Client::send_snapshot_flag_tbl_table_modify_with_set_snapshot_flag_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_snapshot_flag_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("snapshot_flag_tbl_table_modify_with_set_snapshot_flag_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_snapshot_flag_tbl_table_modify_with_set_snapshot_flag_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_snapshot_flag_tbl_table_modify_with_set_snapshot_flag_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("snapshot_flag_tbl_table_modify_with_set_snapshot_flag_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_snapshot_flag_tbl_table_modify_with_set_snapshot_flag_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::snapshot_flag_tbl_table_modify_with_reset_snapshot_flag(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_snapshot_flag_tbl_table_modify_with_reset_snapshot_flag(sess_hdl, dev_id, entry);
  recv_snapshot_flag_tbl_table_modify_with_reset_snapshot_flag();
}

void netbufferv4Client::send_snapshot_flag_tbl_table_modify_with_reset_snapshot_flag(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("snapshot_flag_tbl_table_modify_with_reset_snapshot_flag", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_snapshot_flag_tbl_table_modify_with_reset_snapshot_flag_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_snapshot_flag_tbl_table_modify_with_reset_snapshot_flag()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("snapshot_flag_tbl_table_modify_with_reset_snapshot_flag") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_snapshot_flag_tbl_table_modify_with_reset_snapshot_flag_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::snapshot_flag_tbl_table_modify_with_reset_snapshot_flag_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_snapshot_flag_tbl_match_spec_t& match_spec)
{
  send_snapshot_flag_tbl_table_modify_with_reset_snapshot_flag_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_snapshot_flag_tbl_table_modify_with_reset_snapshot_flag_by_match_spec();
}

void netbufferv4Client::send_snapshot_flag_tbl_table_modify_with_reset_snapshot_flag_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_snapshot_flag_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("snapshot_flag_tbl_table_modify_with_reset_snapshot_flag_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_snapshot_flag_tbl_table_modify_with_reset_snapshot_flag_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_snapshot_flag_tbl_table_modify_with_reset_snapshot_flag_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("snapshot_flag_tbl_table_modify_with_reset_snapshot_flag_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_snapshot_flag_tbl_table_modify_with_reset_snapshot_flag_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_server2client(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_ipmac_srcport_server2client_action_spec_t& action_spec)
{
  send_update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_server2client(sess_hdl, dev_id, entry, action_spec);
  recv_update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_server2client();
}

void netbufferv4Client::send_update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_server2client(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_ipmac_srcport_server2client_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_server2client", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_server2client_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_server2client()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_server2client") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_server2client_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_server2client_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_ipmac_srcport_tbl_match_spec_t& match_spec, const netbufferv4_update_ipmac_srcport_server2client_action_spec_t& action_spec)
{
  send_update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_server2client_by_match_spec(sess_hdl, dev_tgt, match_spec, action_spec);
  recv_update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_server2client_by_match_spec();
}

void netbufferv4Client::send_update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_server2client_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_ipmac_srcport_tbl_match_spec_t& match_spec, const netbufferv4_update_ipmac_srcport_server2client_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_server2client_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_server2client_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_server2client_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_server2client_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_server2client_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_switch2switchos(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_ipmac_srcport_switch2switchos_action_spec_t& action_spec)
{
  send_update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_switch2switchos(sess_hdl, dev_id, entry, action_spec);
  recv_update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_switch2switchos();
}

void netbufferv4Client::send_update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_switch2switchos(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_ipmac_srcport_switch2switchos_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_switch2switchos", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_switch2switchos_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_switch2switchos()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_switch2switchos") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_switch2switchos_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_switch2switchos_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_ipmac_srcport_tbl_match_spec_t& match_spec, const netbufferv4_update_ipmac_srcport_switch2switchos_action_spec_t& action_spec)
{
  send_update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_switch2switchos_by_match_spec(sess_hdl, dev_tgt, match_spec, action_spec);
  recv_update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_switch2switchos_by_match_spec();
}

void netbufferv4Client::send_update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_switch2switchos_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_ipmac_srcport_tbl_match_spec_t& match_spec, const netbufferv4_update_ipmac_srcport_switch2switchos_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_switch2switchos_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_switch2switchos_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_switch2switchos_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_switch2switchos_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_switch2switchos_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_ipmac_srcport_tbl_table_modify_with_update_dstipmac_client2server(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_dstipmac_client2server_action_spec_t& action_spec)
{
  send_update_ipmac_srcport_tbl_table_modify_with_update_dstipmac_client2server(sess_hdl, dev_id, entry, action_spec);
  recv_update_ipmac_srcport_tbl_table_modify_with_update_dstipmac_client2server();
}

void netbufferv4Client::send_update_ipmac_srcport_tbl_table_modify_with_update_dstipmac_client2server(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_dstipmac_client2server_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_ipmac_srcport_tbl_table_modify_with_update_dstipmac_client2server", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_ipmac_srcport_tbl_table_modify_with_update_dstipmac_client2server_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_ipmac_srcport_tbl_table_modify_with_update_dstipmac_client2server()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_ipmac_srcport_tbl_table_modify_with_update_dstipmac_client2server") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_ipmac_srcport_tbl_table_modify_with_update_dstipmac_client2server_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_ipmac_srcport_tbl_table_modify_with_update_dstipmac_client2server_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_ipmac_srcport_tbl_match_spec_t& match_spec, const netbufferv4_update_dstipmac_client2server_action_spec_t& action_spec)
{
  send_update_ipmac_srcport_tbl_table_modify_with_update_dstipmac_client2server_by_match_spec(sess_hdl, dev_tgt, match_spec, action_spec);
  recv_update_ipmac_srcport_tbl_table_modify_with_update_dstipmac_client2server_by_match_spec();
}

void netbufferv4Client::send_update_ipmac_srcport_tbl_table_modify_with_update_dstipmac_client2server_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_ipmac_srcport_tbl_match_spec_t& match_spec, const netbufferv4_update_dstipmac_client2server_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_ipmac_srcport_tbl_table_modify_with_update_dstipmac_client2server_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_ipmac_srcport_tbl_table_modify_with_update_dstipmac_client2server_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_ipmac_srcport_tbl_table_modify_with_update_dstipmac_client2server_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_ipmac_srcport_tbl_table_modify_with_update_dstipmac_client2server_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_ipmac_srcport_tbl_table_modify_with_update_dstipmac_client2server_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_ipmac_srcport_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_ipmac_srcport_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_ipmac_srcport_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_ipmac_srcport_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_ipmac_srcport_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_ipmac_srcport_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_ipmac_srcport_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_ipmac_srcport_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_ipmac_srcport_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_ipmac_srcport_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_ipmac_srcport_tbl_match_spec_t& match_spec)
{
  send_update_ipmac_srcport_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_ipmac_srcport_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_ipmac_srcport_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_ipmac_srcport_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_ipmac_srcport_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_ipmac_srcport_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_ipmac_srcport_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_ipmac_srcport_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_ipmac_srcport_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_pktlen_tbl_table_modify_with_update_pktlen(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_pktlen_action_spec_t& action_spec)
{
  send_update_pktlen_tbl_table_modify_with_update_pktlen(sess_hdl, dev_id, entry, action_spec);
  recv_update_pktlen_tbl_table_modify_with_update_pktlen();
}

void netbufferv4Client::send_update_pktlen_tbl_table_modify_with_update_pktlen(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_pktlen_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_pktlen_tbl_table_modify_with_update_pktlen", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_pktlen_tbl_table_modify_with_update_pktlen_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_pktlen_tbl_table_modify_with_update_pktlen()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_pktlen_tbl_table_modify_with_update_pktlen") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_pktlen_tbl_table_modify_with_update_pktlen_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_pktlen_tbl_table_modify_with_update_pktlen_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_pktlen_tbl_match_spec_t& match_spec, const int32_t priority, const netbufferv4_update_pktlen_action_spec_t& action_spec)
{
  send_update_pktlen_tbl_table_modify_with_update_pktlen_by_match_spec(sess_hdl, dev_tgt, match_spec, priority, action_spec);
  recv_update_pktlen_tbl_table_modify_with_update_pktlen_by_match_spec();
}

void netbufferv4Client::send_update_pktlen_tbl_table_modify_with_update_pktlen_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_pktlen_tbl_match_spec_t& match_spec, const int32_t priority, const netbufferv4_update_pktlen_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_pktlen_tbl_table_modify_with_update_pktlen_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_pktlen_tbl_table_modify_with_update_pktlen_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_pktlen_tbl_table_modify_with_update_pktlen_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_pktlen_tbl_table_modify_with_update_pktlen_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_pktlen_tbl_table_modify_with_update_pktlen_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_pktlen_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_pktlen_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_pktlen_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_pktlen_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_pktlen_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_pktlen_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_pktlen_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_pktlen_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_pktlen_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_pktlen_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_pktlen_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_update_pktlen_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec, priority);
  recv_update_pktlen_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_pktlen_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_pktlen_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_pktlen_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_pktlen_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_pktlen_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_pktlen_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_pktlen_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi10_tbl_table_modify_with_get_valhi10(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi10_tbl_table_modify_with_get_valhi10(sess_hdl, dev_id, entry);
  recv_update_valhi10_tbl_table_modify_with_get_valhi10();
}

void netbufferv4Client::send_update_valhi10_tbl_table_modify_with_get_valhi10(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi10_tbl_table_modify_with_get_valhi10", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi10_tbl_table_modify_with_get_valhi10_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi10_tbl_table_modify_with_get_valhi10()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi10_tbl_table_modify_with_get_valhi10") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi10_tbl_table_modify_with_get_valhi10_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi10_tbl_table_modify_with_get_valhi10_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi10_tbl_match_spec_t& match_spec)
{
  send_update_valhi10_tbl_table_modify_with_get_valhi10_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi10_tbl_table_modify_with_get_valhi10_by_match_spec();
}

void netbufferv4Client::send_update_valhi10_tbl_table_modify_with_get_valhi10_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi10_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi10_tbl_table_modify_with_get_valhi10_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi10_tbl_table_modify_with_get_valhi10_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi10_tbl_table_modify_with_get_valhi10_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi10_tbl_table_modify_with_get_valhi10_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi10_tbl_table_modify_with_get_valhi10_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi10_tbl_table_modify_with_set_and_get_valhi10(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi10_tbl_table_modify_with_set_and_get_valhi10(sess_hdl, dev_id, entry);
  recv_update_valhi10_tbl_table_modify_with_set_and_get_valhi10();
}

void netbufferv4Client::send_update_valhi10_tbl_table_modify_with_set_and_get_valhi10(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi10_tbl_table_modify_with_set_and_get_valhi10", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi10_tbl_table_modify_with_set_and_get_valhi10_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi10_tbl_table_modify_with_set_and_get_valhi10()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi10_tbl_table_modify_with_set_and_get_valhi10") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi10_tbl_table_modify_with_set_and_get_valhi10_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi10_tbl_table_modify_with_set_and_get_valhi10_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi10_tbl_match_spec_t& match_spec)
{
  send_update_valhi10_tbl_table_modify_with_set_and_get_valhi10_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi10_tbl_table_modify_with_set_and_get_valhi10_by_match_spec();
}

void netbufferv4Client::send_update_valhi10_tbl_table_modify_with_set_and_get_valhi10_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi10_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi10_tbl_table_modify_with_set_and_get_valhi10_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi10_tbl_table_modify_with_set_and_get_valhi10_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi10_tbl_table_modify_with_set_and_get_valhi10_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi10_tbl_table_modify_with_set_and_get_valhi10_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi10_tbl_table_modify_with_set_and_get_valhi10_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi10_tbl_table_modify_with_reset_and_get_valhi10(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi10_tbl_table_modify_with_reset_and_get_valhi10(sess_hdl, dev_id, entry);
  recv_update_valhi10_tbl_table_modify_with_reset_and_get_valhi10();
}

void netbufferv4Client::send_update_valhi10_tbl_table_modify_with_reset_and_get_valhi10(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi10_tbl_table_modify_with_reset_and_get_valhi10", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi10_tbl_table_modify_with_reset_and_get_valhi10_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi10_tbl_table_modify_with_reset_and_get_valhi10()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi10_tbl_table_modify_with_reset_and_get_valhi10") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi10_tbl_table_modify_with_reset_and_get_valhi10_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi10_tbl_table_modify_with_reset_and_get_valhi10_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi10_tbl_match_spec_t& match_spec)
{
  send_update_valhi10_tbl_table_modify_with_reset_and_get_valhi10_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi10_tbl_table_modify_with_reset_and_get_valhi10_by_match_spec();
}

void netbufferv4Client::send_update_valhi10_tbl_table_modify_with_reset_and_get_valhi10_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi10_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi10_tbl_table_modify_with_reset_and_get_valhi10_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi10_tbl_table_modify_with_reset_and_get_valhi10_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi10_tbl_table_modify_with_reset_and_get_valhi10_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi10_tbl_table_modify_with_reset_and_get_valhi10_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi10_tbl_table_modify_with_reset_and_get_valhi10_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi10_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi10_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_valhi10_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_valhi10_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi10_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi10_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi10_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi10_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi10_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi10_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi10_tbl_match_spec_t& match_spec)
{
  send_update_valhi10_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi10_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_valhi10_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi10_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi10_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi10_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi10_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi10_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi10_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi11_tbl_table_modify_with_get_valhi11(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi11_tbl_table_modify_with_get_valhi11(sess_hdl, dev_id, entry);
  recv_update_valhi11_tbl_table_modify_with_get_valhi11();
}

void netbufferv4Client::send_update_valhi11_tbl_table_modify_with_get_valhi11(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi11_tbl_table_modify_with_get_valhi11", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi11_tbl_table_modify_with_get_valhi11_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi11_tbl_table_modify_with_get_valhi11()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi11_tbl_table_modify_with_get_valhi11") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi11_tbl_table_modify_with_get_valhi11_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi11_tbl_table_modify_with_get_valhi11_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi11_tbl_match_spec_t& match_spec)
{
  send_update_valhi11_tbl_table_modify_with_get_valhi11_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi11_tbl_table_modify_with_get_valhi11_by_match_spec();
}

void netbufferv4Client::send_update_valhi11_tbl_table_modify_with_get_valhi11_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi11_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi11_tbl_table_modify_with_get_valhi11_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi11_tbl_table_modify_with_get_valhi11_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi11_tbl_table_modify_with_get_valhi11_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi11_tbl_table_modify_with_get_valhi11_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi11_tbl_table_modify_with_get_valhi11_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi11_tbl_table_modify_with_set_and_get_valhi11(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi11_tbl_table_modify_with_set_and_get_valhi11(sess_hdl, dev_id, entry);
  recv_update_valhi11_tbl_table_modify_with_set_and_get_valhi11();
}

void netbufferv4Client::send_update_valhi11_tbl_table_modify_with_set_and_get_valhi11(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi11_tbl_table_modify_with_set_and_get_valhi11", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi11_tbl_table_modify_with_set_and_get_valhi11_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi11_tbl_table_modify_with_set_and_get_valhi11()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi11_tbl_table_modify_with_set_and_get_valhi11") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi11_tbl_table_modify_with_set_and_get_valhi11_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi11_tbl_table_modify_with_set_and_get_valhi11_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi11_tbl_match_spec_t& match_spec)
{
  send_update_valhi11_tbl_table_modify_with_set_and_get_valhi11_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi11_tbl_table_modify_with_set_and_get_valhi11_by_match_spec();
}

void netbufferv4Client::send_update_valhi11_tbl_table_modify_with_set_and_get_valhi11_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi11_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi11_tbl_table_modify_with_set_and_get_valhi11_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi11_tbl_table_modify_with_set_and_get_valhi11_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi11_tbl_table_modify_with_set_and_get_valhi11_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi11_tbl_table_modify_with_set_and_get_valhi11_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi11_tbl_table_modify_with_set_and_get_valhi11_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi11_tbl_table_modify_with_reset_and_get_valhi11(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi11_tbl_table_modify_with_reset_and_get_valhi11(sess_hdl, dev_id, entry);
  recv_update_valhi11_tbl_table_modify_with_reset_and_get_valhi11();
}

void netbufferv4Client::send_update_valhi11_tbl_table_modify_with_reset_and_get_valhi11(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi11_tbl_table_modify_with_reset_and_get_valhi11", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi11_tbl_table_modify_with_reset_and_get_valhi11_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi11_tbl_table_modify_with_reset_and_get_valhi11()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi11_tbl_table_modify_with_reset_and_get_valhi11") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi11_tbl_table_modify_with_reset_and_get_valhi11_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi11_tbl_table_modify_with_reset_and_get_valhi11_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi11_tbl_match_spec_t& match_spec)
{
  send_update_valhi11_tbl_table_modify_with_reset_and_get_valhi11_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi11_tbl_table_modify_with_reset_and_get_valhi11_by_match_spec();
}

void netbufferv4Client::send_update_valhi11_tbl_table_modify_with_reset_and_get_valhi11_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi11_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi11_tbl_table_modify_with_reset_and_get_valhi11_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi11_tbl_table_modify_with_reset_and_get_valhi11_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi11_tbl_table_modify_with_reset_and_get_valhi11_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi11_tbl_table_modify_with_reset_and_get_valhi11_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi11_tbl_table_modify_with_reset_and_get_valhi11_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi11_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi11_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_valhi11_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_valhi11_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi11_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi11_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi11_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi11_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi11_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi11_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi11_tbl_match_spec_t& match_spec)
{
  send_update_valhi11_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi11_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_valhi11_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi11_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi11_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi11_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi11_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi11_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi11_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi12_tbl_table_modify_with_get_valhi12(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi12_tbl_table_modify_with_get_valhi12(sess_hdl, dev_id, entry);
  recv_update_valhi12_tbl_table_modify_with_get_valhi12();
}

void netbufferv4Client::send_update_valhi12_tbl_table_modify_with_get_valhi12(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi12_tbl_table_modify_with_get_valhi12", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi12_tbl_table_modify_with_get_valhi12_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi12_tbl_table_modify_with_get_valhi12()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi12_tbl_table_modify_with_get_valhi12") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi12_tbl_table_modify_with_get_valhi12_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi12_tbl_table_modify_with_get_valhi12_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi12_tbl_match_spec_t& match_spec)
{
  send_update_valhi12_tbl_table_modify_with_get_valhi12_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi12_tbl_table_modify_with_get_valhi12_by_match_spec();
}

void netbufferv4Client::send_update_valhi12_tbl_table_modify_with_get_valhi12_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi12_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi12_tbl_table_modify_with_get_valhi12_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi12_tbl_table_modify_with_get_valhi12_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi12_tbl_table_modify_with_get_valhi12_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi12_tbl_table_modify_with_get_valhi12_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi12_tbl_table_modify_with_get_valhi12_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi12_tbl_table_modify_with_set_and_get_valhi12(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi12_tbl_table_modify_with_set_and_get_valhi12(sess_hdl, dev_id, entry);
  recv_update_valhi12_tbl_table_modify_with_set_and_get_valhi12();
}

void netbufferv4Client::send_update_valhi12_tbl_table_modify_with_set_and_get_valhi12(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi12_tbl_table_modify_with_set_and_get_valhi12", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi12_tbl_table_modify_with_set_and_get_valhi12_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi12_tbl_table_modify_with_set_and_get_valhi12()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi12_tbl_table_modify_with_set_and_get_valhi12") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi12_tbl_table_modify_with_set_and_get_valhi12_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi12_tbl_table_modify_with_set_and_get_valhi12_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi12_tbl_match_spec_t& match_spec)
{
  send_update_valhi12_tbl_table_modify_with_set_and_get_valhi12_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi12_tbl_table_modify_with_set_and_get_valhi12_by_match_spec();
}

void netbufferv4Client::send_update_valhi12_tbl_table_modify_with_set_and_get_valhi12_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi12_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi12_tbl_table_modify_with_set_and_get_valhi12_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi12_tbl_table_modify_with_set_and_get_valhi12_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi12_tbl_table_modify_with_set_and_get_valhi12_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi12_tbl_table_modify_with_set_and_get_valhi12_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi12_tbl_table_modify_with_set_and_get_valhi12_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi12_tbl_table_modify_with_reset_and_get_valhi12(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi12_tbl_table_modify_with_reset_and_get_valhi12(sess_hdl, dev_id, entry);
  recv_update_valhi12_tbl_table_modify_with_reset_and_get_valhi12();
}

void netbufferv4Client::send_update_valhi12_tbl_table_modify_with_reset_and_get_valhi12(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi12_tbl_table_modify_with_reset_and_get_valhi12", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi12_tbl_table_modify_with_reset_and_get_valhi12_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi12_tbl_table_modify_with_reset_and_get_valhi12()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi12_tbl_table_modify_with_reset_and_get_valhi12") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi12_tbl_table_modify_with_reset_and_get_valhi12_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi12_tbl_table_modify_with_reset_and_get_valhi12_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi12_tbl_match_spec_t& match_spec)
{
  send_update_valhi12_tbl_table_modify_with_reset_and_get_valhi12_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi12_tbl_table_modify_with_reset_and_get_valhi12_by_match_spec();
}

void netbufferv4Client::send_update_valhi12_tbl_table_modify_with_reset_and_get_valhi12_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi12_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi12_tbl_table_modify_with_reset_and_get_valhi12_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi12_tbl_table_modify_with_reset_and_get_valhi12_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi12_tbl_table_modify_with_reset_and_get_valhi12_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi12_tbl_table_modify_with_reset_and_get_valhi12_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi12_tbl_table_modify_with_reset_and_get_valhi12_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi12_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi12_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_valhi12_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_valhi12_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi12_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi12_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi12_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi12_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi12_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi12_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi12_tbl_match_spec_t& match_spec)
{
  send_update_valhi12_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi12_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_valhi12_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi12_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi12_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi12_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi12_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi12_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi12_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi13_tbl_table_modify_with_get_valhi13(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi13_tbl_table_modify_with_get_valhi13(sess_hdl, dev_id, entry);
  recv_update_valhi13_tbl_table_modify_with_get_valhi13();
}

void netbufferv4Client::send_update_valhi13_tbl_table_modify_with_get_valhi13(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi13_tbl_table_modify_with_get_valhi13", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi13_tbl_table_modify_with_get_valhi13_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi13_tbl_table_modify_with_get_valhi13()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi13_tbl_table_modify_with_get_valhi13") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi13_tbl_table_modify_with_get_valhi13_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi13_tbl_table_modify_with_get_valhi13_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi13_tbl_match_spec_t& match_spec)
{
  send_update_valhi13_tbl_table_modify_with_get_valhi13_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi13_tbl_table_modify_with_get_valhi13_by_match_spec();
}

void netbufferv4Client::send_update_valhi13_tbl_table_modify_with_get_valhi13_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi13_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi13_tbl_table_modify_with_get_valhi13_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi13_tbl_table_modify_with_get_valhi13_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi13_tbl_table_modify_with_get_valhi13_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi13_tbl_table_modify_with_get_valhi13_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi13_tbl_table_modify_with_get_valhi13_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi13_tbl_table_modify_with_set_and_get_valhi13(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi13_tbl_table_modify_with_set_and_get_valhi13(sess_hdl, dev_id, entry);
  recv_update_valhi13_tbl_table_modify_with_set_and_get_valhi13();
}

void netbufferv4Client::send_update_valhi13_tbl_table_modify_with_set_and_get_valhi13(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi13_tbl_table_modify_with_set_and_get_valhi13", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi13_tbl_table_modify_with_set_and_get_valhi13_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi13_tbl_table_modify_with_set_and_get_valhi13()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi13_tbl_table_modify_with_set_and_get_valhi13") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi13_tbl_table_modify_with_set_and_get_valhi13_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi13_tbl_table_modify_with_set_and_get_valhi13_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi13_tbl_match_spec_t& match_spec)
{
  send_update_valhi13_tbl_table_modify_with_set_and_get_valhi13_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi13_tbl_table_modify_with_set_and_get_valhi13_by_match_spec();
}

void netbufferv4Client::send_update_valhi13_tbl_table_modify_with_set_and_get_valhi13_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi13_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi13_tbl_table_modify_with_set_and_get_valhi13_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi13_tbl_table_modify_with_set_and_get_valhi13_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi13_tbl_table_modify_with_set_and_get_valhi13_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi13_tbl_table_modify_with_set_and_get_valhi13_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi13_tbl_table_modify_with_set_and_get_valhi13_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi13_tbl_table_modify_with_reset_and_get_valhi13(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi13_tbl_table_modify_with_reset_and_get_valhi13(sess_hdl, dev_id, entry);
  recv_update_valhi13_tbl_table_modify_with_reset_and_get_valhi13();
}

void netbufferv4Client::send_update_valhi13_tbl_table_modify_with_reset_and_get_valhi13(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi13_tbl_table_modify_with_reset_and_get_valhi13", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi13_tbl_table_modify_with_reset_and_get_valhi13_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi13_tbl_table_modify_with_reset_and_get_valhi13()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi13_tbl_table_modify_with_reset_and_get_valhi13") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi13_tbl_table_modify_with_reset_and_get_valhi13_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi13_tbl_table_modify_with_reset_and_get_valhi13_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi13_tbl_match_spec_t& match_spec)
{
  send_update_valhi13_tbl_table_modify_with_reset_and_get_valhi13_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi13_tbl_table_modify_with_reset_and_get_valhi13_by_match_spec();
}

void netbufferv4Client::send_update_valhi13_tbl_table_modify_with_reset_and_get_valhi13_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi13_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi13_tbl_table_modify_with_reset_and_get_valhi13_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi13_tbl_table_modify_with_reset_and_get_valhi13_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi13_tbl_table_modify_with_reset_and_get_valhi13_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi13_tbl_table_modify_with_reset_and_get_valhi13_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi13_tbl_table_modify_with_reset_and_get_valhi13_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi13_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi13_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_valhi13_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_valhi13_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi13_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi13_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi13_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi13_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi13_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi13_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi13_tbl_match_spec_t& match_spec)
{
  send_update_valhi13_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi13_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_valhi13_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi13_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi13_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi13_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi13_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi13_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi13_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi14_tbl_table_modify_with_get_valhi14(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi14_tbl_table_modify_with_get_valhi14(sess_hdl, dev_id, entry);
  recv_update_valhi14_tbl_table_modify_with_get_valhi14();
}

void netbufferv4Client::send_update_valhi14_tbl_table_modify_with_get_valhi14(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi14_tbl_table_modify_with_get_valhi14", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi14_tbl_table_modify_with_get_valhi14_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi14_tbl_table_modify_with_get_valhi14()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi14_tbl_table_modify_with_get_valhi14") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi14_tbl_table_modify_with_get_valhi14_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi14_tbl_table_modify_with_get_valhi14_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi14_tbl_match_spec_t& match_spec)
{
  send_update_valhi14_tbl_table_modify_with_get_valhi14_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi14_tbl_table_modify_with_get_valhi14_by_match_spec();
}

void netbufferv4Client::send_update_valhi14_tbl_table_modify_with_get_valhi14_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi14_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi14_tbl_table_modify_with_get_valhi14_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi14_tbl_table_modify_with_get_valhi14_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi14_tbl_table_modify_with_get_valhi14_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi14_tbl_table_modify_with_get_valhi14_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi14_tbl_table_modify_with_get_valhi14_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi14_tbl_table_modify_with_set_and_get_valhi14(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi14_tbl_table_modify_with_set_and_get_valhi14(sess_hdl, dev_id, entry);
  recv_update_valhi14_tbl_table_modify_with_set_and_get_valhi14();
}

void netbufferv4Client::send_update_valhi14_tbl_table_modify_with_set_and_get_valhi14(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi14_tbl_table_modify_with_set_and_get_valhi14", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi14_tbl_table_modify_with_set_and_get_valhi14_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi14_tbl_table_modify_with_set_and_get_valhi14()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi14_tbl_table_modify_with_set_and_get_valhi14") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi14_tbl_table_modify_with_set_and_get_valhi14_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi14_tbl_table_modify_with_set_and_get_valhi14_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi14_tbl_match_spec_t& match_spec)
{
  send_update_valhi14_tbl_table_modify_with_set_and_get_valhi14_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi14_tbl_table_modify_with_set_and_get_valhi14_by_match_spec();
}

void netbufferv4Client::send_update_valhi14_tbl_table_modify_with_set_and_get_valhi14_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi14_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi14_tbl_table_modify_with_set_and_get_valhi14_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi14_tbl_table_modify_with_set_and_get_valhi14_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi14_tbl_table_modify_with_set_and_get_valhi14_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi14_tbl_table_modify_with_set_and_get_valhi14_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi14_tbl_table_modify_with_set_and_get_valhi14_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi14_tbl_table_modify_with_reset_and_get_valhi14(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi14_tbl_table_modify_with_reset_and_get_valhi14(sess_hdl, dev_id, entry);
  recv_update_valhi14_tbl_table_modify_with_reset_and_get_valhi14();
}

void netbufferv4Client::send_update_valhi14_tbl_table_modify_with_reset_and_get_valhi14(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi14_tbl_table_modify_with_reset_and_get_valhi14", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi14_tbl_table_modify_with_reset_and_get_valhi14_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi14_tbl_table_modify_with_reset_and_get_valhi14()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi14_tbl_table_modify_with_reset_and_get_valhi14") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi14_tbl_table_modify_with_reset_and_get_valhi14_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi14_tbl_table_modify_with_reset_and_get_valhi14_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi14_tbl_match_spec_t& match_spec)
{
  send_update_valhi14_tbl_table_modify_with_reset_and_get_valhi14_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi14_tbl_table_modify_with_reset_and_get_valhi14_by_match_spec();
}

void netbufferv4Client::send_update_valhi14_tbl_table_modify_with_reset_and_get_valhi14_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi14_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi14_tbl_table_modify_with_reset_and_get_valhi14_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi14_tbl_table_modify_with_reset_and_get_valhi14_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi14_tbl_table_modify_with_reset_and_get_valhi14_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi14_tbl_table_modify_with_reset_and_get_valhi14_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi14_tbl_table_modify_with_reset_and_get_valhi14_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi14_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi14_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_valhi14_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_valhi14_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi14_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi14_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi14_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi14_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi14_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi14_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi14_tbl_match_spec_t& match_spec)
{
  send_update_valhi14_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi14_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_valhi14_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi14_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi14_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi14_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi14_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi14_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi14_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi15_tbl_table_modify_with_get_valhi15(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi15_tbl_table_modify_with_get_valhi15(sess_hdl, dev_id, entry);
  recv_update_valhi15_tbl_table_modify_with_get_valhi15();
}

void netbufferv4Client::send_update_valhi15_tbl_table_modify_with_get_valhi15(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi15_tbl_table_modify_with_get_valhi15", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi15_tbl_table_modify_with_get_valhi15_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi15_tbl_table_modify_with_get_valhi15()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi15_tbl_table_modify_with_get_valhi15") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi15_tbl_table_modify_with_get_valhi15_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi15_tbl_table_modify_with_get_valhi15_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi15_tbl_match_spec_t& match_spec)
{
  send_update_valhi15_tbl_table_modify_with_get_valhi15_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi15_tbl_table_modify_with_get_valhi15_by_match_spec();
}

void netbufferv4Client::send_update_valhi15_tbl_table_modify_with_get_valhi15_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi15_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi15_tbl_table_modify_with_get_valhi15_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi15_tbl_table_modify_with_get_valhi15_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi15_tbl_table_modify_with_get_valhi15_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi15_tbl_table_modify_with_get_valhi15_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi15_tbl_table_modify_with_get_valhi15_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi15_tbl_table_modify_with_set_and_get_valhi15(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi15_tbl_table_modify_with_set_and_get_valhi15(sess_hdl, dev_id, entry);
  recv_update_valhi15_tbl_table_modify_with_set_and_get_valhi15();
}

void netbufferv4Client::send_update_valhi15_tbl_table_modify_with_set_and_get_valhi15(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi15_tbl_table_modify_with_set_and_get_valhi15", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi15_tbl_table_modify_with_set_and_get_valhi15_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi15_tbl_table_modify_with_set_and_get_valhi15()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi15_tbl_table_modify_with_set_and_get_valhi15") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi15_tbl_table_modify_with_set_and_get_valhi15_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi15_tbl_table_modify_with_set_and_get_valhi15_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi15_tbl_match_spec_t& match_spec)
{
  send_update_valhi15_tbl_table_modify_with_set_and_get_valhi15_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi15_tbl_table_modify_with_set_and_get_valhi15_by_match_spec();
}

void netbufferv4Client::send_update_valhi15_tbl_table_modify_with_set_and_get_valhi15_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi15_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi15_tbl_table_modify_with_set_and_get_valhi15_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi15_tbl_table_modify_with_set_and_get_valhi15_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi15_tbl_table_modify_with_set_and_get_valhi15_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi15_tbl_table_modify_with_set_and_get_valhi15_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi15_tbl_table_modify_with_set_and_get_valhi15_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi15_tbl_table_modify_with_reset_and_get_valhi15(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi15_tbl_table_modify_with_reset_and_get_valhi15(sess_hdl, dev_id, entry);
  recv_update_valhi15_tbl_table_modify_with_reset_and_get_valhi15();
}

void netbufferv4Client::send_update_valhi15_tbl_table_modify_with_reset_and_get_valhi15(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi15_tbl_table_modify_with_reset_and_get_valhi15", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi15_tbl_table_modify_with_reset_and_get_valhi15_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi15_tbl_table_modify_with_reset_and_get_valhi15()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi15_tbl_table_modify_with_reset_and_get_valhi15") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi15_tbl_table_modify_with_reset_and_get_valhi15_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi15_tbl_table_modify_with_reset_and_get_valhi15_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi15_tbl_match_spec_t& match_spec)
{
  send_update_valhi15_tbl_table_modify_with_reset_and_get_valhi15_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi15_tbl_table_modify_with_reset_and_get_valhi15_by_match_spec();
}

void netbufferv4Client::send_update_valhi15_tbl_table_modify_with_reset_and_get_valhi15_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi15_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi15_tbl_table_modify_with_reset_and_get_valhi15_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi15_tbl_table_modify_with_reset_and_get_valhi15_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi15_tbl_table_modify_with_reset_and_get_valhi15_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi15_tbl_table_modify_with_reset_and_get_valhi15_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi15_tbl_table_modify_with_reset_and_get_valhi15_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi15_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi15_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_valhi15_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_valhi15_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi15_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi15_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi15_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi15_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi15_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi15_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi15_tbl_match_spec_t& match_spec)
{
  send_update_valhi15_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi15_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_valhi15_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi15_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi15_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi15_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi15_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi15_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi15_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi16_tbl_table_modify_with_get_valhi16(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi16_tbl_table_modify_with_get_valhi16(sess_hdl, dev_id, entry);
  recv_update_valhi16_tbl_table_modify_with_get_valhi16();
}

void netbufferv4Client::send_update_valhi16_tbl_table_modify_with_get_valhi16(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi16_tbl_table_modify_with_get_valhi16", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi16_tbl_table_modify_with_get_valhi16_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi16_tbl_table_modify_with_get_valhi16()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi16_tbl_table_modify_with_get_valhi16") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi16_tbl_table_modify_with_get_valhi16_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi16_tbl_table_modify_with_get_valhi16_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi16_tbl_match_spec_t& match_spec)
{
  send_update_valhi16_tbl_table_modify_with_get_valhi16_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi16_tbl_table_modify_with_get_valhi16_by_match_spec();
}

void netbufferv4Client::send_update_valhi16_tbl_table_modify_with_get_valhi16_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi16_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi16_tbl_table_modify_with_get_valhi16_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi16_tbl_table_modify_with_get_valhi16_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi16_tbl_table_modify_with_get_valhi16_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi16_tbl_table_modify_with_get_valhi16_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi16_tbl_table_modify_with_get_valhi16_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi16_tbl_table_modify_with_set_and_get_valhi16(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi16_tbl_table_modify_with_set_and_get_valhi16(sess_hdl, dev_id, entry);
  recv_update_valhi16_tbl_table_modify_with_set_and_get_valhi16();
}

void netbufferv4Client::send_update_valhi16_tbl_table_modify_with_set_and_get_valhi16(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi16_tbl_table_modify_with_set_and_get_valhi16", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi16_tbl_table_modify_with_set_and_get_valhi16_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi16_tbl_table_modify_with_set_and_get_valhi16()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi16_tbl_table_modify_with_set_and_get_valhi16") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi16_tbl_table_modify_with_set_and_get_valhi16_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi16_tbl_table_modify_with_set_and_get_valhi16_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi16_tbl_match_spec_t& match_spec)
{
  send_update_valhi16_tbl_table_modify_with_set_and_get_valhi16_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi16_tbl_table_modify_with_set_and_get_valhi16_by_match_spec();
}

void netbufferv4Client::send_update_valhi16_tbl_table_modify_with_set_and_get_valhi16_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi16_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi16_tbl_table_modify_with_set_and_get_valhi16_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi16_tbl_table_modify_with_set_and_get_valhi16_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi16_tbl_table_modify_with_set_and_get_valhi16_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi16_tbl_table_modify_with_set_and_get_valhi16_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi16_tbl_table_modify_with_set_and_get_valhi16_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi16_tbl_table_modify_with_reset_and_get_valhi16(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi16_tbl_table_modify_with_reset_and_get_valhi16(sess_hdl, dev_id, entry);
  recv_update_valhi16_tbl_table_modify_with_reset_and_get_valhi16();
}

void netbufferv4Client::send_update_valhi16_tbl_table_modify_with_reset_and_get_valhi16(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi16_tbl_table_modify_with_reset_and_get_valhi16", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi16_tbl_table_modify_with_reset_and_get_valhi16_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi16_tbl_table_modify_with_reset_and_get_valhi16()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi16_tbl_table_modify_with_reset_and_get_valhi16") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi16_tbl_table_modify_with_reset_and_get_valhi16_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi16_tbl_table_modify_with_reset_and_get_valhi16_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi16_tbl_match_spec_t& match_spec)
{
  send_update_valhi16_tbl_table_modify_with_reset_and_get_valhi16_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi16_tbl_table_modify_with_reset_and_get_valhi16_by_match_spec();
}

void netbufferv4Client::send_update_valhi16_tbl_table_modify_with_reset_and_get_valhi16_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi16_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi16_tbl_table_modify_with_reset_and_get_valhi16_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi16_tbl_table_modify_with_reset_and_get_valhi16_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi16_tbl_table_modify_with_reset_and_get_valhi16_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi16_tbl_table_modify_with_reset_and_get_valhi16_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi16_tbl_table_modify_with_reset_and_get_valhi16_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi16_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi16_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_valhi16_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_valhi16_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi16_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi16_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi16_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi16_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi16_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi16_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi16_tbl_match_spec_t& match_spec)
{
  send_update_valhi16_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi16_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_valhi16_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi16_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi16_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi16_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi16_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi16_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi16_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi1_tbl_table_modify_with_get_valhi1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi1_tbl_table_modify_with_get_valhi1(sess_hdl, dev_id, entry);
  recv_update_valhi1_tbl_table_modify_with_get_valhi1();
}

void netbufferv4Client::send_update_valhi1_tbl_table_modify_with_get_valhi1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi1_tbl_table_modify_with_get_valhi1", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi1_tbl_table_modify_with_get_valhi1_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi1_tbl_table_modify_with_get_valhi1()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi1_tbl_table_modify_with_get_valhi1") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi1_tbl_table_modify_with_get_valhi1_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi1_tbl_table_modify_with_get_valhi1_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi1_tbl_match_spec_t& match_spec)
{
  send_update_valhi1_tbl_table_modify_with_get_valhi1_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi1_tbl_table_modify_with_get_valhi1_by_match_spec();
}

void netbufferv4Client::send_update_valhi1_tbl_table_modify_with_get_valhi1_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi1_tbl_table_modify_with_get_valhi1_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi1_tbl_table_modify_with_get_valhi1_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi1_tbl_table_modify_with_get_valhi1_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi1_tbl_table_modify_with_get_valhi1_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi1_tbl_table_modify_with_get_valhi1_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi1_tbl_table_modify_with_set_and_get_valhi1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi1_tbl_table_modify_with_set_and_get_valhi1(sess_hdl, dev_id, entry);
  recv_update_valhi1_tbl_table_modify_with_set_and_get_valhi1();
}

void netbufferv4Client::send_update_valhi1_tbl_table_modify_with_set_and_get_valhi1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi1_tbl_table_modify_with_set_and_get_valhi1", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi1_tbl_table_modify_with_set_and_get_valhi1_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi1_tbl_table_modify_with_set_and_get_valhi1()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi1_tbl_table_modify_with_set_and_get_valhi1") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi1_tbl_table_modify_with_set_and_get_valhi1_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi1_tbl_table_modify_with_set_and_get_valhi1_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi1_tbl_match_spec_t& match_spec)
{
  send_update_valhi1_tbl_table_modify_with_set_and_get_valhi1_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi1_tbl_table_modify_with_set_and_get_valhi1_by_match_spec();
}

void netbufferv4Client::send_update_valhi1_tbl_table_modify_with_set_and_get_valhi1_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi1_tbl_table_modify_with_set_and_get_valhi1_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi1_tbl_table_modify_with_set_and_get_valhi1_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi1_tbl_table_modify_with_set_and_get_valhi1_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi1_tbl_table_modify_with_set_and_get_valhi1_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi1_tbl_table_modify_with_set_and_get_valhi1_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi1_tbl_table_modify_with_reset_and_get_valhi1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi1_tbl_table_modify_with_reset_and_get_valhi1(sess_hdl, dev_id, entry);
  recv_update_valhi1_tbl_table_modify_with_reset_and_get_valhi1();
}

void netbufferv4Client::send_update_valhi1_tbl_table_modify_with_reset_and_get_valhi1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi1_tbl_table_modify_with_reset_and_get_valhi1", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi1_tbl_table_modify_with_reset_and_get_valhi1_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi1_tbl_table_modify_with_reset_and_get_valhi1()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi1_tbl_table_modify_with_reset_and_get_valhi1") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi1_tbl_table_modify_with_reset_and_get_valhi1_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi1_tbl_table_modify_with_reset_and_get_valhi1_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi1_tbl_match_spec_t& match_spec)
{
  send_update_valhi1_tbl_table_modify_with_reset_and_get_valhi1_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi1_tbl_table_modify_with_reset_and_get_valhi1_by_match_spec();
}

void netbufferv4Client::send_update_valhi1_tbl_table_modify_with_reset_and_get_valhi1_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi1_tbl_table_modify_with_reset_and_get_valhi1_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi1_tbl_table_modify_with_reset_and_get_valhi1_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi1_tbl_table_modify_with_reset_and_get_valhi1_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi1_tbl_table_modify_with_reset_and_get_valhi1_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi1_tbl_table_modify_with_reset_and_get_valhi1_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi1_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi1_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_valhi1_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_valhi1_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi1_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi1_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi1_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi1_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi1_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi1_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi1_tbl_match_spec_t& match_spec)
{
  send_update_valhi1_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi1_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_valhi1_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi1_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi1_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi1_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi1_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi1_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi2_tbl_table_modify_with_get_valhi2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi2_tbl_table_modify_with_get_valhi2(sess_hdl, dev_id, entry);
  recv_update_valhi2_tbl_table_modify_with_get_valhi2();
}

void netbufferv4Client::send_update_valhi2_tbl_table_modify_with_get_valhi2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi2_tbl_table_modify_with_get_valhi2", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi2_tbl_table_modify_with_get_valhi2_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi2_tbl_table_modify_with_get_valhi2()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi2_tbl_table_modify_with_get_valhi2") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi2_tbl_table_modify_with_get_valhi2_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi2_tbl_table_modify_with_get_valhi2_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi2_tbl_match_spec_t& match_spec)
{
  send_update_valhi2_tbl_table_modify_with_get_valhi2_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi2_tbl_table_modify_with_get_valhi2_by_match_spec();
}

void netbufferv4Client::send_update_valhi2_tbl_table_modify_with_get_valhi2_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi2_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi2_tbl_table_modify_with_get_valhi2_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi2_tbl_table_modify_with_get_valhi2_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi2_tbl_table_modify_with_get_valhi2_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi2_tbl_table_modify_with_get_valhi2_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi2_tbl_table_modify_with_get_valhi2_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi2_tbl_table_modify_with_set_and_get_valhi2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi2_tbl_table_modify_with_set_and_get_valhi2(sess_hdl, dev_id, entry);
  recv_update_valhi2_tbl_table_modify_with_set_and_get_valhi2();
}

void netbufferv4Client::send_update_valhi2_tbl_table_modify_with_set_and_get_valhi2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi2_tbl_table_modify_with_set_and_get_valhi2", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi2_tbl_table_modify_with_set_and_get_valhi2_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi2_tbl_table_modify_with_set_and_get_valhi2()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi2_tbl_table_modify_with_set_and_get_valhi2") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi2_tbl_table_modify_with_set_and_get_valhi2_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi2_tbl_table_modify_with_set_and_get_valhi2_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi2_tbl_match_spec_t& match_spec)
{
  send_update_valhi2_tbl_table_modify_with_set_and_get_valhi2_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi2_tbl_table_modify_with_set_and_get_valhi2_by_match_spec();
}

void netbufferv4Client::send_update_valhi2_tbl_table_modify_with_set_and_get_valhi2_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi2_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi2_tbl_table_modify_with_set_and_get_valhi2_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi2_tbl_table_modify_with_set_and_get_valhi2_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi2_tbl_table_modify_with_set_and_get_valhi2_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi2_tbl_table_modify_with_set_and_get_valhi2_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi2_tbl_table_modify_with_set_and_get_valhi2_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi2_tbl_table_modify_with_reset_and_get_valhi2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi2_tbl_table_modify_with_reset_and_get_valhi2(sess_hdl, dev_id, entry);
  recv_update_valhi2_tbl_table_modify_with_reset_and_get_valhi2();
}

void netbufferv4Client::send_update_valhi2_tbl_table_modify_with_reset_and_get_valhi2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi2_tbl_table_modify_with_reset_and_get_valhi2", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi2_tbl_table_modify_with_reset_and_get_valhi2_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi2_tbl_table_modify_with_reset_and_get_valhi2()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi2_tbl_table_modify_with_reset_and_get_valhi2") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi2_tbl_table_modify_with_reset_and_get_valhi2_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi2_tbl_table_modify_with_reset_and_get_valhi2_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi2_tbl_match_spec_t& match_spec)
{
  send_update_valhi2_tbl_table_modify_with_reset_and_get_valhi2_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi2_tbl_table_modify_with_reset_and_get_valhi2_by_match_spec();
}

void netbufferv4Client::send_update_valhi2_tbl_table_modify_with_reset_and_get_valhi2_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi2_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi2_tbl_table_modify_with_reset_and_get_valhi2_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi2_tbl_table_modify_with_reset_and_get_valhi2_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi2_tbl_table_modify_with_reset_and_get_valhi2_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi2_tbl_table_modify_with_reset_and_get_valhi2_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi2_tbl_table_modify_with_reset_and_get_valhi2_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi2_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi2_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_valhi2_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_valhi2_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi2_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi2_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi2_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi2_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi2_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi2_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi2_tbl_match_spec_t& match_spec)
{
  send_update_valhi2_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi2_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_valhi2_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi2_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi2_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi2_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi2_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi2_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi2_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi3_tbl_table_modify_with_get_valhi3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi3_tbl_table_modify_with_get_valhi3(sess_hdl, dev_id, entry);
  recv_update_valhi3_tbl_table_modify_with_get_valhi3();
}

void netbufferv4Client::send_update_valhi3_tbl_table_modify_with_get_valhi3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi3_tbl_table_modify_with_get_valhi3", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi3_tbl_table_modify_with_get_valhi3_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi3_tbl_table_modify_with_get_valhi3()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi3_tbl_table_modify_with_get_valhi3") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi3_tbl_table_modify_with_get_valhi3_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi3_tbl_table_modify_with_get_valhi3_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi3_tbl_match_spec_t& match_spec)
{
  send_update_valhi3_tbl_table_modify_with_get_valhi3_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi3_tbl_table_modify_with_get_valhi3_by_match_spec();
}

void netbufferv4Client::send_update_valhi3_tbl_table_modify_with_get_valhi3_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi3_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi3_tbl_table_modify_with_get_valhi3_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi3_tbl_table_modify_with_get_valhi3_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi3_tbl_table_modify_with_get_valhi3_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi3_tbl_table_modify_with_get_valhi3_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi3_tbl_table_modify_with_get_valhi3_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi3_tbl_table_modify_with_set_and_get_valhi3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi3_tbl_table_modify_with_set_and_get_valhi3(sess_hdl, dev_id, entry);
  recv_update_valhi3_tbl_table_modify_with_set_and_get_valhi3();
}

void netbufferv4Client::send_update_valhi3_tbl_table_modify_with_set_and_get_valhi3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi3_tbl_table_modify_with_set_and_get_valhi3", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi3_tbl_table_modify_with_set_and_get_valhi3_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi3_tbl_table_modify_with_set_and_get_valhi3()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi3_tbl_table_modify_with_set_and_get_valhi3") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi3_tbl_table_modify_with_set_and_get_valhi3_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi3_tbl_table_modify_with_set_and_get_valhi3_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi3_tbl_match_spec_t& match_spec)
{
  send_update_valhi3_tbl_table_modify_with_set_and_get_valhi3_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi3_tbl_table_modify_with_set_and_get_valhi3_by_match_spec();
}

void netbufferv4Client::send_update_valhi3_tbl_table_modify_with_set_and_get_valhi3_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi3_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi3_tbl_table_modify_with_set_and_get_valhi3_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi3_tbl_table_modify_with_set_and_get_valhi3_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi3_tbl_table_modify_with_set_and_get_valhi3_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi3_tbl_table_modify_with_set_and_get_valhi3_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi3_tbl_table_modify_with_set_and_get_valhi3_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi3_tbl_table_modify_with_reset_and_get_valhi3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi3_tbl_table_modify_with_reset_and_get_valhi3(sess_hdl, dev_id, entry);
  recv_update_valhi3_tbl_table_modify_with_reset_and_get_valhi3();
}

void netbufferv4Client::send_update_valhi3_tbl_table_modify_with_reset_and_get_valhi3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi3_tbl_table_modify_with_reset_and_get_valhi3", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi3_tbl_table_modify_with_reset_and_get_valhi3_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi3_tbl_table_modify_with_reset_and_get_valhi3()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi3_tbl_table_modify_with_reset_and_get_valhi3") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi3_tbl_table_modify_with_reset_and_get_valhi3_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi3_tbl_table_modify_with_reset_and_get_valhi3_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi3_tbl_match_spec_t& match_spec)
{
  send_update_valhi3_tbl_table_modify_with_reset_and_get_valhi3_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi3_tbl_table_modify_with_reset_and_get_valhi3_by_match_spec();
}

void netbufferv4Client::send_update_valhi3_tbl_table_modify_with_reset_and_get_valhi3_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi3_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi3_tbl_table_modify_with_reset_and_get_valhi3_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi3_tbl_table_modify_with_reset_and_get_valhi3_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi3_tbl_table_modify_with_reset_and_get_valhi3_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi3_tbl_table_modify_with_reset_and_get_valhi3_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi3_tbl_table_modify_with_reset_and_get_valhi3_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi3_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi3_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_valhi3_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_valhi3_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi3_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi3_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi3_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi3_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi3_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi3_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi3_tbl_match_spec_t& match_spec)
{
  send_update_valhi3_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi3_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_valhi3_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi3_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi3_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi3_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi3_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi3_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi3_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi4_tbl_table_modify_with_get_valhi4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi4_tbl_table_modify_with_get_valhi4(sess_hdl, dev_id, entry);
  recv_update_valhi4_tbl_table_modify_with_get_valhi4();
}

void netbufferv4Client::send_update_valhi4_tbl_table_modify_with_get_valhi4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi4_tbl_table_modify_with_get_valhi4", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi4_tbl_table_modify_with_get_valhi4_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi4_tbl_table_modify_with_get_valhi4()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi4_tbl_table_modify_with_get_valhi4") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi4_tbl_table_modify_with_get_valhi4_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi4_tbl_table_modify_with_get_valhi4_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi4_tbl_match_spec_t& match_spec)
{
  send_update_valhi4_tbl_table_modify_with_get_valhi4_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi4_tbl_table_modify_with_get_valhi4_by_match_spec();
}

void netbufferv4Client::send_update_valhi4_tbl_table_modify_with_get_valhi4_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi4_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi4_tbl_table_modify_with_get_valhi4_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi4_tbl_table_modify_with_get_valhi4_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi4_tbl_table_modify_with_get_valhi4_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi4_tbl_table_modify_with_get_valhi4_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi4_tbl_table_modify_with_get_valhi4_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi4_tbl_table_modify_with_set_and_get_valhi4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi4_tbl_table_modify_with_set_and_get_valhi4(sess_hdl, dev_id, entry);
  recv_update_valhi4_tbl_table_modify_with_set_and_get_valhi4();
}

void netbufferv4Client::send_update_valhi4_tbl_table_modify_with_set_and_get_valhi4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi4_tbl_table_modify_with_set_and_get_valhi4", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi4_tbl_table_modify_with_set_and_get_valhi4_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi4_tbl_table_modify_with_set_and_get_valhi4()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi4_tbl_table_modify_with_set_and_get_valhi4") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi4_tbl_table_modify_with_set_and_get_valhi4_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi4_tbl_table_modify_with_set_and_get_valhi4_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi4_tbl_match_spec_t& match_spec)
{
  send_update_valhi4_tbl_table_modify_with_set_and_get_valhi4_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi4_tbl_table_modify_with_set_and_get_valhi4_by_match_spec();
}

void netbufferv4Client::send_update_valhi4_tbl_table_modify_with_set_and_get_valhi4_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi4_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi4_tbl_table_modify_with_set_and_get_valhi4_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi4_tbl_table_modify_with_set_and_get_valhi4_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi4_tbl_table_modify_with_set_and_get_valhi4_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi4_tbl_table_modify_with_set_and_get_valhi4_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi4_tbl_table_modify_with_set_and_get_valhi4_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi4_tbl_table_modify_with_reset_and_get_valhi4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi4_tbl_table_modify_with_reset_and_get_valhi4(sess_hdl, dev_id, entry);
  recv_update_valhi4_tbl_table_modify_with_reset_and_get_valhi4();
}

void netbufferv4Client::send_update_valhi4_tbl_table_modify_with_reset_and_get_valhi4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi4_tbl_table_modify_with_reset_and_get_valhi4", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi4_tbl_table_modify_with_reset_and_get_valhi4_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi4_tbl_table_modify_with_reset_and_get_valhi4()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi4_tbl_table_modify_with_reset_and_get_valhi4") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi4_tbl_table_modify_with_reset_and_get_valhi4_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi4_tbl_table_modify_with_reset_and_get_valhi4_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi4_tbl_match_spec_t& match_spec)
{
  send_update_valhi4_tbl_table_modify_with_reset_and_get_valhi4_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi4_tbl_table_modify_with_reset_and_get_valhi4_by_match_spec();
}

void netbufferv4Client::send_update_valhi4_tbl_table_modify_with_reset_and_get_valhi4_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi4_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi4_tbl_table_modify_with_reset_and_get_valhi4_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi4_tbl_table_modify_with_reset_and_get_valhi4_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi4_tbl_table_modify_with_reset_and_get_valhi4_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi4_tbl_table_modify_with_reset_and_get_valhi4_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi4_tbl_table_modify_with_reset_and_get_valhi4_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi4_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi4_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_valhi4_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_valhi4_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi4_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi4_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi4_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi4_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi4_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi4_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi4_tbl_match_spec_t& match_spec)
{
  send_update_valhi4_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi4_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_valhi4_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi4_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi4_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi4_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi4_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi4_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi4_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi5_tbl_table_modify_with_get_valhi5(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi5_tbl_table_modify_with_get_valhi5(sess_hdl, dev_id, entry);
  recv_update_valhi5_tbl_table_modify_with_get_valhi5();
}

void netbufferv4Client::send_update_valhi5_tbl_table_modify_with_get_valhi5(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi5_tbl_table_modify_with_get_valhi5", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi5_tbl_table_modify_with_get_valhi5_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi5_tbl_table_modify_with_get_valhi5()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi5_tbl_table_modify_with_get_valhi5") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi5_tbl_table_modify_with_get_valhi5_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi5_tbl_table_modify_with_get_valhi5_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi5_tbl_match_spec_t& match_spec)
{
  send_update_valhi5_tbl_table_modify_with_get_valhi5_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi5_tbl_table_modify_with_get_valhi5_by_match_spec();
}

void netbufferv4Client::send_update_valhi5_tbl_table_modify_with_get_valhi5_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi5_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi5_tbl_table_modify_with_get_valhi5_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi5_tbl_table_modify_with_get_valhi5_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi5_tbl_table_modify_with_get_valhi5_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi5_tbl_table_modify_with_get_valhi5_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi5_tbl_table_modify_with_get_valhi5_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi5_tbl_table_modify_with_set_and_get_valhi5(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi5_tbl_table_modify_with_set_and_get_valhi5(sess_hdl, dev_id, entry);
  recv_update_valhi5_tbl_table_modify_with_set_and_get_valhi5();
}

void netbufferv4Client::send_update_valhi5_tbl_table_modify_with_set_and_get_valhi5(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi5_tbl_table_modify_with_set_and_get_valhi5", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi5_tbl_table_modify_with_set_and_get_valhi5_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi5_tbl_table_modify_with_set_and_get_valhi5()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi5_tbl_table_modify_with_set_and_get_valhi5") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi5_tbl_table_modify_with_set_and_get_valhi5_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi5_tbl_table_modify_with_set_and_get_valhi5_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi5_tbl_match_spec_t& match_spec)
{
  send_update_valhi5_tbl_table_modify_with_set_and_get_valhi5_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi5_tbl_table_modify_with_set_and_get_valhi5_by_match_spec();
}

void netbufferv4Client::send_update_valhi5_tbl_table_modify_with_set_and_get_valhi5_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi5_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi5_tbl_table_modify_with_set_and_get_valhi5_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi5_tbl_table_modify_with_set_and_get_valhi5_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi5_tbl_table_modify_with_set_and_get_valhi5_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi5_tbl_table_modify_with_set_and_get_valhi5_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi5_tbl_table_modify_with_set_and_get_valhi5_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi5_tbl_table_modify_with_reset_and_get_valhi5(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi5_tbl_table_modify_with_reset_and_get_valhi5(sess_hdl, dev_id, entry);
  recv_update_valhi5_tbl_table_modify_with_reset_and_get_valhi5();
}

void netbufferv4Client::send_update_valhi5_tbl_table_modify_with_reset_and_get_valhi5(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi5_tbl_table_modify_with_reset_and_get_valhi5", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi5_tbl_table_modify_with_reset_and_get_valhi5_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi5_tbl_table_modify_with_reset_and_get_valhi5()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi5_tbl_table_modify_with_reset_and_get_valhi5") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi5_tbl_table_modify_with_reset_and_get_valhi5_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi5_tbl_table_modify_with_reset_and_get_valhi5_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi5_tbl_match_spec_t& match_spec)
{
  send_update_valhi5_tbl_table_modify_with_reset_and_get_valhi5_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi5_tbl_table_modify_with_reset_and_get_valhi5_by_match_spec();
}

void netbufferv4Client::send_update_valhi5_tbl_table_modify_with_reset_and_get_valhi5_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi5_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi5_tbl_table_modify_with_reset_and_get_valhi5_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi5_tbl_table_modify_with_reset_and_get_valhi5_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi5_tbl_table_modify_with_reset_and_get_valhi5_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi5_tbl_table_modify_with_reset_and_get_valhi5_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi5_tbl_table_modify_with_reset_and_get_valhi5_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi5_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi5_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_valhi5_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_valhi5_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi5_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi5_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi5_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi5_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi5_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi5_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi5_tbl_match_spec_t& match_spec)
{
  send_update_valhi5_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi5_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_valhi5_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi5_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi5_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi5_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi5_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi5_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi5_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi6_tbl_table_modify_with_get_valhi6(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi6_tbl_table_modify_with_get_valhi6(sess_hdl, dev_id, entry);
  recv_update_valhi6_tbl_table_modify_with_get_valhi6();
}

void netbufferv4Client::send_update_valhi6_tbl_table_modify_with_get_valhi6(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi6_tbl_table_modify_with_get_valhi6", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi6_tbl_table_modify_with_get_valhi6_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi6_tbl_table_modify_with_get_valhi6()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi6_tbl_table_modify_with_get_valhi6") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi6_tbl_table_modify_with_get_valhi6_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi6_tbl_table_modify_with_get_valhi6_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi6_tbl_match_spec_t& match_spec)
{
  send_update_valhi6_tbl_table_modify_with_get_valhi6_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi6_tbl_table_modify_with_get_valhi6_by_match_spec();
}

void netbufferv4Client::send_update_valhi6_tbl_table_modify_with_get_valhi6_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi6_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi6_tbl_table_modify_with_get_valhi6_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi6_tbl_table_modify_with_get_valhi6_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi6_tbl_table_modify_with_get_valhi6_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi6_tbl_table_modify_with_get_valhi6_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi6_tbl_table_modify_with_get_valhi6_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi6_tbl_table_modify_with_set_and_get_valhi6(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi6_tbl_table_modify_with_set_and_get_valhi6(sess_hdl, dev_id, entry);
  recv_update_valhi6_tbl_table_modify_with_set_and_get_valhi6();
}

void netbufferv4Client::send_update_valhi6_tbl_table_modify_with_set_and_get_valhi6(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi6_tbl_table_modify_with_set_and_get_valhi6", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi6_tbl_table_modify_with_set_and_get_valhi6_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi6_tbl_table_modify_with_set_and_get_valhi6()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi6_tbl_table_modify_with_set_and_get_valhi6") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi6_tbl_table_modify_with_set_and_get_valhi6_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi6_tbl_table_modify_with_set_and_get_valhi6_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi6_tbl_match_spec_t& match_spec)
{
  send_update_valhi6_tbl_table_modify_with_set_and_get_valhi6_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi6_tbl_table_modify_with_set_and_get_valhi6_by_match_spec();
}

void netbufferv4Client::send_update_valhi6_tbl_table_modify_with_set_and_get_valhi6_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi6_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi6_tbl_table_modify_with_set_and_get_valhi6_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi6_tbl_table_modify_with_set_and_get_valhi6_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi6_tbl_table_modify_with_set_and_get_valhi6_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi6_tbl_table_modify_with_set_and_get_valhi6_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi6_tbl_table_modify_with_set_and_get_valhi6_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi6_tbl_table_modify_with_reset_and_get_valhi6(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi6_tbl_table_modify_with_reset_and_get_valhi6(sess_hdl, dev_id, entry);
  recv_update_valhi6_tbl_table_modify_with_reset_and_get_valhi6();
}

void netbufferv4Client::send_update_valhi6_tbl_table_modify_with_reset_and_get_valhi6(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi6_tbl_table_modify_with_reset_and_get_valhi6", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi6_tbl_table_modify_with_reset_and_get_valhi6_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi6_tbl_table_modify_with_reset_and_get_valhi6()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi6_tbl_table_modify_with_reset_and_get_valhi6") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi6_tbl_table_modify_with_reset_and_get_valhi6_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi6_tbl_table_modify_with_reset_and_get_valhi6_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi6_tbl_match_spec_t& match_spec)
{
  send_update_valhi6_tbl_table_modify_with_reset_and_get_valhi6_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi6_tbl_table_modify_with_reset_and_get_valhi6_by_match_spec();
}

void netbufferv4Client::send_update_valhi6_tbl_table_modify_with_reset_and_get_valhi6_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi6_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi6_tbl_table_modify_with_reset_and_get_valhi6_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi6_tbl_table_modify_with_reset_and_get_valhi6_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi6_tbl_table_modify_with_reset_and_get_valhi6_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi6_tbl_table_modify_with_reset_and_get_valhi6_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi6_tbl_table_modify_with_reset_and_get_valhi6_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi6_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi6_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_valhi6_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_valhi6_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi6_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi6_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi6_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi6_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi6_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi6_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi6_tbl_match_spec_t& match_spec)
{
  send_update_valhi6_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi6_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_valhi6_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi6_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi6_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi6_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi6_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi6_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi6_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi7_tbl_table_modify_with_get_valhi7(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi7_tbl_table_modify_with_get_valhi7(sess_hdl, dev_id, entry);
  recv_update_valhi7_tbl_table_modify_with_get_valhi7();
}

void netbufferv4Client::send_update_valhi7_tbl_table_modify_with_get_valhi7(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi7_tbl_table_modify_with_get_valhi7", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi7_tbl_table_modify_with_get_valhi7_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi7_tbl_table_modify_with_get_valhi7()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi7_tbl_table_modify_with_get_valhi7") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi7_tbl_table_modify_with_get_valhi7_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi7_tbl_table_modify_with_get_valhi7_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi7_tbl_match_spec_t& match_spec)
{
  send_update_valhi7_tbl_table_modify_with_get_valhi7_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi7_tbl_table_modify_with_get_valhi7_by_match_spec();
}

void netbufferv4Client::send_update_valhi7_tbl_table_modify_with_get_valhi7_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi7_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi7_tbl_table_modify_with_get_valhi7_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi7_tbl_table_modify_with_get_valhi7_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi7_tbl_table_modify_with_get_valhi7_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi7_tbl_table_modify_with_get_valhi7_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi7_tbl_table_modify_with_get_valhi7_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi7_tbl_table_modify_with_set_and_get_valhi7(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi7_tbl_table_modify_with_set_and_get_valhi7(sess_hdl, dev_id, entry);
  recv_update_valhi7_tbl_table_modify_with_set_and_get_valhi7();
}

void netbufferv4Client::send_update_valhi7_tbl_table_modify_with_set_and_get_valhi7(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi7_tbl_table_modify_with_set_and_get_valhi7", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi7_tbl_table_modify_with_set_and_get_valhi7_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi7_tbl_table_modify_with_set_and_get_valhi7()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi7_tbl_table_modify_with_set_and_get_valhi7") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi7_tbl_table_modify_with_set_and_get_valhi7_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi7_tbl_table_modify_with_set_and_get_valhi7_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi7_tbl_match_spec_t& match_spec)
{
  send_update_valhi7_tbl_table_modify_with_set_and_get_valhi7_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi7_tbl_table_modify_with_set_and_get_valhi7_by_match_spec();
}

void netbufferv4Client::send_update_valhi7_tbl_table_modify_with_set_and_get_valhi7_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi7_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi7_tbl_table_modify_with_set_and_get_valhi7_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi7_tbl_table_modify_with_set_and_get_valhi7_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi7_tbl_table_modify_with_set_and_get_valhi7_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi7_tbl_table_modify_with_set_and_get_valhi7_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi7_tbl_table_modify_with_set_and_get_valhi7_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi7_tbl_table_modify_with_reset_and_get_valhi7(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi7_tbl_table_modify_with_reset_and_get_valhi7(sess_hdl, dev_id, entry);
  recv_update_valhi7_tbl_table_modify_with_reset_and_get_valhi7();
}

void netbufferv4Client::send_update_valhi7_tbl_table_modify_with_reset_and_get_valhi7(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi7_tbl_table_modify_with_reset_and_get_valhi7", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi7_tbl_table_modify_with_reset_and_get_valhi7_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi7_tbl_table_modify_with_reset_and_get_valhi7()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi7_tbl_table_modify_with_reset_and_get_valhi7") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi7_tbl_table_modify_with_reset_and_get_valhi7_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi7_tbl_table_modify_with_reset_and_get_valhi7_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi7_tbl_match_spec_t& match_spec)
{
  send_update_valhi7_tbl_table_modify_with_reset_and_get_valhi7_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi7_tbl_table_modify_with_reset_and_get_valhi7_by_match_spec();
}

void netbufferv4Client::send_update_valhi7_tbl_table_modify_with_reset_and_get_valhi7_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi7_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi7_tbl_table_modify_with_reset_and_get_valhi7_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi7_tbl_table_modify_with_reset_and_get_valhi7_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi7_tbl_table_modify_with_reset_and_get_valhi7_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi7_tbl_table_modify_with_reset_and_get_valhi7_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi7_tbl_table_modify_with_reset_and_get_valhi7_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi7_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi7_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_valhi7_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_valhi7_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi7_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi7_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi7_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi7_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi7_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi7_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi7_tbl_match_spec_t& match_spec)
{
  send_update_valhi7_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi7_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_valhi7_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi7_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi7_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi7_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi7_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi7_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi7_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi8_tbl_table_modify_with_get_valhi8(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi8_tbl_table_modify_with_get_valhi8(sess_hdl, dev_id, entry);
  recv_update_valhi8_tbl_table_modify_with_get_valhi8();
}

void netbufferv4Client::send_update_valhi8_tbl_table_modify_with_get_valhi8(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi8_tbl_table_modify_with_get_valhi8", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi8_tbl_table_modify_with_get_valhi8_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi8_tbl_table_modify_with_get_valhi8()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi8_tbl_table_modify_with_get_valhi8") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi8_tbl_table_modify_with_get_valhi8_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi8_tbl_table_modify_with_get_valhi8_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi8_tbl_match_spec_t& match_spec)
{
  send_update_valhi8_tbl_table_modify_with_get_valhi8_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi8_tbl_table_modify_with_get_valhi8_by_match_spec();
}

void netbufferv4Client::send_update_valhi8_tbl_table_modify_with_get_valhi8_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi8_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi8_tbl_table_modify_with_get_valhi8_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi8_tbl_table_modify_with_get_valhi8_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi8_tbl_table_modify_with_get_valhi8_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi8_tbl_table_modify_with_get_valhi8_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi8_tbl_table_modify_with_get_valhi8_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi8_tbl_table_modify_with_set_and_get_valhi8(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi8_tbl_table_modify_with_set_and_get_valhi8(sess_hdl, dev_id, entry);
  recv_update_valhi8_tbl_table_modify_with_set_and_get_valhi8();
}

void netbufferv4Client::send_update_valhi8_tbl_table_modify_with_set_and_get_valhi8(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi8_tbl_table_modify_with_set_and_get_valhi8", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi8_tbl_table_modify_with_set_and_get_valhi8_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi8_tbl_table_modify_with_set_and_get_valhi8()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi8_tbl_table_modify_with_set_and_get_valhi8") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi8_tbl_table_modify_with_set_and_get_valhi8_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi8_tbl_table_modify_with_set_and_get_valhi8_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi8_tbl_match_spec_t& match_spec)
{
  send_update_valhi8_tbl_table_modify_with_set_and_get_valhi8_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi8_tbl_table_modify_with_set_and_get_valhi8_by_match_spec();
}

void netbufferv4Client::send_update_valhi8_tbl_table_modify_with_set_and_get_valhi8_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi8_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi8_tbl_table_modify_with_set_and_get_valhi8_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi8_tbl_table_modify_with_set_and_get_valhi8_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi8_tbl_table_modify_with_set_and_get_valhi8_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi8_tbl_table_modify_with_set_and_get_valhi8_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi8_tbl_table_modify_with_set_and_get_valhi8_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi8_tbl_table_modify_with_reset_and_get_valhi8(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi8_tbl_table_modify_with_reset_and_get_valhi8(sess_hdl, dev_id, entry);
  recv_update_valhi8_tbl_table_modify_with_reset_and_get_valhi8();
}

void netbufferv4Client::send_update_valhi8_tbl_table_modify_with_reset_and_get_valhi8(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi8_tbl_table_modify_with_reset_and_get_valhi8", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi8_tbl_table_modify_with_reset_and_get_valhi8_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi8_tbl_table_modify_with_reset_and_get_valhi8()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi8_tbl_table_modify_with_reset_and_get_valhi8") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi8_tbl_table_modify_with_reset_and_get_valhi8_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi8_tbl_table_modify_with_reset_and_get_valhi8_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi8_tbl_match_spec_t& match_spec)
{
  send_update_valhi8_tbl_table_modify_with_reset_and_get_valhi8_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi8_tbl_table_modify_with_reset_and_get_valhi8_by_match_spec();
}

void netbufferv4Client::send_update_valhi8_tbl_table_modify_with_reset_and_get_valhi8_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi8_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi8_tbl_table_modify_with_reset_and_get_valhi8_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi8_tbl_table_modify_with_reset_and_get_valhi8_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi8_tbl_table_modify_with_reset_and_get_valhi8_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi8_tbl_table_modify_with_reset_and_get_valhi8_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi8_tbl_table_modify_with_reset_and_get_valhi8_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi8_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi8_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_valhi8_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_valhi8_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi8_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi8_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi8_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi8_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi8_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi8_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi8_tbl_match_spec_t& match_spec)
{
  send_update_valhi8_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi8_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_valhi8_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi8_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi8_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi8_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi8_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi8_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi8_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi9_tbl_table_modify_with_get_valhi9(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi9_tbl_table_modify_with_get_valhi9(sess_hdl, dev_id, entry);
  recv_update_valhi9_tbl_table_modify_with_get_valhi9();
}

void netbufferv4Client::send_update_valhi9_tbl_table_modify_with_get_valhi9(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi9_tbl_table_modify_with_get_valhi9", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi9_tbl_table_modify_with_get_valhi9_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi9_tbl_table_modify_with_get_valhi9()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi9_tbl_table_modify_with_get_valhi9") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi9_tbl_table_modify_with_get_valhi9_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi9_tbl_table_modify_with_get_valhi9_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi9_tbl_match_spec_t& match_spec)
{
  send_update_valhi9_tbl_table_modify_with_get_valhi9_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi9_tbl_table_modify_with_get_valhi9_by_match_spec();
}

void netbufferv4Client::send_update_valhi9_tbl_table_modify_with_get_valhi9_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi9_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi9_tbl_table_modify_with_get_valhi9_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi9_tbl_table_modify_with_get_valhi9_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi9_tbl_table_modify_with_get_valhi9_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi9_tbl_table_modify_with_get_valhi9_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi9_tbl_table_modify_with_get_valhi9_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi9_tbl_table_modify_with_set_and_get_valhi9(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi9_tbl_table_modify_with_set_and_get_valhi9(sess_hdl, dev_id, entry);
  recv_update_valhi9_tbl_table_modify_with_set_and_get_valhi9();
}

void netbufferv4Client::send_update_valhi9_tbl_table_modify_with_set_and_get_valhi9(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi9_tbl_table_modify_with_set_and_get_valhi9", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi9_tbl_table_modify_with_set_and_get_valhi9_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi9_tbl_table_modify_with_set_and_get_valhi9()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi9_tbl_table_modify_with_set_and_get_valhi9") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi9_tbl_table_modify_with_set_and_get_valhi9_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi9_tbl_table_modify_with_set_and_get_valhi9_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi9_tbl_match_spec_t& match_spec)
{
  send_update_valhi9_tbl_table_modify_with_set_and_get_valhi9_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi9_tbl_table_modify_with_set_and_get_valhi9_by_match_spec();
}

void netbufferv4Client::send_update_valhi9_tbl_table_modify_with_set_and_get_valhi9_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi9_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi9_tbl_table_modify_with_set_and_get_valhi9_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi9_tbl_table_modify_with_set_and_get_valhi9_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi9_tbl_table_modify_with_set_and_get_valhi9_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi9_tbl_table_modify_with_set_and_get_valhi9_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi9_tbl_table_modify_with_set_and_get_valhi9_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi9_tbl_table_modify_with_reset_and_get_valhi9(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi9_tbl_table_modify_with_reset_and_get_valhi9(sess_hdl, dev_id, entry);
  recv_update_valhi9_tbl_table_modify_with_reset_and_get_valhi9();
}

void netbufferv4Client::send_update_valhi9_tbl_table_modify_with_reset_and_get_valhi9(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi9_tbl_table_modify_with_reset_and_get_valhi9", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi9_tbl_table_modify_with_reset_and_get_valhi9_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi9_tbl_table_modify_with_reset_and_get_valhi9()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi9_tbl_table_modify_with_reset_and_get_valhi9") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi9_tbl_table_modify_with_reset_and_get_valhi9_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi9_tbl_table_modify_with_reset_and_get_valhi9_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi9_tbl_match_spec_t& match_spec)
{
  send_update_valhi9_tbl_table_modify_with_reset_and_get_valhi9_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi9_tbl_table_modify_with_reset_and_get_valhi9_by_match_spec();
}

void netbufferv4Client::send_update_valhi9_tbl_table_modify_with_reset_and_get_valhi9_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi9_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi9_tbl_table_modify_with_reset_and_get_valhi9_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi9_tbl_table_modify_with_reset_and_get_valhi9_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi9_tbl_table_modify_with_reset_and_get_valhi9_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi9_tbl_table_modify_with_reset_and_get_valhi9_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi9_tbl_table_modify_with_reset_and_get_valhi9_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi9_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi9_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_valhi9_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_valhi9_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi9_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi9_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi9_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi9_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi9_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi9_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi9_tbl_match_spec_t& match_spec)
{
  send_update_valhi9_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi9_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_valhi9_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi9_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi9_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi9_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi9_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi9_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi9_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallen_tbl_table_modify_with_get_vallen(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallen_tbl_table_modify_with_get_vallen(sess_hdl, dev_id, entry);
  recv_update_vallen_tbl_table_modify_with_get_vallen();
}

void netbufferv4Client::send_update_vallen_tbl_table_modify_with_get_vallen(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallen_tbl_table_modify_with_get_vallen", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallen_tbl_table_modify_with_get_vallen_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallen_tbl_table_modify_with_get_vallen()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallen_tbl_table_modify_with_get_vallen") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallen_tbl_table_modify_with_get_vallen_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallen_tbl_table_modify_with_get_vallen_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallen_tbl_match_spec_t& match_spec)
{
  send_update_vallen_tbl_table_modify_with_get_vallen_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallen_tbl_table_modify_with_get_vallen_by_match_spec();
}

void netbufferv4Client::send_update_vallen_tbl_table_modify_with_get_vallen_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallen_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallen_tbl_table_modify_with_get_vallen_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallen_tbl_table_modify_with_get_vallen_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallen_tbl_table_modify_with_get_vallen_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallen_tbl_table_modify_with_get_vallen_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallen_tbl_table_modify_with_get_vallen_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallen_tbl_table_modify_with_set_and_get_vallen(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallen_tbl_table_modify_with_set_and_get_vallen(sess_hdl, dev_id, entry);
  recv_update_vallen_tbl_table_modify_with_set_and_get_vallen();
}

void netbufferv4Client::send_update_vallen_tbl_table_modify_with_set_and_get_vallen(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallen_tbl_table_modify_with_set_and_get_vallen", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallen_tbl_table_modify_with_set_and_get_vallen_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallen_tbl_table_modify_with_set_and_get_vallen()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallen_tbl_table_modify_with_set_and_get_vallen") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallen_tbl_table_modify_with_set_and_get_vallen_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallen_tbl_table_modify_with_set_and_get_vallen_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallen_tbl_match_spec_t& match_spec)
{
  send_update_vallen_tbl_table_modify_with_set_and_get_vallen_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallen_tbl_table_modify_with_set_and_get_vallen_by_match_spec();
}

void netbufferv4Client::send_update_vallen_tbl_table_modify_with_set_and_get_vallen_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallen_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallen_tbl_table_modify_with_set_and_get_vallen_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallen_tbl_table_modify_with_set_and_get_vallen_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallen_tbl_table_modify_with_set_and_get_vallen_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallen_tbl_table_modify_with_set_and_get_vallen_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallen_tbl_table_modify_with_set_and_get_vallen_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallen_tbl_table_modify_with_reset_and_get_vallen(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallen_tbl_table_modify_with_reset_and_get_vallen(sess_hdl, dev_id, entry);
  recv_update_vallen_tbl_table_modify_with_reset_and_get_vallen();
}

void netbufferv4Client::send_update_vallen_tbl_table_modify_with_reset_and_get_vallen(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallen_tbl_table_modify_with_reset_and_get_vallen", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallen_tbl_table_modify_with_reset_and_get_vallen_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallen_tbl_table_modify_with_reset_and_get_vallen()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallen_tbl_table_modify_with_reset_and_get_vallen") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallen_tbl_table_modify_with_reset_and_get_vallen_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallen_tbl_table_modify_with_reset_and_get_vallen_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallen_tbl_match_spec_t& match_spec)
{
  send_update_vallen_tbl_table_modify_with_reset_and_get_vallen_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallen_tbl_table_modify_with_reset_and_get_vallen_by_match_spec();
}

void netbufferv4Client::send_update_vallen_tbl_table_modify_with_reset_and_get_vallen_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallen_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallen_tbl_table_modify_with_reset_and_get_vallen_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallen_tbl_table_modify_with_reset_and_get_vallen_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallen_tbl_table_modify_with_reset_and_get_vallen_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallen_tbl_table_modify_with_reset_and_get_vallen_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallen_tbl_table_modify_with_reset_and_get_vallen_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallen_tbl_table_modify_with_reset_access_val_mode(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallen_tbl_table_modify_with_reset_access_val_mode(sess_hdl, dev_id, entry);
  recv_update_vallen_tbl_table_modify_with_reset_access_val_mode();
}

void netbufferv4Client::send_update_vallen_tbl_table_modify_with_reset_access_val_mode(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallen_tbl_table_modify_with_reset_access_val_mode", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallen_tbl_table_modify_with_reset_access_val_mode_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallen_tbl_table_modify_with_reset_access_val_mode()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallen_tbl_table_modify_with_reset_access_val_mode") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallen_tbl_table_modify_with_reset_access_val_mode_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallen_tbl_table_modify_with_reset_access_val_mode_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallen_tbl_match_spec_t& match_spec)
{
  send_update_vallen_tbl_table_modify_with_reset_access_val_mode_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallen_tbl_table_modify_with_reset_access_val_mode_by_match_spec();
}

void netbufferv4Client::send_update_vallen_tbl_table_modify_with_reset_access_val_mode_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallen_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallen_tbl_table_modify_with_reset_access_val_mode_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallen_tbl_table_modify_with_reset_access_val_mode_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallen_tbl_table_modify_with_reset_access_val_mode_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallen_tbl_table_modify_with_reset_access_val_mode_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallen_tbl_table_modify_with_reset_access_val_mode_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallen_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallen_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_vallen_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_vallen_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallen_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallen_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallen_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallen_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallen_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallen_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallen_tbl_match_spec_t& match_spec)
{
  send_update_vallen_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallen_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_vallen_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallen_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallen_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallen_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallen_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallen_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallen_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo10_tbl_table_modify_with_get_vallo10(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo10_tbl_table_modify_with_get_vallo10(sess_hdl, dev_id, entry);
  recv_update_vallo10_tbl_table_modify_with_get_vallo10();
}

void netbufferv4Client::send_update_vallo10_tbl_table_modify_with_get_vallo10(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo10_tbl_table_modify_with_get_vallo10", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo10_tbl_table_modify_with_get_vallo10_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo10_tbl_table_modify_with_get_vallo10()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo10_tbl_table_modify_with_get_vallo10") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo10_tbl_table_modify_with_get_vallo10_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo10_tbl_table_modify_with_get_vallo10_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo10_tbl_match_spec_t& match_spec)
{
  send_update_vallo10_tbl_table_modify_with_get_vallo10_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo10_tbl_table_modify_with_get_vallo10_by_match_spec();
}

void netbufferv4Client::send_update_vallo10_tbl_table_modify_with_get_vallo10_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo10_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo10_tbl_table_modify_with_get_vallo10_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo10_tbl_table_modify_with_get_vallo10_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo10_tbl_table_modify_with_get_vallo10_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo10_tbl_table_modify_with_get_vallo10_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo10_tbl_table_modify_with_get_vallo10_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo10_tbl_table_modify_with_set_and_get_vallo10(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo10_tbl_table_modify_with_set_and_get_vallo10(sess_hdl, dev_id, entry);
  recv_update_vallo10_tbl_table_modify_with_set_and_get_vallo10();
}

void netbufferv4Client::send_update_vallo10_tbl_table_modify_with_set_and_get_vallo10(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo10_tbl_table_modify_with_set_and_get_vallo10", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo10_tbl_table_modify_with_set_and_get_vallo10_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo10_tbl_table_modify_with_set_and_get_vallo10()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo10_tbl_table_modify_with_set_and_get_vallo10") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo10_tbl_table_modify_with_set_and_get_vallo10_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo10_tbl_table_modify_with_set_and_get_vallo10_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo10_tbl_match_spec_t& match_spec)
{
  send_update_vallo10_tbl_table_modify_with_set_and_get_vallo10_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo10_tbl_table_modify_with_set_and_get_vallo10_by_match_spec();
}

void netbufferv4Client::send_update_vallo10_tbl_table_modify_with_set_and_get_vallo10_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo10_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo10_tbl_table_modify_with_set_and_get_vallo10_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo10_tbl_table_modify_with_set_and_get_vallo10_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo10_tbl_table_modify_with_set_and_get_vallo10_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo10_tbl_table_modify_with_set_and_get_vallo10_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo10_tbl_table_modify_with_set_and_get_vallo10_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo10_tbl_table_modify_with_reset_and_get_vallo10(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo10_tbl_table_modify_with_reset_and_get_vallo10(sess_hdl, dev_id, entry);
  recv_update_vallo10_tbl_table_modify_with_reset_and_get_vallo10();
}

void netbufferv4Client::send_update_vallo10_tbl_table_modify_with_reset_and_get_vallo10(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo10_tbl_table_modify_with_reset_and_get_vallo10", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo10_tbl_table_modify_with_reset_and_get_vallo10_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo10_tbl_table_modify_with_reset_and_get_vallo10()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo10_tbl_table_modify_with_reset_and_get_vallo10") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo10_tbl_table_modify_with_reset_and_get_vallo10_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo10_tbl_table_modify_with_reset_and_get_vallo10_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo10_tbl_match_spec_t& match_spec)
{
  send_update_vallo10_tbl_table_modify_with_reset_and_get_vallo10_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo10_tbl_table_modify_with_reset_and_get_vallo10_by_match_spec();
}

void netbufferv4Client::send_update_vallo10_tbl_table_modify_with_reset_and_get_vallo10_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo10_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo10_tbl_table_modify_with_reset_and_get_vallo10_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo10_tbl_table_modify_with_reset_and_get_vallo10_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo10_tbl_table_modify_with_reset_and_get_vallo10_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo10_tbl_table_modify_with_reset_and_get_vallo10_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo10_tbl_table_modify_with_reset_and_get_vallo10_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo10_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo10_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_vallo10_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_vallo10_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo10_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo10_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo10_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo10_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo10_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo10_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo10_tbl_match_spec_t& match_spec)
{
  send_update_vallo10_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo10_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_vallo10_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo10_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo10_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo10_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo10_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo10_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo10_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo11_tbl_table_modify_with_get_vallo11(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo11_tbl_table_modify_with_get_vallo11(sess_hdl, dev_id, entry);
  recv_update_vallo11_tbl_table_modify_with_get_vallo11();
}

void netbufferv4Client::send_update_vallo11_tbl_table_modify_with_get_vallo11(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo11_tbl_table_modify_with_get_vallo11", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo11_tbl_table_modify_with_get_vallo11_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo11_tbl_table_modify_with_get_vallo11()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo11_tbl_table_modify_with_get_vallo11") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo11_tbl_table_modify_with_get_vallo11_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo11_tbl_table_modify_with_get_vallo11_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo11_tbl_match_spec_t& match_spec)
{
  send_update_vallo11_tbl_table_modify_with_get_vallo11_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo11_tbl_table_modify_with_get_vallo11_by_match_spec();
}

void netbufferv4Client::send_update_vallo11_tbl_table_modify_with_get_vallo11_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo11_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo11_tbl_table_modify_with_get_vallo11_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo11_tbl_table_modify_with_get_vallo11_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo11_tbl_table_modify_with_get_vallo11_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo11_tbl_table_modify_with_get_vallo11_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo11_tbl_table_modify_with_get_vallo11_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo11_tbl_table_modify_with_set_and_get_vallo11(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo11_tbl_table_modify_with_set_and_get_vallo11(sess_hdl, dev_id, entry);
  recv_update_vallo11_tbl_table_modify_with_set_and_get_vallo11();
}

void netbufferv4Client::send_update_vallo11_tbl_table_modify_with_set_and_get_vallo11(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo11_tbl_table_modify_with_set_and_get_vallo11", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo11_tbl_table_modify_with_set_and_get_vallo11_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo11_tbl_table_modify_with_set_and_get_vallo11()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo11_tbl_table_modify_with_set_and_get_vallo11") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo11_tbl_table_modify_with_set_and_get_vallo11_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo11_tbl_table_modify_with_set_and_get_vallo11_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo11_tbl_match_spec_t& match_spec)
{
  send_update_vallo11_tbl_table_modify_with_set_and_get_vallo11_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo11_tbl_table_modify_with_set_and_get_vallo11_by_match_spec();
}

void netbufferv4Client::send_update_vallo11_tbl_table_modify_with_set_and_get_vallo11_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo11_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo11_tbl_table_modify_with_set_and_get_vallo11_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo11_tbl_table_modify_with_set_and_get_vallo11_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo11_tbl_table_modify_with_set_and_get_vallo11_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo11_tbl_table_modify_with_set_and_get_vallo11_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo11_tbl_table_modify_with_set_and_get_vallo11_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo11_tbl_table_modify_with_reset_and_get_vallo11(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo11_tbl_table_modify_with_reset_and_get_vallo11(sess_hdl, dev_id, entry);
  recv_update_vallo11_tbl_table_modify_with_reset_and_get_vallo11();
}

void netbufferv4Client::send_update_vallo11_tbl_table_modify_with_reset_and_get_vallo11(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo11_tbl_table_modify_with_reset_and_get_vallo11", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo11_tbl_table_modify_with_reset_and_get_vallo11_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo11_tbl_table_modify_with_reset_and_get_vallo11()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo11_tbl_table_modify_with_reset_and_get_vallo11") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo11_tbl_table_modify_with_reset_and_get_vallo11_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo11_tbl_table_modify_with_reset_and_get_vallo11_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo11_tbl_match_spec_t& match_spec)
{
  send_update_vallo11_tbl_table_modify_with_reset_and_get_vallo11_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo11_tbl_table_modify_with_reset_and_get_vallo11_by_match_spec();
}

void netbufferv4Client::send_update_vallo11_tbl_table_modify_with_reset_and_get_vallo11_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo11_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo11_tbl_table_modify_with_reset_and_get_vallo11_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo11_tbl_table_modify_with_reset_and_get_vallo11_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo11_tbl_table_modify_with_reset_and_get_vallo11_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo11_tbl_table_modify_with_reset_and_get_vallo11_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo11_tbl_table_modify_with_reset_and_get_vallo11_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo11_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo11_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_vallo11_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_vallo11_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo11_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo11_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo11_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo11_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo11_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo11_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo11_tbl_match_spec_t& match_spec)
{
  send_update_vallo11_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo11_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_vallo11_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo11_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo11_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo11_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo11_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo11_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo11_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo12_tbl_table_modify_with_get_vallo12(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo12_tbl_table_modify_with_get_vallo12(sess_hdl, dev_id, entry);
  recv_update_vallo12_tbl_table_modify_with_get_vallo12();
}

void netbufferv4Client::send_update_vallo12_tbl_table_modify_with_get_vallo12(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo12_tbl_table_modify_with_get_vallo12", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo12_tbl_table_modify_with_get_vallo12_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo12_tbl_table_modify_with_get_vallo12()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo12_tbl_table_modify_with_get_vallo12") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo12_tbl_table_modify_with_get_vallo12_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo12_tbl_table_modify_with_get_vallo12_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo12_tbl_match_spec_t& match_spec)
{
  send_update_vallo12_tbl_table_modify_with_get_vallo12_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo12_tbl_table_modify_with_get_vallo12_by_match_spec();
}

void netbufferv4Client::send_update_vallo12_tbl_table_modify_with_get_vallo12_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo12_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo12_tbl_table_modify_with_get_vallo12_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo12_tbl_table_modify_with_get_vallo12_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo12_tbl_table_modify_with_get_vallo12_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo12_tbl_table_modify_with_get_vallo12_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo12_tbl_table_modify_with_get_vallo12_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo12_tbl_table_modify_with_set_and_get_vallo12(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo12_tbl_table_modify_with_set_and_get_vallo12(sess_hdl, dev_id, entry);
  recv_update_vallo12_tbl_table_modify_with_set_and_get_vallo12();
}

void netbufferv4Client::send_update_vallo12_tbl_table_modify_with_set_and_get_vallo12(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo12_tbl_table_modify_with_set_and_get_vallo12", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo12_tbl_table_modify_with_set_and_get_vallo12_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo12_tbl_table_modify_with_set_and_get_vallo12()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo12_tbl_table_modify_with_set_and_get_vallo12") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo12_tbl_table_modify_with_set_and_get_vallo12_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo12_tbl_table_modify_with_set_and_get_vallo12_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo12_tbl_match_spec_t& match_spec)
{
  send_update_vallo12_tbl_table_modify_with_set_and_get_vallo12_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo12_tbl_table_modify_with_set_and_get_vallo12_by_match_spec();
}

void netbufferv4Client::send_update_vallo12_tbl_table_modify_with_set_and_get_vallo12_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo12_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo12_tbl_table_modify_with_set_and_get_vallo12_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo12_tbl_table_modify_with_set_and_get_vallo12_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo12_tbl_table_modify_with_set_and_get_vallo12_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo12_tbl_table_modify_with_set_and_get_vallo12_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo12_tbl_table_modify_with_set_and_get_vallo12_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo12_tbl_table_modify_with_reset_and_get_vallo12(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo12_tbl_table_modify_with_reset_and_get_vallo12(sess_hdl, dev_id, entry);
  recv_update_vallo12_tbl_table_modify_with_reset_and_get_vallo12();
}

void netbufferv4Client::send_update_vallo12_tbl_table_modify_with_reset_and_get_vallo12(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo12_tbl_table_modify_with_reset_and_get_vallo12", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo12_tbl_table_modify_with_reset_and_get_vallo12_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo12_tbl_table_modify_with_reset_and_get_vallo12()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo12_tbl_table_modify_with_reset_and_get_vallo12") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo12_tbl_table_modify_with_reset_and_get_vallo12_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo12_tbl_table_modify_with_reset_and_get_vallo12_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo12_tbl_match_spec_t& match_spec)
{
  send_update_vallo12_tbl_table_modify_with_reset_and_get_vallo12_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo12_tbl_table_modify_with_reset_and_get_vallo12_by_match_spec();
}

void netbufferv4Client::send_update_vallo12_tbl_table_modify_with_reset_and_get_vallo12_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo12_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo12_tbl_table_modify_with_reset_and_get_vallo12_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo12_tbl_table_modify_with_reset_and_get_vallo12_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo12_tbl_table_modify_with_reset_and_get_vallo12_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo12_tbl_table_modify_with_reset_and_get_vallo12_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo12_tbl_table_modify_with_reset_and_get_vallo12_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo12_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo12_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_vallo12_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_vallo12_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo12_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo12_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo12_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo12_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo12_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo12_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo12_tbl_match_spec_t& match_spec)
{
  send_update_vallo12_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo12_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_vallo12_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo12_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo12_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo12_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo12_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo12_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo12_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo13_tbl_table_modify_with_get_vallo13(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo13_tbl_table_modify_with_get_vallo13(sess_hdl, dev_id, entry);
  recv_update_vallo13_tbl_table_modify_with_get_vallo13();
}

void netbufferv4Client::send_update_vallo13_tbl_table_modify_with_get_vallo13(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo13_tbl_table_modify_with_get_vallo13", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo13_tbl_table_modify_with_get_vallo13_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo13_tbl_table_modify_with_get_vallo13()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo13_tbl_table_modify_with_get_vallo13") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo13_tbl_table_modify_with_get_vallo13_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo13_tbl_table_modify_with_get_vallo13_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo13_tbl_match_spec_t& match_spec)
{
  send_update_vallo13_tbl_table_modify_with_get_vallo13_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo13_tbl_table_modify_with_get_vallo13_by_match_spec();
}

void netbufferv4Client::send_update_vallo13_tbl_table_modify_with_get_vallo13_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo13_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo13_tbl_table_modify_with_get_vallo13_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo13_tbl_table_modify_with_get_vallo13_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo13_tbl_table_modify_with_get_vallo13_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo13_tbl_table_modify_with_get_vallo13_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo13_tbl_table_modify_with_get_vallo13_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo13_tbl_table_modify_with_set_and_get_vallo13(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo13_tbl_table_modify_with_set_and_get_vallo13(sess_hdl, dev_id, entry);
  recv_update_vallo13_tbl_table_modify_with_set_and_get_vallo13();
}

void netbufferv4Client::send_update_vallo13_tbl_table_modify_with_set_and_get_vallo13(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo13_tbl_table_modify_with_set_and_get_vallo13", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo13_tbl_table_modify_with_set_and_get_vallo13_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo13_tbl_table_modify_with_set_and_get_vallo13()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo13_tbl_table_modify_with_set_and_get_vallo13") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo13_tbl_table_modify_with_set_and_get_vallo13_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo13_tbl_table_modify_with_set_and_get_vallo13_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo13_tbl_match_spec_t& match_spec)
{
  send_update_vallo13_tbl_table_modify_with_set_and_get_vallo13_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo13_tbl_table_modify_with_set_and_get_vallo13_by_match_spec();
}

void netbufferv4Client::send_update_vallo13_tbl_table_modify_with_set_and_get_vallo13_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo13_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo13_tbl_table_modify_with_set_and_get_vallo13_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo13_tbl_table_modify_with_set_and_get_vallo13_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo13_tbl_table_modify_with_set_and_get_vallo13_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo13_tbl_table_modify_with_set_and_get_vallo13_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo13_tbl_table_modify_with_set_and_get_vallo13_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo13_tbl_table_modify_with_reset_and_get_vallo13(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo13_tbl_table_modify_with_reset_and_get_vallo13(sess_hdl, dev_id, entry);
  recv_update_vallo13_tbl_table_modify_with_reset_and_get_vallo13();
}

void netbufferv4Client::send_update_vallo13_tbl_table_modify_with_reset_and_get_vallo13(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo13_tbl_table_modify_with_reset_and_get_vallo13", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo13_tbl_table_modify_with_reset_and_get_vallo13_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo13_tbl_table_modify_with_reset_and_get_vallo13()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo13_tbl_table_modify_with_reset_and_get_vallo13") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo13_tbl_table_modify_with_reset_and_get_vallo13_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo13_tbl_table_modify_with_reset_and_get_vallo13_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo13_tbl_match_spec_t& match_spec)
{
  send_update_vallo13_tbl_table_modify_with_reset_and_get_vallo13_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo13_tbl_table_modify_with_reset_and_get_vallo13_by_match_spec();
}

void netbufferv4Client::send_update_vallo13_tbl_table_modify_with_reset_and_get_vallo13_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo13_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo13_tbl_table_modify_with_reset_and_get_vallo13_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo13_tbl_table_modify_with_reset_and_get_vallo13_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo13_tbl_table_modify_with_reset_and_get_vallo13_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo13_tbl_table_modify_with_reset_and_get_vallo13_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo13_tbl_table_modify_with_reset_and_get_vallo13_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo13_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo13_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_vallo13_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_vallo13_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo13_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo13_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo13_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo13_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo13_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo13_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo13_tbl_match_spec_t& match_spec)
{
  send_update_vallo13_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo13_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_vallo13_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo13_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo13_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo13_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo13_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo13_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo13_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo14_tbl_table_modify_with_get_vallo14(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo14_tbl_table_modify_with_get_vallo14(sess_hdl, dev_id, entry);
  recv_update_vallo14_tbl_table_modify_with_get_vallo14();
}

void netbufferv4Client::send_update_vallo14_tbl_table_modify_with_get_vallo14(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo14_tbl_table_modify_with_get_vallo14", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo14_tbl_table_modify_with_get_vallo14_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo14_tbl_table_modify_with_get_vallo14()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo14_tbl_table_modify_with_get_vallo14") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo14_tbl_table_modify_with_get_vallo14_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo14_tbl_table_modify_with_get_vallo14_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo14_tbl_match_spec_t& match_spec)
{
  send_update_vallo14_tbl_table_modify_with_get_vallo14_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo14_tbl_table_modify_with_get_vallo14_by_match_spec();
}

void netbufferv4Client::send_update_vallo14_tbl_table_modify_with_get_vallo14_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo14_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo14_tbl_table_modify_with_get_vallo14_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo14_tbl_table_modify_with_get_vallo14_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo14_tbl_table_modify_with_get_vallo14_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo14_tbl_table_modify_with_get_vallo14_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo14_tbl_table_modify_with_get_vallo14_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo14_tbl_table_modify_with_set_and_get_vallo14(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo14_tbl_table_modify_with_set_and_get_vallo14(sess_hdl, dev_id, entry);
  recv_update_vallo14_tbl_table_modify_with_set_and_get_vallo14();
}

void netbufferv4Client::send_update_vallo14_tbl_table_modify_with_set_and_get_vallo14(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo14_tbl_table_modify_with_set_and_get_vallo14", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo14_tbl_table_modify_with_set_and_get_vallo14_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo14_tbl_table_modify_with_set_and_get_vallo14()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo14_tbl_table_modify_with_set_and_get_vallo14") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo14_tbl_table_modify_with_set_and_get_vallo14_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo14_tbl_table_modify_with_set_and_get_vallo14_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo14_tbl_match_spec_t& match_spec)
{
  send_update_vallo14_tbl_table_modify_with_set_and_get_vallo14_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo14_tbl_table_modify_with_set_and_get_vallo14_by_match_spec();
}

void netbufferv4Client::send_update_vallo14_tbl_table_modify_with_set_and_get_vallo14_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo14_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo14_tbl_table_modify_with_set_and_get_vallo14_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo14_tbl_table_modify_with_set_and_get_vallo14_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo14_tbl_table_modify_with_set_and_get_vallo14_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo14_tbl_table_modify_with_set_and_get_vallo14_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo14_tbl_table_modify_with_set_and_get_vallo14_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo14_tbl_table_modify_with_reset_and_get_vallo14(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo14_tbl_table_modify_with_reset_and_get_vallo14(sess_hdl, dev_id, entry);
  recv_update_vallo14_tbl_table_modify_with_reset_and_get_vallo14();
}

void netbufferv4Client::send_update_vallo14_tbl_table_modify_with_reset_and_get_vallo14(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo14_tbl_table_modify_with_reset_and_get_vallo14", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo14_tbl_table_modify_with_reset_and_get_vallo14_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo14_tbl_table_modify_with_reset_and_get_vallo14()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo14_tbl_table_modify_with_reset_and_get_vallo14") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo14_tbl_table_modify_with_reset_and_get_vallo14_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo14_tbl_table_modify_with_reset_and_get_vallo14_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo14_tbl_match_spec_t& match_spec)
{
  send_update_vallo14_tbl_table_modify_with_reset_and_get_vallo14_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo14_tbl_table_modify_with_reset_and_get_vallo14_by_match_spec();
}

void netbufferv4Client::send_update_vallo14_tbl_table_modify_with_reset_and_get_vallo14_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo14_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo14_tbl_table_modify_with_reset_and_get_vallo14_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo14_tbl_table_modify_with_reset_and_get_vallo14_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo14_tbl_table_modify_with_reset_and_get_vallo14_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo14_tbl_table_modify_with_reset_and_get_vallo14_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo14_tbl_table_modify_with_reset_and_get_vallo14_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo14_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo14_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_vallo14_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_vallo14_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo14_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo14_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo14_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo14_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo14_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo14_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo14_tbl_match_spec_t& match_spec)
{
  send_update_vallo14_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo14_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_vallo14_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo14_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo14_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo14_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo14_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo14_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo14_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo15_tbl_table_modify_with_get_vallo15(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo15_tbl_table_modify_with_get_vallo15(sess_hdl, dev_id, entry);
  recv_update_vallo15_tbl_table_modify_with_get_vallo15();
}

void netbufferv4Client::send_update_vallo15_tbl_table_modify_with_get_vallo15(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo15_tbl_table_modify_with_get_vallo15", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo15_tbl_table_modify_with_get_vallo15_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo15_tbl_table_modify_with_get_vallo15()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo15_tbl_table_modify_with_get_vallo15") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo15_tbl_table_modify_with_get_vallo15_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo15_tbl_table_modify_with_get_vallo15_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo15_tbl_match_spec_t& match_spec)
{
  send_update_vallo15_tbl_table_modify_with_get_vallo15_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo15_tbl_table_modify_with_get_vallo15_by_match_spec();
}

void netbufferv4Client::send_update_vallo15_tbl_table_modify_with_get_vallo15_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo15_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo15_tbl_table_modify_with_get_vallo15_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo15_tbl_table_modify_with_get_vallo15_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo15_tbl_table_modify_with_get_vallo15_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo15_tbl_table_modify_with_get_vallo15_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo15_tbl_table_modify_with_get_vallo15_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo15_tbl_table_modify_with_set_and_get_vallo15(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo15_tbl_table_modify_with_set_and_get_vallo15(sess_hdl, dev_id, entry);
  recv_update_vallo15_tbl_table_modify_with_set_and_get_vallo15();
}

void netbufferv4Client::send_update_vallo15_tbl_table_modify_with_set_and_get_vallo15(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo15_tbl_table_modify_with_set_and_get_vallo15", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo15_tbl_table_modify_with_set_and_get_vallo15_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo15_tbl_table_modify_with_set_and_get_vallo15()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo15_tbl_table_modify_with_set_and_get_vallo15") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo15_tbl_table_modify_with_set_and_get_vallo15_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo15_tbl_table_modify_with_set_and_get_vallo15_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo15_tbl_match_spec_t& match_spec)
{
  send_update_vallo15_tbl_table_modify_with_set_and_get_vallo15_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo15_tbl_table_modify_with_set_and_get_vallo15_by_match_spec();
}

void netbufferv4Client::send_update_vallo15_tbl_table_modify_with_set_and_get_vallo15_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo15_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo15_tbl_table_modify_with_set_and_get_vallo15_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo15_tbl_table_modify_with_set_and_get_vallo15_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo15_tbl_table_modify_with_set_and_get_vallo15_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo15_tbl_table_modify_with_set_and_get_vallo15_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo15_tbl_table_modify_with_set_and_get_vallo15_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo15_tbl_table_modify_with_reset_and_get_vallo15(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo15_tbl_table_modify_with_reset_and_get_vallo15(sess_hdl, dev_id, entry);
  recv_update_vallo15_tbl_table_modify_with_reset_and_get_vallo15();
}

void netbufferv4Client::send_update_vallo15_tbl_table_modify_with_reset_and_get_vallo15(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo15_tbl_table_modify_with_reset_and_get_vallo15", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo15_tbl_table_modify_with_reset_and_get_vallo15_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo15_tbl_table_modify_with_reset_and_get_vallo15()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo15_tbl_table_modify_with_reset_and_get_vallo15") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo15_tbl_table_modify_with_reset_and_get_vallo15_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo15_tbl_table_modify_with_reset_and_get_vallo15_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo15_tbl_match_spec_t& match_spec)
{
  send_update_vallo15_tbl_table_modify_with_reset_and_get_vallo15_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo15_tbl_table_modify_with_reset_and_get_vallo15_by_match_spec();
}

void netbufferv4Client::send_update_vallo15_tbl_table_modify_with_reset_and_get_vallo15_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo15_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo15_tbl_table_modify_with_reset_and_get_vallo15_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo15_tbl_table_modify_with_reset_and_get_vallo15_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo15_tbl_table_modify_with_reset_and_get_vallo15_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo15_tbl_table_modify_with_reset_and_get_vallo15_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo15_tbl_table_modify_with_reset_and_get_vallo15_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo15_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo15_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_vallo15_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_vallo15_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo15_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo15_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo15_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo15_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo15_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo15_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo15_tbl_match_spec_t& match_spec)
{
  send_update_vallo15_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo15_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_vallo15_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo15_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo15_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo15_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo15_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo15_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo15_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo16_tbl_table_modify_with_get_vallo16(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo16_tbl_table_modify_with_get_vallo16(sess_hdl, dev_id, entry);
  recv_update_vallo16_tbl_table_modify_with_get_vallo16();
}

void netbufferv4Client::send_update_vallo16_tbl_table_modify_with_get_vallo16(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo16_tbl_table_modify_with_get_vallo16", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo16_tbl_table_modify_with_get_vallo16_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo16_tbl_table_modify_with_get_vallo16()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo16_tbl_table_modify_with_get_vallo16") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo16_tbl_table_modify_with_get_vallo16_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo16_tbl_table_modify_with_get_vallo16_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo16_tbl_match_spec_t& match_spec)
{
  send_update_vallo16_tbl_table_modify_with_get_vallo16_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo16_tbl_table_modify_with_get_vallo16_by_match_spec();
}

void netbufferv4Client::send_update_vallo16_tbl_table_modify_with_get_vallo16_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo16_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo16_tbl_table_modify_with_get_vallo16_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo16_tbl_table_modify_with_get_vallo16_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo16_tbl_table_modify_with_get_vallo16_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo16_tbl_table_modify_with_get_vallo16_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo16_tbl_table_modify_with_get_vallo16_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo16_tbl_table_modify_with_set_and_get_vallo16(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo16_tbl_table_modify_with_set_and_get_vallo16(sess_hdl, dev_id, entry);
  recv_update_vallo16_tbl_table_modify_with_set_and_get_vallo16();
}

void netbufferv4Client::send_update_vallo16_tbl_table_modify_with_set_and_get_vallo16(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo16_tbl_table_modify_with_set_and_get_vallo16", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo16_tbl_table_modify_with_set_and_get_vallo16_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo16_tbl_table_modify_with_set_and_get_vallo16()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo16_tbl_table_modify_with_set_and_get_vallo16") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo16_tbl_table_modify_with_set_and_get_vallo16_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo16_tbl_table_modify_with_set_and_get_vallo16_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo16_tbl_match_spec_t& match_spec)
{
  send_update_vallo16_tbl_table_modify_with_set_and_get_vallo16_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo16_tbl_table_modify_with_set_and_get_vallo16_by_match_spec();
}

void netbufferv4Client::send_update_vallo16_tbl_table_modify_with_set_and_get_vallo16_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo16_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo16_tbl_table_modify_with_set_and_get_vallo16_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo16_tbl_table_modify_with_set_and_get_vallo16_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo16_tbl_table_modify_with_set_and_get_vallo16_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo16_tbl_table_modify_with_set_and_get_vallo16_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo16_tbl_table_modify_with_set_and_get_vallo16_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo16_tbl_table_modify_with_reset_and_get_vallo16(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo16_tbl_table_modify_with_reset_and_get_vallo16(sess_hdl, dev_id, entry);
  recv_update_vallo16_tbl_table_modify_with_reset_and_get_vallo16();
}

void netbufferv4Client::send_update_vallo16_tbl_table_modify_with_reset_and_get_vallo16(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo16_tbl_table_modify_with_reset_and_get_vallo16", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo16_tbl_table_modify_with_reset_and_get_vallo16_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo16_tbl_table_modify_with_reset_and_get_vallo16()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo16_tbl_table_modify_with_reset_and_get_vallo16") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo16_tbl_table_modify_with_reset_and_get_vallo16_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo16_tbl_table_modify_with_reset_and_get_vallo16_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo16_tbl_match_spec_t& match_spec)
{
  send_update_vallo16_tbl_table_modify_with_reset_and_get_vallo16_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo16_tbl_table_modify_with_reset_and_get_vallo16_by_match_spec();
}

void netbufferv4Client::send_update_vallo16_tbl_table_modify_with_reset_and_get_vallo16_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo16_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo16_tbl_table_modify_with_reset_and_get_vallo16_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo16_tbl_table_modify_with_reset_and_get_vallo16_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo16_tbl_table_modify_with_reset_and_get_vallo16_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo16_tbl_table_modify_with_reset_and_get_vallo16_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo16_tbl_table_modify_with_reset_and_get_vallo16_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo16_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo16_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_vallo16_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_vallo16_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo16_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo16_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo16_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo16_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo16_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo16_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo16_tbl_match_spec_t& match_spec)
{
  send_update_vallo16_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo16_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_vallo16_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo16_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo16_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo16_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo16_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo16_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo16_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo1_tbl_table_modify_with_get_vallo1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo1_tbl_table_modify_with_get_vallo1(sess_hdl, dev_id, entry);
  recv_update_vallo1_tbl_table_modify_with_get_vallo1();
}

void netbufferv4Client::send_update_vallo1_tbl_table_modify_with_get_vallo1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo1_tbl_table_modify_with_get_vallo1", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo1_tbl_table_modify_with_get_vallo1_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo1_tbl_table_modify_with_get_vallo1()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo1_tbl_table_modify_with_get_vallo1") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo1_tbl_table_modify_with_get_vallo1_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo1_tbl_table_modify_with_get_vallo1_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo1_tbl_match_spec_t& match_spec)
{
  send_update_vallo1_tbl_table_modify_with_get_vallo1_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo1_tbl_table_modify_with_get_vallo1_by_match_spec();
}

void netbufferv4Client::send_update_vallo1_tbl_table_modify_with_get_vallo1_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo1_tbl_table_modify_with_get_vallo1_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo1_tbl_table_modify_with_get_vallo1_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo1_tbl_table_modify_with_get_vallo1_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo1_tbl_table_modify_with_get_vallo1_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo1_tbl_table_modify_with_get_vallo1_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo1_tbl_table_modify_with_set_and_get_vallo1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo1_tbl_table_modify_with_set_and_get_vallo1(sess_hdl, dev_id, entry);
  recv_update_vallo1_tbl_table_modify_with_set_and_get_vallo1();
}

void netbufferv4Client::send_update_vallo1_tbl_table_modify_with_set_and_get_vallo1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo1_tbl_table_modify_with_set_and_get_vallo1", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo1_tbl_table_modify_with_set_and_get_vallo1_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo1_tbl_table_modify_with_set_and_get_vallo1()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo1_tbl_table_modify_with_set_and_get_vallo1") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo1_tbl_table_modify_with_set_and_get_vallo1_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo1_tbl_table_modify_with_set_and_get_vallo1_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo1_tbl_match_spec_t& match_spec)
{
  send_update_vallo1_tbl_table_modify_with_set_and_get_vallo1_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo1_tbl_table_modify_with_set_and_get_vallo1_by_match_spec();
}

void netbufferv4Client::send_update_vallo1_tbl_table_modify_with_set_and_get_vallo1_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo1_tbl_table_modify_with_set_and_get_vallo1_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo1_tbl_table_modify_with_set_and_get_vallo1_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo1_tbl_table_modify_with_set_and_get_vallo1_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo1_tbl_table_modify_with_set_and_get_vallo1_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo1_tbl_table_modify_with_set_and_get_vallo1_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo1_tbl_table_modify_with_reset_and_get_vallo1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo1_tbl_table_modify_with_reset_and_get_vallo1(sess_hdl, dev_id, entry);
  recv_update_vallo1_tbl_table_modify_with_reset_and_get_vallo1();
}

void netbufferv4Client::send_update_vallo1_tbl_table_modify_with_reset_and_get_vallo1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo1_tbl_table_modify_with_reset_and_get_vallo1", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo1_tbl_table_modify_with_reset_and_get_vallo1_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo1_tbl_table_modify_with_reset_and_get_vallo1()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo1_tbl_table_modify_with_reset_and_get_vallo1") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo1_tbl_table_modify_with_reset_and_get_vallo1_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo1_tbl_table_modify_with_reset_and_get_vallo1_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo1_tbl_match_spec_t& match_spec)
{
  send_update_vallo1_tbl_table_modify_with_reset_and_get_vallo1_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo1_tbl_table_modify_with_reset_and_get_vallo1_by_match_spec();
}

void netbufferv4Client::send_update_vallo1_tbl_table_modify_with_reset_and_get_vallo1_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo1_tbl_table_modify_with_reset_and_get_vallo1_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo1_tbl_table_modify_with_reset_and_get_vallo1_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo1_tbl_table_modify_with_reset_and_get_vallo1_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo1_tbl_table_modify_with_reset_and_get_vallo1_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo1_tbl_table_modify_with_reset_and_get_vallo1_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo1_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo1_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_vallo1_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_vallo1_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo1_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo1_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo1_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo1_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo1_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo1_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo1_tbl_match_spec_t& match_spec)
{
  send_update_vallo1_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo1_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_vallo1_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo1_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo1_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo1_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo1_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo1_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo2_tbl_table_modify_with_get_vallo2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo2_tbl_table_modify_with_get_vallo2(sess_hdl, dev_id, entry);
  recv_update_vallo2_tbl_table_modify_with_get_vallo2();
}

void netbufferv4Client::send_update_vallo2_tbl_table_modify_with_get_vallo2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo2_tbl_table_modify_with_get_vallo2", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo2_tbl_table_modify_with_get_vallo2_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo2_tbl_table_modify_with_get_vallo2()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo2_tbl_table_modify_with_get_vallo2") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo2_tbl_table_modify_with_get_vallo2_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo2_tbl_table_modify_with_get_vallo2_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo2_tbl_match_spec_t& match_spec)
{
  send_update_vallo2_tbl_table_modify_with_get_vallo2_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo2_tbl_table_modify_with_get_vallo2_by_match_spec();
}

void netbufferv4Client::send_update_vallo2_tbl_table_modify_with_get_vallo2_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo2_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo2_tbl_table_modify_with_get_vallo2_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo2_tbl_table_modify_with_get_vallo2_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo2_tbl_table_modify_with_get_vallo2_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo2_tbl_table_modify_with_get_vallo2_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo2_tbl_table_modify_with_get_vallo2_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo2_tbl_table_modify_with_set_and_get_vallo2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo2_tbl_table_modify_with_set_and_get_vallo2(sess_hdl, dev_id, entry);
  recv_update_vallo2_tbl_table_modify_with_set_and_get_vallo2();
}

void netbufferv4Client::send_update_vallo2_tbl_table_modify_with_set_and_get_vallo2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo2_tbl_table_modify_with_set_and_get_vallo2", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo2_tbl_table_modify_with_set_and_get_vallo2_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo2_tbl_table_modify_with_set_and_get_vallo2()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo2_tbl_table_modify_with_set_and_get_vallo2") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo2_tbl_table_modify_with_set_and_get_vallo2_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo2_tbl_table_modify_with_set_and_get_vallo2_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo2_tbl_match_spec_t& match_spec)
{
  send_update_vallo2_tbl_table_modify_with_set_and_get_vallo2_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo2_tbl_table_modify_with_set_and_get_vallo2_by_match_spec();
}

void netbufferv4Client::send_update_vallo2_tbl_table_modify_with_set_and_get_vallo2_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo2_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo2_tbl_table_modify_with_set_and_get_vallo2_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo2_tbl_table_modify_with_set_and_get_vallo2_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo2_tbl_table_modify_with_set_and_get_vallo2_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo2_tbl_table_modify_with_set_and_get_vallo2_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo2_tbl_table_modify_with_set_and_get_vallo2_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo2_tbl_table_modify_with_reset_and_get_vallo2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo2_tbl_table_modify_with_reset_and_get_vallo2(sess_hdl, dev_id, entry);
  recv_update_vallo2_tbl_table_modify_with_reset_and_get_vallo2();
}

void netbufferv4Client::send_update_vallo2_tbl_table_modify_with_reset_and_get_vallo2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo2_tbl_table_modify_with_reset_and_get_vallo2", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo2_tbl_table_modify_with_reset_and_get_vallo2_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo2_tbl_table_modify_with_reset_and_get_vallo2()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo2_tbl_table_modify_with_reset_and_get_vallo2") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo2_tbl_table_modify_with_reset_and_get_vallo2_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo2_tbl_table_modify_with_reset_and_get_vallo2_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo2_tbl_match_spec_t& match_spec)
{
  send_update_vallo2_tbl_table_modify_with_reset_and_get_vallo2_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo2_tbl_table_modify_with_reset_and_get_vallo2_by_match_spec();
}

void netbufferv4Client::send_update_vallo2_tbl_table_modify_with_reset_and_get_vallo2_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo2_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo2_tbl_table_modify_with_reset_and_get_vallo2_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo2_tbl_table_modify_with_reset_and_get_vallo2_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo2_tbl_table_modify_with_reset_and_get_vallo2_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo2_tbl_table_modify_with_reset_and_get_vallo2_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo2_tbl_table_modify_with_reset_and_get_vallo2_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo2_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo2_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_vallo2_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_vallo2_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo2_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo2_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo2_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo2_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo2_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo2_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo2_tbl_match_spec_t& match_spec)
{
  send_update_vallo2_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo2_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_vallo2_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo2_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo2_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo2_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo2_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo2_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo2_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo3_tbl_table_modify_with_get_vallo3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo3_tbl_table_modify_with_get_vallo3(sess_hdl, dev_id, entry);
  recv_update_vallo3_tbl_table_modify_with_get_vallo3();
}

void netbufferv4Client::send_update_vallo3_tbl_table_modify_with_get_vallo3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo3_tbl_table_modify_with_get_vallo3", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo3_tbl_table_modify_with_get_vallo3_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo3_tbl_table_modify_with_get_vallo3()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo3_tbl_table_modify_with_get_vallo3") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo3_tbl_table_modify_with_get_vallo3_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo3_tbl_table_modify_with_get_vallo3_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo3_tbl_match_spec_t& match_spec)
{
  send_update_vallo3_tbl_table_modify_with_get_vallo3_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo3_tbl_table_modify_with_get_vallo3_by_match_spec();
}

void netbufferv4Client::send_update_vallo3_tbl_table_modify_with_get_vallo3_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo3_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo3_tbl_table_modify_with_get_vallo3_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo3_tbl_table_modify_with_get_vallo3_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo3_tbl_table_modify_with_get_vallo3_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo3_tbl_table_modify_with_get_vallo3_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo3_tbl_table_modify_with_get_vallo3_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo3_tbl_table_modify_with_set_and_get_vallo3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo3_tbl_table_modify_with_set_and_get_vallo3(sess_hdl, dev_id, entry);
  recv_update_vallo3_tbl_table_modify_with_set_and_get_vallo3();
}

void netbufferv4Client::send_update_vallo3_tbl_table_modify_with_set_and_get_vallo3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo3_tbl_table_modify_with_set_and_get_vallo3", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo3_tbl_table_modify_with_set_and_get_vallo3_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo3_tbl_table_modify_with_set_and_get_vallo3()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo3_tbl_table_modify_with_set_and_get_vallo3") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo3_tbl_table_modify_with_set_and_get_vallo3_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo3_tbl_table_modify_with_set_and_get_vallo3_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo3_tbl_match_spec_t& match_spec)
{
  send_update_vallo3_tbl_table_modify_with_set_and_get_vallo3_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo3_tbl_table_modify_with_set_and_get_vallo3_by_match_spec();
}

void netbufferv4Client::send_update_vallo3_tbl_table_modify_with_set_and_get_vallo3_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo3_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo3_tbl_table_modify_with_set_and_get_vallo3_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo3_tbl_table_modify_with_set_and_get_vallo3_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo3_tbl_table_modify_with_set_and_get_vallo3_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo3_tbl_table_modify_with_set_and_get_vallo3_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo3_tbl_table_modify_with_set_and_get_vallo3_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo3_tbl_table_modify_with_reset_and_get_vallo3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo3_tbl_table_modify_with_reset_and_get_vallo3(sess_hdl, dev_id, entry);
  recv_update_vallo3_tbl_table_modify_with_reset_and_get_vallo3();
}

void netbufferv4Client::send_update_vallo3_tbl_table_modify_with_reset_and_get_vallo3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo3_tbl_table_modify_with_reset_and_get_vallo3", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo3_tbl_table_modify_with_reset_and_get_vallo3_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo3_tbl_table_modify_with_reset_and_get_vallo3()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo3_tbl_table_modify_with_reset_and_get_vallo3") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo3_tbl_table_modify_with_reset_and_get_vallo3_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo3_tbl_table_modify_with_reset_and_get_vallo3_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo3_tbl_match_spec_t& match_spec)
{
  send_update_vallo3_tbl_table_modify_with_reset_and_get_vallo3_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo3_tbl_table_modify_with_reset_and_get_vallo3_by_match_spec();
}

void netbufferv4Client::send_update_vallo3_tbl_table_modify_with_reset_and_get_vallo3_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo3_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo3_tbl_table_modify_with_reset_and_get_vallo3_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo3_tbl_table_modify_with_reset_and_get_vallo3_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo3_tbl_table_modify_with_reset_and_get_vallo3_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo3_tbl_table_modify_with_reset_and_get_vallo3_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo3_tbl_table_modify_with_reset_and_get_vallo3_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo3_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo3_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_vallo3_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_vallo3_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo3_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo3_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo3_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo3_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo3_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo3_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo3_tbl_match_spec_t& match_spec)
{
  send_update_vallo3_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo3_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_vallo3_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo3_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo3_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo3_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo3_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo3_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo3_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo4_tbl_table_modify_with_get_vallo4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo4_tbl_table_modify_with_get_vallo4(sess_hdl, dev_id, entry);
  recv_update_vallo4_tbl_table_modify_with_get_vallo4();
}

void netbufferv4Client::send_update_vallo4_tbl_table_modify_with_get_vallo4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo4_tbl_table_modify_with_get_vallo4", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo4_tbl_table_modify_with_get_vallo4_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo4_tbl_table_modify_with_get_vallo4()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo4_tbl_table_modify_with_get_vallo4") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo4_tbl_table_modify_with_get_vallo4_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo4_tbl_table_modify_with_get_vallo4_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo4_tbl_match_spec_t& match_spec)
{
  send_update_vallo4_tbl_table_modify_with_get_vallo4_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo4_tbl_table_modify_with_get_vallo4_by_match_spec();
}

void netbufferv4Client::send_update_vallo4_tbl_table_modify_with_get_vallo4_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo4_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo4_tbl_table_modify_with_get_vallo4_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo4_tbl_table_modify_with_get_vallo4_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo4_tbl_table_modify_with_get_vallo4_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo4_tbl_table_modify_with_get_vallo4_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo4_tbl_table_modify_with_get_vallo4_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo4_tbl_table_modify_with_set_and_get_vallo4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo4_tbl_table_modify_with_set_and_get_vallo4(sess_hdl, dev_id, entry);
  recv_update_vallo4_tbl_table_modify_with_set_and_get_vallo4();
}

void netbufferv4Client::send_update_vallo4_tbl_table_modify_with_set_and_get_vallo4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo4_tbl_table_modify_with_set_and_get_vallo4", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo4_tbl_table_modify_with_set_and_get_vallo4_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo4_tbl_table_modify_with_set_and_get_vallo4()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo4_tbl_table_modify_with_set_and_get_vallo4") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo4_tbl_table_modify_with_set_and_get_vallo4_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo4_tbl_table_modify_with_set_and_get_vallo4_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo4_tbl_match_spec_t& match_spec)
{
  send_update_vallo4_tbl_table_modify_with_set_and_get_vallo4_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo4_tbl_table_modify_with_set_and_get_vallo4_by_match_spec();
}

void netbufferv4Client::send_update_vallo4_tbl_table_modify_with_set_and_get_vallo4_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo4_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo4_tbl_table_modify_with_set_and_get_vallo4_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo4_tbl_table_modify_with_set_and_get_vallo4_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo4_tbl_table_modify_with_set_and_get_vallo4_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo4_tbl_table_modify_with_set_and_get_vallo4_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo4_tbl_table_modify_with_set_and_get_vallo4_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo4_tbl_table_modify_with_reset_and_get_vallo4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo4_tbl_table_modify_with_reset_and_get_vallo4(sess_hdl, dev_id, entry);
  recv_update_vallo4_tbl_table_modify_with_reset_and_get_vallo4();
}

void netbufferv4Client::send_update_vallo4_tbl_table_modify_with_reset_and_get_vallo4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo4_tbl_table_modify_with_reset_and_get_vallo4", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo4_tbl_table_modify_with_reset_and_get_vallo4_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo4_tbl_table_modify_with_reset_and_get_vallo4()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo4_tbl_table_modify_with_reset_and_get_vallo4") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo4_tbl_table_modify_with_reset_and_get_vallo4_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo4_tbl_table_modify_with_reset_and_get_vallo4_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo4_tbl_match_spec_t& match_spec)
{
  send_update_vallo4_tbl_table_modify_with_reset_and_get_vallo4_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo4_tbl_table_modify_with_reset_and_get_vallo4_by_match_spec();
}

void netbufferv4Client::send_update_vallo4_tbl_table_modify_with_reset_and_get_vallo4_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo4_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo4_tbl_table_modify_with_reset_and_get_vallo4_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo4_tbl_table_modify_with_reset_and_get_vallo4_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo4_tbl_table_modify_with_reset_and_get_vallo4_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo4_tbl_table_modify_with_reset_and_get_vallo4_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo4_tbl_table_modify_with_reset_and_get_vallo4_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo4_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo4_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_vallo4_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_vallo4_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo4_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo4_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo4_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo4_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo4_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo4_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo4_tbl_match_spec_t& match_spec)
{
  send_update_vallo4_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo4_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_vallo4_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo4_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo4_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo4_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo4_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo4_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo4_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo5_tbl_table_modify_with_get_vallo5(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo5_tbl_table_modify_with_get_vallo5(sess_hdl, dev_id, entry);
  recv_update_vallo5_tbl_table_modify_with_get_vallo5();
}

void netbufferv4Client::send_update_vallo5_tbl_table_modify_with_get_vallo5(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo5_tbl_table_modify_with_get_vallo5", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo5_tbl_table_modify_with_get_vallo5_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo5_tbl_table_modify_with_get_vallo5()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo5_tbl_table_modify_with_get_vallo5") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo5_tbl_table_modify_with_get_vallo5_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo5_tbl_table_modify_with_get_vallo5_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo5_tbl_match_spec_t& match_spec)
{
  send_update_vallo5_tbl_table_modify_with_get_vallo5_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo5_tbl_table_modify_with_get_vallo5_by_match_spec();
}

void netbufferv4Client::send_update_vallo5_tbl_table_modify_with_get_vallo5_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo5_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo5_tbl_table_modify_with_get_vallo5_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo5_tbl_table_modify_with_get_vallo5_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo5_tbl_table_modify_with_get_vallo5_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo5_tbl_table_modify_with_get_vallo5_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo5_tbl_table_modify_with_get_vallo5_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo5_tbl_table_modify_with_set_and_get_vallo5(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo5_tbl_table_modify_with_set_and_get_vallo5(sess_hdl, dev_id, entry);
  recv_update_vallo5_tbl_table_modify_with_set_and_get_vallo5();
}

void netbufferv4Client::send_update_vallo5_tbl_table_modify_with_set_and_get_vallo5(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo5_tbl_table_modify_with_set_and_get_vallo5", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo5_tbl_table_modify_with_set_and_get_vallo5_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo5_tbl_table_modify_with_set_and_get_vallo5()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo5_tbl_table_modify_with_set_and_get_vallo5") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo5_tbl_table_modify_with_set_and_get_vallo5_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo5_tbl_table_modify_with_set_and_get_vallo5_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo5_tbl_match_spec_t& match_spec)
{
  send_update_vallo5_tbl_table_modify_with_set_and_get_vallo5_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo5_tbl_table_modify_with_set_and_get_vallo5_by_match_spec();
}

void netbufferv4Client::send_update_vallo5_tbl_table_modify_with_set_and_get_vallo5_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo5_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo5_tbl_table_modify_with_set_and_get_vallo5_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo5_tbl_table_modify_with_set_and_get_vallo5_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo5_tbl_table_modify_with_set_and_get_vallo5_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo5_tbl_table_modify_with_set_and_get_vallo5_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo5_tbl_table_modify_with_set_and_get_vallo5_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo5_tbl_table_modify_with_reset_and_get_vallo5(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo5_tbl_table_modify_with_reset_and_get_vallo5(sess_hdl, dev_id, entry);
  recv_update_vallo5_tbl_table_modify_with_reset_and_get_vallo5();
}

void netbufferv4Client::send_update_vallo5_tbl_table_modify_with_reset_and_get_vallo5(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo5_tbl_table_modify_with_reset_and_get_vallo5", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo5_tbl_table_modify_with_reset_and_get_vallo5_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo5_tbl_table_modify_with_reset_and_get_vallo5()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo5_tbl_table_modify_with_reset_and_get_vallo5") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo5_tbl_table_modify_with_reset_and_get_vallo5_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo5_tbl_table_modify_with_reset_and_get_vallo5_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo5_tbl_match_spec_t& match_spec)
{
  send_update_vallo5_tbl_table_modify_with_reset_and_get_vallo5_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo5_tbl_table_modify_with_reset_and_get_vallo5_by_match_spec();
}

void netbufferv4Client::send_update_vallo5_tbl_table_modify_with_reset_and_get_vallo5_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo5_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo5_tbl_table_modify_with_reset_and_get_vallo5_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo5_tbl_table_modify_with_reset_and_get_vallo5_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo5_tbl_table_modify_with_reset_and_get_vallo5_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo5_tbl_table_modify_with_reset_and_get_vallo5_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo5_tbl_table_modify_with_reset_and_get_vallo5_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo5_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo5_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_vallo5_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_vallo5_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo5_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo5_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo5_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo5_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo5_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo5_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo5_tbl_match_spec_t& match_spec)
{
  send_update_vallo5_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo5_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_vallo5_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo5_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo5_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo5_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo5_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo5_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo5_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo6_tbl_table_modify_with_get_vallo6(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo6_tbl_table_modify_with_get_vallo6(sess_hdl, dev_id, entry);
  recv_update_vallo6_tbl_table_modify_with_get_vallo6();
}

void netbufferv4Client::send_update_vallo6_tbl_table_modify_with_get_vallo6(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo6_tbl_table_modify_with_get_vallo6", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo6_tbl_table_modify_with_get_vallo6_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo6_tbl_table_modify_with_get_vallo6()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo6_tbl_table_modify_with_get_vallo6") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo6_tbl_table_modify_with_get_vallo6_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo6_tbl_table_modify_with_get_vallo6_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo6_tbl_match_spec_t& match_spec)
{
  send_update_vallo6_tbl_table_modify_with_get_vallo6_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo6_tbl_table_modify_with_get_vallo6_by_match_spec();
}

void netbufferv4Client::send_update_vallo6_tbl_table_modify_with_get_vallo6_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo6_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo6_tbl_table_modify_with_get_vallo6_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo6_tbl_table_modify_with_get_vallo6_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo6_tbl_table_modify_with_get_vallo6_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo6_tbl_table_modify_with_get_vallo6_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo6_tbl_table_modify_with_get_vallo6_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo6_tbl_table_modify_with_set_and_get_vallo6(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo6_tbl_table_modify_with_set_and_get_vallo6(sess_hdl, dev_id, entry);
  recv_update_vallo6_tbl_table_modify_with_set_and_get_vallo6();
}

void netbufferv4Client::send_update_vallo6_tbl_table_modify_with_set_and_get_vallo6(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo6_tbl_table_modify_with_set_and_get_vallo6", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo6_tbl_table_modify_with_set_and_get_vallo6_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo6_tbl_table_modify_with_set_and_get_vallo6()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo6_tbl_table_modify_with_set_and_get_vallo6") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo6_tbl_table_modify_with_set_and_get_vallo6_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo6_tbl_table_modify_with_set_and_get_vallo6_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo6_tbl_match_spec_t& match_spec)
{
  send_update_vallo6_tbl_table_modify_with_set_and_get_vallo6_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo6_tbl_table_modify_with_set_and_get_vallo6_by_match_spec();
}

void netbufferv4Client::send_update_vallo6_tbl_table_modify_with_set_and_get_vallo6_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo6_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo6_tbl_table_modify_with_set_and_get_vallo6_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo6_tbl_table_modify_with_set_and_get_vallo6_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo6_tbl_table_modify_with_set_and_get_vallo6_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo6_tbl_table_modify_with_set_and_get_vallo6_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo6_tbl_table_modify_with_set_and_get_vallo6_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo6_tbl_table_modify_with_reset_and_get_vallo6(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo6_tbl_table_modify_with_reset_and_get_vallo6(sess_hdl, dev_id, entry);
  recv_update_vallo6_tbl_table_modify_with_reset_and_get_vallo6();
}

void netbufferv4Client::send_update_vallo6_tbl_table_modify_with_reset_and_get_vallo6(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo6_tbl_table_modify_with_reset_and_get_vallo6", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo6_tbl_table_modify_with_reset_and_get_vallo6_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo6_tbl_table_modify_with_reset_and_get_vallo6()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo6_tbl_table_modify_with_reset_and_get_vallo6") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo6_tbl_table_modify_with_reset_and_get_vallo6_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo6_tbl_table_modify_with_reset_and_get_vallo6_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo6_tbl_match_spec_t& match_spec)
{
  send_update_vallo6_tbl_table_modify_with_reset_and_get_vallo6_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo6_tbl_table_modify_with_reset_and_get_vallo6_by_match_spec();
}

void netbufferv4Client::send_update_vallo6_tbl_table_modify_with_reset_and_get_vallo6_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo6_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo6_tbl_table_modify_with_reset_and_get_vallo6_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo6_tbl_table_modify_with_reset_and_get_vallo6_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo6_tbl_table_modify_with_reset_and_get_vallo6_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo6_tbl_table_modify_with_reset_and_get_vallo6_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo6_tbl_table_modify_with_reset_and_get_vallo6_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo6_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo6_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_vallo6_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_vallo6_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo6_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo6_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo6_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo6_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo6_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo6_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo6_tbl_match_spec_t& match_spec)
{
  send_update_vallo6_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo6_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_vallo6_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo6_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo6_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo6_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo6_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo6_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo6_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo7_tbl_table_modify_with_get_vallo7(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo7_tbl_table_modify_with_get_vallo7(sess_hdl, dev_id, entry);
  recv_update_vallo7_tbl_table_modify_with_get_vallo7();
}

void netbufferv4Client::send_update_vallo7_tbl_table_modify_with_get_vallo7(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo7_tbl_table_modify_with_get_vallo7", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo7_tbl_table_modify_with_get_vallo7_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo7_tbl_table_modify_with_get_vallo7()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo7_tbl_table_modify_with_get_vallo7") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo7_tbl_table_modify_with_get_vallo7_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo7_tbl_table_modify_with_get_vallo7_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo7_tbl_match_spec_t& match_spec)
{
  send_update_vallo7_tbl_table_modify_with_get_vallo7_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo7_tbl_table_modify_with_get_vallo7_by_match_spec();
}

void netbufferv4Client::send_update_vallo7_tbl_table_modify_with_get_vallo7_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo7_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo7_tbl_table_modify_with_get_vallo7_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo7_tbl_table_modify_with_get_vallo7_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo7_tbl_table_modify_with_get_vallo7_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo7_tbl_table_modify_with_get_vallo7_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo7_tbl_table_modify_with_get_vallo7_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo7_tbl_table_modify_with_set_and_get_vallo7(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo7_tbl_table_modify_with_set_and_get_vallo7(sess_hdl, dev_id, entry);
  recv_update_vallo7_tbl_table_modify_with_set_and_get_vallo7();
}

void netbufferv4Client::send_update_vallo7_tbl_table_modify_with_set_and_get_vallo7(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo7_tbl_table_modify_with_set_and_get_vallo7", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo7_tbl_table_modify_with_set_and_get_vallo7_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo7_tbl_table_modify_with_set_and_get_vallo7()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo7_tbl_table_modify_with_set_and_get_vallo7") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo7_tbl_table_modify_with_set_and_get_vallo7_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo7_tbl_table_modify_with_set_and_get_vallo7_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo7_tbl_match_spec_t& match_spec)
{
  send_update_vallo7_tbl_table_modify_with_set_and_get_vallo7_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo7_tbl_table_modify_with_set_and_get_vallo7_by_match_spec();
}

void netbufferv4Client::send_update_vallo7_tbl_table_modify_with_set_and_get_vallo7_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo7_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo7_tbl_table_modify_with_set_and_get_vallo7_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo7_tbl_table_modify_with_set_and_get_vallo7_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo7_tbl_table_modify_with_set_and_get_vallo7_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo7_tbl_table_modify_with_set_and_get_vallo7_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo7_tbl_table_modify_with_set_and_get_vallo7_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo7_tbl_table_modify_with_reset_and_get_vallo7(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo7_tbl_table_modify_with_reset_and_get_vallo7(sess_hdl, dev_id, entry);
  recv_update_vallo7_tbl_table_modify_with_reset_and_get_vallo7();
}

void netbufferv4Client::send_update_vallo7_tbl_table_modify_with_reset_and_get_vallo7(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo7_tbl_table_modify_with_reset_and_get_vallo7", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo7_tbl_table_modify_with_reset_and_get_vallo7_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo7_tbl_table_modify_with_reset_and_get_vallo7()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo7_tbl_table_modify_with_reset_and_get_vallo7") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo7_tbl_table_modify_with_reset_and_get_vallo7_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo7_tbl_table_modify_with_reset_and_get_vallo7_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo7_tbl_match_spec_t& match_spec)
{
  send_update_vallo7_tbl_table_modify_with_reset_and_get_vallo7_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo7_tbl_table_modify_with_reset_and_get_vallo7_by_match_spec();
}

void netbufferv4Client::send_update_vallo7_tbl_table_modify_with_reset_and_get_vallo7_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo7_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo7_tbl_table_modify_with_reset_and_get_vallo7_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo7_tbl_table_modify_with_reset_and_get_vallo7_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo7_tbl_table_modify_with_reset_and_get_vallo7_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo7_tbl_table_modify_with_reset_and_get_vallo7_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo7_tbl_table_modify_with_reset_and_get_vallo7_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo7_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo7_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_vallo7_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_vallo7_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo7_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo7_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo7_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo7_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo7_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo7_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo7_tbl_match_spec_t& match_spec)
{
  send_update_vallo7_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo7_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_vallo7_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo7_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo7_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo7_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo7_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo7_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo7_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo8_tbl_table_modify_with_get_vallo8(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo8_tbl_table_modify_with_get_vallo8(sess_hdl, dev_id, entry);
  recv_update_vallo8_tbl_table_modify_with_get_vallo8();
}

void netbufferv4Client::send_update_vallo8_tbl_table_modify_with_get_vallo8(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo8_tbl_table_modify_with_get_vallo8", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo8_tbl_table_modify_with_get_vallo8_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo8_tbl_table_modify_with_get_vallo8()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo8_tbl_table_modify_with_get_vallo8") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo8_tbl_table_modify_with_get_vallo8_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo8_tbl_table_modify_with_get_vallo8_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo8_tbl_match_spec_t& match_spec)
{
  send_update_vallo8_tbl_table_modify_with_get_vallo8_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo8_tbl_table_modify_with_get_vallo8_by_match_spec();
}

void netbufferv4Client::send_update_vallo8_tbl_table_modify_with_get_vallo8_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo8_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo8_tbl_table_modify_with_get_vallo8_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo8_tbl_table_modify_with_get_vallo8_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo8_tbl_table_modify_with_get_vallo8_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo8_tbl_table_modify_with_get_vallo8_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo8_tbl_table_modify_with_get_vallo8_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo8_tbl_table_modify_with_set_and_get_vallo8(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo8_tbl_table_modify_with_set_and_get_vallo8(sess_hdl, dev_id, entry);
  recv_update_vallo8_tbl_table_modify_with_set_and_get_vallo8();
}

void netbufferv4Client::send_update_vallo8_tbl_table_modify_with_set_and_get_vallo8(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo8_tbl_table_modify_with_set_and_get_vallo8", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo8_tbl_table_modify_with_set_and_get_vallo8_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo8_tbl_table_modify_with_set_and_get_vallo8()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo8_tbl_table_modify_with_set_and_get_vallo8") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo8_tbl_table_modify_with_set_and_get_vallo8_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo8_tbl_table_modify_with_set_and_get_vallo8_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo8_tbl_match_spec_t& match_spec)
{
  send_update_vallo8_tbl_table_modify_with_set_and_get_vallo8_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo8_tbl_table_modify_with_set_and_get_vallo8_by_match_spec();
}

void netbufferv4Client::send_update_vallo8_tbl_table_modify_with_set_and_get_vallo8_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo8_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo8_tbl_table_modify_with_set_and_get_vallo8_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo8_tbl_table_modify_with_set_and_get_vallo8_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo8_tbl_table_modify_with_set_and_get_vallo8_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo8_tbl_table_modify_with_set_and_get_vallo8_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo8_tbl_table_modify_with_set_and_get_vallo8_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo8_tbl_table_modify_with_reset_and_get_vallo8(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo8_tbl_table_modify_with_reset_and_get_vallo8(sess_hdl, dev_id, entry);
  recv_update_vallo8_tbl_table_modify_with_reset_and_get_vallo8();
}

void netbufferv4Client::send_update_vallo8_tbl_table_modify_with_reset_and_get_vallo8(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo8_tbl_table_modify_with_reset_and_get_vallo8", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo8_tbl_table_modify_with_reset_and_get_vallo8_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo8_tbl_table_modify_with_reset_and_get_vallo8()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo8_tbl_table_modify_with_reset_and_get_vallo8") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo8_tbl_table_modify_with_reset_and_get_vallo8_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo8_tbl_table_modify_with_reset_and_get_vallo8_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo8_tbl_match_spec_t& match_spec)
{
  send_update_vallo8_tbl_table_modify_with_reset_and_get_vallo8_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo8_tbl_table_modify_with_reset_and_get_vallo8_by_match_spec();
}

void netbufferv4Client::send_update_vallo8_tbl_table_modify_with_reset_and_get_vallo8_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo8_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo8_tbl_table_modify_with_reset_and_get_vallo8_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo8_tbl_table_modify_with_reset_and_get_vallo8_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo8_tbl_table_modify_with_reset_and_get_vallo8_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo8_tbl_table_modify_with_reset_and_get_vallo8_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo8_tbl_table_modify_with_reset_and_get_vallo8_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo8_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo8_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_vallo8_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_vallo8_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo8_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo8_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo8_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo8_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo8_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo8_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo8_tbl_match_spec_t& match_spec)
{
  send_update_vallo8_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo8_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_vallo8_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo8_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo8_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo8_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo8_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo8_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo8_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo9_tbl_table_modify_with_get_vallo9(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo9_tbl_table_modify_with_get_vallo9(sess_hdl, dev_id, entry);
  recv_update_vallo9_tbl_table_modify_with_get_vallo9();
}

void netbufferv4Client::send_update_vallo9_tbl_table_modify_with_get_vallo9(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo9_tbl_table_modify_with_get_vallo9", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo9_tbl_table_modify_with_get_vallo9_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo9_tbl_table_modify_with_get_vallo9()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo9_tbl_table_modify_with_get_vallo9") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo9_tbl_table_modify_with_get_vallo9_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo9_tbl_table_modify_with_get_vallo9_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo9_tbl_match_spec_t& match_spec)
{
  send_update_vallo9_tbl_table_modify_with_get_vallo9_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo9_tbl_table_modify_with_get_vallo9_by_match_spec();
}

void netbufferv4Client::send_update_vallo9_tbl_table_modify_with_get_vallo9_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo9_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo9_tbl_table_modify_with_get_vallo9_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo9_tbl_table_modify_with_get_vallo9_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo9_tbl_table_modify_with_get_vallo9_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo9_tbl_table_modify_with_get_vallo9_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo9_tbl_table_modify_with_get_vallo9_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo9_tbl_table_modify_with_set_and_get_vallo9(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo9_tbl_table_modify_with_set_and_get_vallo9(sess_hdl, dev_id, entry);
  recv_update_vallo9_tbl_table_modify_with_set_and_get_vallo9();
}

void netbufferv4Client::send_update_vallo9_tbl_table_modify_with_set_and_get_vallo9(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo9_tbl_table_modify_with_set_and_get_vallo9", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo9_tbl_table_modify_with_set_and_get_vallo9_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo9_tbl_table_modify_with_set_and_get_vallo9()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo9_tbl_table_modify_with_set_and_get_vallo9") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo9_tbl_table_modify_with_set_and_get_vallo9_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo9_tbl_table_modify_with_set_and_get_vallo9_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo9_tbl_match_spec_t& match_spec)
{
  send_update_vallo9_tbl_table_modify_with_set_and_get_vallo9_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo9_tbl_table_modify_with_set_and_get_vallo9_by_match_spec();
}

void netbufferv4Client::send_update_vallo9_tbl_table_modify_with_set_and_get_vallo9_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo9_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo9_tbl_table_modify_with_set_and_get_vallo9_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo9_tbl_table_modify_with_set_and_get_vallo9_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo9_tbl_table_modify_with_set_and_get_vallo9_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo9_tbl_table_modify_with_set_and_get_vallo9_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo9_tbl_table_modify_with_set_and_get_vallo9_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo9_tbl_table_modify_with_reset_and_get_vallo9(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo9_tbl_table_modify_with_reset_and_get_vallo9(sess_hdl, dev_id, entry);
  recv_update_vallo9_tbl_table_modify_with_reset_and_get_vallo9();
}

void netbufferv4Client::send_update_vallo9_tbl_table_modify_with_reset_and_get_vallo9(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo9_tbl_table_modify_with_reset_and_get_vallo9", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo9_tbl_table_modify_with_reset_and_get_vallo9_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo9_tbl_table_modify_with_reset_and_get_vallo9()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo9_tbl_table_modify_with_reset_and_get_vallo9") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo9_tbl_table_modify_with_reset_and_get_vallo9_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo9_tbl_table_modify_with_reset_and_get_vallo9_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo9_tbl_match_spec_t& match_spec)
{
  send_update_vallo9_tbl_table_modify_with_reset_and_get_vallo9_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo9_tbl_table_modify_with_reset_and_get_vallo9_by_match_spec();
}

void netbufferv4Client::send_update_vallo9_tbl_table_modify_with_reset_and_get_vallo9_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo9_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo9_tbl_table_modify_with_reset_and_get_vallo9_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo9_tbl_table_modify_with_reset_and_get_vallo9_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo9_tbl_table_modify_with_reset_and_get_vallo9_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo9_tbl_table_modify_with_reset_and_get_vallo9_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo9_tbl_table_modify_with_reset_and_get_vallo9_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo9_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo9_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_vallo9_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_vallo9_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo9_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo9_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo9_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo9_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo9_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo9_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo9_tbl_match_spec_t& match_spec)
{
  send_update_vallo9_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo9_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_vallo9_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo9_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo9_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo9_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo9_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo9_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo9_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cache_frequency_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_cache_frequency_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_access_cache_frequency_tbl_table_delete();
}

void netbufferv4Client::send_access_cache_frequency_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cache_frequency_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cache_frequency_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cache_frequency_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cache_frequency_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cache_frequency_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cache_frequency_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cache_frequency_tbl_match_spec_t& match_spec)
{
  send_access_cache_frequency_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_cache_frequency_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_access_cache_frequency_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cache_frequency_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cache_frequency_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cache_frequency_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cache_frequency_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cache_frequency_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cache_frequency_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_case1_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_case1_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_access_case1_tbl_table_delete();
}

void netbufferv4Client::send_access_case1_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_case1_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_case1_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_case1_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_case1_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_case1_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_case1_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_case1_tbl_match_spec_t& match_spec)
{
  send_access_case1_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_case1_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_access_case1_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_case1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_case1_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_case1_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_case1_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_case1_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_case1_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cm1_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_cm1_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_access_cm1_tbl_table_delete();
}

void netbufferv4Client::send_access_cm1_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm1_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm1_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm1_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm1_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm1_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cm1_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm1_tbl_match_spec_t& match_spec)
{
  send_access_cm1_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_cm1_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_access_cm1_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm1_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm1_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm1_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm1_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm1_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cm2_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_cm2_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_access_cm2_tbl_table_delete();
}

void netbufferv4Client::send_access_cm2_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm2_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm2_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm2_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm2_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm2_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cm2_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm2_tbl_match_spec_t& match_spec)
{
  send_access_cm2_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_cm2_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_access_cm2_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm2_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm2_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm2_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm2_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm2_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm2_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cm3_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_cm3_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_access_cm3_tbl_table_delete();
}

void netbufferv4Client::send_access_cm3_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm3_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm3_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm3_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm3_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm3_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cm3_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm3_tbl_match_spec_t& match_spec)
{
  send_access_cm3_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_cm3_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_access_cm3_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm3_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm3_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm3_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm3_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm3_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm3_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cm4_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_cm4_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_access_cm4_tbl_table_delete();
}

void netbufferv4Client::send_access_cm4_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm4_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm4_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm4_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm4_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm4_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cm4_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm4_tbl_match_spec_t& match_spec)
{
  send_access_cm4_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_cm4_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_access_cm4_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm4_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm4_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm4_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm4_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm4_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm4_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_deleted_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_deleted_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_access_deleted_tbl_table_delete();
}

void netbufferv4Client::send_access_deleted_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_deleted_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_deleted_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_deleted_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_deleted_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_deleted_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_deleted_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_deleted_tbl_match_spec_t& match_spec)
{
  send_access_deleted_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_deleted_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_access_deleted_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_deleted_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_deleted_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_deleted_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_deleted_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_deleted_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_deleted_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_latest_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_latest_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_access_latest_tbl_table_delete();
}

void netbufferv4Client::send_access_latest_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_latest_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_latest_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_latest_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_latest_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_latest_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_latest_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_latest_tbl_match_spec_t& match_spec)
{
  send_access_latest_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_latest_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_access_latest_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_latest_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_latest_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_latest_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_latest_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_latest_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_latest_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_savedseq_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_savedseq_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_access_savedseq_tbl_table_delete();
}

void netbufferv4Client::send_access_savedseq_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_savedseq_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_savedseq_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_savedseq_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_savedseq_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_savedseq_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_savedseq_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_savedseq_tbl_match_spec_t& match_spec)
{
  send_access_savedseq_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_savedseq_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_access_savedseq_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_savedseq_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_savedseq_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_savedseq_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_savedseq_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_savedseq_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_savedseq_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_seq_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_seq_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_access_seq_tbl_table_delete();
}

void netbufferv4Client::send_access_seq_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_seq_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_seq_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_seq_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_seq_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_seq_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_seq_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_seq_tbl_match_spec_t& match_spec)
{
  send_access_seq_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_seq_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_access_seq_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_seq_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_seq_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_seq_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_seq_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_seq_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_seq_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_validvalue_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_validvalue_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_access_validvalue_tbl_table_delete();
}

void netbufferv4Client::send_access_validvalue_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_validvalue_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_validvalue_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_validvalue_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_validvalue_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_validvalue_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_validvalue_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_validvalue_tbl_match_spec_t& match_spec)
{
  send_access_validvalue_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_validvalue_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_access_validvalue_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_validvalue_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_validvalue_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_validvalue_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_validvalue_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_validvalue_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_validvalue_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_add_and_remove_value_header_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_add_and_remove_value_header_tbl_table_delete();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec, priority);
  recv_add_and_remove_value_header_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::cache_lookup_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_cache_lookup_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_cache_lookup_tbl_table_delete();
}

void netbufferv4Client::send_cache_lookup_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("cache_lookup_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_cache_lookup_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_cache_lookup_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("cache_lookup_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_cache_lookup_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::cache_lookup_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_cache_lookup_tbl_match_spec_t& match_spec)
{
  send_cache_lookup_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_cache_lookup_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_cache_lookup_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_cache_lookup_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("cache_lookup_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_cache_lookup_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_cache_lookup_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("cache_lookup_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_cache_lookup_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::drop_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_drop_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_drop_tbl_table_delete();
}

void netbufferv4Client::send_drop_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("drop_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_drop_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_drop_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("drop_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_drop_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::drop_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_drop_tbl_match_spec_t& match_spec)
{
  send_drop_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_drop_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_drop_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_drop_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("drop_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_drop_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_drop_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("drop_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_drop_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_eg_port_forward_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_eg_port_forward_tbl_table_delete();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  send_eg_port_forward_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_eg_port_forward_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_cm1_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_hash_for_cm1_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_hash_for_cm1_tbl_table_delete();
}

void netbufferv4Client::send_hash_for_cm1_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm1_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm1_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm1_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm1_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm1_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_cm1_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm1_tbl_match_spec_t& match_spec)
{
  send_hash_for_cm1_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_hash_for_cm1_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_hash_for_cm1_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm1_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm1_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm1_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm1_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm1_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_cm2_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_hash_for_cm2_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_hash_for_cm2_tbl_table_delete();
}

void netbufferv4Client::send_hash_for_cm2_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm2_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm2_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm2_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm2_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm2_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_cm2_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm2_tbl_match_spec_t& match_spec)
{
  send_hash_for_cm2_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_hash_for_cm2_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_hash_for_cm2_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm2_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm2_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm2_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm2_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm2_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm2_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_cm3_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_hash_for_cm3_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_hash_for_cm3_tbl_table_delete();
}

void netbufferv4Client::send_hash_for_cm3_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm3_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm3_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm3_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm3_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm3_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_cm3_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm3_tbl_match_spec_t& match_spec)
{
  send_hash_for_cm3_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_hash_for_cm3_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_hash_for_cm3_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm3_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm3_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm3_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm3_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm3_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm3_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_cm4_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_hash_for_cm4_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_hash_for_cm4_tbl_table_delete();
}

void netbufferv4Client::send_hash_for_cm4_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm4_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm4_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm4_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm4_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm4_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_cm4_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm4_tbl_match_spec_t& match_spec)
{
  send_hash_for_cm4_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_hash_for_cm4_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_hash_for_cm4_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm4_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm4_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm4_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm4_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm4_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm4_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_partition_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_hash_for_partition_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_hash_for_partition_tbl_table_delete();
}

void netbufferv4Client::send_hash_for_partition_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_partition_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_partition_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_partition_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_partition_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_partition_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_partition_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_partition_tbl_match_spec_t& match_spec)
{
  send_hash_for_partition_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_hash_for_partition_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_hash_for_partition_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_partition_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_partition_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_partition_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_partition_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_partition_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_partition_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_seq_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_hash_for_seq_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_hash_for_seq_tbl_table_delete();
}

void netbufferv4Client::send_hash_for_seq_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_seq_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_seq_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_seq_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_seq_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_seq_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_seq_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_seq_tbl_match_spec_t& match_spec)
{
  send_hash_for_seq_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_hash_for_seq_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_hash_for_seq_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_seq_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_seq_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_seq_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_seq_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_seq_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_seq_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_partition_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_hash_partition_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_hash_partition_tbl_table_delete();
}

void netbufferv4Client::send_hash_partition_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_partition_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_partition_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_partition_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_partition_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_partition_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_partition_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_partition_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_hash_partition_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec, priority);
  recv_hash_partition_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_hash_partition_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_partition_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_partition_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_partition_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_partition_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_partition_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_partition_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::ig_port_forward_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_ig_port_forward_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_ig_port_forward_tbl_table_delete();
}

void netbufferv4Client::send_ig_port_forward_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ig_port_forward_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ig_port_forward_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_ig_port_forward_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ig_port_forward_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_ig_port_forward_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::ig_port_forward_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ig_port_forward_tbl_match_spec_t& match_spec)
{
  send_ig_port_forward_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_ig_port_forward_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_ig_port_forward_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ig_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ig_port_forward_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ig_port_forward_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_ig_port_forward_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ig_port_forward_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_ig_port_forward_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::ipv4_forward_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_ipv4_forward_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_ipv4_forward_tbl_table_delete();
}

void netbufferv4Client::send_ipv4_forward_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ipv4_forward_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ipv4_forward_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_ipv4_forward_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ipv4_forward_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_ipv4_forward_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::ipv4_forward_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ipv4_forward_tbl_match_spec_t& match_spec)
{
  send_ipv4_forward_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_ipv4_forward_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_ipv4_forward_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ipv4_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ipv4_forward_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ipv4_forward_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_ipv4_forward_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ipv4_forward_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_ipv4_forward_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::is_hot_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_is_hot_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_is_hot_tbl_table_delete();
}

void netbufferv4Client::send_is_hot_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("is_hot_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_is_hot_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_is_hot_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("is_hot_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_is_hot_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::is_hot_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_is_hot_tbl_match_spec_t& match_spec)
{
  send_is_hot_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_is_hot_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_is_hot_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_is_hot_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("is_hot_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_is_hot_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_is_hot_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("is_hot_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_is_hot_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::l2l3_forward_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_l2l3_forward_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_l2l3_forward_tbl_table_delete();
}

void netbufferv4Client::send_l2l3_forward_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("l2l3_forward_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_l2l3_forward_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_l2l3_forward_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("l2l3_forward_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_l2l3_forward_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::l2l3_forward_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_l2l3_forward_tbl_match_spec_t& match_spec)
{
  send_l2l3_forward_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_l2l3_forward_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_l2l3_forward_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_l2l3_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("l2l3_forward_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_l2l3_forward_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_l2l3_forward_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("l2l3_forward_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_l2l3_forward_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::lastclone_lastscansplit_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_lastclone_lastscansplit_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_lastclone_lastscansplit_tbl_table_delete();
}

void netbufferv4Client::send_lastclone_lastscansplit_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("lastclone_lastscansplit_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_lastclone_lastscansplit_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_lastclone_lastscansplit_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("lastclone_lastscansplit_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_lastclone_lastscansplit_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::lastclone_lastscansplit_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_lastclone_lastscansplit_tbl_match_spec_t& match_spec)
{
  send_lastclone_lastscansplit_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_lastclone_lastscansplit_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_lastclone_lastscansplit_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_lastclone_lastscansplit_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("lastclone_lastscansplit_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_lastclone_lastscansplit_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_lastclone_lastscansplit_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("lastclone_lastscansplit_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_lastclone_lastscansplit_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::need_recirculate_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_need_recirculate_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_need_recirculate_tbl_table_delete();
}

void netbufferv4Client::send_need_recirculate_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("need_recirculate_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_need_recirculate_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_need_recirculate_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("need_recirculate_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_need_recirculate_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::need_recirculate_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_need_recirculate_tbl_match_spec_t& match_spec)
{
  send_need_recirculate_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_need_recirculate_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_need_recirculate_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_need_recirculate_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("need_recirculate_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_need_recirculate_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_need_recirculate_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("need_recirculate_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_need_recirculate_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::prepare_for_cachehit_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_prepare_for_cachehit_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_prepare_for_cachehit_tbl_table_delete();
}

void netbufferv4Client::send_prepare_for_cachehit_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("prepare_for_cachehit_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_prepare_for_cachehit_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_prepare_for_cachehit_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("prepare_for_cachehit_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_prepare_for_cachehit_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::prepare_for_cachehit_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_prepare_for_cachehit_tbl_match_spec_t& match_spec)
{
  send_prepare_for_cachehit_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_prepare_for_cachehit_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_prepare_for_cachehit_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_prepare_for_cachehit_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("prepare_for_cachehit_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_prepare_for_cachehit_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_prepare_for_cachehit_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("prepare_for_cachehit_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_prepare_for_cachehit_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::recirculate_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_recirculate_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_recirculate_tbl_table_delete();
}

void netbufferv4Client::send_recirculate_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("recirculate_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_recirculate_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_recirculate_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("recirculate_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_recirculate_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::recirculate_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_recirculate_tbl_match_spec_t& match_spec)
{
  send_recirculate_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_recirculate_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_recirculate_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_recirculate_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("recirculate_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_recirculate_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_recirculate_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("recirculate_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_recirculate_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::sample_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_sample_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_sample_tbl_table_delete();
}

void netbufferv4Client::send_sample_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sample_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_sample_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_sample_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sample_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_sample_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::sample_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_sample_tbl_match_spec_t& match_spec)
{
  send_sample_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_sample_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_sample_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_sample_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sample_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_sample_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_sample_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sample_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_sample_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::save_client_udpport_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_save_client_udpport_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_save_client_udpport_tbl_table_delete();
}

void netbufferv4Client::send_save_client_udpport_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("save_client_udpport_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_save_client_udpport_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_save_client_udpport_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("save_client_udpport_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_save_client_udpport_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::save_client_udpport_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_save_client_udpport_tbl_match_spec_t& match_spec)
{
  send_save_client_udpport_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_save_client_udpport_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_save_client_udpport_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_save_client_udpport_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("save_client_udpport_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_save_client_udpport_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_save_client_udpport_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("save_client_udpport_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_save_client_udpport_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::snapshot_flag_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_snapshot_flag_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_snapshot_flag_tbl_table_delete();
}

void netbufferv4Client::send_snapshot_flag_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("snapshot_flag_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_snapshot_flag_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_snapshot_flag_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("snapshot_flag_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_snapshot_flag_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::snapshot_flag_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_snapshot_flag_tbl_match_spec_t& match_spec)
{
  send_snapshot_flag_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_snapshot_flag_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_snapshot_flag_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_snapshot_flag_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("snapshot_flag_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_snapshot_flag_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_snapshot_flag_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("snapshot_flag_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_snapshot_flag_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_ipmac_srcport_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_ipmac_srcport_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_update_ipmac_srcport_tbl_table_delete();
}

void netbufferv4Client::send_update_ipmac_srcport_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_ipmac_srcport_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_ipmac_srcport_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_ipmac_srcport_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_ipmac_srcport_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_ipmac_srcport_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_ipmac_srcport_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_ipmac_srcport_tbl_match_spec_t& match_spec)
{
  send_update_ipmac_srcport_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_ipmac_srcport_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_update_ipmac_srcport_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_ipmac_srcport_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_ipmac_srcport_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_ipmac_srcport_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_ipmac_srcport_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_ipmac_srcport_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_ipmac_srcport_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_pktlen_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_pktlen_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_update_pktlen_tbl_table_delete();
}

void netbufferv4Client::send_update_pktlen_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_pktlen_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_pktlen_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_pktlen_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_pktlen_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_pktlen_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_pktlen_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_pktlen_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_update_pktlen_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec, priority);
  recv_update_pktlen_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_update_pktlen_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_pktlen_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_pktlen_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_pktlen_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_pktlen_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_pktlen_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_pktlen_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi10_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi10_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_update_valhi10_tbl_table_delete();
}

void netbufferv4Client::send_update_valhi10_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi10_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi10_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi10_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi10_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi10_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi10_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi10_tbl_match_spec_t& match_spec)
{
  send_update_valhi10_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi10_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_update_valhi10_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi10_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi10_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi10_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi10_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi10_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi10_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi11_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi11_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_update_valhi11_tbl_table_delete();
}

void netbufferv4Client::send_update_valhi11_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi11_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi11_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi11_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi11_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi11_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi11_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi11_tbl_match_spec_t& match_spec)
{
  send_update_valhi11_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi11_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_update_valhi11_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi11_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi11_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi11_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi11_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi11_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi11_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi12_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi12_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_update_valhi12_tbl_table_delete();
}

void netbufferv4Client::send_update_valhi12_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi12_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi12_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi12_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi12_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi12_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi12_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi12_tbl_match_spec_t& match_spec)
{
  send_update_valhi12_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi12_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_update_valhi12_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi12_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi12_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi12_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi12_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi12_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi12_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi13_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi13_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_update_valhi13_tbl_table_delete();
}

void netbufferv4Client::send_update_valhi13_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi13_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi13_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi13_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi13_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi13_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi13_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi13_tbl_match_spec_t& match_spec)
{
  send_update_valhi13_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi13_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_update_valhi13_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi13_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi13_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi13_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi13_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi13_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi13_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi14_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi14_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_update_valhi14_tbl_table_delete();
}

void netbufferv4Client::send_update_valhi14_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi14_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi14_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi14_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi14_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi14_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi14_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi14_tbl_match_spec_t& match_spec)
{
  send_update_valhi14_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi14_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_update_valhi14_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi14_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi14_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi14_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi14_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi14_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi14_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi15_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi15_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_update_valhi15_tbl_table_delete();
}

void netbufferv4Client::send_update_valhi15_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi15_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi15_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi15_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi15_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi15_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi15_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi15_tbl_match_spec_t& match_spec)
{
  send_update_valhi15_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi15_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_update_valhi15_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi15_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi15_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi15_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi15_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi15_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi15_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi16_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi16_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_update_valhi16_tbl_table_delete();
}

void netbufferv4Client::send_update_valhi16_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi16_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi16_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi16_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi16_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi16_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi16_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi16_tbl_match_spec_t& match_spec)
{
  send_update_valhi16_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi16_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_update_valhi16_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi16_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi16_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi16_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi16_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi16_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi16_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi1_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi1_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_update_valhi1_tbl_table_delete();
}

void netbufferv4Client::send_update_valhi1_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi1_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi1_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi1_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi1_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi1_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi1_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi1_tbl_match_spec_t& match_spec)
{
  send_update_valhi1_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi1_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_update_valhi1_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi1_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi1_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi1_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi1_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi1_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi2_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi2_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_update_valhi2_tbl_table_delete();
}

void netbufferv4Client::send_update_valhi2_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi2_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi2_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi2_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi2_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi2_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi2_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi2_tbl_match_spec_t& match_spec)
{
  send_update_valhi2_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi2_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_update_valhi2_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi2_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi2_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi2_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi2_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi2_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi2_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi3_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi3_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_update_valhi3_tbl_table_delete();
}

void netbufferv4Client::send_update_valhi3_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi3_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi3_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi3_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi3_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi3_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi3_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi3_tbl_match_spec_t& match_spec)
{
  send_update_valhi3_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi3_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_update_valhi3_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi3_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi3_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi3_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi3_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi3_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi3_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi4_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi4_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_update_valhi4_tbl_table_delete();
}

void netbufferv4Client::send_update_valhi4_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi4_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi4_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi4_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi4_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi4_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi4_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi4_tbl_match_spec_t& match_spec)
{
  send_update_valhi4_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi4_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_update_valhi4_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi4_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi4_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi4_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi4_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi4_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi4_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi5_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi5_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_update_valhi5_tbl_table_delete();
}

void netbufferv4Client::send_update_valhi5_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi5_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi5_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi5_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi5_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi5_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi5_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi5_tbl_match_spec_t& match_spec)
{
  send_update_valhi5_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi5_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_update_valhi5_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi5_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi5_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi5_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi5_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi5_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi5_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi6_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi6_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_update_valhi6_tbl_table_delete();
}

void netbufferv4Client::send_update_valhi6_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi6_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi6_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi6_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi6_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi6_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi6_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi6_tbl_match_spec_t& match_spec)
{
  send_update_valhi6_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi6_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_update_valhi6_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi6_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi6_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi6_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi6_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi6_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi6_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi7_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi7_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_update_valhi7_tbl_table_delete();
}

void netbufferv4Client::send_update_valhi7_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi7_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi7_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi7_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi7_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi7_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi7_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi7_tbl_match_spec_t& match_spec)
{
  send_update_valhi7_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi7_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_update_valhi7_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi7_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi7_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi7_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi7_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi7_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi7_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi8_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi8_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_update_valhi8_tbl_table_delete();
}

void netbufferv4Client::send_update_valhi8_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi8_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi8_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi8_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi8_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi8_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi8_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi8_tbl_match_spec_t& match_spec)
{
  send_update_valhi8_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi8_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_update_valhi8_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi8_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi8_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi8_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi8_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi8_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi8_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi9_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi9_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_update_valhi9_tbl_table_delete();
}

void netbufferv4Client::send_update_valhi9_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi9_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi9_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi9_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi9_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi9_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi9_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi9_tbl_match_spec_t& match_spec)
{
  send_update_valhi9_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi9_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_update_valhi9_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi9_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi9_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi9_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi9_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi9_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi9_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallen_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallen_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_update_vallen_tbl_table_delete();
}

void netbufferv4Client::send_update_vallen_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallen_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallen_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallen_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallen_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallen_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallen_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallen_tbl_match_spec_t& match_spec)
{
  send_update_vallen_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallen_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_update_vallen_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallen_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallen_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallen_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallen_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallen_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallen_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo10_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo10_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_update_vallo10_tbl_table_delete();
}

void netbufferv4Client::send_update_vallo10_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo10_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo10_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo10_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo10_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo10_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo10_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo10_tbl_match_spec_t& match_spec)
{
  send_update_vallo10_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo10_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_update_vallo10_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo10_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo10_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo10_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo10_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo10_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo10_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo11_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo11_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_update_vallo11_tbl_table_delete();
}

void netbufferv4Client::send_update_vallo11_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo11_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo11_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo11_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo11_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo11_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo11_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo11_tbl_match_spec_t& match_spec)
{
  send_update_vallo11_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo11_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_update_vallo11_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo11_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo11_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo11_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo11_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo11_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo11_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo12_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo12_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_update_vallo12_tbl_table_delete();
}

void netbufferv4Client::send_update_vallo12_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo12_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo12_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo12_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo12_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo12_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo12_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo12_tbl_match_spec_t& match_spec)
{
  send_update_vallo12_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo12_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_update_vallo12_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo12_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo12_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo12_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo12_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo12_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo12_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo13_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo13_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_update_vallo13_tbl_table_delete();
}

void netbufferv4Client::send_update_vallo13_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo13_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo13_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo13_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo13_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo13_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo13_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo13_tbl_match_spec_t& match_spec)
{
  send_update_vallo13_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo13_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_update_vallo13_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo13_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo13_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo13_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo13_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo13_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo13_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo14_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo14_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_update_vallo14_tbl_table_delete();
}

void netbufferv4Client::send_update_vallo14_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo14_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo14_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo14_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo14_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo14_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo14_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo14_tbl_match_spec_t& match_spec)
{
  send_update_vallo14_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo14_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_update_vallo14_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo14_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo14_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo14_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo14_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo14_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo14_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo15_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo15_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_update_vallo15_tbl_table_delete();
}

void netbufferv4Client::send_update_vallo15_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo15_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo15_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo15_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo15_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo15_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo15_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo15_tbl_match_spec_t& match_spec)
{
  send_update_vallo15_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo15_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_update_vallo15_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo15_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo15_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo15_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo15_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo15_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo15_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo16_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo16_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_update_vallo16_tbl_table_delete();
}

void netbufferv4Client::send_update_vallo16_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo16_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo16_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo16_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo16_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo16_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo16_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo16_tbl_match_spec_t& match_spec)
{
  send_update_vallo16_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo16_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_update_vallo16_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo16_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo16_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo16_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo16_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo16_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo16_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo1_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo1_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_update_vallo1_tbl_table_delete();
}

void netbufferv4Client::send_update_vallo1_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo1_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo1_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo1_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo1_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo1_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo1_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo1_tbl_match_spec_t& match_spec)
{
  send_update_vallo1_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo1_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_update_vallo1_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo1_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo1_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo1_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo1_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo1_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo2_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo2_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_update_vallo2_tbl_table_delete();
}

void netbufferv4Client::send_update_vallo2_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo2_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo2_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo2_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo2_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo2_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo2_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo2_tbl_match_spec_t& match_spec)
{
  send_update_vallo2_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo2_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_update_vallo2_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo2_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo2_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo2_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo2_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo2_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo2_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo3_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo3_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_update_vallo3_tbl_table_delete();
}

void netbufferv4Client::send_update_vallo3_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo3_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo3_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo3_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo3_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo3_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo3_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo3_tbl_match_spec_t& match_spec)
{
  send_update_vallo3_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo3_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_update_vallo3_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo3_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo3_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo3_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo3_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo3_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo3_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo4_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo4_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_update_vallo4_tbl_table_delete();
}

void netbufferv4Client::send_update_vallo4_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo4_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo4_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo4_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo4_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo4_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo4_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo4_tbl_match_spec_t& match_spec)
{
  send_update_vallo4_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo4_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_update_vallo4_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo4_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo4_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo4_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo4_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo4_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo4_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo5_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo5_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_update_vallo5_tbl_table_delete();
}

void netbufferv4Client::send_update_vallo5_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo5_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo5_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo5_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo5_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo5_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo5_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo5_tbl_match_spec_t& match_spec)
{
  send_update_vallo5_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo5_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_update_vallo5_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo5_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo5_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo5_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo5_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo5_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo5_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo6_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo6_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_update_vallo6_tbl_table_delete();
}

void netbufferv4Client::send_update_vallo6_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo6_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo6_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo6_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo6_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo6_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo6_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo6_tbl_match_spec_t& match_spec)
{
  send_update_vallo6_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo6_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_update_vallo6_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo6_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo6_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo6_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo6_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo6_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo6_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo7_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo7_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_update_vallo7_tbl_table_delete();
}

void netbufferv4Client::send_update_vallo7_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo7_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo7_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo7_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo7_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo7_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo7_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo7_tbl_match_spec_t& match_spec)
{
  send_update_vallo7_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo7_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_update_vallo7_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo7_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo7_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo7_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo7_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo7_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo7_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo8_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo8_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_update_vallo8_tbl_table_delete();
}

void netbufferv4Client::send_update_vallo8_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo8_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo8_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo8_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo8_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo8_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo8_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo8_tbl_match_spec_t& match_spec)
{
  send_update_vallo8_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo8_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_update_vallo8_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo8_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo8_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo8_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo8_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo8_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo8_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo9_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo9_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_update_vallo9_tbl_table_delete();
}

void netbufferv4Client::send_update_vallo9_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo9_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo9_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo9_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo9_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo9_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo9_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo9_tbl_match_spec_t& match_spec)
{
  send_update_vallo9_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo9_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_update_vallo9_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo9_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo9_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo9_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo9_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo9_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo9_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

EntryHandle_t netbufferv4Client::access_cache_frequency_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_access_cache_frequency_tbl_table_get_default_entry_handle(sess_hdl, dev_tgt);
  return recv_access_cache_frequency_tbl_table_get_default_entry_handle();
}

void netbufferv4Client::send_access_cache_frequency_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cache_frequency_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cache_frequency_tbl_table_get_default_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_cache_frequency_tbl_table_get_default_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cache_frequency_tbl_table_get_default_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_cache_frequency_tbl_table_get_default_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cache_frequency_tbl_table_get_default_entry_handle failed: unknown result");
}

void netbufferv4Client::access_cache_frequency_tbl_table_get_default_entry(netbufferv4_access_cache_frequency_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  send_access_cache_frequency_tbl_table_get_default_entry(sess_hdl, dev_tgt, read_from_hw);
  recv_access_cache_frequency_tbl_table_get_default_entry(_return);
}

void netbufferv4Client::send_access_cache_frequency_tbl_table_get_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cache_frequency_tbl_table_get_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cache_frequency_tbl_table_get_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cache_frequency_tbl_table_get_default_entry(netbufferv4_access_cache_frequency_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cache_frequency_tbl_table_get_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cache_frequency_tbl_table_get_default_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cache_frequency_tbl_table_get_default_entry failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_case1_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_access_case1_tbl_table_get_default_entry_handle(sess_hdl, dev_tgt);
  return recv_access_case1_tbl_table_get_default_entry_handle();
}

void netbufferv4Client::send_access_case1_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_case1_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_case1_tbl_table_get_default_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_case1_tbl_table_get_default_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_case1_tbl_table_get_default_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_case1_tbl_table_get_default_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_case1_tbl_table_get_default_entry_handle failed: unknown result");
}

void netbufferv4Client::access_case1_tbl_table_get_default_entry(netbufferv4_access_case1_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  send_access_case1_tbl_table_get_default_entry(sess_hdl, dev_tgt, read_from_hw);
  recv_access_case1_tbl_table_get_default_entry(_return);
}

void netbufferv4Client::send_access_case1_tbl_table_get_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_case1_tbl_table_get_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_case1_tbl_table_get_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_case1_tbl_table_get_default_entry(netbufferv4_access_case1_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_case1_tbl_table_get_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_case1_tbl_table_get_default_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_case1_tbl_table_get_default_entry failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_cm1_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_access_cm1_tbl_table_get_default_entry_handle(sess_hdl, dev_tgt);
  return recv_access_cm1_tbl_table_get_default_entry_handle();
}

void netbufferv4Client::send_access_cm1_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm1_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm1_tbl_table_get_default_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_cm1_tbl_table_get_default_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm1_tbl_table_get_default_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_cm1_tbl_table_get_default_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cm1_tbl_table_get_default_entry_handle failed: unknown result");
}
} // namespace
